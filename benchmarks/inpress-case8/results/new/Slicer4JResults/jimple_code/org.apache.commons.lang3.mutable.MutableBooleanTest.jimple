public class org.apache.commons.lang3.mutable.MutableBooleanTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.mutable.MutableBooleanTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCompareTo()
    {
        org.apache.commons.lang3.mutable.MutableBooleanTest this;
        long $stack6, $stack10, $stack14, $stack18;
        int $stack5, $stack9, $stack13, $stack17;
        org.apache.commons.lang3.mutable.MutableBoolean $stack2, $stack3, $stack7, $stack11, $stack15;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack3 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack3.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: int compareTo(org.apache.commons.lang3.mutable.MutableBoolean)>($stack3);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack7 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(1);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: int compareTo(org.apache.commons.lang3.mutable.MutableBoolean)>($stack7);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack10);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: void setValue(boolean)>(1);

        $stack11 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack11.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack13 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: int compareTo(org.apache.commons.lang3.mutable.MutableBoolean)>($stack11);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack15 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack15.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(1);

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: int compareTo(org.apache.commons.lang3.mutable.MutableBoolean)>($stack15);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack18);

        return;
    }

    public void testCompareToNull()
    {
        org.apache.commons.lang3.mutable.MutableBoolean $stack2;
        org.apache.commons.lang3.mutable.MutableBooleanTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: int compareTo(org.apache.commons.lang3.mutable.MutableBoolean)>(null);

        return;
    }

    public void testConstructors()
    {
        org.apache.commons.lang3.mutable.MutableBooleanTest this;
        java.lang.Boolean $stack8, $stack11;
        org.apache.commons.lang3.mutable.MutableBoolean $stack1, $stack3, $stack5, $stack7, $stack10;
        boolean $stack2, $stack4, $stack6, $stack9, $stack12;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack1 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack1.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>()>();

        $stack2 = virtualinvoke $stack1.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack3.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(1);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = new org.apache.commons.lang3.mutable.MutableBoolean;

        $stack8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(java.lang.Boolean)>($stack8);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = new org.apache.commons.lang3.mutable.MutableBoolean;

        $stack11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $stack10.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(java.lang.Boolean)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        return;
    }

    public void testConstructorNull()
    {
        org.apache.commons.lang3.mutable.MutableBoolean $stack1;
        org.apache.commons.lang3.mutable.MutableBooleanTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack1 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack1.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(java.lang.Boolean)>(null);

        return;
    }

    public void testEquals()
    {
        org.apache.commons.lang3.mutable.MutableBooleanTest this;
        java.lang.Boolean $stack15;
        org.apache.commons.lang3.mutable.MutableBoolean $stack4, $stack5, $stack6;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack4 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack5 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack6 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(1);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        $stack14 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack16 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>($stack15);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: boolean equals(java.lang.Object)>("false");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

        return;
    }

    public void testGetSet()
    {
        java.lang.Boolean $stack5, $stack6, $stack8, $stack9, $stack13, $stack14, $stack15;
        boolean $stack3, $stack10, $stack11, $stack12, $stack16, $stack17, $stack18, $stack19, $stack20;
        org.apache.commons.lang3.mutable.MutableBooleanTest this;
        org.apache.commons.lang3.mutable.MutableBoolean $stack2, $stack4, $stack7;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>()>();

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack4 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>()>();

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: java.lang.Boolean getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: java.lang.Boolean toBoolean()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        $stack10 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean isFalse()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean isTrue()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: void setValue(java.lang.Boolean)>($stack13);

        $stack14 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack15 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: java.lang.Boolean toBoolean()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack15);

        $stack16 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean isFalse()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

        $stack18 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean isTrue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: void setValue(boolean)>(0);

        $stack19 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: void setValue(boolean)>(1);

        $stack20 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: boolean booleanValue()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        return;
    }

    public void testSetNull()
    {
        org.apache.commons.lang3.mutable.MutableBoolean $stack2;
        org.apache.commons.lang3.mutable.MutableBooleanTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableBoolean: void setValue(java.lang.Boolean)>(null);

        return;
    }

    public void testHashCode()
    {
        long $stack8, $stack10, $stack12, $stack14, $stack19, $stack21, $stack24, $stack26;
        int $stack7, $stack9, $stack11, $stack13, $stack15, $stack16, $stack17, $stack20, $stack22, $stack25;
        java.lang.Boolean $stack18, $stack23;
        boolean $stack27;
        org.apache.commons.lang3.mutable.MutableBooleanTest this;
        org.apache.commons.lang3.mutable.MutableBoolean $stack4, $stack5, $stack6;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack4 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack5 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack6 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(1);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        $stack8 = (long) $stack7;

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, $stack10);

        $stack11 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        $stack12 = (long) $stack11;

        $stack13 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack12, $stack14);

        $stack15 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        $stack16 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        if $stack15 != $stack16 goto label1;

        $stack27 = 1;

        goto label2;

     label1:
        $stack27 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack27);

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        $stack19 = (long) $stack17;

        $stack18 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack20 = virtualinvoke $stack18.<java.lang.Boolean: int hashCode()>();

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack19, $stack21);

        $stack22 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableBoolean: int hashCode()>();

        $stack24 = (long) $stack22;

        $stack23 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack25 = virtualinvoke $stack23.<java.lang.Boolean: int hashCode()>();

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack24, $stack26);

        return;
    }

    public void testToString()
    {
        org.apache.commons.lang3.mutable.MutableBooleanTest this;
        java.lang.Boolean $stack1, $stack5;
        java.lang.String $stack2, $stack4, $stack6, $stack8;
        org.apache.commons.lang3.mutable.MutableBoolean $stack3, $stack7;

        this := @this: org.apache.commons.lang3.mutable.MutableBooleanTest;

        $stack1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack2 = virtualinvoke $stack1.<java.lang.Boolean: java.lang.String toString()>();

        $stack3 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack3.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(0);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.mutable.MutableBoolean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack2, $stack4);

        $stack5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack6 = virtualinvoke $stack5.<java.lang.Boolean: java.lang.String toString()>();

        $stack7 = new org.apache.commons.lang3.mutable.MutableBoolean;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: void <init>(boolean)>(1);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableBoolean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }
}
