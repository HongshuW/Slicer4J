public class org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest extends java.lang.Object
{
    private static final java.util.List LIST;
    private static final int LIST_SIZE;
    private static final int REPEAT;

    public void <init>()
    {
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest this;

        this := @this: org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testLinkedList() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest this;
        java.util.LinkedList $stack2;
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder $stack1;

        this := @this: org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest;

        $stack1 = new org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder;

        $stack2 = new java.util.LinkedList;

        specialinvoke $stack2.<java.util.LinkedList: void <init>()>();

        specialinvoke $stack1.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder: void <init>(java.util.Collection)>($stack2);

        specialinvoke this.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: void testConcurrency(org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder)>($stack1);

        return;
    }

    public void testArrayList() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest this;
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder $stack1;
        java.util.ArrayList $stack2;

        this := @this: org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest;

        $stack1 = new org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder;

        $stack2 = new java.util.ArrayList;

        specialinvoke $stack2.<java.util.ArrayList: void <init>()>();

        specialinvoke $stack1.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder: void <init>(java.util.Collection)>($stack2);

        specialinvoke this.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: void testConcurrency(org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder)>($stack1);

        return;
    }

    public void testCopyOnWriteArrayList() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest this;
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder $stack1;
        java.util.concurrent.CopyOnWriteArrayList $stack2;

        this := @this: org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest;

        $stack1 = new org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder;

        $stack2 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $stack2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        specialinvoke $stack1.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder: void <init>(java.util.Collection)>($stack2);

        specialinvoke this.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: void testConcurrency(org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder)>($stack1);

        return;
    }

    private void testConcurrency(org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.Iterator $stack18;
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder holder;
        java.util.Collection $stack9;
        java.util.ArrayList $stack14;
        java.util.List list, $stack10, $stack17;
        java.util.concurrent.Future future;
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest this;
        java.lang.Object $stack20;
        org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$1 $stack13;
        java.util.concurrent.ExecutorService $stack12;
        boolean $stack19;

        this := @this: org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest;

        holder := @parameter0: org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder;

        $stack9 = holder.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder: java.util.Collection collection>;

        list = (java.util.List) $stack9;

        $stack10 = <org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: java.util.List LIST>;

        interfaceinvoke list.<java.util.List: boolean addAll(java.util.Collection)>($stack10);

        $stack12 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(2);

        $stack13 = new org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$1;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$1: void <init>(org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest,org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest$CollectionHolder)>(this, holder);

        $stack14 = new java.util.ArrayList;

        specialinvoke $stack14.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $stack14.<java.util.Collection: boolean add(java.lang.Object)>($stack13);

        interfaceinvoke $stack14.<java.util.Collection: boolean add(java.lang.Object)>($stack13);

        $stack17 = interfaceinvoke $stack12.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>($stack14);

        $stack18 = interfaceinvoke $stack17.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack19 = interfaceinvoke $stack18.<java.util.Iterator: boolean hasNext()>();

        if $stack19 == 0 goto label2;

        $stack20 = interfaceinvoke $stack18.<java.util.Iterator: java.lang.Object next()>();

        future = (java.util.concurrent.Future) $stack20;

        interfaceinvoke future.<java.util.concurrent.Future: java.lang.Object get()>();

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        java.util.List $stack2;
        int i;
        java.lang.Integer $stack3;
        java.util.ArrayList $stack1;

        <org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: int REPEAT> = 100;

        <org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: int LIST_SIZE> = 100000;

        $stack1 = new java.util.ArrayList;

        specialinvoke $stack1.<java.util.ArrayList: void <init>(int)>(100000);

        <org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: java.util.List LIST> = $stack1;

        i = 0;

     label1:
        if i >= 100000 goto label2;

        $stack2 = <org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest: java.util.List LIST>;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i);

        interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>($stack3);

        i = i + 1;

        goto label1;

     label2:
        return;
    }
}
