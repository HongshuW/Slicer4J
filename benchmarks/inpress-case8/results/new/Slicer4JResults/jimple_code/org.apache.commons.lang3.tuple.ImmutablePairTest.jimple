public class org.apache.commons.lang3.tuple.ImmutablePairTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.tuple.ImmutablePairTest this;

        this := @this: org.apache.commons.lang3.tuple.ImmutablePairTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testBasic() throws java.lang.Exception
    {
        long $stack9, $stack14;
        java.lang.Integer $stack4, $stack6, $stack12;
        org.apache.commons.lang3.tuple.ImmutablePairTest this;
        int $stack8, $stack13;
        org.apache.commons.lang3.tuple.ImmutablePair $stack3, $stack18;
        java.lang.Object $stack5, $stack11, $stack15, $stack17, $stack19, $stack20, $stack21, $stack23;

        this := @this: org.apache.commons.lang3.tuple.ImmutablePairTest;

        $stack3 = new org.apache.commons.lang3.tuple.ImmutablePair;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        specialinvoke $stack3.<org.apache.commons.lang3.tuple.ImmutablePair: void <init>(java.lang.Object,java.lang.Object)>($stack4, "foo");

        $stack5 = $stack3.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object left>;

        $stack6 = (java.lang.Integer) $stack5;

        $stack8 = virtualinvoke $stack6.<java.lang.Integer: int intValue()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        $stack11 = virtualinvoke $stack3.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getLeft()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack14);

        $stack15 = $stack3.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack15);

        $stack17 = virtualinvoke $stack3.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack17);

        $stack18 = new org.apache.commons.lang3.tuple.ImmutablePair;

        specialinvoke $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: void <init>(java.lang.Object,java.lang.Object)>(null, "bar");

        $stack19 = $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object left>;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack19);

        $stack20 = virtualinvoke $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getLeft()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack20);

        $stack21 = $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack21);

        $stack23 = virtualinvoke $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack23);

        return;
    }

    public void testPairOf() throws java.lang.Exception
    {
        long $stack9, $stack14;
        java.lang.Integer $stack3, $stack6, $stack12;
        org.apache.commons.lang3.tuple.ImmutablePairTest this;
        int $stack8, $stack13;
        org.apache.commons.lang3.tuple.ImmutablePair $stack4, $stack18;
        java.lang.Object $stack5, $stack11, $stack15, $stack17, $stack19, $stack20, $stack21, $stack23;

        this := @this: org.apache.commons.lang3.tuple.ImmutablePairTest;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack4 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>($stack3, "foo");

        $stack5 = $stack4.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object left>;

        $stack6 = (java.lang.Integer) $stack5;

        $stack8 = virtualinvoke $stack6.<java.lang.Integer: int intValue()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        $stack11 = virtualinvoke $stack4.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getLeft()>();

        $stack12 = (java.lang.Integer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.Integer: int intValue()>();

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack14);

        $stack15 = $stack4.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack15);

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(null, "bar");

        $stack19 = $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object left>;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack19);

        $stack20 = virtualinvoke $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getLeft()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack20);

        $stack21 = $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack21);

        $stack23 = virtualinvoke $stack18.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack23);

        return;
    }

    public void testEquals() throws java.lang.Exception
    {
        java.lang.Integer $stack5;
        org.apache.commons.lang3.tuple.ImmutablePair $stack2, $stack3, $stack6, $stack7, $stack9, $stack10, $stack12;
        org.apache.commons.lang3.tuple.ImmutablePairTest this;
        java.lang.Object $stack14;
        boolean $stack8, $stack11, $stack13, $stack15;

        this := @this: org.apache.commons.lang3.tuple.ImmutablePairTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(null, "foo");

        $stack3 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(null, "foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack2, $stack3);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack6 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>("foo", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>("foo", null);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.tuple.ImmutablePair: boolean equals(java.lang.Object)>($stack7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>("foo", "bar");

        $stack10 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>("xyz", "bar");

        $stack11 = virtualinvoke $stack9.<org.apache.commons.lang3.tuple.ImmutablePair: boolean equals(java.lang.Object)>($stack10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>("foo", "bar");

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.tuple.ImmutablePair: boolean equals(java.lang.Object)>($stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        $stack14 = new java.lang.Object;

        specialinvoke $stack14.<java.lang.Object: void <init>()>();

        $stack15 = virtualinvoke $stack12.<org.apache.commons.lang3.tuple.ImmutablePair: boolean equals(java.lang.Object)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testHashCode() throws java.lang.Exception
    {
        int $stack2, $stack5;
        long $stack3, $stack6;
        org.apache.commons.lang3.tuple.ImmutablePair $stack1, $stack4;
        org.apache.commons.lang3.tuple.ImmutablePairTest this;

        this := @this: org.apache.commons.lang3.tuple.ImmutablePairTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(null, "foo");

        $stack2 = virtualinvoke $stack1.<org.apache.commons.lang3.tuple.ImmutablePair: int hashCode()>();

        $stack3 = (long) $stack2;

        $stack4 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(null, "foo");

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.tuple.ImmutablePair: int hashCode()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack3, $stack6);

        return;
    }

    public void testToString() throws java.lang.Exception
    {
        org.apache.commons.lang3.tuple.ImmutablePair $stack2, $stack5, $stack8, $stack11;
        org.apache.commons.lang3.tuple.ImmutablePairTest this;
        java.lang.String $stack3, $stack6, $stack9, $stack12;

        this := @this: org.apache.commons.lang3.tuple.ImmutablePairTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(null, null);

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(null,null)", $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>(null, "two");

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(null,two)", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>("one", null);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(one,null)", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>("one", "two");

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.tuple.ImmutablePair: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(one,two)", $stack12);

        return;
    }

    public void testSerialization() throws java.lang.Exception
    {
        byte[] $stack11;
        java.io.ByteArrayOutputStream $stack7;
        java.io.ObjectInputStream $stack9;
        long $stack14, $stack16;
        java.lang.Integer $stack5;
        org.apache.commons.lang3.tuple.ImmutablePair $stack6, deserializedPair;
        org.apache.commons.lang3.tuple.ImmutablePairTest this;
        java.io.ByteArrayInputStream $stack10;
        int $stack13, $stack15;
        java.io.ObjectOutputStream $stack8;
        java.lang.Object $stack12;

        this := @this: org.apache.commons.lang3.tuple.ImmutablePairTest;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack6 = staticinvoke <org.apache.commons.lang3.tuple.ImmutablePair: org.apache.commons.lang3.tuple.ImmutablePair of(java.lang.Object,java.lang.Object)>($stack5, "foo");

        $stack7 = new java.io.ByteArrayOutputStream;

        specialinvoke $stack7.<java.io.ByteArrayOutputStream: void <init>()>();

        $stack8 = new java.io.ObjectOutputStream;

        specialinvoke $stack8.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($stack7);

        virtualinvoke $stack8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack6);

        $stack9 = new java.io.ObjectInputStream;

        $stack10 = new java.io.ByteArrayInputStream;

        $stack11 = virtualinvoke $stack7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $stack10.<java.io.ByteArrayInputStream: void <init>(byte[])>($stack11);

        specialinvoke $stack9.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($stack10);

        $stack12 = virtualinvoke $stack9.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        deserializedPair = (org.apache.commons.lang3.tuple.ImmutablePair) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, deserializedPair);

        $stack13 = virtualinvoke $stack6.<org.apache.commons.lang3.tuple.ImmutablePair: int hashCode()>();

        $stack14 = (long) $stack13;

        $stack15 = virtualinvoke deserializedPair.<org.apache.commons.lang3.tuple.ImmutablePair: int hashCode()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack14, $stack16);

        return;
    }
}
