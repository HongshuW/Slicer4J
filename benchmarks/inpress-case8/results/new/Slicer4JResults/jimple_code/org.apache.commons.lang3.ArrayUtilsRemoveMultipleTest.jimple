public class org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testRemoveAllObjectArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        java.lang.Object[] $stack2, $stack4, $stack5, $stack9, $stack11, $stack12, $stack16, $stack18, $stack19, $stack23, $stack25, $stack26, $stack30, $stack32, $stack33, $stack37, $stack39, $stack40, $stack44, $stack46, $stack47, $stack51, $stack53, $stack54, $stack58, $stack60, $stack61, $stack65, $stack67, $stack68, $stack72, $stack74, $stack75;
        int[] $stack3, $stack10, $stack17, $stack24, $stack31, $stack38, $stack45, $stack52, $stack59, $stack66, $stack73;
        java.lang.Class $stack7, $stack8, $stack14, $stack15, $stack21, $stack22, $stack28, $stack29, $stack35, $stack36, $stack42, $stack43, $stack49, $stack50, $stack56, $stack57, $stack63, $stack64, $stack70, $stack71, $stack77, $stack78;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (java.lang.Object)[1];

        $stack2[0] = "a";

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack4);

        $stack7 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack8);

        $stack9 = newarray (java.lang.Object)[2];

        $stack9[0] = "a";

        $stack9[1] = "b";

        $stack10 = newarray (int)[2];

        $stack10[0] = 0;

        $stack10[1] = 1;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack9, $stack10);

        $stack12 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack12, $stack11);

        $stack14 = virtualinvoke $stack11.<java.lang.Object: java.lang.Class getClass()>();

        $stack15 = virtualinvoke $stack14.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack15);

        $stack16 = newarray (java.lang.Object)[3];

        $stack16[0] = "a";

        $stack16[1] = "b";

        $stack16[2] = "c";

        $stack17 = newarray (int)[2];

        $stack17[0] = 1;

        $stack17[1] = 2;

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack16, $stack17);

        $stack19 = newarray (java.lang.Object)[1];

        $stack19[0] = "a";

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack19, $stack18);

        $stack21 = virtualinvoke $stack18.<java.lang.Object: java.lang.Class getClass()>();

        $stack22 = virtualinvoke $stack21.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack22);

        $stack23 = newarray (java.lang.Object)[4];

        $stack23[0] = "a";

        $stack23[1] = "b";

        $stack23[2] = "c";

        $stack23[3] = "d";

        $stack24 = newarray (int)[2];

        $stack24[0] = 1;

        $stack24[1] = 2;

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack23, $stack24);

        $stack26 = newarray (java.lang.Object)[2];

        $stack26[0] = "a";

        $stack26[1] = "d";

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack26, $stack25);

        $stack28 = virtualinvoke $stack25.<java.lang.Object: java.lang.Class getClass()>();

        $stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack29);

        $stack30 = newarray (java.lang.Object)[4];

        $stack30[0] = "a";

        $stack30[1] = "b";

        $stack30[2] = "c";

        $stack30[3] = "d";

        $stack31 = newarray (int)[2];

        $stack31[0] = 0;

        $stack31[1] = 3;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack30, $stack31);

        $stack33 = newarray (java.lang.Object)[2];

        $stack33[0] = "b";

        $stack33[1] = "c";

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack33, $stack32);

        $stack35 = virtualinvoke $stack32.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack36);

        $stack37 = newarray (java.lang.Object)[4];

        $stack37[0] = "a";

        $stack37[1] = "b";

        $stack37[2] = "c";

        $stack37[3] = "d";

        $stack38 = newarray (int)[3];

        $stack38[0] = 0;

        $stack38[1] = 1;

        $stack38[2] = 3;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack37, $stack38);

        $stack40 = newarray (java.lang.Object)[1];

        $stack40[0] = "c";

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack40, $stack39);

        $stack42 = virtualinvoke $stack39.<java.lang.Object: java.lang.Class getClass()>();

        $stack43 = virtualinvoke $stack42.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack43);

        $stack44 = newarray (java.lang.Object)[5];

        $stack44[0] = "a";

        $stack44[1] = "b";

        $stack44[2] = "c";

        $stack44[3] = "d";

        $stack44[4] = "e";

        $stack45 = newarray (int)[3];

        $stack45[0] = 0;

        $stack45[1] = 1;

        $stack45[2] = 3;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack44, $stack45);

        $stack47 = newarray (java.lang.Object)[2];

        $stack47[0] = "c";

        $stack47[1] = "e";

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack47, $stack46);

        $stack49 = virtualinvoke $stack46.<java.lang.Object: java.lang.Class getClass()>();

        $stack50 = virtualinvoke $stack49.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack50);

        $stack51 = newarray (java.lang.Object)[5];

        $stack51[0] = "a";

        $stack51[1] = "b";

        $stack51[2] = "c";

        $stack51[3] = "d";

        $stack51[4] = "e";

        $stack52 = newarray (int)[3];

        $stack52[0] = 0;

        $stack52[1] = 2;

        $stack52[2] = 4;

        $stack53 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack51, $stack52);

        $stack54 = newarray (java.lang.Object)[2];

        $stack54[0] = "b";

        $stack54[1] = "d";

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack54, $stack53);

        $stack56 = virtualinvoke $stack53.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack57);

        $stack58 = newarray (java.lang.Object)[4];

        $stack58[0] = "a";

        $stack58[1] = "b";

        $stack58[2] = "c";

        $stack58[3] = "d";

        $stack59 = newarray (int)[6];

        $stack59[0] = 0;

        $stack59[1] = 1;

        $stack59[2] = 3;

        $stack59[3] = 0;

        $stack59[4] = 1;

        $stack59[5] = 3;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack58, $stack59);

        $stack61 = newarray (java.lang.Object)[1];

        $stack61[0] = "c";

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack61, $stack60);

        $stack63 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack64 = virtualinvoke $stack63.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack64);

        $stack65 = newarray (java.lang.Object)[4];

        $stack65[0] = "a";

        $stack65[1] = "b";

        $stack65[2] = "c";

        $stack65[3] = "d";

        $stack66 = newarray (int)[4];

        $stack66[0] = 2;

        $stack66[1] = 1;

        $stack66[2] = 0;

        $stack66[3] = 3;

        $stack67 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack65, $stack66);

        $stack68 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack68, $stack67);

        $stack70 = virtualinvoke $stack67.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack71);

        $stack72 = newarray (java.lang.Object)[4];

        $stack72[0] = "a";

        $stack72[1] = "b";

        $stack72[2] = "c";

        $stack72[3] = "d";

        $stack73 = newarray (int)[8];

        $stack73[0] = 2;

        $stack73[1] = 0;

        $stack73[2] = 1;

        $stack73[3] = 3;

        $stack73[4] = 0;

        $stack73[5] = 2;

        $stack73[6] = 1;

        $stack73[7] = 3;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack72, $stack73);

        $stack75 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack75, $stack74);

        $stack77 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack78);

        return;
    }

    public void testRemoveAllObjectArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        java.lang.Object[] $stack3, $stack5;
        int[] $stack4;
        java.lang.Class $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (java.lang.Object)[3];

        $stack3[0] = "foo";

        $stack3[1] = "bar";

        $stack3[2] = "baz";

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack3, $stack5);

        $stack7 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack8);

        return;
    }

    public void testRemoveAllObjectArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        java.lang.Object[] $stack1;
        int[] $stack2;
        int $i0;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (java.lang.Object)[2];

        $stack1[0] = "a";

        $stack1[1] = "b";

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllObjectArrayOutOfBoundsIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        java.lang.Object[] $stack1;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (java.lang.Object)[2];

        $stack1[0] = "a";

        $stack1[1] = "b";

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullObjectArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        java.lang.Object[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = (java.lang.Object[]) null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] remove(java.lang.Object[],int)>($stack1, 0);

        return;
    }

    public void testRemoveAllNumberArray()
    {
        java.lang.Integer $stack5, $stack16, $stack26, $stack57;
        java.lang.Long $stack7, $stack49;
        int[] $stack12, $stack22, $stack30, $stack37, $stack45, $stack53;
        java.lang.Byte $stack9, $stack18, $stack41;
        java.lang.Number[] $stack3, $stack14, $stack24, $stack39, $stack47, $stack55, outarray;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        java.lang.Object[] $stack13, $stack23, $stack31, $stack38, $stack46, $stack54;
        long $stack11, $stack33;
        int $stack10, $stack32;
        java.lang.Class $stack20, $stack21, $stack28, $stack29, $stack35, $stack36, $stack43, $stack44, $stack51, $stack52, $stack59, $stack60;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (java.lang.Number)[3];

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack3[0] = $stack5;

        $stack7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $stack3[1] = $stack7;

        $stack9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(3);

        $stack3[2] = $stack9;

        $stack10 = lengthof $stack3;

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack11);

        $stack12 = newarray (int)[1];

        $stack12[0] = 1;

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack3, $stack12);

        outarray = (java.lang.Number[]) $stack13;

        $stack14 = newarray (java.lang.Number)[2];

        $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack14[0] = $stack16;

        $stack18 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(3);

        $stack14[1] = $stack18;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, outarray);

        $stack20 = virtualinvoke outarray.<java.lang.Object: java.lang.Class getClass()>();

        $stack21 = virtualinvoke $stack20.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Number;", $stack21);

        $stack22 = newarray (int)[1];

        $stack22[0] = 1;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>(outarray, $stack22);

        outarray = (java.lang.Number[]) $stack23;

        $stack24 = newarray (java.lang.Number)[1];

        $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack24[0] = $stack26;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack24, outarray);

        $stack28 = virtualinvoke outarray.<java.lang.Object: java.lang.Class getClass()>();

        $stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Number;", $stack29);

        $stack30 = newarray (int)[1];

        $stack30[0] = 0;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>(outarray, $stack30);

        outarray = (java.lang.Number[]) $stack31;

        $stack32 = lengthof outarray;

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack33);

        $stack35 = virtualinvoke outarray.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Number;", $stack36);

        $stack37 = newarray (int)[2];

        $stack37[0] = 0;

        $stack37[1] = 1;

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack3, $stack37);

        outarray = (java.lang.Number[]) $stack38;

        $stack39 = newarray (java.lang.Number)[1];

        $stack41 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(3);

        $stack39[0] = $stack41;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack39, outarray);

        $stack43 = virtualinvoke outarray.<java.lang.Object: java.lang.Class getClass()>();

        $stack44 = virtualinvoke $stack43.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Number;", $stack44);

        $stack45 = newarray (int)[2];

        $stack45[0] = 0;

        $stack45[1] = 2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack3, $stack45);

        outarray = (java.lang.Number[]) $stack46;

        $stack47 = newarray (java.lang.Number)[1];

        $stack49 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $stack47[0] = $stack49;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack47, outarray);

        $stack51 = virtualinvoke outarray.<java.lang.Object: java.lang.Class getClass()>();

        $stack52 = virtualinvoke $stack51.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Number;", $stack52);

        $stack53 = newarray (int)[2];

        $stack53[0] = 1;

        $stack53[1] = 2;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>($stack3, $stack53);

        outarray = (java.lang.Number[]) $stack54;

        $stack55 = newarray (java.lang.Number)[1];

        $stack57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack55[0] = $stack57;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack55, outarray);

        $stack59 = virtualinvoke outarray.<java.lang.Object: java.lang.Class getClass()>();

        $stack60 = virtualinvoke $stack59.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Number;", $stack60);

        return;
    }

    public void testRemoveAllBooleanArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        boolean[] $stack2, $stack4, $stack5, $stack10, $stack12, $stack13, $stack18, $stack20, $stack21, $stack26, $stack28, $stack29, $stack34, $stack36, $stack37, $stack42, $stack44, $stack45, $stack50, $stack52, $stack53, $stack58, $stack60, $stack61, $stack66, $stack68, $stack69, $stack74, $stack76, $stack77, $stack82, $stack84, $stack85, $stack90, $stack92, $stack93, $stack98, $stack100, $stack101, $stack106, $stack108, $stack109;
        int[] $stack3, $stack11, $stack19, $stack27, $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack91, $stack99, $stack107;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94, $stack102, $stack110;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97, $stack103, $stack104, $stack105, $stack111, $stack112, $stack113;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (boolean)[1];

        $stack2[0] = 1;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (boolean)[2];

        $stack10[0] = 1;

        $stack10[1] = 0;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack10, $stack11);

        $stack13 = newarray (boolean)[1];

        $stack13[0] = 0;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (boolean)[2];

        $stack18[0] = 1;

        $stack18[1] = 0;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack18, $stack19);

        $stack21 = newarray (boolean)[1];

        $stack21[0] = 1;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (boolean)[3];

        $stack26[0] = 1;

        $stack26[1] = 0;

        $stack26[2] = 1;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack26, $stack27);

        $stack29 = newarray (boolean)[2];

        $stack29[0] = 1;

        $stack29[1] = 1;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (boolean)[2];

        $stack34[0] = 1;

        $stack34[1] = 0;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (boolean)[3];

        $stack42[0] = 1;

        $stack42[1] = 0;

        $stack42[2] = 0;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack42, $stack43);

        $stack45 = newarray (boolean)[1];

        $stack45[0] = 0;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (boolean)[3];

        $stack50[0] = 1;

        $stack50[1] = 0;

        $stack50[2] = 0;

        $stack51 = newarray (int)[2];

        $stack51[0] = 0;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack50, $stack51);

        $stack53 = newarray (boolean)[1];

        $stack53[0] = 0;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (boolean)[3];

        $stack58[0] = 1;

        $stack58[1] = 0;

        $stack58[2] = 0;

        $stack59 = newarray (int)[2];

        $stack59[0] = 1;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack58, $stack59);

        $stack61 = newarray (boolean)[1];

        $stack61[0] = 1;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (boolean)[5];

        $stack66[0] = 1;

        $stack66[1] = 0;

        $stack66[2] = 1;

        $stack66[3] = 0;

        $stack66[4] = 1;

        $stack67 = newarray (int)[3];

        $stack67[0] = 0;

        $stack67[1] = 2;

        $stack67[2] = 4;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack66, $stack67);

        $stack69 = newarray (boolean)[2];

        $stack69[0] = 0;

        $stack69[1] = 0;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (boolean)[5];

        $stack74[0] = 1;

        $stack74[1] = 0;

        $stack74[2] = 1;

        $stack74[3] = 0;

        $stack74[4] = 1;

        $stack75 = newarray (int)[2];

        $stack75[0] = 1;

        $stack75[1] = 3;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack74, $stack75);

        $stack77 = newarray (boolean)[3];

        $stack77[0] = 1;

        $stack77[1] = 1;

        $stack77[2] = 1;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (boolean)[5];

        $stack82[0] = 1;

        $stack82[1] = 0;

        $stack82[2] = 1;

        $stack82[3] = 0;

        $stack82[4] = 1;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 4;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack82, $stack83);

        $stack85 = newarray (boolean)[2];

        $stack85[0] = 1;

        $stack85[1] = 1;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (boolean)[7];

        $stack90[0] = 1;

        $stack90[1] = 0;

        $stack90[2] = 1;

        $stack90[3] = 0;

        $stack90[4] = 1;

        $stack90[5] = 0;

        $stack90[6] = 1;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack90, $stack91);

        $stack93 = newarray (boolean)[3];

        $stack93[0] = 0;

        $stack93[1] = 0;

        $stack93[2] = 0;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        $stack98 = newarray (boolean)[7];

        $stack98[0] = 1;

        $stack98[1] = 0;

        $stack98[2] = 1;

        $stack98[3] = 0;

        $stack98[4] = 1;

        $stack98[5] = 0;

        $stack98[6] = 1;

        $stack99 = newarray (int)[3];

        $stack99[0] = 1;

        $stack99[1] = 3;

        $stack99[2] = 5;

        $stack100 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack98, $stack99);

        $stack101 = newarray (boolean)[4];

        $stack101[0] = 1;

        $stack101[1] = 1;

        $stack101[2] = 1;

        $stack101[3] = 1;

        $stack102 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack101, $stack100);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack102);

        $stack103 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack104 = virtualinvoke $stack100.<java.lang.Object: java.lang.Class getClass()>();

        $stack105 = virtualinvoke $stack104.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack103, $stack105);

        $stack106 = newarray (boolean)[7];

        $stack106[0] = 1;

        $stack106[1] = 0;

        $stack106[2] = 1;

        $stack106[3] = 0;

        $stack106[4] = 1;

        $stack106[5] = 0;

        $stack106[6] = 1;

        $stack107 = newarray (int)[3];

        $stack107[0] = 0;

        $stack107[1] = 1;

        $stack107[2] = 2;

        $stack108 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack106, $stack107);

        $stack109 = newarray (boolean)[4];

        $stack109[0] = 0;

        $stack109[1] = 1;

        $stack109[2] = 0;

        $stack109[3] = 1;

        $stack110 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack109, $stack108);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack110);

        $stack111 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack112 = virtualinvoke $stack108.<java.lang.Object: java.lang.Class getClass()>();

        $stack113 = virtualinvoke $stack112.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack111, $stack113);

        return;
    }

    public void testRemoveAllBooleanArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        boolean[] $stack3, $stack5;
        int[] $stack4;
        java.lang.Class $stack7, $stack8, $stack9;
        boolean $stack6;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (boolean)[2];

        $stack3[0] = 1;

        $stack3[1] = 0;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        return;
    }

    public void testRemoveAllBooleanArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;
        boolean[] $stack1;
        int $i0;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (boolean)[2];

        $stack1[0] = 1;

        $stack1[1] = 0;

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllBooleanArrayOutOfBoundsIndex()
    {
        boolean[] $stack1;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (boolean)[2];

        $stack1[0] = 1;

        $stack1[1] = 0;

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullBooleanArray()
    {
        boolean[] $stack2;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (boolean[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveAllByteArray()
    {
        byte[] $stack2, $stack4, $stack5, $stack10, $stack12, $stack13, $stack18, $stack20, $stack21, $stack26, $stack28, $stack29, $stack34, $stack36, $stack37, $stack42, $stack44, $stack45, $stack50, $stack52, $stack53, $stack58, $stack60, $stack61, $stack66, $stack68, $stack69, $stack74, $stack76, $stack77, $stack82, $stack84, $stack85, $stack90, $stack92, $stack93;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack3, $stack11, $stack19, $stack27, $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack91;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (byte)[1];

        $stack2[0] = 1;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (byte)[2];

        $stack10[0] = 1;

        $stack10[1] = 2;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack10, $stack11);

        $stack13 = newarray (byte)[1];

        $stack13[0] = 2;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (byte)[2];

        $stack18[0] = 1;

        $stack18[1] = 2;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack18, $stack19);

        $stack21 = newarray (byte)[1];

        $stack21[0] = 1;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (byte)[3];

        $stack26[0] = 1;

        $stack26[1] = 2;

        $stack26[2] = 1;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack26, $stack27);

        $stack29 = newarray (byte)[2];

        $stack29[0] = 1;

        $stack29[1] = 1;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (byte)[2];

        $stack34[0] = 1;

        $stack34[1] = 2;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (byte)[3];

        $stack42[0] = 1;

        $stack42[1] = 2;

        $stack42[2] = 3;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack42, $stack43);

        $stack45 = newarray (byte)[1];

        $stack45[0] = 3;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (byte)[3];

        $stack50[0] = 1;

        $stack50[1] = 2;

        $stack50[2] = 3;

        $stack51 = newarray (int)[2];

        $stack51[0] = 1;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack50, $stack51);

        $stack53 = newarray (byte)[1];

        $stack53[0] = 1;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (byte)[3];

        $stack58[0] = 1;

        $stack58[1] = 2;

        $stack58[2] = 3;

        $stack59 = newarray (int)[2];

        $stack59[0] = 0;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack58, $stack59);

        $stack61 = newarray (byte)[1];

        $stack61[0] = 2;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (byte)[5];

        $stack66[0] = 1;

        $stack66[1] = 2;

        $stack66[2] = 3;

        $stack66[3] = 4;

        $stack66[4] = 5;

        $stack67 = newarray (int)[2];

        $stack67[0] = 1;

        $stack67[1] = 3;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack66, $stack67);

        $stack69 = newarray (byte)[3];

        $stack69[0] = 1;

        $stack69[1] = 3;

        $stack69[2] = 5;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (byte)[5];

        $stack74[0] = 1;

        $stack74[1] = 2;

        $stack74[2] = 3;

        $stack74[3] = 4;

        $stack74[4] = 5;

        $stack75 = newarray (int)[3];

        $stack75[0] = 0;

        $stack75[1] = 2;

        $stack75[2] = 4;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack74, $stack75);

        $stack77 = newarray (byte)[2];

        $stack77[0] = 2;

        $stack77[1] = 4;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (byte)[7];

        $stack82[0] = 1;

        $stack82[1] = 2;

        $stack82[2] = 3;

        $stack82[3] = 4;

        $stack82[4] = 5;

        $stack82[5] = 6;

        $stack82[6] = 7;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 5;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack82, $stack83);

        $stack85 = newarray (byte)[4];

        $stack85[0] = 1;

        $stack85[1] = 3;

        $stack85[2] = 5;

        $stack85[3] = 7;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (byte)[7];

        $stack90[0] = 1;

        $stack90[1] = 2;

        $stack90[2] = 3;

        $stack90[3] = 4;

        $stack90[4] = 5;

        $stack90[5] = 6;

        $stack90[6] = 7;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack90, $stack91);

        $stack93 = newarray (byte)[3];

        $stack93[0] = 2;

        $stack93[1] = 4;

        $stack93[2] = 6;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        return;
    }

    public void testRemoveAllByteArrayRemoveNone()
    {
        byte[] $stack3, $stack5;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack4;
        java.lang.Class $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (byte)[2];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($stack3, $stack5);

        $stack6 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack7 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }

    public void testRemoveAllByteArrayNegativeIndex()
    {
        byte[] $stack1;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;
        int $i0;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (byte)[2];

        $stack1[0] = 1;

        $stack1[1] = 2;

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllByteArrayOutOfBoundsIndex()
    {
        byte[] $stack1;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (byte)[2];

        $stack1[0] = 1;

        $stack1[1] = 2;

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullByteArray()
    {
        byte[] $stack2;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (byte[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveAllCharArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        char[] $stack2, $stack4, $stack5, $stack10, $stack12, $stack13, $stack18, $stack20, $stack21, $stack26, $stack28, $stack29, $stack34, $stack36, $stack37, $stack42, $stack44, $stack45, $stack50, $stack52, $stack53, $stack58, $stack60, $stack61, $stack66, $stack68, $stack69, $stack74, $stack76, $stack77, $stack82, $stack84, $stack85, $stack90, $stack92, $stack93;
        int[] $stack3, $stack11, $stack19, $stack27, $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack91;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (char)[1];

        $stack2[0] = 97;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Character: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (char)[2];

        $stack10[0] = 97;

        $stack10[1] = 98;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack10, $stack11);

        $stack13 = newarray (char)[1];

        $stack13[0] = 98;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Character: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (char)[2];

        $stack18[0] = 97;

        $stack18[1] = 98;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack18, $stack19);

        $stack21 = newarray (char)[1];

        $stack21[0] = 97;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Character: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (char)[3];

        $stack26[0] = 97;

        $stack26[1] = 98;

        $stack26[2] = 99;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack26, $stack27);

        $stack29 = newarray (char)[2];

        $stack29[0] = 97;

        $stack29[1] = 99;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Character: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (char)[2];

        $stack34[0] = 97;

        $stack34[1] = 98;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Character: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (char)[3];

        $stack42[0] = 97;

        $stack42[1] = 98;

        $stack42[2] = 99;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack42, $stack43);

        $stack45 = newarray (char)[1];

        $stack45[0] = 99;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Character: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (char)[3];

        $stack50[0] = 97;

        $stack50[1] = 98;

        $stack50[2] = 99;

        $stack51 = newarray (int)[2];

        $stack51[0] = 1;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack50, $stack51);

        $stack53 = newarray (char)[1];

        $stack53[0] = 97;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Character: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (char)[3];

        $stack58[0] = 97;

        $stack58[1] = 98;

        $stack58[2] = 99;

        $stack59 = newarray (int)[2];

        $stack59[0] = 0;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack58, $stack59);

        $stack61 = newarray (char)[1];

        $stack61[0] = 98;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Character: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (char)[5];

        $stack66[0] = 97;

        $stack66[1] = 98;

        $stack66[2] = 99;

        $stack66[3] = 100;

        $stack66[4] = 101;

        $stack67 = newarray (int)[2];

        $stack67[0] = 1;

        $stack67[1] = 3;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack66, $stack67);

        $stack69 = newarray (char)[3];

        $stack69[0] = 97;

        $stack69[1] = 99;

        $stack69[2] = 101;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Character: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (char)[5];

        $stack74[0] = 97;

        $stack74[1] = 98;

        $stack74[2] = 99;

        $stack74[3] = 100;

        $stack74[4] = 101;

        $stack75 = newarray (int)[3];

        $stack75[0] = 0;

        $stack75[1] = 2;

        $stack75[2] = 4;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack74, $stack75);

        $stack77 = newarray (char)[2];

        $stack77[0] = 98;

        $stack77[1] = 100;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Character: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (char)[7];

        $stack82[0] = 97;

        $stack82[1] = 98;

        $stack82[2] = 99;

        $stack82[3] = 100;

        $stack82[4] = 101;

        $stack82[5] = 102;

        $stack82[6] = 103;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 5;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack82, $stack83);

        $stack85 = newarray (char)[4];

        $stack85[0] = 97;

        $stack85[1] = 99;

        $stack85[2] = 101;

        $stack85[3] = 103;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Character: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (char)[7];

        $stack90[0] = 97;

        $stack90[1] = 98;

        $stack90[2] = 99;

        $stack90[3] = 100;

        $stack90[4] = 101;

        $stack90[5] = 102;

        $stack90[6] = 103;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack90, $stack91);

        $stack93 = newarray (char)[3];

        $stack93[0] = 98;

        $stack93[1] = 100;

        $stack93[2] = 102;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Character: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        return;
    }

    public void testRemoveAllCharArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack4;
        char[] $stack3, $stack5;
        java.lang.Class $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (char)[2];

        $stack3[0] = 97;

        $stack3[1] = 98;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertArrayEquals(char[],char[])>($stack3, $stack5);

        $stack6 = <java.lang.Character: java.lang.Class TYPE>;

        $stack7 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }

    public void testRemoveAllCharArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;
        int $i0;
        char[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (char)[2];

        $stack1[0] = 97;

        $stack1[1] = 98;

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllCharArrayOutOfBoundsIndex()
    {
        char[] $stack1;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (char)[2];

        $stack1[0] = 97;

        $stack1[1] = 98;

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullCharArray()
    {
        char[] $stack2;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (char[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveAllDoubleArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        double[] $stack2, $stack4, $stack5, $stack10, $stack12, $stack13, $stack18, $stack20, $stack21, $stack26, $stack28, $stack29, $stack34, $stack36, $stack37, $stack42, $stack44, $stack45, $stack50, $stack52, $stack53, $stack58, $stack60, $stack61, $stack66, $stack68, $stack69, $stack74, $stack76, $stack77, $stack82, $stack84, $stack85, $stack90, $stack92, $stack93;
        int[] $stack3, $stack11, $stack19, $stack27, $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack91;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (double)[1];

        $stack2[0] = 1.0;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Double: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (double)[2];

        $stack10[0] = 1.0;

        $stack10[1] = 2.0;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack10, $stack11);

        $stack13 = newarray (double)[1];

        $stack13[0] = 2.0;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Double: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (double)[2];

        $stack18[0] = 1.0;

        $stack18[1] = 2.0;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack18, $stack19);

        $stack21 = newarray (double)[1];

        $stack21[0] = 1.0;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Double: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (double)[3];

        $stack26[0] = 1.0;

        $stack26[1] = 2.0;

        $stack26[2] = 1.0;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack26, $stack27);

        $stack29 = newarray (double)[2];

        $stack29[0] = 1.0;

        $stack29[1] = 1.0;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Double: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (double)[2];

        $stack34[0] = 1.0;

        $stack34[1] = 2.0;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Double: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (double)[3];

        $stack42[0] = 1.0;

        $stack42[1] = 2.0;

        $stack42[2] = 3.0;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack42, $stack43);

        $stack45 = newarray (double)[1];

        $stack45[0] = 3.0;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Double: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (double)[3];

        $stack50[0] = 1.0;

        $stack50[1] = 2.0;

        $stack50[2] = 3.0;

        $stack51 = newarray (int)[2];

        $stack51[0] = 1;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack50, $stack51);

        $stack53 = newarray (double)[1];

        $stack53[0] = 1.0;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Double: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (double)[3];

        $stack58[0] = 1.0;

        $stack58[1] = 2.0;

        $stack58[2] = 3.0;

        $stack59 = newarray (int)[2];

        $stack59[0] = 0;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack58, $stack59);

        $stack61 = newarray (double)[1];

        $stack61[0] = 2.0;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Double: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (double)[5];

        $stack66[0] = 1.0;

        $stack66[1] = 2.0;

        $stack66[2] = 3.0;

        $stack66[3] = 4.0;

        $stack66[4] = 5.0;

        $stack67 = newarray (int)[2];

        $stack67[0] = 1;

        $stack67[1] = 3;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack66, $stack67);

        $stack69 = newarray (double)[3];

        $stack69[0] = 1.0;

        $stack69[1] = 3.0;

        $stack69[2] = 5.0;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Double: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (double)[5];

        $stack74[0] = 1.0;

        $stack74[1] = 2.0;

        $stack74[2] = 3.0;

        $stack74[3] = 4.0;

        $stack74[4] = 5.0;

        $stack75 = newarray (int)[3];

        $stack75[0] = 0;

        $stack75[1] = 2;

        $stack75[2] = 4;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack74, $stack75);

        $stack77 = newarray (double)[2];

        $stack77[0] = 2.0;

        $stack77[1] = 4.0;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Double: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (double)[7];

        $stack82[0] = 1.0;

        $stack82[1] = 2.0;

        $stack82[2] = 3.0;

        $stack82[3] = 4.0;

        $stack82[4] = 5.0;

        $stack82[5] = 6.0;

        $stack82[6] = 7.0;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 5;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack82, $stack83);

        $stack85 = newarray (double)[4];

        $stack85[0] = 1.0;

        $stack85[1] = 3.0;

        $stack85[2] = 5.0;

        $stack85[3] = 7.0;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Double: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (double)[7];

        $stack90[0] = 1.0;

        $stack90[1] = 2.0;

        $stack90[2] = 3.0;

        $stack90[3] = 4.0;

        $stack90[4] = 5.0;

        $stack90[5] = 6.0;

        $stack90[6] = 7.0;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack90, $stack91);

        $stack93 = newarray (double)[3];

        $stack93[0] = 2.0;

        $stack93[1] = 4.0;

        $stack93[2] = 6.0;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Double: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        return;
    }

    public void testRemoveAllDoubleArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        double[] $stack3, $stack5;
        int[] $stack4;
        java.lang.Class $stack7, $stack8, $stack9;
        boolean $stack6;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (double)[2];

        $stack3[0] = 1.0;

        $stack3[1] = 2.0;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Double: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        return;
    }

    public void testRemoveAllDoubleArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;
        double[] $stack1;
        int $i0;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (double)[2];

        $stack1[0] = 1.0;

        $stack1[1] = 2.0;

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllDoubleArrayOutOfBoundsIndex()
    {
        double[] $stack1;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (double)[2];

        $stack1[0] = 1.0;

        $stack1[1] = 2.0;

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullDoubleArray()
    {
        double[] $stack2;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (double[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveAllFloatArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        float[] $stack2, $stack4, $stack5, $stack10, $stack12, $stack13, $stack18, $stack20, $stack21, $stack26, $stack28, $stack29, $stack34, $stack36, $stack37, $stack42, $stack44, $stack45, $stack50, $stack52, $stack53, $stack58, $stack60, $stack61, $stack66, $stack68, $stack69, $stack74, $stack76, $stack77, $stack82, $stack84, $stack85, $stack90, $stack92, $stack93;
        int[] $stack3, $stack11, $stack19, $stack27, $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack91;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (float)[1];

        $stack2[0] = 1.0F;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Float: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (float)[2];

        $stack10[0] = 1.0F;

        $stack10[1] = 2.0F;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack10, $stack11);

        $stack13 = newarray (float)[1];

        $stack13[0] = 2.0F;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Float: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (float)[2];

        $stack18[0] = 1.0F;

        $stack18[1] = 2.0F;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack18, $stack19);

        $stack21 = newarray (float)[1];

        $stack21[0] = 1.0F;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Float: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (float)[3];

        $stack26[0] = 1.0F;

        $stack26[1] = 2.0F;

        $stack26[2] = 1.0F;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack26, $stack27);

        $stack29 = newarray (float)[2];

        $stack29[0] = 1.0F;

        $stack29[1] = 1.0F;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Float: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (float)[2];

        $stack34[0] = 1.0F;

        $stack34[1] = 2.0F;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Float: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (float)[3];

        $stack42[0] = 1.0F;

        $stack42[1] = 2.0F;

        $stack42[2] = 3.0F;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack42, $stack43);

        $stack45 = newarray (float)[1];

        $stack45[0] = 3.0F;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Float: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (float)[3];

        $stack50[0] = 1.0F;

        $stack50[1] = 2.0F;

        $stack50[2] = 3.0F;

        $stack51 = newarray (int)[2];

        $stack51[0] = 1;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack50, $stack51);

        $stack53 = newarray (float)[1];

        $stack53[0] = 1.0F;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Float: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (float)[3];

        $stack58[0] = 1.0F;

        $stack58[1] = 2.0F;

        $stack58[2] = 3.0F;

        $stack59 = newarray (int)[2];

        $stack59[0] = 0;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack58, $stack59);

        $stack61 = newarray (float)[1];

        $stack61[0] = 2.0F;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Float: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (float)[5];

        $stack66[0] = 1.0F;

        $stack66[1] = 2.0F;

        $stack66[2] = 3.0F;

        $stack66[3] = 4.0F;

        $stack66[4] = 5.0F;

        $stack67 = newarray (int)[2];

        $stack67[0] = 1;

        $stack67[1] = 3;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack66, $stack67);

        $stack69 = newarray (float)[3];

        $stack69[0] = 1.0F;

        $stack69[1] = 3.0F;

        $stack69[2] = 5.0F;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Float: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (float)[5];

        $stack74[0] = 1.0F;

        $stack74[1] = 2.0F;

        $stack74[2] = 3.0F;

        $stack74[3] = 4.0F;

        $stack74[4] = 5.0F;

        $stack75 = newarray (int)[3];

        $stack75[0] = 0;

        $stack75[1] = 2;

        $stack75[2] = 4;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack74, $stack75);

        $stack77 = newarray (float)[2];

        $stack77[0] = 2.0F;

        $stack77[1] = 4.0F;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Float: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (float)[7];

        $stack82[0] = 1.0F;

        $stack82[1] = 2.0F;

        $stack82[2] = 3.0F;

        $stack82[3] = 4.0F;

        $stack82[4] = 5.0F;

        $stack82[5] = 6.0F;

        $stack82[6] = 7.0F;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 5;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack82, $stack83);

        $stack85 = newarray (float)[4];

        $stack85[0] = 1.0F;

        $stack85[1] = 3.0F;

        $stack85[2] = 5.0F;

        $stack85[3] = 7.0F;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Float: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (float)[7];

        $stack90[0] = 1.0F;

        $stack90[1] = 2.0F;

        $stack90[2] = 3.0F;

        $stack90[3] = 4.0F;

        $stack90[4] = 5.0F;

        $stack90[5] = 6.0F;

        $stack90[6] = 7.0F;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack90, $stack91);

        $stack93 = newarray (float)[3];

        $stack93[0] = 2.0F;

        $stack93[1] = 4.0F;

        $stack93[2] = 6.0F;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Float: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        return;
    }

    public void testRemoveAllFloatArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        float[] $stack3, $stack5;
        int[] $stack4;
        java.lang.Class $stack7, $stack8, $stack9;
        boolean $stack6;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (float)[2];

        $stack3[0] = 1.0F;

        $stack3[1] = 2.0F;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Float: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        return;
    }

    public void testRemoveAllFloatArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;
        int $i0;
        float[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (float)[2];

        $stack1[0] = 1.0F;

        $stack1[1] = 2.0F;

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllFloatArrayOutOfBoundsIndex()
    {
        float[] $stack1;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (float)[2];

        $stack1[0] = 1.0F;

        $stack1[1] = 2.0F;

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullFloatArray()
    {
        float[] $stack2;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (float[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveAllIntArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2, $stack3, $stack4, $stack5, $stack10, $stack11, $stack12, $stack13, $stack18, $stack19, $stack20, $stack21, $stack26, $stack27, $stack28, $stack29, $stack34, $stack35, $stack36, $stack37, $stack42, $stack43, $stack44, $stack45, $stack50, $stack51, $stack52, $stack53, $stack58, $stack59, $stack60, $stack61, $stack66, $stack67, $stack68, $stack69, $stack74, $stack75, $stack76, $stack77, $stack82, $stack83, $stack84, $stack85, $stack90, $stack91, $stack92, $stack93;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (int)[1];

        $stack2[0] = 1;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (int)[2];

        $stack10[0] = 1;

        $stack10[1] = 2;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack10, $stack11);

        $stack13 = newarray (int)[1];

        $stack13[0] = 2;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (int)[2];

        $stack18[0] = 1;

        $stack18[1] = 2;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack18, $stack19);

        $stack21 = newarray (int)[1];

        $stack21[0] = 1;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (int)[3];

        $stack26[0] = 1;

        $stack26[1] = 2;

        $stack26[2] = 1;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack26, $stack27);

        $stack29 = newarray (int)[2];

        $stack29[0] = 1;

        $stack29[1] = 1;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (int)[2];

        $stack34[0] = 1;

        $stack34[1] = 2;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (int)[3];

        $stack42[0] = 1;

        $stack42[1] = 2;

        $stack42[2] = 3;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack42, $stack43);

        $stack45 = newarray (int)[1];

        $stack45[0] = 3;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (int)[3];

        $stack50[0] = 1;

        $stack50[1] = 2;

        $stack50[2] = 3;

        $stack51 = newarray (int)[2];

        $stack51[0] = 1;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack50, $stack51);

        $stack53 = newarray (int)[1];

        $stack53[0] = 1;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (int)[3];

        $stack58[0] = 1;

        $stack58[1] = 2;

        $stack58[2] = 3;

        $stack59 = newarray (int)[2];

        $stack59[0] = 0;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack58, $stack59);

        $stack61 = newarray (int)[1];

        $stack61[0] = 2;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (int)[5];

        $stack66[0] = 1;

        $stack66[1] = 2;

        $stack66[2] = 3;

        $stack66[3] = 4;

        $stack66[4] = 5;

        $stack67 = newarray (int)[2];

        $stack67[0] = 1;

        $stack67[1] = 3;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack66, $stack67);

        $stack69 = newarray (int)[3];

        $stack69[0] = 1;

        $stack69[1] = 3;

        $stack69[2] = 5;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (int)[5];

        $stack74[0] = 1;

        $stack74[1] = 2;

        $stack74[2] = 3;

        $stack74[3] = 4;

        $stack74[4] = 5;

        $stack75 = newarray (int)[3];

        $stack75[0] = 0;

        $stack75[1] = 2;

        $stack75[2] = 4;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack74, $stack75);

        $stack77 = newarray (int)[2];

        $stack77[0] = 2;

        $stack77[1] = 4;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (int)[7];

        $stack82[0] = 1;

        $stack82[1] = 2;

        $stack82[2] = 3;

        $stack82[3] = 4;

        $stack82[4] = 5;

        $stack82[5] = 6;

        $stack82[6] = 7;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 5;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack82, $stack83);

        $stack85 = newarray (int)[4];

        $stack85[0] = 1;

        $stack85[1] = 3;

        $stack85[2] = 5;

        $stack85[3] = 7;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (int)[7];

        $stack90[0] = 1;

        $stack90[1] = 2;

        $stack90[2] = 3;

        $stack90[3] = 4;

        $stack90[4] = 5;

        $stack90[5] = 6;

        $stack90[6] = 7;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack90, $stack91);

        $stack93 = newarray (int)[3];

        $stack93[0] = 2;

        $stack93[1] = 4;

        $stack93[2] = 6;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        return;
    }

    public void testRemoveAllIntArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack3, $stack4, $stack5;
        java.lang.Class $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (int)[2];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($stack3, $stack5);

        $stack6 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack7 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }

    public void testRemoveAllIntArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1, $stack2;
        int $i0;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (int)[2];

        $stack1[0] = 1;

        $stack1[1] = 2;

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllIntArrayOutOfBoundsIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1, $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (int)[2];

        $stack1[0] = 1;

        $stack1[1] = 2;

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullIntArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack1, $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (int[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveAllLongArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack3, $stack11, $stack19, $stack27, $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack91;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94;
        long[] $stack2, $stack4, $stack5, $stack10, $stack12, $stack13, $stack18, $stack20, $stack21, $stack26, $stack28, $stack29, $stack34, $stack36, $stack37, $stack42, $stack44, $stack45, $stack50, $stack52, $stack53, $stack58, $stack60, $stack61, $stack66, $stack68, $stack69, $stack74, $stack76, $stack77, $stack82, $stack84, $stack85, $stack90, $stack92, $stack93;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (long)[1];

        $stack2[0] = 1L;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Long: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (long)[2];

        $stack10[0] = 1L;

        $stack10[1] = 2L;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack10, $stack11);

        $stack13 = newarray (long)[1];

        $stack13[0] = 2L;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Long: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (long)[2];

        $stack18[0] = 1L;

        $stack18[1] = 2L;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack18, $stack19);

        $stack21 = newarray (long)[1];

        $stack21[0] = 1L;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Long: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (long)[3];

        $stack26[0] = 1L;

        $stack26[1] = 2L;

        $stack26[2] = 1L;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack26, $stack27);

        $stack29 = newarray (long)[2];

        $stack29[0] = 1L;

        $stack29[1] = 1L;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Long: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (long)[2];

        $stack34[0] = 1L;

        $stack34[1] = 2L;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Long: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (long)[3];

        $stack42[0] = 1L;

        $stack42[1] = 2L;

        $stack42[2] = 3L;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack42, $stack43);

        $stack45 = newarray (long)[1];

        $stack45[0] = 3L;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Long: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (long)[3];

        $stack50[0] = 1L;

        $stack50[1] = 2L;

        $stack50[2] = 3L;

        $stack51 = newarray (int)[2];

        $stack51[0] = 1;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack50, $stack51);

        $stack53 = newarray (long)[1];

        $stack53[0] = 1L;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Long: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (long)[3];

        $stack58[0] = 1L;

        $stack58[1] = 2L;

        $stack58[2] = 3L;

        $stack59 = newarray (int)[2];

        $stack59[0] = 0;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack58, $stack59);

        $stack61 = newarray (long)[1];

        $stack61[0] = 2L;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Long: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (long)[5];

        $stack66[0] = 1L;

        $stack66[1] = 2L;

        $stack66[2] = 3L;

        $stack66[3] = 4L;

        $stack66[4] = 5L;

        $stack67 = newarray (int)[2];

        $stack67[0] = 1;

        $stack67[1] = 3;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack66, $stack67);

        $stack69 = newarray (long)[3];

        $stack69[0] = 1L;

        $stack69[1] = 3L;

        $stack69[2] = 5L;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Long: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (long)[5];

        $stack74[0] = 1L;

        $stack74[1] = 2L;

        $stack74[2] = 3L;

        $stack74[3] = 4L;

        $stack74[4] = 5L;

        $stack75 = newarray (int)[3];

        $stack75[0] = 0;

        $stack75[1] = 2;

        $stack75[2] = 4;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack74, $stack75);

        $stack77 = newarray (long)[2];

        $stack77[0] = 2L;

        $stack77[1] = 4L;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Long: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (long)[7];

        $stack82[0] = 1L;

        $stack82[1] = 2L;

        $stack82[2] = 3L;

        $stack82[3] = 4L;

        $stack82[4] = 5L;

        $stack82[5] = 6L;

        $stack82[6] = 7L;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 5;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack82, $stack83);

        $stack85 = newarray (long)[4];

        $stack85[0] = 1L;

        $stack85[1] = 3L;

        $stack85[2] = 5L;

        $stack85[3] = 7L;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Long: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (long)[7];

        $stack90[0] = 1L;

        $stack90[1] = 2L;

        $stack90[2] = 3L;

        $stack90[3] = 4L;

        $stack90[4] = 5L;

        $stack90[5] = 6L;

        $stack90[6] = 7L;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack90, $stack91);

        $stack93 = newarray (long)[3];

        $stack93[0] = 2L;

        $stack93[1] = 4L;

        $stack93[2] = 6L;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Long: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        return;
    }

    public void testRemoveAllLongArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        long[] $stack3, $stack5;
        int[] $stack4;
        java.lang.Class $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (long)[2];

        $stack3[0] = 1L;

        $stack3[1] = 2L;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertArrayEquals(long[],long[])>($stack3, $stack5);

        $stack6 = <java.lang.Long: java.lang.Class TYPE>;

        $stack7 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }

    public void testRemoveAllLongArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        long[] $stack1;
        int[] $stack2;
        int $i0;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (long)[2];

        $stack1[0] = 1L;

        $stack1[1] = 2L;

        $stack2 = newarray (int)[1];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllLongArrayOutOfBoundsIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        long[] $stack1;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (long)[2];

        $stack1[0] = 1L;

        $stack1[1] = 2L;

        $stack2 = newarray (int)[1];

        $stack2[0] = 2;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullLongArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        long[] $stack2;
        int[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (long[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveAllShortArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack3, $stack11, $stack19, $stack27, $stack35, $stack43, $stack51, $stack59, $stack67, $stack75, $stack83, $stack91;
        boolean $stack6, $stack14, $stack22, $stack30, $stack38, $stack46, $stack54, $stack62, $stack70, $stack78, $stack86, $stack94;
        short[] $stack2, $stack4, $stack5, $stack10, $stack12, $stack13, $stack18, $stack20, $stack21, $stack26, $stack28, $stack29, $stack34, $stack36, $stack37, $stack42, $stack44, $stack45, $stack50, $stack52, $stack53, $stack58, $stack60, $stack61, $stack66, $stack68, $stack69, $stack74, $stack76, $stack77, $stack82, $stack84, $stack85, $stack90, $stack92, $stack93;
        java.lang.Class $stack7, $stack8, $stack9, $stack15, $stack16, $stack17, $stack23, $stack24, $stack25, $stack31, $stack32, $stack33, $stack39, $stack40, $stack41, $stack47, $stack48, $stack49, $stack55, $stack56, $stack57, $stack63, $stack64, $stack65, $stack71, $stack72, $stack73, $stack79, $stack80, $stack81, $stack87, $stack88, $stack89, $stack95, $stack96, $stack97;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = newarray (short)[1];

        $stack2[0] = 1;

        $stack3 = newarray (int)[1];

        $stack3[0] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack6 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack5, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Short: java.lang.Class TYPE>;

        $stack8 = virtualinvoke $stack4.<java.lang.Object: java.lang.Class getClass()>();

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        $stack10 = newarray (short)[2];

        $stack10[0] = 1;

        $stack10[1] = 2;

        $stack11 = newarray (int)[1];

        $stack11[0] = 0;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack10, $stack11);

        $stack13 = newarray (short)[1];

        $stack13[0] = 2;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Short: java.lang.Class TYPE>;

        $stack16 = virtualinvoke $stack12.<java.lang.Object: java.lang.Class getClass()>();

        $stack17 = virtualinvoke $stack16.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack17);

        $stack18 = newarray (short)[2];

        $stack18[0] = 1;

        $stack18[1] = 2;

        $stack19 = newarray (int)[1];

        $stack19[0] = 1;

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack18, $stack19);

        $stack21 = newarray (short)[1];

        $stack21[0] = 1;

        $stack22 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack21, $stack20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <java.lang.Short: java.lang.Class TYPE>;

        $stack24 = virtualinvoke $stack20.<java.lang.Object: java.lang.Class getClass()>();

        $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack25);

        $stack26 = newarray (short)[3];

        $stack26[0] = 1;

        $stack26[1] = 2;

        $stack26[2] = 1;

        $stack27 = newarray (int)[1];

        $stack27[0] = 1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack26, $stack27);

        $stack29 = newarray (short)[2];

        $stack29[0] = 1;

        $stack29[1] = 1;

        $stack30 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack29, $stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <java.lang.Short: java.lang.Class TYPE>;

        $stack32 = virtualinvoke $stack28.<java.lang.Object: java.lang.Class getClass()>();

        $stack33 = virtualinvoke $stack32.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack33);

        $stack34 = newarray (short)[2];

        $stack34[0] = 1;

        $stack34[1] = 2;

        $stack35 = newarray (int)[2];

        $stack35[0] = 0;

        $stack35[1] = 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack34, $stack35);

        $stack37 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack38 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack37, $stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack39 = <java.lang.Short: java.lang.Class TYPE>;

        $stack40 = virtualinvoke $stack36.<java.lang.Object: java.lang.Class getClass()>();

        $stack41 = virtualinvoke $stack40.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack41);

        $stack42 = newarray (short)[3];

        $stack42[0] = 1;

        $stack42[1] = 2;

        $stack42[2] = 3;

        $stack43 = newarray (int)[2];

        $stack43[0] = 0;

        $stack43[1] = 1;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack42, $stack43);

        $stack45 = newarray (short)[1];

        $stack45[0] = 3;

        $stack46 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack45, $stack44);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack47 = <java.lang.Short: java.lang.Class TYPE>;

        $stack48 = virtualinvoke $stack44.<java.lang.Object: java.lang.Class getClass()>();

        $stack49 = virtualinvoke $stack48.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack49);

        $stack50 = newarray (short)[3];

        $stack50[0] = 1;

        $stack50[1] = 2;

        $stack50[2] = 3;

        $stack51 = newarray (int)[2];

        $stack51[0] = 1;

        $stack51[1] = 2;

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack50, $stack51);

        $stack53 = newarray (short)[1];

        $stack53[0] = 1;

        $stack54 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack53, $stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = <java.lang.Short: java.lang.Class TYPE>;

        $stack56 = virtualinvoke $stack52.<java.lang.Object: java.lang.Class getClass()>();

        $stack57 = virtualinvoke $stack56.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack55, $stack57);

        $stack58 = newarray (short)[3];

        $stack58[0] = 1;

        $stack58[1] = 2;

        $stack58[2] = 3;

        $stack59 = newarray (int)[2];

        $stack59[0] = 0;

        $stack59[1] = 2;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack58, $stack59);

        $stack61 = newarray (short)[1];

        $stack61[0] = 2;

        $stack62 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack61, $stack60);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack63 = <java.lang.Short: java.lang.Class TYPE>;

        $stack64 = virtualinvoke $stack60.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack63, $stack65);

        $stack66 = newarray (short)[5];

        $stack66[0] = 1;

        $stack66[1] = 2;

        $stack66[2] = 3;

        $stack66[3] = 4;

        $stack66[4] = 5;

        $stack67 = newarray (int)[2];

        $stack67[0] = 1;

        $stack67[1] = 3;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack66, $stack67);

        $stack69 = newarray (short)[3];

        $stack69[0] = 1;

        $stack69[1] = 3;

        $stack69[2] = 5;

        $stack70 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack69, $stack68);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = <java.lang.Short: java.lang.Class TYPE>;

        $stack72 = virtualinvoke $stack68.<java.lang.Object: java.lang.Class getClass()>();

        $stack73 = virtualinvoke $stack72.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack73);

        $stack74 = newarray (short)[5];

        $stack74[0] = 1;

        $stack74[1] = 2;

        $stack74[2] = 3;

        $stack74[3] = 4;

        $stack74[4] = 5;

        $stack75 = newarray (int)[3];

        $stack75[0] = 0;

        $stack75[1] = 2;

        $stack75[2] = 4;

        $stack76 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack74, $stack75);

        $stack77 = newarray (short)[2];

        $stack77[0] = 2;

        $stack77[1] = 4;

        $stack78 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack77, $stack76);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = <java.lang.Short: java.lang.Class TYPE>;

        $stack80 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack81 = virtualinvoke $stack80.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack79, $stack81);

        $stack82 = newarray (short)[7];

        $stack82[0] = 1;

        $stack82[1] = 2;

        $stack82[2] = 3;

        $stack82[3] = 4;

        $stack82[4] = 5;

        $stack82[5] = 6;

        $stack82[6] = 7;

        $stack83 = newarray (int)[3];

        $stack83[0] = 1;

        $stack83[1] = 3;

        $stack83[2] = 5;

        $stack84 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack82, $stack83);

        $stack85 = newarray (short)[4];

        $stack85[0] = 1;

        $stack85[1] = 3;

        $stack85[2] = 5;

        $stack85[3] = 7;

        $stack86 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack85, $stack84);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = <java.lang.Short: java.lang.Class TYPE>;

        $stack88 = virtualinvoke $stack84.<java.lang.Object: java.lang.Class getClass()>();

        $stack89 = virtualinvoke $stack88.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack89);

        $stack90 = newarray (short)[7];

        $stack90[0] = 1;

        $stack90[1] = 2;

        $stack90[2] = 3;

        $stack90[3] = 4;

        $stack90[4] = 5;

        $stack90[5] = 6;

        $stack90[6] = 7;

        $stack91 = newarray (int)[4];

        $stack91[0] = 0;

        $stack91[1] = 2;

        $stack91[2] = 4;

        $stack91[3] = 6;

        $stack92 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack90, $stack91);

        $stack93 = newarray (short)[3];

        $stack93[0] = 2;

        $stack93[1] = 4;

        $stack93[2] = 6;

        $stack94 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack93, $stack92);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack95 = <java.lang.Short: java.lang.Class TYPE>;

        $stack96 = virtualinvoke $stack92.<java.lang.Object: java.lang.Class getClass()>();

        $stack97 = virtualinvoke $stack96.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack95, $stack97);

        return;
    }

    public void testRemoveAllShortArrayRemoveNone()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack4;
        java.lang.Class $stack6, $stack7, $stack8;
        short[] $stack3, $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = newarray (short)[2];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $stack4 = newarray (int)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack3, $stack4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        staticinvoke <org.junit.Assert: void assertArrayEquals(short[],short[])>($stack3, $stack5);

        $stack6 = <java.lang.Short: java.lang.Class TYPE>;

        $stack7 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        return;
    }

    public void testRemoveAllShortArrayNegativeIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2;
        int $i0;
        short[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (short)[2];

        $stack1[0] = 1;

        $stack1[1] = 2;

        $stack2 = newarray (int)[2];

        $i0 = (int) -1;

        $stack2[0] = $i0;

        $stack2[1] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllShortArrayOutOfBoundsIndex()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        short[] $stack1;
        int[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack1 = newarray (short)[2];

        $stack1[0] = 1;

        $stack1[1] = 2;

        $stack2 = newarray (int)[2];

        $stack2[0] = 2;

        $stack2[1] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack1, $stack2);

        return;
    }

    public void testRemoveAllNullShortArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        short[] $stack2;
        int[] $stack1;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack2 = (short[]) null;

        $stack1 = newarray (int)[1];

        $stack1[0] = 0;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>($stack2, $stack1);

        return;
    }

    public void testRemoveElementsObjectArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        java.lang.Object[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        java.lang.Class $stack11, $stack12, $stack19, $stack20, $stack27, $stack28, $stack35, $stack36, $stack46, $stack47, $stack54, $stack55, $stack62, $stack63, $stack70, $stack71, $stack78, $stack79, $stack86, $stack87, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (java.lang.Object[]) null;

        $stack2 = newarray (java.lang.Object)[1];

        $stack2[0] = "a";

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack5 = newarray (java.lang.Object)[1];

        $stack5[0] = "a";

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack12);

        $stack13 = newarray (java.lang.Object)[1];

        $stack13[0] = "a";

        $stack14 = newarray (java.lang.Object)[1];

        $stack14[0] = "a";

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack20);

        $stack21 = newarray (java.lang.Object)[2];

        $stack21[0] = "a";

        $stack21[1] = "b";

        $stack22 = newarray (java.lang.Object)[1];

        $stack22[0] = "a";

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack21, $stack22);

        $stack24 = newarray (java.lang.Object)[1];

        $stack24[0] = "b";

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack28);

        $stack29 = newarray (java.lang.Object)[3];

        $stack29[0] = "a";

        $stack29[1] = "b";

        $stack29[2] = "a";

        $stack30 = newarray (java.lang.Object)[1];

        $stack30[0] = "a";

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack29, $stack30);

        $stack32 = newarray (java.lang.Object)[2];

        $stack32[0] = "b";

        $stack32[1] = "a";

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack36);

        $stack38 = (java.lang.Object[]) null;

        $stack37 = newarray (java.lang.Object)[2];

        $stack37[0] = "a";

        $stack37[1] = "b";

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack40 = newarray (java.lang.Object)[2];

        $stack40[0] = "a";

        $stack40[1] = "b";

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack47);

        $stack48 = newarray (java.lang.Object)[1];

        $stack48[0] = "a";

        $stack49 = newarray (java.lang.Object)[2];

        $stack49[0] = "a";

        $stack49[1] = "b";

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack55);

        $stack56 = newarray (java.lang.Object)[2];

        $stack56[0] = "a";

        $stack56[1] = "b";

        $stack57 = newarray (java.lang.Object)[2];

        $stack57[0] = "a";

        $stack57[1] = "c";

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack56, $stack57);

        $stack59 = newarray (java.lang.Object)[1];

        $stack59[0] = "b";

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack63);

        $stack64 = newarray (java.lang.Object)[3];

        $stack64[0] = "a";

        $stack64[1] = "b";

        $stack64[2] = "a";

        $stack65 = newarray (java.lang.Object)[1];

        $stack65[0] = "a";

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack64, $stack65);

        $stack67 = newarray (java.lang.Object)[2];

        $stack67[0] = "b";

        $stack67[1] = "a";

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack71);

        $stack72 = newarray (java.lang.Object)[3];

        $stack72[0] = "a";

        $stack72[1] = "b";

        $stack72[2] = "a";

        $stack73 = newarray (java.lang.Object)[2];

        $stack73[0] = "a";

        $stack73[1] = "b";

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack72, $stack73);

        $stack75 = newarray (java.lang.Object)[1];

        $stack75[0] = "a";

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack79);

        $stack80 = newarray (java.lang.Object)[3];

        $stack80[0] = "a";

        $stack80[1] = "b";

        $stack80[2] = "a";

        $stack81 = newarray (java.lang.Object)[2];

        $stack81[0] = "a";

        $stack81[1] = "a";

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack80, $stack81);

        $stack83 = newarray (java.lang.Object)[1];

        $stack83[0] = "b";

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack87);

        $stack88 = newarray (java.lang.Object)[3];

        $stack88[0] = "a";

        $stack88[1] = "b";

        $stack88[2] = "a";

        $stack89 = newarray (java.lang.Object)[4];

        $stack89[0] = "a";

        $stack89[1] = "a";

        $stack89[2] = "a";

        $stack89[3] = "a";

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeElements(java.lang.Object[],java.lang.Object[])>($stack88, $stack89);

        $stack91 = newarray (java.lang.Object)[1];

        $stack91[0] = "b";

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack95);

        return;
    }

    public void testRemoveElementBooleanArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        boolean[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (boolean[]) null;

        $stack2 = newarray (boolean)[1];

        $stack2[0] = 1;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack5 = newarray (boolean)[1];

        $stack5[0] = 1;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (boolean)[1];

        $stack13[0] = 1;

        $stack14 = newarray (boolean)[1];

        $stack14[0] = 1;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (boolean)[2];

        $stack21[0] = 1;

        $stack21[1] = 0;

        $stack22 = newarray (boolean)[1];

        $stack22[0] = 1;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack21, $stack22);

        $stack24 = newarray (boolean)[1];

        $stack24[0] = 0;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (boolean)[3];

        $stack29[0] = 1;

        $stack29[1] = 0;

        $stack29[2] = 1;

        $stack30 = newarray (boolean)[1];

        $stack30[0] = 1;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack29, $stack30);

        $stack32 = newarray (boolean)[2];

        $stack32[0] = 0;

        $stack32[1] = 1;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (boolean[]) null;

        $stack37 = newarray (boolean)[2];

        $stack37[0] = 1;

        $stack37[1] = 0;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack40 = newarray (boolean)[2];

        $stack40[0] = 1;

        $stack40[1] = 0;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (boolean)[1];

        $stack48[0] = 1;

        $stack49 = newarray (boolean)[2];

        $stack49[0] = 1;

        $stack49[1] = 0;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (boolean)[2];

        $stack56[0] = 1;

        $stack56[1] = 0;

        $stack57 = newarray (boolean)[2];

        $stack57[0] = 1;

        $stack57[1] = 0;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (boolean)[2];

        $stack64[0] = 1;

        $stack64[1] = 0;

        $stack65 = newarray (boolean)[2];

        $stack65[0] = 1;

        $stack65[1] = 1;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack64, $stack65);

        $stack67 = newarray (boolean)[1];

        $stack67[0] = 0;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (boolean)[3];

        $stack72[0] = 1;

        $stack72[1] = 0;

        $stack72[2] = 1;

        $stack73 = newarray (boolean)[2];

        $stack73[0] = 1;

        $stack73[1] = 0;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack72, $stack73);

        $stack75 = newarray (boolean)[1];

        $stack75[0] = 1;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (boolean)[3];

        $stack80[0] = 1;

        $stack80[1] = 0;

        $stack80[2] = 1;

        $stack81 = newarray (boolean)[2];

        $stack81[0] = 1;

        $stack81[1] = 1;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack80, $stack81);

        $stack83 = newarray (boolean)[1];

        $stack83[0] = 0;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (boolean)[3];

        $stack88[0] = 1;

        $stack88[1] = 0;

        $stack88[2] = 1;

        $stack89 = newarray (boolean)[4];

        $stack89[0] = 1;

        $stack89[1] = 1;

        $stack89[2] = 1;

        $stack89[3] = 1;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeElements(boolean[],boolean[])>($stack88, $stack89);

        $stack91 = newarray (boolean)[1];

        $stack91[0] = 0;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }

    public void testRemoveElementByteArray()
    {
        byte[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (byte[]) null;

        $stack2 = newarray (byte)[1];

        $stack2[0] = 1;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack5 = newarray (byte)[1];

        $stack5[0] = 1;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (byte)[1];

        $stack13[0] = 1;

        $stack14 = newarray (byte)[1];

        $stack14[0] = 1;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (byte)[2];

        $stack21[0] = 1;

        $stack21[1] = 2;

        $stack22 = newarray (byte)[1];

        $stack22[0] = 1;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack21, $stack22);

        $stack24 = newarray (byte)[1];

        $stack24[0] = 2;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (byte)[3];

        $stack29[0] = 1;

        $stack29[1] = 2;

        $stack29[2] = 1;

        $stack30 = newarray (byte)[1];

        $stack30[0] = 1;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack29, $stack30);

        $stack32 = newarray (byte)[2];

        $stack32[0] = 2;

        $stack32[1] = 1;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (byte[]) null;

        $stack37 = newarray (byte)[2];

        $stack37[0] = 1;

        $stack37[1] = 2;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack40 = newarray (byte)[2];

        $stack40[0] = 1;

        $stack40[1] = 2;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (byte)[1];

        $stack48[0] = 1;

        $stack49 = newarray (byte)[2];

        $stack49[0] = 1;

        $stack49[1] = 2;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (byte)[2];

        $stack56[0] = 1;

        $stack56[1] = 2;

        $stack57 = newarray (byte)[2];

        $stack57[0] = 1;

        $stack57[1] = 2;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (byte)[2];

        $stack64[0] = 1;

        $stack64[1] = 2;

        $stack65 = newarray (byte)[2];

        $stack65[0] = 1;

        $stack65[1] = 1;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack64, $stack65);

        $stack67 = newarray (byte)[1];

        $stack67[0] = 2;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (byte)[3];

        $stack72[0] = 1;

        $stack72[1] = 2;

        $stack72[2] = 1;

        $stack73 = newarray (byte)[2];

        $stack73[0] = 1;

        $stack73[1] = 2;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack72, $stack73);

        $stack75 = newarray (byte)[1];

        $stack75[0] = 1;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (byte)[3];

        $stack80[0] = 1;

        $stack80[1] = 2;

        $stack80[2] = 1;

        $stack81 = newarray (byte)[2];

        $stack81[0] = 1;

        $stack81[1] = 1;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack80, $stack81);

        $stack83 = newarray (byte)[1];

        $stack83[0] = 2;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (byte)[3];

        $stack88[0] = 1;

        $stack88[1] = 2;

        $stack88[2] = 1;

        $stack89 = newarray (byte)[4];

        $stack89[0] = 1;

        $stack89[1] = 1;

        $stack89[2] = 1;

        $stack89[3] = 1;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeElements(byte[],byte[])>($stack88, $stack89);

        $stack91 = newarray (byte)[1];

        $stack91[0] = 2;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }

    public void testRemoveElementCharArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        char[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (char[]) null;

        $stack2 = newarray (char)[1];

        $stack2[0] = 97;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack5 = newarray (char)[1];

        $stack5[0] = 97;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Character: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (char)[1];

        $stack13[0] = 97;

        $stack14 = newarray (char)[1];

        $stack14[0] = 97;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Character: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (char)[2];

        $stack21[0] = 97;

        $stack21[1] = 98;

        $stack22 = newarray (char)[1];

        $stack22[0] = 97;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack21, $stack22);

        $stack24 = newarray (char)[1];

        $stack24[0] = 98;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Character: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (char)[3];

        $stack29[0] = 97;

        $stack29[1] = 98;

        $stack29[2] = 97;

        $stack30 = newarray (char)[1];

        $stack30[0] = 97;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack29, $stack30);

        $stack32 = newarray (char)[2];

        $stack32[0] = 98;

        $stack32[1] = 97;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Character: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (char[]) null;

        $stack37 = newarray (char)[2];

        $stack37[0] = 97;

        $stack37[1] = 98;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack40 = newarray (char)[2];

        $stack40[0] = 97;

        $stack40[1] = 98;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Character: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (char)[1];

        $stack48[0] = 97;

        $stack49 = newarray (char)[2];

        $stack49[0] = 97;

        $stack49[1] = 98;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Character: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (char)[2];

        $stack56[0] = 97;

        $stack56[1] = 98;

        $stack57 = newarray (char)[2];

        $stack57[0] = 97;

        $stack57[1] = 98;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Character: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (char)[2];

        $stack64[0] = 97;

        $stack64[1] = 98;

        $stack65 = newarray (char)[2];

        $stack65[0] = 97;

        $stack65[1] = 97;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack64, $stack65);

        $stack67 = newarray (char)[1];

        $stack67[0] = 98;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Character: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (char)[3];

        $stack72[0] = 97;

        $stack72[1] = 98;

        $stack72[2] = 97;

        $stack73 = newarray (char)[2];

        $stack73[0] = 97;

        $stack73[1] = 98;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack72, $stack73);

        $stack75 = newarray (char)[1];

        $stack75[0] = 97;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Character: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (char)[3];

        $stack80[0] = 97;

        $stack80[1] = 98;

        $stack80[2] = 97;

        $stack81 = newarray (char)[2];

        $stack81[0] = 97;

        $stack81[1] = 97;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack80, $stack81);

        $stack83 = newarray (char)[1];

        $stack83[0] = 98;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Character: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (char)[3];

        $stack88[0] = 97;

        $stack88[1] = 98;

        $stack88[2] = 97;

        $stack89 = newarray (char)[4];

        $stack89[0] = 97;

        $stack89[1] = 97;

        $stack89[2] = 97;

        $stack89[3] = 97;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeElements(char[],char[])>($stack88, $stack89);

        $stack91 = newarray (char)[1];

        $stack91[0] = 98;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Character: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }

    public void testRemoveElementDoubleArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        double[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (double[]) null;

        $stack2 = newarray (double)[1];

        $stack2[0] = 1.0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack5 = newarray (double)[1];

        $stack5[0] = 1.0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Double: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (double)[1];

        $stack13[0] = 1.0;

        $stack14 = newarray (double)[1];

        $stack14[0] = 1.0;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Double: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (double)[2];

        $stack21[0] = 1.0;

        $stack21[1] = 2.0;

        $stack22 = newarray (double)[1];

        $stack22[0] = 1.0;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack21, $stack22);

        $stack24 = newarray (double)[1];

        $stack24[0] = 2.0;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Double: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (double)[3];

        $stack29[0] = 1.0;

        $stack29[1] = 2.0;

        $stack29[2] = 1.0;

        $stack30 = newarray (double)[1];

        $stack30[0] = 1.0;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack29, $stack30);

        $stack32 = newarray (double)[2];

        $stack32[0] = 2.0;

        $stack32[1] = 1.0;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Double: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (double[]) null;

        $stack37 = newarray (double)[2];

        $stack37[0] = 1.0;

        $stack37[1] = 2.0;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack40 = newarray (double)[2];

        $stack40[0] = 1.0;

        $stack40[1] = 2.0;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Double: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (double)[1];

        $stack48[0] = 1.0;

        $stack49 = newarray (double)[2];

        $stack49[0] = 1.0;

        $stack49[1] = 2.0;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Double: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (double)[2];

        $stack56[0] = 1.0;

        $stack56[1] = 2.0;

        $stack57 = newarray (double)[2];

        $stack57[0] = 1.0;

        $stack57[1] = 2.0;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Double: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (double)[2];

        $stack64[0] = 1.0;

        $stack64[1] = 2.0;

        $stack65 = newarray (double)[2];

        $stack65[0] = 1.0;

        $stack65[1] = 1.0;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack64, $stack65);

        $stack67 = newarray (double)[1];

        $stack67[0] = 2.0;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Double: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (double)[3];

        $stack72[0] = 1.0;

        $stack72[1] = 2.0;

        $stack72[2] = 1.0;

        $stack73 = newarray (double)[2];

        $stack73[0] = 1.0;

        $stack73[1] = 2.0;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack72, $stack73);

        $stack75 = newarray (double)[1];

        $stack75[0] = 1.0;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Double: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (double)[3];

        $stack80[0] = 1.0;

        $stack80[1] = 2.0;

        $stack80[2] = 1.0;

        $stack81 = newarray (double)[2];

        $stack81[0] = 1.0;

        $stack81[1] = 1.0;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack80, $stack81);

        $stack83 = newarray (double)[1];

        $stack83[0] = 2.0;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Double: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (double)[3];

        $stack88[0] = 1.0;

        $stack88[1] = 2.0;

        $stack88[2] = 1.0;

        $stack89 = newarray (double)[4];

        $stack89[0] = 1.0;

        $stack89[1] = 1.0;

        $stack89[2] = 1.0;

        $stack89[3] = 1.0;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeElements(double[],double[])>($stack88, $stack89);

        $stack91 = newarray (double)[1];

        $stack91[0] = 2.0;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Double: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }

    public void testRemoveElementFloatArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        float[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (float[]) null;

        $stack2 = newarray (float)[1];

        $stack2[0] = 1.0F;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack5 = newarray (float)[1];

        $stack5[0] = 1.0F;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Float: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (float)[1];

        $stack13[0] = 1.0F;

        $stack14 = newarray (float)[1];

        $stack14[0] = 1.0F;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Float: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (float)[2];

        $stack21[0] = 1.0F;

        $stack21[1] = 2.0F;

        $stack22 = newarray (float)[1];

        $stack22[0] = 1.0F;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack21, $stack22);

        $stack24 = newarray (float)[1];

        $stack24[0] = 2.0F;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Float: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (float)[3];

        $stack29[0] = 1.0F;

        $stack29[1] = 2.0F;

        $stack29[2] = 1.0F;

        $stack30 = newarray (float)[1];

        $stack30[0] = 1.0F;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack29, $stack30);

        $stack32 = newarray (float)[2];

        $stack32[0] = 2.0F;

        $stack32[1] = 1.0F;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Float: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (float[]) null;

        $stack37 = newarray (float)[2];

        $stack37[0] = 1.0F;

        $stack37[1] = 1.0F;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack40 = newarray (float)[2];

        $stack40[0] = 1.0F;

        $stack40[1] = 1.0F;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Float: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (float)[1];

        $stack48[0] = 1.0F;

        $stack49 = newarray (float)[2];

        $stack49[0] = 1.0F;

        $stack49[1] = 1.0F;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Float: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (float)[2];

        $stack56[0] = 1.0F;

        $stack56[1] = 2.0F;

        $stack57 = newarray (float)[2];

        $stack57[0] = 1.0F;

        $stack57[1] = 2.0F;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Float: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (float)[2];

        $stack64[0] = 1.0F;

        $stack64[1] = 2.0F;

        $stack65 = newarray (float)[2];

        $stack65[0] = 1.0F;

        $stack65[1] = 1.0F;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack64, $stack65);

        $stack67 = newarray (float)[1];

        $stack67[0] = 2.0F;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Float: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (float)[3];

        $stack72[0] = 1.0F;

        $stack72[1] = 2.0F;

        $stack72[2] = 1.0F;

        $stack73 = newarray (float)[2];

        $stack73[0] = 1.0F;

        $stack73[1] = 1.0F;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack72, $stack73);

        $stack75 = newarray (float)[1];

        $stack75[0] = 2.0F;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Float: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (float)[3];

        $stack80[0] = 1.0F;

        $stack80[1] = 2.0F;

        $stack80[2] = 1.0F;

        $stack81 = newarray (float)[2];

        $stack81[0] = 1.0F;

        $stack81[1] = 2.0F;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack80, $stack81);

        $stack83 = newarray (float)[1];

        $stack83[0] = 1.0F;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Float: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (float)[3];

        $stack88[0] = 1.0F;

        $stack88[1] = 2.0F;

        $stack88[2] = 1.0F;

        $stack89 = newarray (float)[4];

        $stack89[0] = 1.0F;

        $stack89[1] = 1.0F;

        $stack89[2] = 1.0F;

        $stack89[3] = 1.0F;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeElements(float[],float[])>($stack88, $stack89);

        $stack91 = newarray (float)[1];

        $stack91[0] = 2.0F;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Float: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }

    public void testRemoveElementIntArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        int[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (int[]) null;

        $stack2 = newarray (int)[1];

        $stack2[0] = 1;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack5 = newarray (int)[1];

        $stack5[0] = 1;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (int)[1];

        $stack13[0] = 1;

        $stack14 = newarray (int)[1];

        $stack14[0] = 1;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (int)[2];

        $stack21[0] = 1;

        $stack21[1] = 2;

        $stack22 = newarray (int)[1];

        $stack22[0] = 1;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack21, $stack22);

        $stack24 = newarray (int)[1];

        $stack24[0] = 2;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (int)[3];

        $stack29[0] = 1;

        $stack29[1] = 2;

        $stack29[2] = 1;

        $stack30 = newarray (int)[1];

        $stack30[0] = 1;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack29, $stack30);

        $stack32 = newarray (int)[2];

        $stack32[0] = 2;

        $stack32[1] = 1;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (int[]) null;

        $stack37 = newarray (int)[1];

        $stack37[0] = 1;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack40 = newarray (int)[2];

        $stack40[0] = 1;

        $stack40[1] = 1;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (int)[1];

        $stack48[0] = 1;

        $stack49 = newarray (int)[2];

        $stack49[0] = 1;

        $stack49[1] = 1;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (int)[2];

        $stack56[0] = 1;

        $stack56[1] = 2;

        $stack57 = newarray (int)[2];

        $stack57[0] = 1;

        $stack57[1] = 2;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (int)[2];

        $stack64[0] = 1;

        $stack64[1] = 2;

        $stack65 = newarray (int)[2];

        $stack65[0] = 1;

        $stack65[1] = 1;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack64, $stack65);

        $stack67 = newarray (int)[1];

        $stack67[0] = 2;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (int)[3];

        $stack72[0] = 1;

        $stack72[1] = 2;

        $stack72[2] = 1;

        $stack73 = newarray (int)[2];

        $stack73[0] = 1;

        $stack73[1] = 2;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack72, $stack73);

        $stack75 = newarray (int)[1];

        $stack75[0] = 1;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (int)[3];

        $stack80[0] = 1;

        $stack80[1] = 2;

        $stack80[2] = 1;

        $stack81 = newarray (int)[2];

        $stack81[0] = 1;

        $stack81[1] = 1;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack80, $stack81);

        $stack83 = newarray (int)[1];

        $stack83[0] = 2;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (int)[3];

        $stack88[0] = 1;

        $stack88[1] = 2;

        $stack88[2] = 1;

        $stack89 = newarray (int)[4];

        $stack89[0] = 1;

        $stack89[1] = 1;

        $stack89[2] = 1;

        $stack89[3] = 1;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeElements(int[],int[])>($stack88, $stack89);

        $stack91 = newarray (int)[1];

        $stack91[0] = 2;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }

    public void testRemoveElementLongArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        long[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (long[]) null;

        $stack2 = newarray (long)[1];

        $stack2[0] = 1L;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack5 = newarray (long)[1];

        $stack5[0] = 1L;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Long: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (long)[1];

        $stack13[0] = 1L;

        $stack14 = newarray (long)[1];

        $stack14[0] = 1L;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Long: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (long)[2];

        $stack21[0] = 1L;

        $stack21[1] = 2L;

        $stack22 = newarray (long)[1];

        $stack22[0] = 1L;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack21, $stack22);

        $stack24 = newarray (long)[1];

        $stack24[0] = 2L;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Long: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (long)[3];

        $stack29[0] = 1L;

        $stack29[1] = 2L;

        $stack29[2] = 1L;

        $stack30 = newarray (long)[1];

        $stack30[0] = 1L;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack29, $stack30);

        $stack32 = newarray (long)[2];

        $stack32[0] = 2L;

        $stack32[1] = 1L;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Long: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (long[]) null;

        $stack37 = newarray (long)[2];

        $stack37[0] = 1L;

        $stack37[1] = 1L;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack40 = newarray (long)[2];

        $stack40[0] = 1L;

        $stack40[1] = 1L;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Long: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (long)[1];

        $stack48[0] = 1L;

        $stack49 = newarray (long)[2];

        $stack49[0] = 1L;

        $stack49[1] = 1L;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Long: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (long)[2];

        $stack56[0] = 1L;

        $stack56[1] = 2L;

        $stack57 = newarray (long)[2];

        $stack57[0] = 1L;

        $stack57[1] = 2L;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Long: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (long)[2];

        $stack64[0] = 1L;

        $stack64[1] = 2L;

        $stack65 = newarray (long)[2];

        $stack65[0] = 1L;

        $stack65[1] = 1L;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack64, $stack65);

        $stack67 = newarray (long)[1];

        $stack67[0] = 2L;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Long: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (long)[3];

        $stack72[0] = 1L;

        $stack72[1] = 2L;

        $stack72[2] = 1L;

        $stack73 = newarray (long)[2];

        $stack73[0] = 1L;

        $stack73[1] = 1L;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack72, $stack73);

        $stack75 = newarray (long)[1];

        $stack75[0] = 2L;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Long: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (long)[3];

        $stack80[0] = 1L;

        $stack80[1] = 2L;

        $stack80[2] = 1L;

        $stack81 = newarray (long)[2];

        $stack81[0] = 1L;

        $stack81[1] = 2L;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack80, $stack81);

        $stack83 = newarray (long)[1];

        $stack83[0] = 1L;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Long: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (long)[3];

        $stack88[0] = 1L;

        $stack88[1] = 2L;

        $stack88[2] = 1L;

        $stack89 = newarray (long)[4];

        $stack89[0] = 1L;

        $stack89[1] = 1L;

        $stack89[2] = 1L;

        $stack89[3] = 1L;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeElements(long[],long[])>($stack88, $stack89);

        $stack91 = newarray (long)[1];

        $stack91[0] = 2L;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Long: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }

    public void testRemoveElementShortArray()
    {
        org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest this;
        boolean $stack9, $stack17, $stack25, $stack33, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92;
        short[] $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack13, $stack14, $stack15, $stack16, $stack21, $stack22, $stack23, $stack24, $stack29, $stack30, $stack31, $stack32, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack48, $stack49, $stack50, $stack51, $stack56, $stack57, $stack58, $stack59, $stack64, $stack65, $stack66, $stack67, $stack72, $stack73, $stack74, $stack75, $stack80, $stack81, $stack82, $stack83, $stack88, $stack89, $stack90, $stack91;
        java.lang.Class $stack10, $stack11, $stack12, $stack18, $stack19, $stack20, $stack26, $stack27, $stack28, $stack34, $stack35, $stack36, $stack45, $stack46, $stack47, $stack53, $stack54, $stack55, $stack61, $stack62, $stack63, $stack69, $stack70, $stack71, $stack77, $stack78, $stack79, $stack85, $stack86, $stack87, $stack93, $stack94, $stack95;

        this := @this: org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest;

        $stack3 = (short[]) null;

        $stack2 = newarray (short)[1];

        $stack2[0] = 1;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack3, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack5 = newarray (short)[1];

        $stack5[0] = 1;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack6, $stack5);

        $stack8 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = <java.lang.Short: java.lang.Class TYPE>;

        $stack11 = virtualinvoke $stack7.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack12);

        $stack13 = newarray (short)[1];

        $stack13[0] = 1;

        $stack14 = newarray (short)[1];

        $stack14[0] = 1;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack13, $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack16, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = <java.lang.Short: java.lang.Class TYPE>;

        $stack19 = virtualinvoke $stack15.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack20);

        $stack21 = newarray (short)[2];

        $stack21[0] = 1;

        $stack21[1] = 2;

        $stack22 = newarray (short)[1];

        $stack22[0] = 1;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack21, $stack22);

        $stack24 = newarray (short)[1];

        $stack24[0] = 2;

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack24, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = <java.lang.Short: java.lang.Class TYPE>;

        $stack27 = virtualinvoke $stack23.<java.lang.Object: java.lang.Class getClass()>();

        $stack28 = virtualinvoke $stack27.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack29 = newarray (short)[3];

        $stack29[0] = 1;

        $stack29[1] = 2;

        $stack29[2] = 1;

        $stack30 = newarray (short)[1];

        $stack30[0] = 1;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack29, $stack30);

        $stack32 = newarray (short)[2];

        $stack32[0] = 2;

        $stack32[1] = 1;

        $stack33 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack32, $stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack34 = <java.lang.Short: java.lang.Class TYPE>;

        $stack35 = virtualinvoke $stack31.<java.lang.Object: java.lang.Class getClass()>();

        $stack36 = virtualinvoke $stack35.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack36);

        $stack38 = (short[]) null;

        $stack37 = newarray (short)[2];

        $stack37[0] = 1;

        $stack37[1] = 1;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack39);

        $stack41 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack40 = newarray (short)[2];

        $stack40[0] = 1;

        $stack40[1] = 1;

        $stack42 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack41, $stack40);

        $stack43 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack44 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack43, $stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = <java.lang.Short: java.lang.Class TYPE>;

        $stack46 = virtualinvoke $stack42.<java.lang.Object: java.lang.Class getClass()>();

        $stack47 = virtualinvoke $stack46.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack48 = newarray (short)[1];

        $stack48[0] = 1;

        $stack49 = newarray (short)[2];

        $stack49[0] = 1;

        $stack49[1] = 1;

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack48, $stack49);

        $stack51 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack52 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack51, $stack50);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = <java.lang.Short: java.lang.Class TYPE>;

        $stack54 = virtualinvoke $stack50.<java.lang.Object: java.lang.Class getClass()>();

        $stack55 = virtualinvoke $stack54.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack53, $stack55);

        $stack56 = newarray (short)[2];

        $stack56[0] = 1;

        $stack56[1] = 2;

        $stack57 = newarray (short)[2];

        $stack57[0] = 1;

        $stack57[1] = 2;

        $stack58 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack60 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack59, $stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack61 = <java.lang.Short: java.lang.Class TYPE>;

        $stack62 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack63 = virtualinvoke $stack62.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack63);

        $stack64 = newarray (short)[2];

        $stack64[0] = 1;

        $stack64[1] = 2;

        $stack65 = newarray (short)[2];

        $stack65[0] = 1;

        $stack65[1] = 1;

        $stack66 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack64, $stack65);

        $stack67 = newarray (short)[1];

        $stack67[0] = 2;

        $stack68 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack67, $stack66);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack68);

        $stack69 = <java.lang.Short: java.lang.Class TYPE>;

        $stack70 = virtualinvoke $stack66.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack69, $stack71);

        $stack72 = newarray (short)[3];

        $stack72[0] = 1;

        $stack72[1] = 2;

        $stack72[2] = 1;

        $stack73 = newarray (short)[2];

        $stack73[0] = 1;

        $stack73[1] = 1;

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack72, $stack73);

        $stack75 = newarray (short)[1];

        $stack75[0] = 2;

        $stack76 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack75, $stack74);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack77 = <java.lang.Short: java.lang.Class TYPE>;

        $stack78 = virtualinvoke $stack74.<java.lang.Object: java.lang.Class getClass()>();

        $stack79 = virtualinvoke $stack78.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack79);

        $stack80 = newarray (short)[3];

        $stack80[0] = 1;

        $stack80[1] = 2;

        $stack80[2] = 1;

        $stack81 = newarray (short)[2];

        $stack81[0] = 1;

        $stack81[1] = 2;

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack80, $stack81);

        $stack83 = newarray (short)[1];

        $stack83[0] = 1;

        $stack84 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack83, $stack82);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack85 = <java.lang.Short: java.lang.Class TYPE>;

        $stack86 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack87 = virtualinvoke $stack86.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack85, $stack87);

        $stack88 = newarray (short)[3];

        $stack88[0] = 1;

        $stack88[1] = 2;

        $stack88[2] = 1;

        $stack89 = newarray (short)[4];

        $stack89[0] = 1;

        $stack89[1] = 1;

        $stack89[2] = 1;

        $stack89[3] = 1;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeElements(short[],short[])>($stack88, $stack89);

        $stack91 = newarray (short)[1];

        $stack91[0] = 2;

        $stack92 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack91, $stack90);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = <java.lang.Short: java.lang.Class TYPE>;

        $stack94 = virtualinvoke $stack90.<java.lang.Object: java.lang.Class getClass()>();

        $stack95 = virtualinvoke $stack94.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack93, $stack95);

        return;
    }
}
