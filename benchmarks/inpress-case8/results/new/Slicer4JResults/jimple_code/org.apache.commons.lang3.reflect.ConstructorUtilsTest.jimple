public class org.apache.commons.lang3.reflect.ConstructorUtilsTest extends java.lang.Object
{
    private java.util.Map classCache;

    public void <init>()
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.util.HashMap $stack1;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>()>();

        this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.util.Map classCache> = $stack1;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.util.Map $stack1;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack1 = this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.util.Map classCache>;

        interfaceinvoke $stack1.<java.util.Map: void clear()>();

        return;
    }

    public void testConstructor() throws java.lang.Exception
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Class $stack1;
        java.lang.Object $stack2;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack1 = class "Lorg/apache/commons/lang3/reflect/MethodUtils;";

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.lang.Object newInstance()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        return;
    }

    public void testInvokeConstructor() throws java.lang.Exception
    {
        java.lang.Integer $stack37;
        java.lang.Long $stack49;
        java.lang.Byte $stack43;
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Object[] $stack2, $stack7, $stack12, $stack17, $stack22, $stack30, $stack36, $stack42, $stack48, $stack54;
        java.lang.Double $stack55;
        org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean $stack5, $stack10, $stack15, $stack20, $stack28, $stack34, $stack40, $stack46, $stack52, $stack58;
        java.lang.Boolean $stack31;
        java.lang.String $stack6, $stack11, $stack16, $stack21, $stack29, $stack35, $stack41, $stack47, $stack53, $stack59;
        java.lang.Class[] $stack1;
        java.lang.Object $stack4, $stack9, $stack14, $stack19, $stack23, $stack27, $stack33, $stack39, $stack45, $stack51, $stack57;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack2 = (java.lang.Object[]) $stack1;

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack2);

        $stack5 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack4;

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("()", $stack6);

        $stack7 = (java.lang.Object[]) null;

        $stack9 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack7);

        $stack10 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack9;

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("()", $stack11);

        $stack12 = newarray (java.lang.Object)[0];

        $stack14 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack12);

        $stack15 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack14;

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("()", $stack16);

        $stack17 = newarray (java.lang.Object)[1];

        $stack17[0] = "";

        $stack19 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack17);

        $stack20 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack19;

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(String)", $stack21);

        $stack22 = newarray (java.lang.Object)[1];

        $stack23 = new java.lang.Object;

        specialinvoke $stack23.<java.lang.Object: void <init>()>();

        $stack22[0] = $stack23;

        $stack27 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack22);

        $stack28 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack27;

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(Object)", $stack29);

        $stack30 = newarray (java.lang.Object)[1];

        $stack31 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack30[0] = $stack31;

        $stack33 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack30);

        $stack34 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack33;

        $stack35 = virtualinvoke $stack34.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(Object)", $stack35);

        $stack36 = newarray (java.lang.Object)[1];

        $stack37 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_ONE>;

        $stack36[0] = $stack37;

        $stack39 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack36);

        $stack40 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack39;

        $stack41 = virtualinvoke $stack40.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(Integer)", $stack41);

        $stack42 = newarray (java.lang.Object)[1];

        $stack43 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_ONE>;

        $stack42[0] = $stack43;

        $stack45 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack42);

        $stack46 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack45;

        $stack47 = virtualinvoke $stack46.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(int)", $stack47);

        $stack48 = newarray (java.lang.Object)[1];

        $stack49 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_ONE>;

        $stack48[0] = $stack49;

        $stack51 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack48);

        $stack52 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack51;

        $stack53 = virtualinvoke $stack52.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(double)", $stack53);

        $stack54 = newarray (java.lang.Object)[1];

        $stack55 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_ONE>;

        $stack54[0] = $stack55;

        $stack57 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack54);

        $stack58 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack57;

        $stack59 = virtualinvoke $stack58.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(double)", $stack59);

        return;
    }

    public void testInvokeExactConstructor() throws java.lang.Exception
    {
        java.lang.NoSuchMethodException $stack49, $stack50, $stack55;
        java.lang.Integer $stack27;
        java.lang.Long $stack44;
        java.lang.Byte $stack41;
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Object[] $stack3, $stack8, $stack13, $stack18, $stack26, $stack32, $stack40, $stack43, $stack46;
        java.lang.Double $stack33;
        org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean $stack6, $stack11, $stack16, $stack24, $stack30, $stack38;
        java.lang.Boolean $stack47;
        java.lang.String $stack7, $stack12, $stack17, $stack25, $stack31, $stack39;
        java.lang.Class[] $stack2, $stack34;
        java.lang.Object $stack5, $stack10, $stack15, $stack19, $stack23, $stack29, $stack37;
        java.lang.Class $stack35;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack3 = (java.lang.Object[]) $stack2;

        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack3);

        $stack6 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack5;

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("()", $stack7);

        $stack8 = (java.lang.Object[]) null;

        $stack10 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack8);

        $stack11 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack10;

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("()", $stack12);

        $stack13 = newarray (java.lang.Object)[1];

        $stack13[0] = "";

        $stack15 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack13);

        $stack16 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack15;

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(String)", $stack17);

        $stack18 = newarray (java.lang.Object)[1];

        $stack19 = new java.lang.Object;

        specialinvoke $stack19.<java.lang.Object: void <init>()>();

        $stack18[0] = $stack19;

        $stack23 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack18);

        $stack24 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(Object)", $stack25);

        $stack26 = newarray (java.lang.Object)[1];

        $stack27 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_ONE>;

        $stack26[0] = $stack27;

        $stack29 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack26);

        $stack30 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack29;

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(Integer)", $stack31);

        $stack32 = newarray (java.lang.Object)[1];

        $stack33 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_ONE>;

        $stack32[0] = $stack33;

        $stack34 = newarray (java.lang.Class)[1];

        $stack35 = <java.lang.Double: java.lang.Class TYPE>;

        $stack34[0] = $stack35;

        $stack37 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack32, $stack34);

        $stack38 = (org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean) $stack37;

        $stack39 = virtualinvoke $stack38.<org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(double)", $stack39);

     label01:
        $stack40 = newarray (java.lang.Object)[1];

        $stack41 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_ONE>;

        $stack40[0] = $stack41;

        staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack40);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw NoSuchMethodException");

     label02:
        goto label04;

     label03:
        $stack55 := @caughtexception;

     label04:
        $stack43 = newarray (java.lang.Object)[1];

        $stack44 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_ONE>;

        $stack43[0] = $stack44;

        staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack43);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw NoSuchMethodException");

     label05:
        goto label07;

     label06:
        $stack50 := @caughtexception;

     label07:
        $stack46 = newarray (java.lang.Object)[1];

        $stack47 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack46[0] = $stack47;

        staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.Object invokeExactConstructor(java.lang.Class,java.lang.Object[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack46);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw NoSuchMethodException");

     label08:
        goto label10;

     label09:
        $stack49 := @caughtexception;

     label10:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.NoSuchMethodException from label04 to label05 with label06;
        catch java.lang.NoSuchMethodException from label07 to label08 with label09;
    }

    public void testGetAccessibleConstructor() throws java.lang.Exception
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Class[] $stack1, $stack5;
        java.lang.reflect.Constructor $stack3, $stack4, $stack7, $stack8;
        java.lang.Class $stack2, $stack6;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack2 = class "Ljava/lang/Object;";

        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack3 = virtualinvoke $stack2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack1);

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.reflect.Constructor getAccessibleConstructor(java.lang.reflect.Constructor)>($stack3);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack4);

        $stack6 = class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$PrivateClass;";

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($stack5);

        $stack8 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.reflect.Constructor getAccessibleConstructor(java.lang.reflect.Constructor)>($stack7);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack8);

        return;
    }

    public void testGetAccessibleConstructorFromDescription() throws java.lang.Exception
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Class[] $stack1, $stack3;
        java.lang.reflect.Constructor $stack2, $stack4;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.reflect.Constructor getAccessibleConstructor(java.lang.Class,java.lang.Class[])>(class "Ljava/lang/Object;", $stack1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.reflect.Constructor getAccessibleConstructor(java.lang.Class,java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$PrivateClass;", $stack3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        return;
    }

    public void testGetMatchingAccessibleMethod() throws java.lang.Exception
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Class[] $stack1, $stack2, $stack3, $stack5, $stack6, $stack8, $stack9, $stack11, $stack12, $stack14, $stack16, $stack19, $stack21, $stack23, $stack25, $stack28, $stack30, $stack32, $stack34, $stack37, $stack39, $stack41, $stack42, $stack45, $stack47, $stack49, $stack51, $stack54, $stack56, $stack58, $stack60, $stack63, $stack65, $stack67, $stack69, $stack72, $stack74;
        java.lang.Class $stack15, $stack17, $stack20, $stack24, $stack26, $stack29, $stack33, $stack35, $stack38, $stack43, $stack46, $stack50, $stack52, $stack55, $stack59, $stack61, $stack64, $stack68, $stack70, $stack73;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack2, $stack1);

        $stack3 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", null, $stack3);

        $stack5 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/String;");

        $stack6 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/String;");

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack5, $stack6);

        $stack8 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Object;");

        $stack9 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Object;");

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack8, $stack9);

        $stack11 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $stack12 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Object;");

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack11, $stack12);

        $stack14 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Byte;");

        $stack15 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack16 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack15);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack14, $stack16);

        $stack17 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack19 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack17);

        $stack20 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack21 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack20);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack19, $stack21);

        $stack23 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Short;");

        $stack24 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack25 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack24);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack23, $stack25);

        $stack26 = <java.lang.Short: java.lang.Class TYPE>;

        $stack28 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack26);

        $stack29 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack30 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack29);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack28, $stack30);

        $stack32 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Character;");

        $stack33 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack34 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack33);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack32, $stack34);

        $stack35 = <java.lang.Character: java.lang.Class TYPE>;

        $stack37 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack35);

        $stack38 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack39 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack38);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack37, $stack39);

        $stack41 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Integer;");

        $stack42 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Integer;");

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack41, $stack42);

        $stack43 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack45 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack43);

        $stack46 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack47 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack46);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack45, $stack47);

        $stack49 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Long;");

        $stack50 = <java.lang.Double: java.lang.Class TYPE>;

        $stack51 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack50);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack49, $stack51);

        $stack52 = <java.lang.Long: java.lang.Class TYPE>;

        $stack54 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack52);

        $stack55 = <java.lang.Double: java.lang.Class TYPE>;

        $stack56 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack55);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack54, $stack56);

        $stack58 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Float;");

        $stack59 = <java.lang.Double: java.lang.Class TYPE>;

        $stack60 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack59);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack58, $stack60);

        $stack61 = <java.lang.Float: java.lang.Class TYPE>;

        $stack63 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack61);

        $stack64 = <java.lang.Double: java.lang.Class TYPE>;

        $stack65 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack64);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack63, $stack65);

        $stack67 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Double;");

        $stack68 = <java.lang.Double: java.lang.Class TYPE>;

        $stack69 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack68);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack67, $stack69);

        $stack70 = <java.lang.Double: java.lang.Class TYPE>;

        $stack72 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack70);

        $stack73 = <java.lang.Double: java.lang.Class TYPE>;

        $stack74 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>($stack73);

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/reflect/ConstructorUtilsTest$TestBean;", $stack72, $stack74);

        return;
    }

    public void testNullArgument()
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Class[] $stack2, $stack3;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        $stack2 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(null);

        $stack3 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.Class[] singletonArray(java.lang.Class)>(class "Ljava/lang/Object;");

        specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class,java.lang.Class[],java.lang.Class[])>(class "Lorg/apache/commons/lang3/mutable/MutableObject;", $stack2, $stack3);

        return;
    }

    private void expectMatchingAccessibleConstructorParameterTypes(java.lang.Class, java.lang.Class[], java.lang.Class[])
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.lang.Class[] requestTypes, $stack7, actualTypes, $stack14;
        java.lang.reflect.Constructor $stack5;
        java.lang.Class 'cls';
        java.lang.StringBuilder $stack6, $stack9, $stack10, $stack12;
        java.lang.String $stack8, $stack11, $stack13;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        'cls' := @parameter0: java.lang.Class;

        requestTypes := @parameter1: java.lang.Class[];

        actualTypes := @parameter2: java.lang.Class[];

        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.ConstructorUtils: java.lang.reflect.Constructor getMatchingAccessibleConstructor(java.lang.Class,java.lang.Class[])>('cls', requestTypes);

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $stack8 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.String toString(java.lang.Class[])>($stack7);

        $stack9 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not equals ");

        $stack11 = specialinvoke this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.lang.String toString(java.lang.Class[])>(actualTypes);

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack14 = virtualinvoke $stack5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $stack15 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(actualTypes, $stack14);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($stack13, $stack15);

        return;
    }

    private java.lang.String toString(java.lang.Class[])
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.util.List $stack2;
        java.lang.Class[] c;
        java.lang.String $stack3;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        c := @parameter0: java.lang.Class[];

        $stack2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(c);

        $stack3 = virtualinvoke $stack2.<java.lang.Object: java.lang.String toString()>();

        return $stack3;
    }

    private java.lang.Class[] singletonArray(java.lang.Class)
    {
        org.apache.commons.lang3.reflect.ConstructorUtilsTest this;
        java.util.Map $stack3, $stack6;
        java.lang.Class[] $stack5, result;
        java.lang.Class c;
        java.lang.Object $stack4;

        this := @this: org.apache.commons.lang3.reflect.ConstructorUtilsTest;

        c := @parameter0: java.lang.Class;

        $stack3 = this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.util.Map classCache>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.lang.Object get(java.lang.Object)>(c);

        result = (java.lang.Class[]) $stack4;

        if result != null goto label1;

        $stack5 = newarray (java.lang.Class)[1];

        $stack5[0] = c;

        result = $stack5;

        $stack6 = this.<org.apache.commons.lang3.reflect.ConstructorUtilsTest: java.util.Map classCache>;

        interfaceinvoke $stack6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(c, $stack5);

     label1:
        return result;
    }
}
