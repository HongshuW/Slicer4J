public class org.apache.commons.lang3.time.FastDateParser extends java.lang.Object implements org.apache.commons.lang3.time.DateParser, java.io.Serializable
{
    private static final long serialVersionUID;
    static final java.util.Locale JAPANESE_IMPERIAL;
    private final java.lang.String pattern;
    private final java.util.TimeZone timeZone;
    private final java.util.Locale locale;
    private transient java.util.regex.Pattern parsePattern;
    private transient org.apache.commons.lang3.time.FastDateParser$Strategy[] strategies;
    private transient int thisYear;
    private transient java.lang.String currentFormatField;
    private transient org.apache.commons.lang3.time.FastDateParser$Strategy nextStrategy;
    private static final java.util.regex.Pattern formatPattern;
    private static java.util.concurrent.ConcurrentMap[] caches;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy ABBREVIATED_YEAR_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy NUMBER_MONTH_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy LITERAL_YEAR_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy WEEK_OF_YEAR_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy WEEK_OF_MONTH_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_YEAR_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_MONTH_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy HOUR_OF_DAY_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy MODULO_HOUR_OF_DAY_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy MODULO_HOUR_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy HOUR_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy MINUTE_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy SECOND_STRATEGY;
    private static final org.apache.commons.lang3.time.FastDateParser$Strategy MILLISECOND_STRATEGY;

    protected void <init>(java.lang.String, java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone timeZone;
        java.util.Locale locale;
        org.apache.commons.lang3.time.FastDateParser this;
        java.lang.String pattern;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        pattern := @parameter0: java.lang.String;

        timeZone := @parameter1: java.util.TimeZone;

        locale := @parameter2: java.util.Locale;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern> = pattern;

        this.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone> = timeZone;

        this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale> = locale;

        specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: void init()>();

        return;
    }

    private void init()
    {
        java.util.regex.Matcher $stack15;
        java.util.Locale $stack7;
        boolean $stack16, $stack23, $stack26, $stack38;
        java.util.TimeZone $stack8;
        java.lang.StringBuilder $stack11, $stack54, $stack55, $stack57, $stack58, $stack60, $stack63, $stack64, $stack68, $stack69;
        java.util.regex.Pattern $stack14, $stack44;
        java.lang.Object[] $stack41;
        java.util.ArrayList $stack12;
        java.util.Calendar $stack9;
        int $stack10, $stack20, $stack21, $stack36, $stack37, $stack39, $stack59, $stack66;
        java.lang.String $stack13, $stack17, $stack18, $stack24, $stack43, $stack56, $stack61, $stack65, $stack70;
        org.apache.commons.lang3.time.FastDateParser$Strategy $stack25, currentStrategy;
        char $stack67;
        java.lang.IllegalArgumentException $stack53, $stack62;
        org.apache.commons.lang3.time.FastDateParser$Strategy[] $stack40, $stack42;
        org.apache.commons.lang3.time.FastDateParser this;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack8 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone>;

        $stack7 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($stack8, $stack7);

        $stack10 = virtualinvoke $stack9.<java.util.Calendar: int get(int)>(1);

        this.<org.apache.commons.lang3.time.FastDateParser: int thisYear> = $stack10;

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = new java.util.ArrayList;

        specialinvoke $stack12.<java.util.ArrayList: void <init>()>();

        $stack14 = <org.apache.commons.lang3.time.FastDateParser: java.util.regex.Pattern formatPattern>;

        $stack13 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        $stack15 = virtualinvoke $stack14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack13);

        $stack16 = virtualinvoke $stack15.<java.util.regex.Matcher: boolean lookingAt()>();

        if $stack16 != 0 goto label1;

        $stack62 = new java.lang.IllegalArgumentException;

        $stack63 = new java.lang.StringBuilder;

        specialinvoke $stack63.<java.lang.StringBuilder: void <init>()>();

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal pattern character \'");

        $stack65 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        $stack66 = virtualinvoke $stack15.<java.util.regex.Matcher: int regionStart()>();

        $stack67 = virtualinvoke $stack65.<java.lang.String: char charAt(int)>($stack66);

        $stack68 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack67);

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack62.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack70);

        throw $stack62;

     label1:
        $stack17 = virtualinvoke $stack15.<java.util.regex.Matcher: java.lang.String group()>();

        this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String currentFormatField> = $stack17;

        $stack18 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String currentFormatField>;

        currentStrategy = specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy getStrategy(java.lang.String,java.util.Calendar)>($stack18, $stack9);

     label2:
        $stack20 = virtualinvoke $stack15.<java.util.regex.Matcher: int end()>();

        $stack21 = virtualinvoke $stack15.<java.util.regex.Matcher: int regionEnd()>();

        virtualinvoke $stack15.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>($stack20, $stack21);

        $stack23 = virtualinvoke $stack15.<java.util.regex.Matcher: boolean lookingAt()>();

        if $stack23 != 0 goto label3;

        this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy nextStrategy> = null;

        goto label5;

     label3:
        $stack24 = virtualinvoke $stack15.<java.util.regex.Matcher: java.lang.String group()>();

        $stack25 = specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy getStrategy(java.lang.String,java.util.Calendar)>($stack24, $stack9);

        this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy nextStrategy> = $stack25;

        $stack26 = interfaceinvoke currentStrategy.<org.apache.commons.lang3.time.FastDateParser$Strategy: boolean addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)>(this, $stack11);

        if $stack26 == 0 goto label4;

        interfaceinvoke $stack12.<java.util.List: boolean add(java.lang.Object)>(currentStrategy);

     label4:
        this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String currentFormatField> = $stack24;

        currentStrategy = this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy nextStrategy>;

        goto label2;

     label5:
        $stack36 = virtualinvoke $stack15.<java.util.regex.Matcher: int regionStart()>();

        $stack37 = virtualinvoke $stack15.<java.util.regex.Matcher: int regionEnd()>();

        if $stack36 == $stack37 goto label6;

        $stack53 = new java.lang.IllegalArgumentException;

        $stack54 = new java.lang.StringBuilder;

        specialinvoke $stack54.<java.lang.StringBuilder: void <init>()>();

        $stack55 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse \"");

        $stack56 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        $stack57 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack56);

        $stack58 = virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ; gave up at index ");

        $stack59 = virtualinvoke $stack15.<java.util.regex.Matcher: int regionStart()>();

        $stack60 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack59);

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack61);

        throw $stack53;

     label6:
        $stack38 = interfaceinvoke currentStrategy.<org.apache.commons.lang3.time.FastDateParser$Strategy: boolean addRegex(org.apache.commons.lang3.time.FastDateParser,java.lang.StringBuilder)>(this, $stack11);

        if $stack38 == 0 goto label7;

        interfaceinvoke $stack12.<java.util.List: boolean add(java.lang.Object)>(currentStrategy);

     label7:
        this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String currentFormatField> = null;

        $stack39 = interfaceinvoke $stack12.<java.util.List: int size()>();

        $stack40 = newarray (org.apache.commons.lang3.time.FastDateParser$Strategy)[$stack39];

        $stack41 = interfaceinvoke $stack12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack40);

        $stack42 = (org.apache.commons.lang3.time.FastDateParser$Strategy[]) $stack41;

        this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy[] strategies> = $stack42;

        $stack43 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack44 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($stack43);

        this.<org.apache.commons.lang3.time.FastDateParser: java.util.regex.Pattern parsePattern> = $stack44;

        return;
    }

    public java.lang.String getPattern()
    {
        org.apache.commons.lang3.time.FastDateParser this;
        java.lang.String $stack1;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        return $stack1;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.apache.commons.lang3.time.FastDateParser this;
        java.util.TimeZone $stack1;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone>;

        return $stack1;
    }

    public java.util.Locale getLocale()
    {
        org.apache.commons.lang3.time.FastDateParser this;
        java.util.Locale $stack1;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        return $stack1;
    }

    java.util.regex.Pattern getParsePattern()
    {
        org.apache.commons.lang3.time.FastDateParser this;
        java.util.regex.Pattern $stack1;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.regex.Pattern parsePattern>;

        return $stack1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.TimeZone $stack7, $stack8;
        java.util.Locale $stack11, $stack12;
        java.lang.Object obj;
        org.apache.commons.lang3.time.FastDateParser other, this;
        java.lang.String $stack4, $stack5;
        boolean $stack3, $stack6, $stack9, $stack13, $stack10;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        obj := @parameter0: java.lang.Object;

        $stack3 = obj instanceof org.apache.commons.lang3.time.FastDateParser;

        if $stack3 != 0 goto label1;

        return 0;

     label1:
        other = (org.apache.commons.lang3.time.FastDateParser) obj;

        $stack5 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        $stack4 = other.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        $stack6 = virtualinvoke $stack5.<java.lang.String: boolean equals(java.lang.Object)>($stack4);

        if $stack6 == 0 goto label2;

        $stack8 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone>;

        $stack7 = other.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone>;

        $stack9 = virtualinvoke $stack8.<java.lang.Object: boolean equals(java.lang.Object)>($stack7);

        if $stack9 == 0 goto label2;

        $stack12 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack11 = other.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack13 = virtualinvoke $stack12.<java.util.Locale: boolean equals(java.lang.Object)>($stack11);

        if $stack13 == 0 goto label2;

        $stack10 = 1;

        goto label3;

     label2:
        $stack10 = 0;

     label3:
        return $stack10;
    }

    public int hashCode()
    {
        java.util.TimeZone $stack3;
        java.util.Locale $stack6;
        int $stack2, $stack5, $stack8, $stack9, $stack10, $stack11, $stack12;
        org.apache.commons.lang3.time.FastDateParser this;
        java.lang.String $stack1;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        $stack2 = virtualinvoke $stack1.<java.lang.String: int hashCode()>();

        $stack3 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone>;

        $stack5 = virtualinvoke $stack3.<java.lang.Object: int hashCode()>();

        $stack6 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack8 = virtualinvoke $stack6.<java.util.Locale: int hashCode()>();

        $stack9 = 13 * $stack8;

        $stack10 = $stack5 + $stack9;

        $stack11 = 13 * $stack10;

        $stack12 = $stack2 + $stack11;

        return $stack12;
    }

    public java.lang.String toString()
    {
        java.util.TimeZone $stack9;
        java.util.Locale $stack6;
        java.lang.StringBuilder $stack1, $stack2, $stack4, $stack5, $stack7, $stack8, $stack11, $stack12;
        org.apache.commons.lang3.time.FastDateParser this;
        java.lang.String $stack3, $stack10, $stack13;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FastDateParser[");

        $stack3 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String pattern>;

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack6 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack9 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone>;

        $stack10 = virtualinvoke $stack9.<java.util.TimeZone: java.lang.String getID()>();

        $stack11 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack13;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream in;
        org.apache.commons.lang3.time.FastDateParser this;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        in := @parameter0: java.io.ObjectInputStream;

        virtualinvoke in.<java.io.ObjectInputStream: void defaultReadObject()>();

        specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: void init()>();

        return;
    }

    public java.lang.Object parseObject(java.lang.String) throws java.text.ParseException
    {
        org.apache.commons.lang3.time.FastDateParser this;
        java.lang.String source;
        java.util.Date $stack2;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        source := @parameter0: java.lang.String;

        $stack2 = virtualinvoke this.<org.apache.commons.lang3.time.FastDateParser: java.util.Date parse(java.lang.String)>(source);

        return $stack2;
    }

    public java.util.Date parse(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $stack4;
        java.text.ParsePosition $stack3;
        java.util.Locale $stack5, $stack6, $stack20;
        java.lang.String source, $stack14, $stack16, $stack27, $stack29;
        java.text.ParseException $stack8, $stack17;
        boolean $stack7;
        java.lang.StringBuilder $stack9, $stack10, $stack11, $stack12, $stack15, $stack18, $stack19, $stack21, $stack22, $stack23, $stack24, $stack25, $stack28;
        org.apache.commons.lang3.time.FastDateParser this;
        java.util.regex.Pattern $stack13, $stack26;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        source := @parameter0: java.lang.String;

        $stack3 = new java.text.ParsePosition;

        specialinvoke $stack3.<java.text.ParsePosition: void <init>(int)>(0);

        $stack4 = virtualinvoke this.<org.apache.commons.lang3.time.FastDateParser: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(source, $stack3);

        if $stack4 != null goto label2;

        $stack6 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack5 = <org.apache.commons.lang3.time.FastDateParser: java.util.Locale JAPANESE_IMPERIAL>;

        $stack7 = virtualinvoke $stack6.<java.util.Locale: boolean equals(java.lang.Object)>($stack5);

        if $stack7 == 0 goto label1;

        $stack17 = new java.text.ParseException;

        $stack18 = new java.lang.StringBuilder;

        specialinvoke $stack18.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(The ");

        $stack20 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" locale does not support dates before 1868 AD)\n");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unparseable date: \"");

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(source);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" does not match ");

        $stack26 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.regex.Pattern parsePattern>;

        $stack27 = virtualinvoke $stack26.<java.util.regex.Pattern: java.lang.String pattern()>();

        $stack28 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack27);

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack17.<java.text.ParseException: void <init>(java.lang.String,int)>($stack29, 0);

        throw $stack17;

     label1:
        $stack8 = new java.text.ParseException;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unparseable date: \"");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(source);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" does not match ");

        $stack13 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.regex.Pattern parsePattern>;

        $stack14 = virtualinvoke $stack13.<java.util.regex.Pattern: java.lang.String pattern()>();

        $stack15 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack8.<java.text.ParseException: void <init>(java.lang.String,int)>($stack16, 0);

        throw $stack8;

     label2:
        return $stack4;
    }

    public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)
    {
        java.util.Date $stack3;
        java.text.ParsePosition pos;
        org.apache.commons.lang3.time.FastDateParser this;
        java.lang.String source;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        source := @parameter0: java.lang.String;

        pos := @parameter1: java.text.ParsePosition;

        $stack3 = virtualinvoke this.<org.apache.commons.lang3.time.FastDateParser: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(source, pos);

        return $stack3;
    }

    public java.util.Date parse(java.lang.String, java.text.ParsePosition)
    {
        java.util.Date $stack20;
        java.text.ParsePosition pos;
        java.util.regex.Matcher $stack11;
        java.util.Calendar $stack15;
        java.util.Locale $stack13;
        int $stack8, $stack17, $stack18, $stack19, $stack21, i;
        java.lang.String source, $stack10, $stack23;
        boolean $stack12;
        org.apache.commons.lang3.time.FastDateParser$Strategy strategy;
        java.util.TimeZone $stack14;
        org.apache.commons.lang3.time.FastDateParser$Strategy[] $stack16, $stack22;
        org.apache.commons.lang3.time.FastDateParser this;
        java.util.regex.Pattern $stack9;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        source := @parameter0: java.lang.String;

        pos := @parameter1: java.text.ParsePosition;

        $stack8 = virtualinvoke pos.<java.text.ParsePosition: int getIndex()>();

        $stack9 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.regex.Pattern parsePattern>;

        $stack10 = virtualinvoke source.<java.lang.String: java.lang.String substring(int)>($stack8);

        $stack11 = virtualinvoke $stack9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.util.regex.Matcher: boolean lookingAt()>();

        if $stack12 != 0 goto label1;

        return null;

     label1:
        $stack14 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.TimeZone timeZone>;

        $stack13 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack15 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($stack14, $stack13);

        virtualinvoke $stack15.<java.util.Calendar: void clear()>();

        i = 0;

     label2:
        $stack16 = this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy[] strategies>;

        $stack17 = lengthof $stack16;

        if i >= $stack17 goto label3;

        $stack22 = this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy[] strategies>;

        $stack21 = i;

        i = i + 1;

        strategy = $stack22[$stack21];

        $stack23 = virtualinvoke $stack11.<java.util.regex.Matcher: java.lang.String group(int)>(i);

        interfaceinvoke strategy.<org.apache.commons.lang3.time.FastDateParser$Strategy: void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)>(this, $stack15, $stack23);

        goto label2;

     label3:
        $stack18 = virtualinvoke $stack11.<java.util.regex.Matcher: int end()>();

        $stack19 = $stack8 + $stack18;

        virtualinvoke pos.<java.text.ParsePosition: void setIndex(int)>($stack19);

        $stack20 = virtualinvoke $stack15.<java.util.Calendar: java.util.Date getTime()>();

        return $stack20;
    }

    private static java.lang.StringBuilder escapeRegex(java.lang.StringBuilder, java.lang.String, boolean)
    {
        char $stack8, $stack11, c;
        int $stack6, $stack9, $stack18, i, $i0, $i1;
        java.lang.StringBuilder regex;
        java.lang.String value;
        boolean unquote;

        regex := @parameter0: java.lang.StringBuilder;

        value := @parameter1: java.lang.String;

        unquote := @parameter2: boolean;

        virtualinvoke regex.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\Q");

        i = 0;

     label1:
        $stack6 = virtualinvoke value.<java.lang.String: int length()>();

        if i >= $stack6 goto label7;

        $stack8 = virtualinvoke value.<java.lang.String: char charAt(int)>(i);

        c = $stack8;

        $i0 = (int) $stack8;

        lookupswitch($i0)
        {
            case 39: goto label2;
            case 92: goto label4;
            default: goto label6;
        };

     label2:
        if unquote == 0 goto label6;

        i = i + 1;

        $stack18 = virtualinvoke value.<java.lang.String: int length()>();

        if i != $stack18 goto label3;

        return regex;

     label3:
        c = virtualinvoke value.<java.lang.String: char charAt(int)>(i);

        goto label6;

     label4:
        i = i + 1;

        $stack9 = virtualinvoke value.<java.lang.String: int length()>();

        if i != $stack9 goto label5;

        goto label6;

     label5:
        virtualinvoke regex.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack8);

        $stack11 = virtualinvoke value.<java.lang.String: char charAt(int)>(i);

        c = $stack11;

        $i1 = (int) $stack11;

        if $i1 != 69 goto label6;

        virtualinvoke regex.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("E\\\\E\\");

        c = 81;

     label6:
        virtualinvoke regex.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c);

        i = i + 1;

        goto label1;

     label7:
        virtualinvoke regex.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E");

        return regex;
    }

    private static java.util.Map getDisplayNames(int, java.util.Calendar, java.util.Locale)
    {
        java.util.Calendar definingCalendar;
        java.util.Locale locale;
        java.util.Map $stack3;
        int field;

        field := @parameter0: int;

        definingCalendar := @parameter1: java.util.Calendar;

        locale := @parameter2: java.util.Locale;

        $stack3 = virtualinvoke definingCalendar.<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>(field, 0, locale);

        return $stack3;
    }

    int adjustYear(int)
    {
        int twoDigitYear, $stack3, $stack4, $stack5, $stack6, trial, $stack7, $stack8, $stack9;
        org.apache.commons.lang3.time.FastDateParser this;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        twoDigitYear := @parameter0: int;

        $stack3 = this.<org.apache.commons.lang3.time.FastDateParser: int thisYear>;

        $stack6 = twoDigitYear + $stack3;

        $stack4 = this.<org.apache.commons.lang3.time.FastDateParser: int thisYear>;

        $stack5 = $stack4 % 100;

        trial = $stack6 - $stack5;

        $stack7 = this.<org.apache.commons.lang3.time.FastDateParser: int thisYear>;

        $stack8 = $stack7 + 20;

        if trial >= $stack8 goto label1;

        return trial;

     label1:
        $stack9 = trial - 100;

        return $stack9;
    }

    boolean isNextNumber()
    {
        org.apache.commons.lang3.time.FastDateParser$Strategy $stack1, $stack2;
        org.apache.commons.lang3.time.FastDateParser this;
        boolean $stack3, $stack4;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy nextStrategy>;

        if $stack1 == null goto label1;

        $stack2 = this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy nextStrategy>;

        $stack3 = interfaceinvoke $stack2.<org.apache.commons.lang3.time.FastDateParser$Strategy: boolean isNumber()>();

        if $stack3 == 0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    int getFieldWidth()
    {
        int $stack2;
        org.apache.commons.lang3.time.FastDateParser this;
        java.lang.String $stack1;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        $stack1 = this.<org.apache.commons.lang3.time.FastDateParser: java.lang.String currentFormatField>;

        $stack2 = virtualinvoke $stack1.<java.lang.String: int length()>();

        return $stack2;
    }

    private org.apache.commons.lang3.time.FastDateParser$Strategy getStrategy(java.lang.String, java.util.Calendar)
    {
        org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy $u0;
        java.util.Calendar definingCalendar;
        int $stack4, $stack16, $stack25, $stack28, $stack29, $i0;
        java.lang.String formatField;
        org.apache.commons.lang3.time.FastDateParser$Strategy $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack17, $stack5;
        char $stack3;
        org.apache.commons.lang3.time.FastDateParser this;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        formatField := @parameter0: java.lang.String;

        definingCalendar := @parameter1: java.util.Calendar;

        $stack3 = virtualinvoke formatField.<java.lang.String: char charAt(int)>(0);

        $i0 = (int) $stack3;

        tableswitch($i0)
        {
            case 39: goto label01;
            case 40: goto label02;
            case 41: goto label02;
            case 42: goto label02;
            case 43: goto label02;
            case 44: goto label02;
            case 45: goto label02;
            case 46: goto label02;
            case 47: goto label02;
            case 48: goto label02;
            case 49: goto label02;
            case 50: goto label02;
            case 51: goto label02;
            case 52: goto label02;
            case 53: goto label02;
            case 54: goto label02;
            case 55: goto label02;
            case 56: goto label02;
            case 57: goto label02;
            case 58: goto label02;
            case 59: goto label02;
            case 60: goto label02;
            case 61: goto label02;
            case 62: goto label02;
            case 63: goto label02;
            case 64: goto label02;
            case 65: goto label02;
            case 66: goto label02;
            case 67: goto label02;
            case 68: goto label03;
            case 69: goto label04;
            case 70: goto label05;
            case 71: goto label06;
            case 72: goto label07;
            case 73: goto label02;
            case 74: goto label02;
            case 75: goto label08;
            case 76: goto label02;
            case 77: goto label09;
            case 78: goto label02;
            case 79: goto label02;
            case 80: goto label02;
            case 81: goto label02;
            case 82: goto label02;
            case 83: goto label12;
            case 84: goto label02;
            case 85: goto label02;
            case 86: goto label02;
            case 87: goto label13;
            case 88: goto label02;
            case 89: goto label02;
            case 90: goto label24;
            case 91: goto label02;
            case 92: goto label02;
            case 93: goto label02;
            case 94: goto label02;
            case 95: goto label02;
            case 96: goto label02;
            case 97: goto label14;
            case 98: goto label02;
            case 99: goto label02;
            case 100: goto label15;
            case 101: goto label02;
            case 102: goto label02;
            case 103: goto label02;
            case 104: goto label16;
            case 105: goto label02;
            case 106: goto label02;
            case 107: goto label17;
            case 108: goto label02;
            case 109: goto label18;
            case 110: goto label02;
            case 111: goto label02;
            case 112: goto label02;
            case 113: goto label02;
            case 114: goto label02;
            case 115: goto label19;
            case 116: goto label02;
            case 117: goto label02;
            case 118: goto label02;
            case 119: goto label20;
            case 120: goto label02;
            case 121: goto label21;
            case 122: goto label24;
            default: goto label02;
        };

     label01:
        $stack25 = virtualinvoke formatField.<java.lang.String: int length()>();

        if $stack25 <= 2 goto label02;

        $stack28 = virtualinvoke formatField.<java.lang.String: int length()>();

        $stack29 = $stack28 - 1;

        formatField = virtualinvoke formatField.<java.lang.String: java.lang.String substring(int,int)>(1, $stack29);

     label02:
        $u0 = new org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy;

        specialinvoke $u0.<org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy: void <init>(java.lang.String)>(formatField);

        return $u0;

     label03:
        $stack24 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_YEAR_STRATEGY>;

        return $stack24;

     label04:
        $stack23 = specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)>(7, definingCalendar);

        return $stack23;

     label05:
        $stack22 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY>;

        return $stack22;

     label06:
        $stack21 = specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)>(0, definingCalendar);

        return $stack21;

     label07:
        $stack20 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MODULO_HOUR_OF_DAY_STRATEGY>;

        return $stack20;

     label08:
        $stack19 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy HOUR_STRATEGY>;

        return $stack19;

     label09:
        $stack16 = virtualinvoke formatField.<java.lang.String: int length()>();

        if $stack16 < 3 goto label10;

        $stack17 = specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)>(2, definingCalendar);

        goto label11;

     label10:
        $stack17 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy NUMBER_MONTH_STRATEGY>;

     label11:
        return $stack17;

     label12:
        $stack15 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MILLISECOND_STRATEGY>;

        return $stack15;

     label13:
        $stack14 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy WEEK_OF_MONTH_STRATEGY>;

        return $stack14;

     label14:
        $stack12 = specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)>(9, definingCalendar);

        return $stack12;

     label15:
        $stack11 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_MONTH_STRATEGY>;

        return $stack11;

     label16:
        $stack10 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MODULO_HOUR_STRATEGY>;

        return $stack10;

     label17:
        $stack9 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy HOUR_OF_DAY_STRATEGY>;

        return $stack9;

     label18:
        $stack8 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MINUTE_STRATEGY>;

        return $stack8;

     label19:
        $stack7 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy SECOND_STRATEGY>;

        return $stack7;

     label20:
        $stack6 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy WEEK_OF_YEAR_STRATEGY>;

        return $stack6;

     label21:
        $stack4 = virtualinvoke formatField.<java.lang.String: int length()>();

        if $stack4 <= 2 goto label22;

        $stack5 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy LITERAL_YEAR_STRATEGY>;

        goto label23;

     label22:
        $stack5 = <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy ABBREVIATED_YEAR_STRATEGY>;

     label23:
        return $stack5;

     label24:
        $stack13 = specialinvoke this.<org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int,java.util.Calendar)>(15, definingCalendar);

        return $stack13;
    }

    private static java.util.concurrent.ConcurrentMap getCache(int)
    {
        java.util.concurrent.ConcurrentMap[] $stack3, $stack4, $stack6, $stack10;
        java.lang.Throwable $stack12;
        java.util.concurrent.ConcurrentHashMap $stack9;
        java.util.concurrent.ConcurrentMap $stack5, $stack8;
        int field;

        field := @parameter0: int;

        $stack3 = <org.apache.commons.lang3.time.FastDateParser: java.util.concurrent.ConcurrentMap[] caches>;

        entermonitor $stack3;

     label1:
        $stack4 = <org.apache.commons.lang3.time.FastDateParser: java.util.concurrent.ConcurrentMap[] caches>;

        $stack5 = $stack4[field];

        if $stack5 != null goto label2;

        $stack10 = <org.apache.commons.lang3.time.FastDateParser: java.util.concurrent.ConcurrentMap[] caches>;

        $stack9 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $stack9.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(3);

        $stack10[field] = $stack9;

     label2:
        $stack6 = <org.apache.commons.lang3.time.FastDateParser: java.util.concurrent.ConcurrentMap[] caches>;

        $stack8 = $stack6[field];

        exitmonitor $stack3;

     label3:
        return $stack8;

     label4:
        $stack12 := @caughtexception;

        exitmonitor $stack3;

     label5:
        throw $stack12;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private org.apache.commons.lang3.time.FastDateParser$Strategy getLocaleSpecificStrategy(int, java.util.Calendar)
    {
        org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy $u0;
        org.apache.commons.lang3.time.FastDateParser$Strategy $stack19, strategy, $stack9;
        org.apache.commons.lang3.time.FastDateParser$TextStrategy $u1;
        java.lang.Integer $stack7;
        java.util.concurrent.ConcurrentMap $stack6;
        java.util.Calendar definingCalendar;
        java.util.Locale $stack10, $stack11, $stack15;
        int field;
        java.lang.Object $stack8, $stack12;
        org.apache.commons.lang3.time.FastDateParser this;

        this := @this: org.apache.commons.lang3.time.FastDateParser;

        field := @parameter0: int;

        definingCalendar := @parameter1: java.util.Calendar;

        $stack6 = staticinvoke <org.apache.commons.lang3.time.FastDateParser: java.util.concurrent.ConcurrentMap getCache(int)>(field);

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(field);

        $stack8 = interfaceinvoke $stack6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($stack7);

        strategy = (org.apache.commons.lang3.time.FastDateParser$Strategy) $stack8;

        if strategy != null goto label3;

        if field != 15 goto label1;

        $u0 = new org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy;

        $stack9 = $u0;

        $stack15 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        specialinvoke $u0.<org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy: void <init>(java.util.Locale)>($stack15);

        goto label2;

     label1:
        $u1 = new org.apache.commons.lang3.time.FastDateParser$TextStrategy;

        $stack9 = $u1;

        $stack10 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        specialinvoke $u1.<org.apache.commons.lang3.time.FastDateParser$TextStrategy: void <init>(int,java.util.Calendar,java.util.Locale)>(field, definingCalendar, $stack10);

     label2:
        strategy = $stack9;

        $stack11 = this.<org.apache.commons.lang3.time.FastDateParser: java.util.Locale locale>;

        $stack12 = interfaceinvoke $stack6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($stack11, $stack9);

        $stack19 = (org.apache.commons.lang3.time.FastDateParser$Strategy) $stack12;

        if $stack19 == null goto label3;

        return $stack19;

     label3:
        return strategy;
    }

    static java.lang.StringBuilder access$000(java.lang.StringBuilder, java.lang.String, boolean)
    {
        java.lang.StringBuilder x0, $stack3;
        java.lang.String x1;
        boolean x2;

        x0 := @parameter0: java.lang.StringBuilder;

        x1 := @parameter1: java.lang.String;

        x2 := @parameter2: boolean;

        $stack3 = staticinvoke <org.apache.commons.lang3.time.FastDateParser: java.lang.StringBuilder escapeRegex(java.lang.StringBuilder,java.lang.String,boolean)>(x0, x1, x2);

        return $stack3;
    }

    static java.util.Map access$100(int, java.util.Calendar, java.util.Locale)
    {
        java.util.Calendar x1;
        java.util.Locale x2;
        java.util.Map $stack3;
        int x0;

        x0 := @parameter0: int;

        x1 := @parameter1: java.util.Calendar;

        x2 := @parameter2: java.util.Locale;

        $stack3 = staticinvoke <org.apache.commons.lang3.time.FastDateParser: java.util.Map getDisplayNames(int,java.util.Calendar,java.util.Locale)>(x0, x1, x2);

        return $stack3;
    }

    static void <clinit>()
    {
        org.apache.commons.lang3.time.FastDateParser$4 $stack13;
        org.apache.commons.lang3.time.FastDateParser$3 $stack12;
        org.apache.commons.lang3.time.FastDateParser$2 $stack4;
        org.apache.commons.lang3.time.FastDateParser$1 $stack3;
        org.apache.commons.lang3.time.FastDateParser$NumberStrategy $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack14, $stack15, $stack16, $stack17;
        java.util.Locale $stack0;
        java.util.concurrent.ConcurrentMap[] $stack2;
        java.util.regex.Pattern $stack1;

        <org.apache.commons.lang3.time.FastDateParser: long serialVersionUID> = 1L;

        $stack0 = new java.util.Locale;

        specialinvoke $stack0.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "JP");

        <org.apache.commons.lang3.time.FastDateParser: java.util.Locale JAPANESE_IMPERIAL> = $stack0;

        $stack1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|\'\'|\'[^\']++(\'\'[^\']*+)*+\'|[^\'A-Za-z]++");

        <org.apache.commons.lang3.time.FastDateParser: java.util.regex.Pattern formatPattern> = $stack1;

        $stack2 = newarray (java.util.concurrent.ConcurrentMap)[17];

        <org.apache.commons.lang3.time.FastDateParser: java.util.concurrent.ConcurrentMap[] caches> = $stack2;

        $stack3 = new org.apache.commons.lang3.time.FastDateParser$1;

        specialinvoke $stack3.<org.apache.commons.lang3.time.FastDateParser$1: void <init>(int)>(1);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy ABBREVIATED_YEAR_STRATEGY> = $stack3;

        $stack4 = new org.apache.commons.lang3.time.FastDateParser$2;

        specialinvoke $stack4.<org.apache.commons.lang3.time.FastDateParser$2: void <init>(int)>(2);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy NUMBER_MONTH_STRATEGY> = $stack4;

        $stack5 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack5.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(1);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy LITERAL_YEAR_STRATEGY> = $stack5;

        $stack6 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack6.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(3);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy WEEK_OF_YEAR_STRATEGY> = $stack6;

        $stack7 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack7.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(4);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy WEEK_OF_MONTH_STRATEGY> = $stack7;

        $stack8 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack8.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(6);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_YEAR_STRATEGY> = $stack8;

        $stack9 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack9.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(5);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_MONTH_STRATEGY> = $stack9;

        $stack10 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack10.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(8);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY> = $stack10;

        $stack11 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack11.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(11);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy HOUR_OF_DAY_STRATEGY> = $stack11;

        $stack12 = new org.apache.commons.lang3.time.FastDateParser$3;

        specialinvoke $stack12.<org.apache.commons.lang3.time.FastDateParser$3: void <init>(int)>(11);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MODULO_HOUR_OF_DAY_STRATEGY> = $stack12;

        $stack13 = new org.apache.commons.lang3.time.FastDateParser$4;

        specialinvoke $stack13.<org.apache.commons.lang3.time.FastDateParser$4: void <init>(int)>(10);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MODULO_HOUR_STRATEGY> = $stack13;

        $stack14 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack14.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(10);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy HOUR_STRATEGY> = $stack14;

        $stack15 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack15.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(12);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MINUTE_STRATEGY> = $stack15;

        $stack16 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack16.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(13);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy SECOND_STRATEGY> = $stack16;

        $stack17 = new org.apache.commons.lang3.time.FastDateParser$NumberStrategy;

        specialinvoke $stack17.<org.apache.commons.lang3.time.FastDateParser$NumberStrategy: void <init>(int)>(14);

        <org.apache.commons.lang3.time.FastDateParser: org.apache.commons.lang3.time.FastDateParser$Strategy MILLISECOND_STRATEGY> = $stack17;

        return;
    }
}
