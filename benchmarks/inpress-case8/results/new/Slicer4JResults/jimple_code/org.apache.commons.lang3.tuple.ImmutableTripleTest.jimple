public class org.apache.commons.lang3.tuple.ImmutableTripleTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.tuple.ImmutableTripleTest this;

        this := @this: org.apache.commons.lang3.tuple.ImmutableTripleTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testBasic() throws java.lang.Exception
    {
        long $stack10, $stack15;
        java.lang.Integer $stack4, $stack7, $stack13, $stack26, $stack32, $stack34;
        int $stack9, $stack14;
        java.lang.Boolean $stack5, $stack20, $stack21;
        org.apache.commons.lang3.tuple.ImmutableTriple $stack3, $stack23;
        org.apache.commons.lang3.tuple.ImmutableTripleTest this;
        java.lang.Object $stack6, $stack12, $stack16, $stack18, $stack19, $stack22, $stack27, $stack28, $stack29, $stack31, $stack33, $stack35;

        this := @this: org.apache.commons.lang3.tuple.ImmutableTripleTest;

        $stack3 = new org.apache.commons.lang3.tuple.ImmutableTriple;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $stack3.<org.apache.commons.lang3.tuple.ImmutableTriple: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($stack4, "foo", $stack5);

        $stack6 = $stack3.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object left>;

        $stack7 = (java.lang.Integer) $stack6;

        $stack9 = virtualinvoke $stack7.<java.lang.Integer: int intValue()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack10);

        $stack12 = virtualinvoke $stack3.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getLeft()>();

        $stack13 = (java.lang.Integer) $stack12;

        $stack14 = virtualinvoke $stack13.<java.lang.Integer: int intValue()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack16 = $stack3.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object middle>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack16);

        $stack18 = virtualinvoke $stack3.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getMiddle()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack18);

        $stack20 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack19 = $stack3.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack20, $stack19);

        $stack21 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack22 = virtualinvoke $stack3.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack21, $stack22);

        $stack23 = new org.apache.commons.lang3.tuple.ImmutableTriple;

        $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        specialinvoke $stack23.<org.apache.commons.lang3.tuple.ImmutableTriple: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "bar", $stack26);

        $stack27 = $stack23.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object left>;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $stack23.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getLeft()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack28);

        $stack29 = $stack23.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object middle>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack29);

        $stack31 = virtualinvoke $stack23.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getMiddle()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack31);

        $stack32 = new java.lang.Integer;

        specialinvoke $stack32.<java.lang.Integer: void <init>(int)>(42);

        $stack33 = $stack23.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack32, $stack33);

        $stack34 = new java.lang.Integer;

        specialinvoke $stack34.<java.lang.Integer: void <init>(int)>(42);

        $stack35 = virtualinvoke $stack23.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack35);

        return;
    }

    public void testTripleOf() throws java.lang.Exception
    {
        long $stack10, $stack15;
        java.lang.Integer $stack3, $stack7, $stack13;
        int $stack9, $stack14;
        java.lang.Boolean $stack4, $stack20, $stack21, $stack23, $stack31, $stack32;
        org.apache.commons.lang3.tuple.ImmutableTriple $stack5, $stack24;
        org.apache.commons.lang3.tuple.ImmutableTripleTest this;
        java.lang.Object $stack6, $stack12, $stack16, $stack18, $stack19, $stack22, $stack25, $stack26, $stack27, $stack29, $stack30, $stack33;

        this := @this: org.apache.commons.lang3.tuple.ImmutableTripleTest;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack4 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>($stack3, "foo", $stack4);

        $stack6 = $stack5.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object left>;

        $stack7 = (java.lang.Integer) $stack6;

        $stack9 = virtualinvoke $stack7.<java.lang.Integer: int intValue()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack10);

        $stack12 = virtualinvoke $stack5.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getLeft()>();

        $stack13 = (java.lang.Integer) $stack12;

        $stack14 = virtualinvoke $stack13.<java.lang.Integer: int intValue()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack16 = $stack5.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object middle>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack16);

        $stack18 = virtualinvoke $stack5.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getMiddle()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack18);

        $stack20 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack19 = $stack5.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack20, $stack19);

        $stack21 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack22 = virtualinvoke $stack5.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack21, $stack22);

        $stack23 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "bar", $stack23);

        $stack25 = $stack24.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object left>;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getLeft()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack26);

        $stack27 = $stack24.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object middle>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getMiddle()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack29);

        $stack31 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack30 = $stack24.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object right>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack30);

        $stack32 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack33 = virtualinvoke $stack24.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.Object getRight()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack32, $stack33);

        return;
    }

    public void testEquals() throws java.lang.Exception
    {
        java.lang.Integer $stack4, $stack8, $stack11;
        java.lang.Boolean $stack12;
        boolean $stack15, $stack18, $stack20, $stack22;
        org.apache.commons.lang3.tuple.ImmutableTriple $stack5, $stack9, $stack13, $stack14, $stack16, $stack17, $stack19;
        org.apache.commons.lang3.tuple.ImmutableTripleTest this;
        java.lang.Object $stack21;

        this := @this: org.apache.commons.lang3.tuple.ImmutableTripleTest;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $stack5 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "foo", $stack4);

        $stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $stack9 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "foo", $stack8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack13 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("foo", $stack11, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("foo", null, null);

        $stack15 = virtualinvoke $stack13.<org.apache.commons.lang3.tuple.ImmutableTriple: boolean equals(java.lang.Object)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("foo", "bar", "baz");

        $stack17 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("xyz", "bar", "blo");

        $stack18 = virtualinvoke $stack16.<org.apache.commons.lang3.tuple.ImmutableTriple: boolean equals(java.lang.Object)>($stack17);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("foo", "bar", "baz");

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.tuple.ImmutableTriple: boolean equals(java.lang.Object)>($stack19);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = new java.lang.Object;

        specialinvoke $stack21.<java.lang.Object: void <init>()>();

        $stack22 = virtualinvoke $stack19.<org.apache.commons.lang3.tuple.ImmutableTriple: boolean equals(java.lang.Object)>($stack21);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        return;
    }

    public void testHashCode() throws java.lang.Exception
    {
        org.apache.commons.lang3.tuple.ImmutableTriple $stack2, $stack6;
        long $stack5, $stack8;
        org.apache.commons.lang3.tuple.ImmutableTripleTest this;
        int $stack3, $stack7;
        java.lang.Boolean $stack1, $stack4;

        this := @this: org.apache.commons.lang3.tuple.ImmutableTripleTest;

        $stack1 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack2 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "foo", $stack1);

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.tuple.ImmutableTriple: int hashCode()>();

        $stack5 = (long) $stack3;

        $stack4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack6 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "foo", $stack4);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.tuple.ImmutableTriple: int hashCode()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack5, $stack8);

        return;
    }

    public void testToString() throws java.lang.Exception
    {
        org.apache.commons.lang3.tuple.ImmutableTriple $stack2, $stack5, $stack8, $stack11, $stack14, $stack17;
        org.apache.commons.lang3.tuple.MutableTriple $stack20;
        org.apache.commons.lang3.tuple.ImmutableTripleTest this;
        java.lang.String $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21;

        this := @this: org.apache.commons.lang3.tuple.ImmutableTripleTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, null, null);

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(null,null,null)", $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "two", null);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(null,two,null)", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("one", null, null);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(one,null,null)", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("one", "two", null);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(one,two,null)", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "two", "three");

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(null,two,three)", $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("one", null, "three");

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.tuple.ImmutableTriple: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(one,null,three)", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.tuple.MutableTriple: org.apache.commons.lang3.tuple.MutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>("one", "two", "three");

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.tuple.MutableTriple: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(one,two,three)", $stack21);

        return;
    }

    public void testSerialization() throws java.lang.Exception
    {
        byte[] $stack12;
        org.apache.commons.lang3.tuple.ImmutableTriple $stack7, deserializedTriple;
        java.io.ByteArrayOutputStream $stack8;
        java.io.ObjectInputStream $stack10;
        long $stack15, $stack17;
        java.lang.Integer $stack5;
        org.apache.commons.lang3.tuple.ImmutableTripleTest this;
        java.io.ByteArrayInputStream $stack11;
        int $stack14, $stack16;
        java.lang.Boolean $stack6;
        java.io.ObjectOutputStream $stack9;
        java.lang.Object $stack13;

        this := @this: org.apache.commons.lang3.tuple.ImmutableTripleTest;

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack7 = staticinvoke <org.apache.commons.lang3.tuple.ImmutableTriple: org.apache.commons.lang3.tuple.ImmutableTriple of(java.lang.Object,java.lang.Object,java.lang.Object)>($stack5, "foo", $stack6);

        $stack8 = new java.io.ByteArrayOutputStream;

        specialinvoke $stack8.<java.io.ByteArrayOutputStream: void <init>()>();

        $stack9 = new java.io.ObjectOutputStream;

        specialinvoke $stack9.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($stack8);

        virtualinvoke $stack9.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($stack7);

        $stack10 = new java.io.ObjectInputStream;

        $stack11 = new java.io.ByteArrayInputStream;

        $stack12 = virtualinvoke $stack8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $stack11.<java.io.ByteArrayInputStream: void <init>(byte[])>($stack12);

        specialinvoke $stack10.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($stack11);

        $stack13 = virtualinvoke $stack10.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        deserializedTriple = (org.apache.commons.lang3.tuple.ImmutableTriple) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, deserializedTriple);

        $stack14 = virtualinvoke $stack7.<org.apache.commons.lang3.tuple.ImmutableTriple: int hashCode()>();

        $stack15 = (long) $stack14;

        $stack16 = virtualinvoke deserializedTriple.<org.apache.commons.lang3.tuple.ImmutableTriple: int hashCode()>();

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack15, $stack17);

        return;
    }
}
