class org.apache.commons.lang3.concurrent.AtomicInitializerTest$1 extends org.apache.commons.lang3.concurrent.AtomicInitializer
{
    final org.apache.commons.lang3.concurrent.AtomicInitializerTest this$0;

    void <init>(org.apache.commons.lang3.concurrent.AtomicInitializerTest)
    {
        org.apache.commons.lang3.concurrent.AtomicInitializerTest l1;
        org.apache.commons.lang3.concurrent.AtomicInitializerTest$1 this;

        this := @this: org.apache.commons.lang3.concurrent.AtomicInitializerTest$1;

        l1 := @parameter0: org.apache.commons.lang3.concurrent.AtomicInitializerTest;

        this.<org.apache.commons.lang3.concurrent.AtomicInitializerTest$1: org.apache.commons.lang3.concurrent.AtomicInitializerTest this$0> = l1;

        specialinvoke this.<org.apache.commons.lang3.concurrent.AtomicInitializer: void <init>()>();

        return;
    }

    protected java.lang.Object initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException
    {
        java.lang.Object $stack1;
        org.apache.commons.lang3.concurrent.AtomicInitializerTest$1 this;

        this := @this: org.apache.commons.lang3.concurrent.AtomicInitializerTest$1;

        $stack1 = new java.lang.Object;

        specialinvoke $stack1.<java.lang.Object: void <init>()>();

        return $stack1;
    }
}
