public class org.apache.commons.lang3.ClassUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructor()
    {
        long $stack6;
        java.lang.reflect.Constructor $stack7;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.reflect.Constructor[] $stack4;
        org.apache.commons.lang3.ClassUtils $stack2;
        int $stack5, $stack8, $stack11, $stack14;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = new org.apache.commons.lang3.ClassUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.ClassUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void test_getShortClassName_Object()
    {
        org.apache.commons.lang3.ClassUtilsTest$Inner $stack4, $stack17;
        org.apache.commons.lang3.ClassUtilsTest$1Named $stack14;
        org.apache.commons.lang3.ClassUtilsTest this;
        org.apache.commons.lang3.ClassUtils $stack1;
        java.lang.String $stack3, $stack6, $stack8, $stack10, $stack13, $stack16, $stack19;
        org.apache.commons.lang3.ClassUtilsTest$1 $stack11;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = new org.apache.commons.lang3.ClassUtils;

        specialinvoke $stack1.<org.apache.commons.lang3.ClassUtils: void <init>()>();

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>($stack1, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack3);

        $stack4 = new org.apache.commons.lang3.ClassUtilsTest$Inner;

        specialinvoke $stack4.<org.apache.commons.lang3.ClassUtilsTest$Inner: void <init>(org.apache.commons.lang3.ClassUtilsTest$1)>(null);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>($stack4, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.Inner", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>("hello", "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>(null, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack10);

        $stack11 = new org.apache.commons.lang3.ClassUtilsTest$1;

        specialinvoke $stack11.<org.apache.commons.lang3.ClassUtilsTest$1: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>($stack11, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.1", $stack13);

        $stack14 = new org.apache.commons.lang3.ClassUtilsTest$1Named;

        specialinvoke $stack14.<org.apache.commons.lang3.ClassUtilsTest$1Named: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>($stack14, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.1Named", $stack16);

        $stack17 = new org.apache.commons.lang3.ClassUtilsTest$Inner;

        specialinvoke $stack17.<org.apache.commons.lang3.ClassUtilsTest$Inner: void <init>(org.apache.commons.lang3.ClassUtilsTest$1)>(null);

        $stack19 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>($stack17, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.Inner", $stack19);

        return;
    }

    public void test_getShortClassName_Class()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.String $stack2, $stack4, $stack7, $stack9, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack37, $stack39, $stack41, $stack43, $stack45, $stack47, $stack49, $stack51, $stack53, $stack55, $stack57, $stack61, $stack63, $stack65;
        org.apache.commons.lang3.ClassUtilsTest$2 $stack58;
        java.lang.Class $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack33, $stack60;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "Ljava/util/Map$Entry;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Map.Entry", $stack4);

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[]", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[Ljava/util/Map$Entry;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Map.Entry[]", $stack11);

        $stack12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("boolean", $stack14);

        $stack15 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("byte", $stack17);

        $stack18 = <java.lang.Character: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("char", $stack20);

        $stack21 = <java.lang.Short: java.lang.Class TYPE>;

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("short", $stack23);

        $stack24 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int", $stack26);

        $stack27 = <java.lang.Long: java.lang.Class TYPE>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("long", $stack29);

        $stack30 = <java.lang.Float: java.lang.Class TYPE>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("float", $stack32);

        $stack33 = <java.lang.Double: java.lang.Class TYPE>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("double", $stack35);

        $stack37 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[Z");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("boolean[]", $stack37);

        $stack39 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[B");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("byte[]", $stack39);

        $stack41 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[C");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("char[]", $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[S");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("short[]", $stack43);

        $stack45 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[]", $stack45);

        $stack47 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[J");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("long[]", $stack47);

        $stack49 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[F");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("float[]", $stack49);

        $stack51 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[D");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("double[]", $stack51);

        $stack53 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[][]", $stack53);

        $stack55 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[][][]", $stack55);

        $stack57 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "[[[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[][][][]", $stack57);

        $stack58 = new org.apache.commons.lang3.ClassUtilsTest$2;

        specialinvoke $stack58.<org.apache.commons.lang3.ClassUtilsTest$2: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack60 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack61 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>($stack60);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.2", $stack61);

        $stack63 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$2Named;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.2Named", $stack63);

        $stack65 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.Inner", $stack65);

        return;
    }

    public void test_getShortClassName_String()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack1, $stack5;
        java.lang.String $stack3, $stack4, $stack7, $stack8, $stack11, $stack13;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack3 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getName()>();

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack4);

        $stack5 = class "Ljava/util/Map$Entry;";

        $stack7 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Map.Entry", $stack8);

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack13);

        return;
    }

    public void test_getSimpleName_Class()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.String $stack2, $stack4, $stack7, $stack9, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack37, $stack39, $stack41, $stack43, $stack45, $stack47, $stack49, $stack51, $stack53, $stack55, $stack57, $stack61, $stack63;
        org.apache.commons.lang3.ClassUtilsTest$3 $stack58;
        java.lang.Class $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack33, $stack60;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "Ljava/util/Map$Entry;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Entry", $stack4);

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[]", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[Ljava/util/Map$Entry;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Entry[]", $stack11);

        $stack12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("boolean", $stack14);

        $stack15 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("byte", $stack17);

        $stack18 = <java.lang.Character: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("char", $stack20);

        $stack21 = <java.lang.Short: java.lang.Class TYPE>;

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("short", $stack23);

        $stack24 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int", $stack26);

        $stack27 = <java.lang.Long: java.lang.Class TYPE>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("long", $stack29);

        $stack30 = <java.lang.Float: java.lang.Class TYPE>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("float", $stack32);

        $stack33 = <java.lang.Double: java.lang.Class TYPE>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("double", $stack35);

        $stack37 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[Z");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("boolean[]", $stack37);

        $stack39 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[B");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("byte[]", $stack39);

        $stack41 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[C");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("char[]", $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[S");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("short[]", $stack43);

        $stack45 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[]", $stack45);

        $stack47 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[J");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("long[]", $stack47);

        $stack49 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[F");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("float[]", $stack49);

        $stack51 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[D");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("double[]", $stack51);

        $stack53 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[][]", $stack53);

        $stack55 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[][][]", $stack55);

        $stack57 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "[[[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String[][][][]", $stack57);

        $stack58 = new org.apache.commons.lang3.ClassUtilsTest$3;

        specialinvoke $stack58.<org.apache.commons.lang3.ClassUtilsTest$3: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack60 = virtualinvoke $stack58.<java.lang.Object: java.lang.Class getClass()>();

        $stack61 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>($stack60);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack61);

        $stack63 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$3Named;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Named", $stack63);

        return;
    }

    public void test_getSimpleName_Object()
    {
        org.apache.commons.lang3.ClassUtils $stack1;
        org.apache.commons.lang3.ClassUtilsTest$Inner $stack4;
        java.lang.String $stack3, $stack6, $stack8, $stack10;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = new org.apache.commons.lang3.ClassUtils;

        specialinvoke $stack1.<org.apache.commons.lang3.ClassUtils: void <init>()>();

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Object,java.lang.String)>($stack1, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack3);

        $stack4 = new org.apache.commons.lang3.ClassUtilsTest$Inner;

        specialinvoke $stack4.<org.apache.commons.lang3.ClassUtilsTest$Inner: void <init>(org.apache.commons.lang3.ClassUtilsTest$1)>(null);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Object,java.lang.String)>($stack4, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Inner", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Object,java.lang.String)>("hello", "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("String", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Object,java.lang.String)>(null, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack10);

        return;
    }

    public void test_getPackageName_Object()
    {
        org.apache.commons.lang3.ClassUtils $stack1;
        org.apache.commons.lang3.ClassUtilsTest$Inner $stack4;
        java.lang.String $stack3, $stack6, $stack8;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = new org.apache.commons.lang3.ClassUtils;

        specialinvoke $stack1.<org.apache.commons.lang3.ClassUtils: void <init>()>();

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Object,java.lang.String)>($stack1, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack3);

        $stack4 = new org.apache.commons.lang3.ClassUtilsTest$Inner;

        specialinvoke $stack4.<org.apache.commons.lang3.ClassUtilsTest$Inner: void <init>(org.apache.commons.lang3.ClassUtilsTest$1)>(null);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Object,java.lang.String)>($stack4, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Object,java.lang.String)>(null, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack8);

        return;
    }

    public void test_getPackageName_Class()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.String $stack2, $stack4, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack35, $stack37;
        org.apache.commons.lang3.ClassUtilsTest$4 $stack32;
        java.lang.Class $stack34;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.lang", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "Ljava/util/Map$Entry;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.util", $stack4);

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.lang", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[Z");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[B");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack13);

        $stack15 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[C");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[S");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[J");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack21);

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[F");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[D");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack25);

        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.lang", $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.lang", $stack29);

        $stack31 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "[[[[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.lang", $stack31);

        $stack32 = new org.apache.commons.lang3.ClassUtilsTest$4;

        specialinvoke $stack32.<org.apache.commons.lang3.ClassUtilsTest$4: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack34 = virtualinvoke $stack32.<java.lang.Object: java.lang.Class getClass()>();

        $stack35 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>($stack34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack35);

        $stack37 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$4Named;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack37);

        return;
    }

    public void test_getPackageName_String()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack1, $stack5;
        java.lang.String $stack3, $stack4, $stack7, $stack8, $stack11, $stack13;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack3 = virtualinvoke $stack1.<java.lang.Class: java.lang.String getName()>();

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack4);

        $stack5 = class "Ljava/util/Map$Entry;";

        $stack7 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.util", $stack8);

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack13);

        return;
    }

    public void test_getAllSuperclasses_Class()
    {
        java.util.List $stack2, $stack11;
        int $stack4;
        long $stack5;
        java.lang.Object $stack7, $stack9;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllSuperclasses(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$CY;");

        $stack4 = interfaceinvoke $stack2.<java.util.List: int size()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack5);

        $stack7 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$CX;", $stack7);

        $stack9 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllSuperclasses(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack11);

        return;
    }

    public void test_getAllInterfaces_Class()
    {
        long $stack5;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.util.List $stack2, $stack19;
        int $stack4;
        java.lang.Object $stack7, $stack9, $stack11, $stack13, $stack15, $stack17;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$CY;");

        $stack4 = interfaceinvoke $stack2.<java.util.List: int size()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack5);

        $stack7 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$IB;", $stack7);

        $stack9 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$IC;", $stack9);

        $stack11 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$ID;", $stack11);

        $stack13 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$IE;", $stack13);

        $stack15 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$IF;", $stack15);

        $stack17 = interfaceinvoke $stack2.<java.util.List: java.lang.Object get(int)>(5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$IA;", $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack19);

        return;
    }

    public void test_convertClassNamesToClasses_List()
    {
        long $stack9, $stack16;
        java.lang.ClassCastException $stack28;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.util.ArrayList $stack5;
        java.util.List $stack6, $stack13, $stack27;
        int $stack8, $stack15;
        java.lang.Object $stack18, $stack20, $stack22, $stack23;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassNamesToClasses(java.util.List)>($stack5);

        $stack8 = interfaceinvoke $stack6.<java.util.List: int size()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>("java.lang.String");

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>("java.lang.xxx");

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>("java.lang.Object");

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassNamesToClasses(java.util.List)>($stack5);

        $stack15 = interfaceinvoke $stack13.<java.util.List: int size()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack16);

        $stack18 = interfaceinvoke $stack13.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $stack18);

        $stack20 = interfaceinvoke $stack13.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack20);

        $stack22 = interfaceinvoke $stack13.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $stack22);

        $stack23 = new java.lang.Object;

        specialinvoke $stack23.<java.lang.Object: void <init>()>();

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>($stack23);

     label1:
        staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassNamesToClasses(java.util.List)>($stack5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should not have been able to convert list");

     label2:
        goto label4;

     label3:
        $stack28 := @caughtexception;

     label4:
        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassNamesToClasses(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack27);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public void test_convertClassesToClassNames_List()
    {
        long $stack9, $stack16;
        java.lang.ClassCastException $stack28;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.util.ArrayList $stack5;
        java.util.List $stack6, $stack13, $stack27;
        int $stack8, $stack15;
        java.lang.Object $stack18, $stack20, $stack22, $stack23;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack5 = new java.util.ArrayList;

        specialinvoke $stack5.<java.util.ArrayList: void <init>()>();

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassesToClassNames(java.util.List)>($stack5);

        $stack8 = interfaceinvoke $stack6.<java.util.List: int size()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(class "Ljava/lang/String;");

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(null);

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>(class "Ljava/lang/Object;");

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassesToClassNames(java.util.List)>($stack5);

        $stack15 = interfaceinvoke $stack13.<java.util.List: int size()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack16);

        $stack18 = interfaceinvoke $stack13.<java.util.List: java.lang.Object get(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.lang.String", $stack18);

        $stack20 = interfaceinvoke $stack13.<java.util.List: java.lang.Object get(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack20);

        $stack22 = interfaceinvoke $stack13.<java.util.List: java.lang.Object get(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("java.lang.Object", $stack22);

        $stack23 = new java.lang.Object;

        specialinvoke $stack23.<java.lang.Object: void <init>()>();

        interfaceinvoke $stack5.<java.util.List: boolean add(java.lang.Object)>($stack23);

     label1:
        staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassesToClassNames(java.util.List)>($stack5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should not have been able to convert list");

     label2:
        goto label4;

     label3:
        $stack28 := @caughtexception;

     label4:
        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List convertClassesToClassNames(java.util.List)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack27);

        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public void test_isInnerClass_Class()
    {
        org.apache.commons.lang3.ClassUtilsTest$5 $stack3;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack4, $stack6;
        boolean $stack1, $stack2, $stack5, $stack7, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isInnerClass(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isInnerClass(java.lang.Class)>(class "Ljava/util/Map$Entry;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = new org.apache.commons.lang3.ClassUtilsTest$5;

        specialinvoke $stack3.<org.apache.commons.lang3.ClassUtilsTest$5: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack4 = virtualinvoke $stack3.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isInnerClass(java.lang.Class)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isInnerClass(java.lang.Class)>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isInnerClass(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isInnerClass(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        return;
    }

    public void test_isAssignable_ClassArray_ClassArray() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack15, $stack16, $stack17, $stack18, $stack20, $stack23, $stack24, $stack25, $stack26, $stack28, $stack30, $stack33, $stack35, $stack36, $stack38, $stack40;
        org.apache.commons.lang3.JavaVersion $stack27;
        java.lang.Boolean $stack29, $stack31, $stack32, $stack34, $stack37, $stack39;
        java.lang.Class[] $stack8, $stack9, $stack10, array0, $stack11, $stack14, $stack19, $stack21, $stack22;
        java.lang.Class $stack12, $stack13;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack8 = newarray (java.lang.Class)[2];

        $stack8[0] = class "Ljava/lang/Object;";

        $stack8[1] = class "Ljava/lang/Object;";

        $stack9 = newarray (java.lang.Class)[1];

        $stack9[0] = class "Ljava/lang/Object;";

        $stack10 = newarray (java.lang.Class)[1];

        $stack10[0] = class "Ljava/lang/String;";

        array0 = newarray (java.lang.Class)[0];

        $stack11 = newarray (java.lang.Class)[2];

        $stack12 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack11[0] = $stack12;

        $stack13 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack11[1] = $stack13;

        $stack14 = newarray (java.lang.Class)[2];

        $stack14[0] = class "Ljava/lang/Integer;";

        $stack14[1] = class "Ljava/lang/Boolean;";

        $stack15 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack9, $stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>(null, $stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>(null, array0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>(array0, array0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack19 = (java.lang.Class[]) null;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>(array0, $stack19);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack22 = (java.lang.Class[]) null;

        $stack21 = (java.lang.Class[]) null;

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack22, $stack21);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack9, $stack10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack24);

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack10, $stack10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack10, $stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack27 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $stack28 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($stack27);

        $stack29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack11, $stack14);

        $stack31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack29, $stack31);

        $stack32 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack28);

        $stack33 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack14, $stack11);

        $stack34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack32, $stack34);

        $stack35 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack11, $stack9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack35);

        $stack36 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack14, $stack9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack36);

        $stack37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack28);

        $stack38 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack11, $stack8);

        $stack39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack38);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack37, $stack39);

        $stack40 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[])>($stack14, $stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        return;
    }

    public void test_isAssignable_ClassArray_ClassArray_Autoboxing() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack14, $stack15, $stack16, $stack17, $stack18, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30;
        java.lang.Class[] $stack7, $stack8, $stack9, array0, $stack10, $stack13, $stack19, $stack20;
        java.lang.Class $stack11, $stack12;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack7 = newarray (java.lang.Class)[2];

        $stack7[0] = class "Ljava/lang/Object;";

        $stack7[1] = class "Ljava/lang/Object;";

        $stack8 = newarray (java.lang.Class)[1];

        $stack8[0] = class "Ljava/lang/Object;";

        $stack9 = newarray (java.lang.Class)[1];

        $stack9[0] = class "Ljava/lang/String;";

        array0 = newarray (java.lang.Class)[0];

        $stack10 = newarray (java.lang.Class)[2];

        $stack11 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack10[0] = $stack11;

        $stack12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack10[1] = $stack12;

        $stack13 = newarray (java.lang.Class)[2];

        $stack13[0] = class "Ljava/lang/Integer;";

        $stack13[1] = class "Ljava/lang/Boolean;";

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack8, $stack7, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(null, $stack7, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(null, array0, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(array0, array0, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(array0, null, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack20 = (java.lang.Class[]) null;

        $stack19 = (java.lang.Class[]) null;

        $stack21 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack20, $stack19, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack8, $stack9, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack9, $stack9, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack9, $stack8, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack10, $stack13, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack13, $stack10, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack10, $stack8, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack27);

        $stack28 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack13, $stack8, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack28);

        $stack29 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack10, $stack7, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack13, $stack7, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        return;
    }

    public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack14, $stack15, $stack16, $stack17, $stack18, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30;
        java.lang.Class[] $stack7, $stack8, $stack9, array0, $stack10, $stack13, $stack19, $stack20;
        java.lang.Class $stack11, $stack12;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack7 = newarray (java.lang.Class)[2];

        $stack7[0] = class "Ljava/lang/Object;";

        $stack7[1] = class "Ljava/lang/Object;";

        $stack8 = newarray (java.lang.Class)[1];

        $stack8[0] = class "Ljava/lang/Object;";

        $stack9 = newarray (java.lang.Class)[1];

        $stack9[0] = class "Ljava/lang/String;";

        array0 = newarray (java.lang.Class)[0];

        $stack10 = newarray (java.lang.Class)[2];

        $stack11 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack10[0] = $stack11;

        $stack12 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack10[1] = $stack12;

        $stack13 = newarray (java.lang.Class)[2];

        $stack13[0] = class "Ljava/lang/Integer;";

        $stack13[1] = class "Ljava/lang/Boolean;";

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack8, $stack7, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(null, $stack7, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(null, array0, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(array0, array0, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(array0, null, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack20 = (java.lang.Class[]) null;

        $stack19 = (java.lang.Class[]) null;

        $stack21 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack20, $stack19, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack8, $stack9, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack9, $stack9, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack9, $stack8, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack10, $stack13, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack25);

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack13, $stack10, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack10, $stack8, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack27);

        $stack28 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack13, $stack8, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack28);

        $stack29 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack13, $stack7, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>($stack10, $stack7, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack30);

        return;
    }

    public void test_isAssignable() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack3, $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack11, $stack13, $stack16, $stack20, $stack24, $stack27, $stack31, $stack32, $stack35, $stack39, $stack43, $stack46, $stack50, $stack51;
        org.apache.commons.lang3.JavaVersion $stack12;
        java.lang.Boolean $stack14, $stack17, $stack18, $stack21, $stack22, $stack25, $stack26, $stack28, $stack33, $stack36, $stack37, $stack40, $stack41, $stack44, $stack45, $stack47;
        java.lang.Class $stack7, $stack15, $stack19, $stack23, $stack29, $stack30, $stack34, $stack38, $stack42, $stack48, $stack49;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(null, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/String;", null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(null, class "Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(null, class "Ljava/lang/Integer;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(null, $stack7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/String;", class "Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/String;", class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Object;", class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $stack13 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($stack12);

        $stack14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack15 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack15, class "Ljava/lang/Integer;");

        $stack17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack17);

        $stack18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack19 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack19, class "Ljava/lang/Object;");

        $stack21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack21);

        $stack22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack23 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack23);

        $stack25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack22, $stack25);

        $stack26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", class "Ljava/lang/Object;");

        $stack28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, $stack28);

        $stack30 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack29 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack31 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack30, $stack29);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack32 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", class "Ljava/lang/Integer;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack34 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack34, class "Ljava/lang/Boolean;");

        $stack36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack35);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack33, $stack36);

        $stack37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack38 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack39 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack38, class "Ljava/lang/Object;");

        $stack40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack37, $stack40);

        $stack41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack42 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack43 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack42);

        $stack44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack43);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack41, $stack44);

        $stack45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack13);

        $stack46 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", class "Ljava/lang/Object;");

        $stack47 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack45, $stack47);

        $stack49 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack48 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack50 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack49, $stack48);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        $stack51 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", class "Ljava/lang/Boolean;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        return;
    }

    public void test_isAssignable_Autoboxing() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack2, $stack3, $stack4, $stack5, $stack7, $stack8, $stack9, $stack10, $stack12, $stack14, $stack16, $stack17, $stack20, $stack21, $stack23, $stack25, $stack26, $stack29, $stack30;
        java.lang.Class $stack6, $stack11, $stack13, $stack15, $stack18, $stack19, $stack22, $stack24, $stack27, $stack28;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, null, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/String;", null, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, class "Ljava/lang/Object;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, class "Ljava/lang/Integer;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, $stack6, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/String;", class "Ljava/lang/Object;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/String;", class "Ljava/lang/String;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Object;", class "Ljava/lang/String;", 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack11, class "Ljava/lang/Integer;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack13, class "Ljava/lang/Object;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack15, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", class "Ljava/lang/Object;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack19 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack18 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack19, $stack18, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", class "Ljava/lang/Integer;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        $stack22 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack22, class "Ljava/lang/Boolean;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack24 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack24, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", class "Ljava/lang/Object;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack28 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack27 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack28, $stack27, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", class "Ljava/lang/Boolean;", 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        return;
    }

    public void test_isAssignable_NoAutoboxing() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack2, $stack3, $stack4, $stack5, $stack7, $stack8, $stack9, $stack10, $stack12, $stack14, $stack16, $stack19, $stack20, $stack22, $stack24, $stack26, $stack27, $stack30, $stack31;
        java.lang.Class $stack6, $stack11, $stack13, $stack15, $stack17, $stack18, $stack21, $stack23, $stack25, $stack28, $stack29;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, null, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/String;", null, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, class "Ljava/lang/Object;", 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, class "Ljava/lang/Integer;", 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(null, $stack6, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/String;", class "Ljava/lang/Object;", 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/String;", class "Ljava/lang/String;", 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Object;", class "Ljava/lang/String;", 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack11, class "Ljava/lang/Integer;", 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack13, class "Ljava/lang/Object;", 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack15, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack18 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack17 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack19 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack18, $stack17, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", class "Ljava/lang/Integer;", 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack21, class "Ljava/lang/Boolean;", 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        $stack23 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack23, class "Ljava/lang/Object;", 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack24);

        $stack25 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack25, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", class "Ljava/lang/Object;", 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack27);

        $stack29 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack28 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>($stack29, $stack28, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", class "Ljava/lang/Boolean;", 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        return;
    }

    public void test_isAssignable_Widening() throws java.lang.Exception
    {
        java.lang.Class $stack1, $stack2, $stack5, $stack6, $stack9, $stack10, $stack13, $stack14, $stack17, $stack18, $stack21, $stack22, $stack25, $stack26, $stack29, $stack30, $stack33, $stack34, $stack37, $stack38, $stack41, $stack42, $stack45, $stack46, $stack49, $stack50, $stack53, $stack54, $stack57, $stack58, $stack61, $stack62, $stack65, $stack66, $stack69, $stack70, $stack73, $stack74, $stack77, $stack78, $stack81, $stack82, $stack85, $stack86, $stack89, $stack90, $stack93, $stack94, $stack97, $stack98, $stack101, $stack102, $stack105, $stack106, $stack109, $stack110, $stack113, $stack114, $stack117, $stack118, $stack121, $stack122, $stack125, $stack126, $stack129, $stack130, $stack133, $stack134, $stack137, $stack138, $stack141, $stack142, $stack145, $stack146, $stack149, $stack150, $stack153, $stack154, $stack157, $stack158, $stack161, $stack162, $stack165, $stack166, $stack169, $stack170, $stack173, $stack174, $stack177, $stack178, $stack181, $stack182, $stack185, $stack186, $stack189, $stack190, $stack193, $stack194, $stack197, $stack198, $stack201, $stack202, $stack205, $stack206, $stack209, $stack210, $stack213, $stack214, $stack217, $stack218, $stack221, $stack222, $stack225, $stack226, $stack229, $stack230, $stack233, $stack234, $stack237, $stack238, $stack241, $stack242, $stack245, $stack246, $stack249, $stack250, $stack253, $stack254;
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack4, $stack8, $stack12, $stack16, $stack20, $stack24, $stack28, $stack32, $stack36, $stack40, $stack44, $stack48, $stack52, $stack56, $stack60, $stack64, $stack68, $stack72, $stack76, $stack80, $stack84, $stack88, $stack92, $stack96, $stack100, $stack104, $stack108, $stack112, $stack116, $stack120, $stack124, $stack128, $stack132, $stack136, $stack140, $stack144, $stack148, $stack152, $stack156, $stack160, $stack164, $stack168, $stack172, $stack176, $stack180, $stack184, $stack188, $stack192, $stack196, $stack200, $stack204, $stack208, $stack212, $stack216, $stack220, $stack224, $stack228, $stack232, $stack236, $stack240, $stack244, $stack248, $stack252, $stack256;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack1 = <java.lang.Character: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack2, $stack1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("byte -> char", $stack4);

        $stack6 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack5 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> byte", $stack8);

        $stack10 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack9 = <java.lang.Short: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack10, $stack9);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> short", $stack12);

        $stack14 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack13 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack14, $stack13);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> int", $stack16);

        $stack18 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack17 = <java.lang.Long: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack18, $stack17);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> long", $stack20);

        $stack22 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack21 = <java.lang.Float: java.lang.Class TYPE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack22, $stack21);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> float", $stack24);

        $stack26 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack25 = <java.lang.Double: java.lang.Class TYPE>;

        $stack28 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack26, $stack25);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> double", $stack28);

        $stack30 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack29 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack30, $stack29);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("byte -> boolean", $stack32);

        $stack34 = <java.lang.Short: java.lang.Class TYPE>;

        $stack33 = <java.lang.Character: java.lang.Class TYPE>;

        $stack36 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack34, $stack33);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> char", $stack36);

        $stack38 = <java.lang.Short: java.lang.Class TYPE>;

        $stack37 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack40 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack38, $stack37);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> byte", $stack40);

        $stack42 = <java.lang.Short: java.lang.Class TYPE>;

        $stack41 = <java.lang.Short: java.lang.Class TYPE>;

        $stack44 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack42, $stack41);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> short", $stack44);

        $stack46 = <java.lang.Short: java.lang.Class TYPE>;

        $stack45 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack48 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack46, $stack45);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> int", $stack48);

        $stack50 = <java.lang.Short: java.lang.Class TYPE>;

        $stack49 = <java.lang.Long: java.lang.Class TYPE>;

        $stack52 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack50, $stack49);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> long", $stack52);

        $stack54 = <java.lang.Short: java.lang.Class TYPE>;

        $stack53 = <java.lang.Float: java.lang.Class TYPE>;

        $stack56 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack54, $stack53);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> float", $stack56);

        $stack58 = <java.lang.Short: java.lang.Class TYPE>;

        $stack57 = <java.lang.Double: java.lang.Class TYPE>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack58, $stack57);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> double", $stack60);

        $stack62 = <java.lang.Short: java.lang.Class TYPE>;

        $stack61 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack64 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack62, $stack61);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> boolean", $stack64);

        $stack66 = <java.lang.Character: java.lang.Class TYPE>;

        $stack65 = <java.lang.Character: java.lang.Class TYPE>;

        $stack68 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack66, $stack65);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> char", $stack68);

        $stack70 = <java.lang.Character: java.lang.Class TYPE>;

        $stack69 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack72 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack70, $stack69);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> byte", $stack72);

        $stack74 = <java.lang.Character: java.lang.Class TYPE>;

        $stack73 = <java.lang.Short: java.lang.Class TYPE>;

        $stack76 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack74, $stack73);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> short", $stack76);

        $stack78 = <java.lang.Character: java.lang.Class TYPE>;

        $stack77 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack80 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack78, $stack77);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> int", $stack80);

        $stack82 = <java.lang.Character: java.lang.Class TYPE>;

        $stack81 = <java.lang.Long: java.lang.Class TYPE>;

        $stack84 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack82, $stack81);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> long", $stack84);

        $stack86 = <java.lang.Character: java.lang.Class TYPE>;

        $stack85 = <java.lang.Float: java.lang.Class TYPE>;

        $stack88 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack86, $stack85);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> float", $stack88);

        $stack90 = <java.lang.Character: java.lang.Class TYPE>;

        $stack89 = <java.lang.Double: java.lang.Class TYPE>;

        $stack92 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack90, $stack89);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> double", $stack92);

        $stack94 = <java.lang.Character: java.lang.Class TYPE>;

        $stack93 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack96 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack94, $stack93);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> boolean", $stack96);

        $stack98 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack97 = <java.lang.Character: java.lang.Class TYPE>;

        $stack100 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack98, $stack97);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> char", $stack100);

        $stack102 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack101 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack104 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack102, $stack101);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> byte", $stack104);

        $stack106 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack105 = <java.lang.Short: java.lang.Class TYPE>;

        $stack108 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack106, $stack105);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> short", $stack108);

        $stack110 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack109 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack112 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack110, $stack109);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> int", $stack112);

        $stack114 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack113 = <java.lang.Long: java.lang.Class TYPE>;

        $stack116 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack114, $stack113);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> long", $stack116);

        $stack118 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack117 = <java.lang.Float: java.lang.Class TYPE>;

        $stack120 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack118, $stack117);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> float", $stack120);

        $stack122 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack121 = <java.lang.Double: java.lang.Class TYPE>;

        $stack124 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack122, $stack121);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> double", $stack124);

        $stack126 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack125 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack128 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack126, $stack125);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> boolean", $stack128);

        $stack130 = <java.lang.Long: java.lang.Class TYPE>;

        $stack129 = <java.lang.Character: java.lang.Class TYPE>;

        $stack132 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack130, $stack129);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> char", $stack132);

        $stack134 = <java.lang.Long: java.lang.Class TYPE>;

        $stack133 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack136 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack134, $stack133);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> byte", $stack136);

        $stack138 = <java.lang.Long: java.lang.Class TYPE>;

        $stack137 = <java.lang.Short: java.lang.Class TYPE>;

        $stack140 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack138, $stack137);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> short", $stack140);

        $stack142 = <java.lang.Long: java.lang.Class TYPE>;

        $stack141 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack144 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack142, $stack141);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> int", $stack144);

        $stack146 = <java.lang.Long: java.lang.Class TYPE>;

        $stack145 = <java.lang.Long: java.lang.Class TYPE>;

        $stack148 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack146, $stack145);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("long -> long", $stack148);

        $stack150 = <java.lang.Long: java.lang.Class TYPE>;

        $stack149 = <java.lang.Float: java.lang.Class TYPE>;

        $stack152 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack150, $stack149);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("long -> float", $stack152);

        $stack154 = <java.lang.Long: java.lang.Class TYPE>;

        $stack153 = <java.lang.Double: java.lang.Class TYPE>;

        $stack156 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack154, $stack153);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("long -> double", $stack156);

        $stack158 = <java.lang.Long: java.lang.Class TYPE>;

        $stack157 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack160 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack158, $stack157);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> boolean", $stack160);

        $stack162 = <java.lang.Float: java.lang.Class TYPE>;

        $stack161 = <java.lang.Character: java.lang.Class TYPE>;

        $stack164 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack162, $stack161);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> char", $stack164);

        $stack166 = <java.lang.Float: java.lang.Class TYPE>;

        $stack165 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack168 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack166, $stack165);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> byte", $stack168);

        $stack170 = <java.lang.Float: java.lang.Class TYPE>;

        $stack169 = <java.lang.Short: java.lang.Class TYPE>;

        $stack172 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack170, $stack169);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> short", $stack172);

        $stack174 = <java.lang.Float: java.lang.Class TYPE>;

        $stack173 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack176 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack174, $stack173);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> int", $stack176);

        $stack178 = <java.lang.Float: java.lang.Class TYPE>;

        $stack177 = <java.lang.Long: java.lang.Class TYPE>;

        $stack180 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack178, $stack177);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> long", $stack180);

        $stack182 = <java.lang.Float: java.lang.Class TYPE>;

        $stack181 = <java.lang.Float: java.lang.Class TYPE>;

        $stack184 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack182, $stack181);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("float -> float", $stack184);

        $stack186 = <java.lang.Float: java.lang.Class TYPE>;

        $stack185 = <java.lang.Double: java.lang.Class TYPE>;

        $stack188 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack186, $stack185);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("float -> double", $stack188);

        $stack190 = <java.lang.Float: java.lang.Class TYPE>;

        $stack189 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack192 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack190, $stack189);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> boolean", $stack192);

        $stack194 = <java.lang.Double: java.lang.Class TYPE>;

        $stack193 = <java.lang.Character: java.lang.Class TYPE>;

        $stack196 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack194, $stack193);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> char", $stack196);

        $stack198 = <java.lang.Double: java.lang.Class TYPE>;

        $stack197 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack200 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack198, $stack197);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> byte", $stack200);

        $stack202 = <java.lang.Double: java.lang.Class TYPE>;

        $stack201 = <java.lang.Short: java.lang.Class TYPE>;

        $stack204 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack202, $stack201);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> short", $stack204);

        $stack206 = <java.lang.Double: java.lang.Class TYPE>;

        $stack205 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack208 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack206, $stack205);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> int", $stack208);

        $stack210 = <java.lang.Double: java.lang.Class TYPE>;

        $stack209 = <java.lang.Long: java.lang.Class TYPE>;

        $stack212 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack210, $stack209);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> long", $stack212);

        $stack214 = <java.lang.Double: java.lang.Class TYPE>;

        $stack213 = <java.lang.Float: java.lang.Class TYPE>;

        $stack216 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack214, $stack213);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> float", $stack216);

        $stack218 = <java.lang.Double: java.lang.Class TYPE>;

        $stack217 = <java.lang.Double: java.lang.Class TYPE>;

        $stack220 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack218, $stack217);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("double -> double", $stack220);

        $stack222 = <java.lang.Double: java.lang.Class TYPE>;

        $stack221 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack224 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack222, $stack221);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> boolean", $stack224);

        $stack226 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack225 = <java.lang.Character: java.lang.Class TYPE>;

        $stack228 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack226, $stack225);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> char", $stack228);

        $stack230 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack229 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack232 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack230, $stack229);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> byte", $stack232);

        $stack234 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack233 = <java.lang.Short: java.lang.Class TYPE>;

        $stack236 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack234, $stack233);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> short", $stack236);

        $stack238 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack237 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack240 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack238, $stack237);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> int", $stack240);

        $stack242 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack241 = <java.lang.Long: java.lang.Class TYPE>;

        $stack244 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack242, $stack241);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> long", $stack244);

        $stack246 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack245 = <java.lang.Float: java.lang.Class TYPE>;

        $stack248 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack246, $stack245);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> float", $stack248);

        $stack250 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack249 = <java.lang.Double: java.lang.Class TYPE>;

        $stack252 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack250, $stack249);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> double", $stack252);

        $stack254 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack253 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack256 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>($stack254, $stack253);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("boolean -> boolean", $stack256);

        return;
    }

    public void test_isAssignable_DefaultUnboxing_Widening() throws java.lang.Exception
    {
        org.apache.commons.lang3.JavaVersion $stack2;
        java.lang.Boolean $stack8, $stack11, $stack13, $stack16, $stack18, $stack21, $stack23, $stack26, $stack28, $stack31, $stack33, $stack36, $stack47, $stack50, $stack52, $stack55, $stack57, $stack60, $stack62, $stack65, $stack67, $stack70, $stack75, $stack78, $stack86, $stack89, $stack91, $stack94, $stack96, $stack99, $stack101, $stack104, $stack118, $stack121, $stack123, $stack126, $stack128, $stack131, $stack133, $stack136, $stack153, $stack156, $stack158, $stack161, $stack163, $stack166, $stack186, $stack189, $stack191, $stack194, $stack217, $stack220, $stack246, $stack249;
        java.lang.Class $stack4, $stack9, $stack14, $stack19, $stack24, $stack29, $stack34, $stack37, $stack40, $stack43, $stack48, $stack53, $stack58, $stack63, $stack68, $stack71, $stack76, $stack79, $stack82, $stack87, $stack92, $stack97, $stack102, $stack105, $stack108, $stack111, $stack114, $stack119, $stack124, $stack129, $stack134, $stack137, $stack140, $stack143, $stack146, $stack149, $stack154, $stack159, $stack164, $stack167, $stack170, $stack173, $stack176, $stack179, $stack182, $stack187, $stack192, $stack195, $stack198, $stack201, $stack204, $stack207, $stack210, $stack213, $stack218, $stack221, $stack224, $stack227, $stack230, $stack233, $stack236, $stack239, $stack242, $stack247;
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack3, $stack6, $stack10, $stack15, $stack20, $stack25, $stack30, $stack35, $stack39, $stack42, $stack45, $stack49, $stack54, $stack59, $stack64, $stack69, $stack73, $stack77, $stack81, $stack84, $stack88, $stack93, $stack98, $stack103, $stack107, $stack110, $stack113, $stack116, $stack120, $stack125, $stack130, $stack135, $stack139, $stack142, $stack145, $stack148, $stack151, $stack155, $stack160, $stack165, $stack169, $stack172, $stack175, $stack178, $stack181, $stack184, $stack188, $stack193, $stack197, $stack200, $stack203, $stack206, $stack209, $stack212, $stack215, $stack219, $stack223, $stack226, $stack229, $stack232, $stack235, $stack238, $stack241, $stack244, $stack248;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $stack3 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($stack2);

        $stack4 = <java.lang.Character: java.lang.Class TYPE>;

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack4);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("byte -> char", $stack6);

        $stack8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack9 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack9);

        $stack11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byte -> byte", $stack8, $stack11);

        $stack13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack14 = <java.lang.Short: java.lang.Class TYPE>;

        $stack15 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack14);

        $stack16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byte -> short", $stack13, $stack16);

        $stack18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack19 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack19);

        $stack21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byte -> int", $stack18, $stack21);

        $stack23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack24 = <java.lang.Long: java.lang.Class TYPE>;

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack24);

        $stack26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byte -> long", $stack23, $stack26);

        $stack28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack29 = <java.lang.Float: java.lang.Class TYPE>;

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack29);

        $stack31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byte -> float", $stack28, $stack31);

        $stack33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack34 = <java.lang.Double: java.lang.Class TYPE>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack34);

        $stack36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack35);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byte -> double", $stack33, $stack36);

        $stack37 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack39 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Byte;", $stack37);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("byte -> boolean", $stack39);

        $stack40 = <java.lang.Character: java.lang.Class TYPE>;

        $stack42 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack40);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> char", $stack42);

        $stack43 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack45 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack43);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> byte", $stack45);

        $stack47 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack48 = <java.lang.Short: java.lang.Class TYPE>;

        $stack49 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack48);

        $stack50 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack49);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("short -> short", $stack47, $stack50);

        $stack52 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack53 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack53);

        $stack55 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack54);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("short -> int", $stack52, $stack55);

        $stack57 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack58 = <java.lang.Long: java.lang.Class TYPE>;

        $stack59 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack58);

        $stack60 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("short -> long", $stack57, $stack60);

        $stack62 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack63 = <java.lang.Float: java.lang.Class TYPE>;

        $stack64 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack63);

        $stack65 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack64);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("short -> float", $stack62, $stack65);

        $stack67 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack68 = <java.lang.Double: java.lang.Class TYPE>;

        $stack69 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack68);

        $stack70 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack69);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("short -> double", $stack67, $stack70);

        $stack71 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack73 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Short;", $stack71);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> boolean", $stack73);

        $stack75 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack76 = <java.lang.Character: java.lang.Class TYPE>;

        $stack77 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack76);

        $stack78 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack77);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("char -> char", $stack75, $stack78);

        $stack79 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack81 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack79);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> byte", $stack81);

        $stack82 = <java.lang.Short: java.lang.Class TYPE>;

        $stack84 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack82);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> short", $stack84);

        $stack86 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack87 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack88 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack87);

        $stack89 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack88);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("char -> int", $stack86, $stack89);

        $stack91 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack92 = <java.lang.Long: java.lang.Class TYPE>;

        $stack93 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack92);

        $stack94 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack93);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("char -> long", $stack91, $stack94);

        $stack96 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack97 = <java.lang.Float: java.lang.Class TYPE>;

        $stack98 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack97);

        $stack99 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack98);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("char -> float", $stack96, $stack99);

        $stack101 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack102 = <java.lang.Double: java.lang.Class TYPE>;

        $stack103 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack102);

        $stack104 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack103);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("char -> double", $stack101, $stack104);

        $stack105 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack107 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Character;", $stack105);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> boolean", $stack107);

        $stack108 = <java.lang.Character: java.lang.Class TYPE>;

        $stack110 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack108);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> char", $stack110);

        $stack111 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack113 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack111);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> byte", $stack113);

        $stack114 = <java.lang.Short: java.lang.Class TYPE>;

        $stack116 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack114);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> short", $stack116);

        $stack118 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack119 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack120 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack119);

        $stack121 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("int -> int", $stack118, $stack121);

        $stack123 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack124 = <java.lang.Long: java.lang.Class TYPE>;

        $stack125 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack124);

        $stack126 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack125);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("int -> long", $stack123, $stack126);

        $stack128 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack129 = <java.lang.Float: java.lang.Class TYPE>;

        $stack130 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack129);

        $stack131 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack130);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("int -> float", $stack128, $stack131);

        $stack133 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack134 = <java.lang.Double: java.lang.Class TYPE>;

        $stack135 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack134);

        $stack136 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack135);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("int -> double", $stack133, $stack136);

        $stack137 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack139 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Integer;", $stack137);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> boolean", $stack139);

        $stack140 = <java.lang.Character: java.lang.Class TYPE>;

        $stack142 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack140);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> char", $stack142);

        $stack143 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack145 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack143);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> byte", $stack145);

        $stack146 = <java.lang.Short: java.lang.Class TYPE>;

        $stack148 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack146);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> short", $stack148);

        $stack149 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack151 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack149);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> int", $stack151);

        $stack153 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack154 = <java.lang.Long: java.lang.Class TYPE>;

        $stack155 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack154);

        $stack156 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack155);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("long -> long", $stack153, $stack156);

        $stack158 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack159 = <java.lang.Float: java.lang.Class TYPE>;

        $stack160 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack159);

        $stack161 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack160);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("long -> float", $stack158, $stack161);

        $stack163 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack164 = <java.lang.Double: java.lang.Class TYPE>;

        $stack165 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack164);

        $stack166 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack165);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("long -> double", $stack163, $stack166);

        $stack167 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack169 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Long;", $stack167);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> boolean", $stack169);

        $stack170 = <java.lang.Character: java.lang.Class TYPE>;

        $stack172 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack170);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> char", $stack172);

        $stack173 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack175 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack173);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> byte", $stack175);

        $stack176 = <java.lang.Short: java.lang.Class TYPE>;

        $stack178 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack176);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> short", $stack178);

        $stack179 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack181 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack179);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> int", $stack181);

        $stack182 = <java.lang.Long: java.lang.Class TYPE>;

        $stack184 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack182);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> long", $stack184);

        $stack186 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack187 = <java.lang.Float: java.lang.Class TYPE>;

        $stack188 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack187);

        $stack189 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack188);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("float -> float", $stack186, $stack189);

        $stack191 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack192 = <java.lang.Double: java.lang.Class TYPE>;

        $stack193 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack192);

        $stack194 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack193);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("float -> double", $stack191, $stack194);

        $stack195 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack197 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Float;", $stack195);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> boolean", $stack197);

        $stack198 = <java.lang.Character: java.lang.Class TYPE>;

        $stack200 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack198);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> char", $stack200);

        $stack201 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack203 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack201);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> byte", $stack203);

        $stack204 = <java.lang.Short: java.lang.Class TYPE>;

        $stack206 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack204);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> short", $stack206);

        $stack207 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack209 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack207);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> int", $stack209);

        $stack210 = <java.lang.Long: java.lang.Class TYPE>;

        $stack212 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack210);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> long", $stack212);

        $stack213 = <java.lang.Float: java.lang.Class TYPE>;

        $stack215 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack213);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> float", $stack215);

        $stack217 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack218 = <java.lang.Double: java.lang.Class TYPE>;

        $stack219 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack218);

        $stack220 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack219);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("double -> double", $stack217, $stack220);

        $stack221 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack223 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Double;", $stack221);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> boolean", $stack223);

        $stack224 = <java.lang.Character: java.lang.Class TYPE>;

        $stack226 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack224);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> char", $stack226);

        $stack227 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack229 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack227);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> byte", $stack229);

        $stack230 = <java.lang.Short: java.lang.Class TYPE>;

        $stack232 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack230);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> short", $stack232);

        $stack233 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack235 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack233);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> int", $stack235);

        $stack236 = <java.lang.Long: java.lang.Class TYPE>;

        $stack238 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack236);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> long", $stack238);

        $stack239 = <java.lang.Float: java.lang.Class TYPE>;

        $stack241 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack239);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> float", $stack241);

        $stack242 = <java.lang.Double: java.lang.Class TYPE>;

        $stack244 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack242);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> double", $stack244);

        $stack246 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack3);

        $stack247 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack248 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Boolean;", $stack247);

        $stack249 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($stack248);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("boolean -> boolean", $stack246, $stack249);

        return;
    }

    public void test_isAssignable_Unboxing_Widening() throws java.lang.Exception
    {
        java.lang.Class $stack1, $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $stack46, $stack49, $stack52, $stack55, $stack58, $stack61, $stack64, $stack67, $stack70, $stack73, $stack76, $stack79, $stack82, $stack85, $stack88, $stack91, $stack94, $stack97, $stack100, $stack103, $stack106, $stack109, $stack112, $stack115, $stack118, $stack121, $stack124, $stack127, $stack130, $stack133, $stack136, $stack139, $stack142, $stack145, $stack148, $stack151, $stack154, $stack157, $stack160, $stack163, $stack166, $stack169, $stack172, $stack175, $stack178, $stack181, $stack184, $stack187, $stack190;
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack33, $stack36, $stack39, $stack42, $stack45, $stack48, $stack51, $stack54, $stack57, $stack60, $stack63, $stack66, $stack69, $stack72, $stack75, $stack78, $stack81, $stack84, $stack87, $stack90, $stack93, $stack96, $stack99, $stack102, $stack105, $stack108, $stack111, $stack114, $stack117, $stack120, $stack123, $stack126, $stack129, $stack132, $stack135, $stack138, $stack141, $stack144, $stack147, $stack150, $stack153, $stack156, $stack159, $stack162, $stack165, $stack168, $stack171, $stack174, $stack177, $stack180, $stack183, $stack186, $stack189, $stack192;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = <java.lang.Character: java.lang.Class TYPE>;

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack1, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("byte -> char", $stack3);

        $stack4 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack4, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> byte", $stack6);

        $stack7 = <java.lang.Short: java.lang.Class TYPE>;

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack7, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> short", $stack9);

        $stack10 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack10, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> int", $stack12);

        $stack13 = <java.lang.Long: java.lang.Class TYPE>;

        $stack15 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack13, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> long", $stack15);

        $stack16 = <java.lang.Float: java.lang.Class TYPE>;

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack16, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> float", $stack18);

        $stack19 = <java.lang.Double: java.lang.Class TYPE>;

        $stack21 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack19, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte -> double", $stack21);

        $stack22 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Byte;", $stack22, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("byte -> boolean", $stack24);

        $stack25 = <java.lang.Character: java.lang.Class TYPE>;

        $stack27 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack25, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> char", $stack27);

        $stack28 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack28, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> byte", $stack30);

        $stack31 = <java.lang.Short: java.lang.Class TYPE>;

        $stack33 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack31, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> short", $stack33);

        $stack34 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack36 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack34, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> int", $stack36);

        $stack37 = <java.lang.Long: java.lang.Class TYPE>;

        $stack39 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack37, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> long", $stack39);

        $stack40 = <java.lang.Float: java.lang.Class TYPE>;

        $stack42 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack40, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> float", $stack42);

        $stack43 = <java.lang.Double: java.lang.Class TYPE>;

        $stack45 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack43, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short -> double", $stack45);

        $stack46 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack48 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Short;", $stack46, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short -> boolean", $stack48);

        $stack49 = <java.lang.Character: java.lang.Class TYPE>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack49, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> char", $stack51);

        $stack52 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack52, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> byte", $stack54);

        $stack55 = <java.lang.Short: java.lang.Class TYPE>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack55, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> short", $stack57);

        $stack58 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack58, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> int", $stack60);

        $stack61 = <java.lang.Long: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack61, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> long", $stack63);

        $stack64 = <java.lang.Float: java.lang.Class TYPE>;

        $stack66 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack64, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> float", $stack66);

        $stack67 = <java.lang.Double: java.lang.Class TYPE>;

        $stack69 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack67, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char -> double", $stack69);

        $stack70 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack72 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Character;", $stack70, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char -> boolean", $stack72);

        $stack73 = <java.lang.Character: java.lang.Class TYPE>;

        $stack75 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack73, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> char", $stack75);

        $stack76 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack78 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack76, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> byte", $stack78);

        $stack79 = <java.lang.Short: java.lang.Class TYPE>;

        $stack81 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack79, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> short", $stack81);

        $stack82 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack84 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack82, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> int", $stack84);

        $stack85 = <java.lang.Long: java.lang.Class TYPE>;

        $stack87 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack85, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> long", $stack87);

        $stack88 = <java.lang.Float: java.lang.Class TYPE>;

        $stack90 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack88, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> float", $stack90);

        $stack91 = <java.lang.Double: java.lang.Class TYPE>;

        $stack93 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack91, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int -> double", $stack93);

        $stack94 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack96 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Integer;", $stack94, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int -> boolean", $stack96);

        $stack97 = <java.lang.Character: java.lang.Class TYPE>;

        $stack99 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack97, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> char", $stack99);

        $stack100 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack102 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack100, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> byte", $stack102);

        $stack103 = <java.lang.Short: java.lang.Class TYPE>;

        $stack105 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack103, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> short", $stack105);

        $stack106 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack108 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack106, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> int", $stack108);

        $stack109 = <java.lang.Long: java.lang.Class TYPE>;

        $stack111 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack109, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("long -> long", $stack111);

        $stack112 = <java.lang.Float: java.lang.Class TYPE>;

        $stack114 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack112, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("long -> float", $stack114);

        $stack115 = <java.lang.Double: java.lang.Class TYPE>;

        $stack117 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack115, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("long -> double", $stack117);

        $stack118 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack120 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Long;", $stack118, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long -> boolean", $stack120);

        $stack121 = <java.lang.Character: java.lang.Class TYPE>;

        $stack123 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack121, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> char", $stack123);

        $stack124 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack126 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack124, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> byte", $stack126);

        $stack127 = <java.lang.Short: java.lang.Class TYPE>;

        $stack129 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack127, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> short", $stack129);

        $stack130 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack132 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack130, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> int", $stack132);

        $stack133 = <java.lang.Long: java.lang.Class TYPE>;

        $stack135 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack133, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> long", $stack135);

        $stack136 = <java.lang.Float: java.lang.Class TYPE>;

        $stack138 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack136, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("float -> float", $stack138);

        $stack139 = <java.lang.Double: java.lang.Class TYPE>;

        $stack141 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack139, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("float -> double", $stack141);

        $stack142 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack144 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Float;", $stack142, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float -> boolean", $stack144);

        $stack145 = <java.lang.Character: java.lang.Class TYPE>;

        $stack147 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack145, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> char", $stack147);

        $stack148 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack150 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack148, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> byte", $stack150);

        $stack151 = <java.lang.Short: java.lang.Class TYPE>;

        $stack153 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack151, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> short", $stack153);

        $stack154 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack156 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack154, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> int", $stack156);

        $stack157 = <java.lang.Long: java.lang.Class TYPE>;

        $stack159 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack157, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> long", $stack159);

        $stack160 = <java.lang.Float: java.lang.Class TYPE>;

        $stack162 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack160, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> float", $stack162);

        $stack163 = <java.lang.Double: java.lang.Class TYPE>;

        $stack165 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack163, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("double -> double", $stack165);

        $stack166 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack168 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Double;", $stack166, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double -> boolean", $stack168);

        $stack169 = <java.lang.Character: java.lang.Class TYPE>;

        $stack171 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack169, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> char", $stack171);

        $stack172 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack174 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack172, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> byte", $stack174);

        $stack175 = <java.lang.Short: java.lang.Class TYPE>;

        $stack177 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack175, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> short", $stack177);

        $stack178 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack180 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack178, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> int", $stack180);

        $stack181 = <java.lang.Long: java.lang.Class TYPE>;

        $stack183 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack181, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> long", $stack183);

        $stack184 = <java.lang.Float: java.lang.Class TYPE>;

        $stack186 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack184, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> float", $stack186);

        $stack187 = <java.lang.Double: java.lang.Class TYPE>;

        $stack189 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack187, 1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean -> double", $stack189);

        $stack190 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack192 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(class "Ljava/lang/Boolean;", $stack190, 1);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("boolean -> boolean", $stack192);

        return;
    }

    public void testIsPrimitiveOrWrapper()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $stack45, $stack47, $stack49, $stack52;
        java.lang.Class $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack38, $stack41, $stack51;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Boolean;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Boolean.class", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Byte;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Byte.class", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Character;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Character.class", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Short;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Short.class", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Integer;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Integer.class", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Long;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Long.class", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Double;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Double.class", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Float;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Float.class", $stack16);

        $stack17 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack19 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack17);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("boolean", $stack19);

        $stack20 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack20);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("byte", $stack22);

        $stack23 = <java.lang.Character: java.lang.Class TYPE>;

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack23);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("char", $stack25);

        $stack26 = <java.lang.Short: java.lang.Class TYPE>;

        $stack28 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack26);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("short", $stack28);

        $stack29 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack31 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack29);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("int", $stack31);

        $stack32 = <java.lang.Long: java.lang.Class TYPE>;

        $stack34 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack32);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("long", $stack34);

        $stack35 = <java.lang.Double: java.lang.Class TYPE>;

        $stack37 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack35);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("double", $stack37);

        $stack38 = <java.lang.Float: java.lang.Class TYPE>;

        $stack40 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack38);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("float", $stack40);

        $stack41 = <java.lang.Void: java.lang.Class TYPE>;

        $stack43 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack41);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Void.TYPE", $stack43);

        $stack45 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("null", $stack45);

        $stack47 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/Void;");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Void.class", $stack47);

        $stack49 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("String.class", $stack49);

        $stack51 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack52 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>($stack51);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("this.getClass()", $stack52);

        return;
    }

    public void testIsPrimitiveWrapper()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $stack40, $stack42, $stack44, $stack47, $stack49, $stack52;
        java.lang.Class $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack38, $stack45, $stack51;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Boolean;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Boolean.class", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Byte;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Byte.class", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Character;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Character.class", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Short;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Short.class", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Integer;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Integer.class", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Long;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Long.class", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Double;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Double.class", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Float;");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Float.class", $stack16);

        $stack17 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack19 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack17);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("boolean", $stack19);

        $stack20 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack20);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("byte", $stack22);

        $stack23 = <java.lang.Character: java.lang.Class TYPE>;

        $stack25 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack23);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("char", $stack25);

        $stack26 = <java.lang.Short: java.lang.Class TYPE>;

        $stack28 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack26);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("short", $stack28);

        $stack29 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack31 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack29);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("int", $stack31);

        $stack32 = <java.lang.Long: java.lang.Class TYPE>;

        $stack34 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack32);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("long", $stack34);

        $stack35 = <java.lang.Double: java.lang.Class TYPE>;

        $stack37 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack35);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("double", $stack37);

        $stack38 = <java.lang.Float: java.lang.Class TYPE>;

        $stack40 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack38);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("float", $stack40);

        $stack42 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("null", $stack42);

        $stack44 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/Void;");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Void.class", $stack44);

        $stack45 = <java.lang.Void: java.lang.Class TYPE>;

        $stack47 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack45);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Void.TYPE", $stack47);

        $stack49 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("String.class", $stack49);

        $stack51 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack52 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($stack51);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("this.getClass()", $stack52);

        return;
    }

    public void testPrimitiveToWrapper()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack1, $stack4, $stack5, $stack8, $stack9, $stack12, $stack13, $stack16, $stack17, $stack20, $stack21, $stack24, $stack25, $stack28, $stack29, $stack32, $stack35, $stack38, $stack39, $stack41, $stack42, $stack44;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("boolean -> Boolean.class", class "Ljava/lang/Boolean;", $stack4);

        $stack5 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("byte -> Byte.class", class "Ljava/lang/Byte;", $stack8);

        $stack9 = <java.lang.Character: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("char -> Character.class", class "Ljava/lang/Character;", $stack12);

        $stack13 = <java.lang.Short: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("short -> Short.class", class "Ljava/lang/Short;", $stack16);

        $stack17 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("int -> Integer.class", class "Ljava/lang/Integer;", $stack20);

        $stack21 = <java.lang.Long: java.lang.Class TYPE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("long -> Long.class", class "Ljava/lang/Long;", $stack24);

        $stack25 = <java.lang.Double: java.lang.Class TYPE>;

        $stack28 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("double -> Double.class", class "Ljava/lang/Double;", $stack28);

        $stack29 = <java.lang.Float: java.lang.Class TYPE>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack29);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("float -> Float.class", class "Ljava/lang/Float;", $stack32);

        $stack35 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("String.class -> String.class", class "Ljava/lang/String;", $stack35);

        $stack38 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ClassUtils.class -> ClassUtils.class", class "Lorg/apache/commons/lang3/ClassUtils;", $stack38);

        $stack41 = <java.lang.Void: java.lang.Class TYPE>;

        $stack39 = <java.lang.Void: java.lang.Class TYPE>;

        $stack42 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>($stack39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Void.TYPE -> Void.TYPE", $stack41, $stack42);

        $stack44 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null -> null", $stack44);

        return;
    }

    public void testPrimitivesToWrappers()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack14, $stack20;
        java.lang.StringBuilder $stack41, $stack42, $stack43, $stack44;
        int $stack35, i;
        java.lang.String $stack45;
        java.lang.Class[] $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack17, $stack18, $stack21, $stack23, $stack24, $stack25, $stack34, $stack36, $stack39;
        java.lang.Class $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack37, primitive, $stack40, $stack46;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack7 = (java.lang.Class[]) null;

        $stack9 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] primitivesToWrappers(java.lang.Class[])>($stack7);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null -> null", $stack9);

        $stack12 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack10 = newarray (java.lang.Class)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] primitivesToWrappers(java.lang.Class[])>($stack10);

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack12, $stack13);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("empty -> empty", $stack14);

        $stack15 = newarray (java.lang.Class)[1];

        $stack15[0] = null;

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] primitivesToWrappers(java.lang.Class[])>($stack15);

        $stack18 = newarray (java.lang.Class)[1];

        $stack18[0] = null;

        $stack20 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack18, $stack17);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("(Class<?>)null -> [null]", $stack20);

        $stack23 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack21 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] primitivesToWrappers(java.lang.Class[])>($stack21);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>("empty -> empty", $stack23, $stack24);

        $stack25 = newarray (java.lang.Class)[10];

        $stack26 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack25[0] = $stack26;

        $stack27 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack25[1] = $stack27;

        $stack28 = <java.lang.Character: java.lang.Class TYPE>;

        $stack25[2] = $stack28;

        $stack29 = <java.lang.Short: java.lang.Class TYPE>;

        $stack25[3] = $stack29;

        $stack30 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack25[4] = $stack30;

        $stack31 = <java.lang.Long: java.lang.Class TYPE>;

        $stack25[5] = $stack31;

        $stack32 = <java.lang.Double: java.lang.Class TYPE>;

        $stack25[6] = $stack32;

        $stack33 = <java.lang.Float: java.lang.Class TYPE>;

        $stack25[7] = $stack33;

        $stack25[8] = class "Ljava/lang/String;";

        $stack25[9] = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack34 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] primitivesToWrappers(java.lang.Class[])>($stack25);

        i = 0;

     label1:
        $stack35 = lengthof $stack25;

        if i >= $stack35 goto label2;

        primitive = $stack25[i];

        $stack40 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(primitive);

        $stack41 = new java.lang.StringBuilder;

        specialinvoke $stack41.<java.lang.StringBuilder: void <init>()>();

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(primitive);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack40);

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack46 = $stack34[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack45, $stack40, $stack46);

        i = i + 1;

        goto label1;

     label2:
        $stack36 = newarray (java.lang.Class)[3];

        $stack36[0] = class "Ljava/lang/String;";

        $stack36[1] = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack37 = <java.lang.Void: java.lang.Class TYPE>;

        $stack36[2] = $stack37;

        $stack39 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] primitivesToWrappers(java.lang.Class[])>($stack36);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>("unmodified", $stack36, $stack39);

        return;
    }

    public void testWrapperToPrimitive()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        int len$, i$;
        java.lang.String $stack23;
        boolean $stack18;
        java.lang.Class[] $stack7;
        java.lang.Class $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, primitive, $stack16, $stack24;
        java.lang.StringBuilder $stack19, $stack20, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack7 = newarray (java.lang.Class)[8];

        $stack8 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack7[0] = $stack8;

        $stack9 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack7[1] = $stack9;

        $stack10 = <java.lang.Character: java.lang.Class TYPE>;

        $stack7[2] = $stack10;

        $stack11 = <java.lang.Short: java.lang.Class TYPE>;

        $stack7[3] = $stack11;

        $stack12 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack7[4] = $stack12;

        $stack13 = <java.lang.Long: java.lang.Class TYPE>;

        $stack7[5] = $stack13;

        $stack14 = <java.lang.Float: java.lang.Class TYPE>;

        $stack7[6] = $stack14;

        $stack15 = <java.lang.Double: java.lang.Class TYPE>;

        $stack7[7] = $stack15;

        len$ = lengthof $stack7;

        i$ = 0;

     label1:
        if i$ >= len$ goto label2;

        primitive = $stack7[i$];

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(primitive);

        $stack18 = virtualinvoke $stack16.<java.lang.Class: boolean isPrimitive()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("Still primitive", $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack16);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(primitive);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>($stack16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack23, primitive, $stack24);

        i$ = i$ + 1;

        goto label1;

     label2:
        return;
    }

    public void testWrapperToPrimitiveNoWrapper()
    {
        java.lang.Class $stack2;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Wrong result for non wrapper class", $stack2);

        return;
    }

    public void testWrapperToPrimitiveNull()
    {
        java.lang.Class $stack2;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Wrong result for null class", $stack2);

        return;
    }

    public void testWrappersToPrimitives()
    {
        long $stack9, $stack10;
        org.apache.commons.lang3.ClassUtilsTest this;
        int $stack7, $stack8, $stack11, i;
        java.lang.String $stack19;
        java.lang.Class[] $stack5, $stack6;
        java.lang.Class $stack12, $stack13, $stack15, $stack20;
        java.lang.StringBuilder $stack14, $stack16, $stack17, $stack18;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack5 = newarray (java.lang.Class)[11];

        $stack5[0] = class "Ljava/lang/Boolean;";

        $stack5[1] = class "Ljava/lang/Byte;";

        $stack5[2] = class "Ljava/lang/Character;";

        $stack5[3] = class "Ljava/lang/Short;";

        $stack5[4] = class "Ljava/lang/Integer;";

        $stack5[5] = class "Ljava/lang/Long;";

        $stack5[6] = class "Ljava/lang/Float;";

        $stack5[7] = class "Ljava/lang/Double;";

        $stack5[8] = class "Ljava/lang/String;";

        $stack5[9] = class "Lorg/apache/commons/lang3/ClassUtils;";

        $stack5[10] = null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] wrappersToPrimitives(java.lang.Class[])>($stack5);

        $stack7 = lengthof $stack5;

        $stack10 = (long) $stack7;

        $stack8 = lengthof $stack6;

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong length of result array", $stack10, $stack9);

        i = 0;

     label1:
        $stack11 = lengthof $stack5;

        if i >= $stack11 goto label2;

        $stack12 = $stack5[i];

        $stack13 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>($stack12);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = $stack5[i];

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack13);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = $stack6[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack19, $stack13, $stack20);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public void testWrappersToPrimitivesNull()
    {
        java.lang.Class[] $stack2, $stack4, $stack5, $stack7, $stack8, $stack10, $stack12, $stack13;
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack9, $stack15;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = (java.lang.Class[]) null;

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] wrappersToPrimitives(java.lang.Class[])>($stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Wrong result for null input", $stack4);

        $stack7 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack5 = newarray (java.lang.Class)[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] wrappersToPrimitives(java.lang.Class[])>($stack5);

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("empty -> empty", $stack9);

        $stack10 = newarray (java.lang.Class)[1];

        $stack10[0] = null;

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] wrappersToPrimitives(java.lang.Class[])>($stack10);

        $stack13 = newarray (java.lang.Class)[1];

        $stack13[0] = null;

        $stack15 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack13, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("(Class<?>)null -> [null]", $stack15);

        return;
    }

    public void testWrappersToPrimitivesEmpty()
    {
        java.lang.Class[] empty, $stack3;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        empty = newarray (java.lang.Class)[0];

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] wrappersToPrimitives(java.lang.Class[])>(empty);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>("Wrong result for empty input", empty, $stack3);

        return;
    }

    public void testGetClassClassNotFound() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("bool");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("bool[]");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("integer[]");

        return;
    }

    public void testGetClassInvalidArguments() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsNullPointerException(java.lang.String)>(null);

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("[][][]");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("[[]");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("[");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("java.lang.String][");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>(".hello.world");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsClassNotFound(java.lang.String)>("hello..world");

        return;
    }

    public void testWithInterleavingWhitespace() throws java.lang.ClassNotFoundException
    {
        java.lang.Class $stack2, $stack4, $stack6, $stack8;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>(" int [ ] ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[I", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("\rlong\t[\n]\r");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[J", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("\tshort                \t\t[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[S", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("byte[\t\t\n\r]   ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[B", $stack8);

        return;
    }

    public void testGetInnerClass() throws java.lang.ClassNotFoundException
    {
        java.lang.Class $stack2, $stack4, $stack6, $stack8;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner$DeeplyNested;", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner$DeeplyNested;", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner$DeeplyNested;", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner$DeeplyNested;", $stack8);

        return;
    }

    public void testGetClassByNormalNameArrays() throws java.lang.ClassNotFoundException
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("int[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[I", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("long[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[J", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("short[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[S", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("byte[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[B", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("char[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[C", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("float[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[F", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("double[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[D", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("boolean[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Z", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("java.lang.String[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Ljava/lang/String;", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("java.util.Map.Entry[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Ljava/util/Map$Entry;", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("java.util.Map$Entry[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Ljava/util/Map$Entry;", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("[Ljava.util.Map.Entry;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Ljava/util/Map$Entry;", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("[Ljava.util.Map$Entry;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Ljava/util/Map$Entry;", $stack26);

        return;
    }

    public void testGetClassByNormalNameArrays2D() throws java.lang.ClassNotFoundException
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("int[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[I", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("long[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[J", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("short[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[S", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("byte[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[B", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("char[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[C", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("float[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[F", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("double[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[D", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("boolean[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[Z", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("java.lang.String[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[[Ljava/lang/String;", $stack18);

        return;
    }

    public void testGetClassWithArrayClasses2D() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[Ljava/lang/String;");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[I");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[J");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[S");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[B");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[C");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[F");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[D");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[[Z");

        return;
    }

    public void testGetClassWithArrayClasses() throws java.lang.Exception
    {
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[Ljava/lang/String;");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[I");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[J");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[S");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[B");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[C");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[F");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[D");

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassReturnsClass(java.lang.Class)>(class "[Z");

        return;
    }

    public void testGetClassRawPrimitives() throws java.lang.ClassNotFoundException
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack1 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("int");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack1, $stack2);

        $stack3 = <java.lang.Long: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("long");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        $stack5 = <java.lang.Short: java.lang.Class TYPE>;

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("short");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("byte");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = <java.lang.Character: java.lang.Class TYPE>;

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("char");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        $stack11 = <java.lang.Float: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("float");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        $stack13 = <java.lang.Double: java.lang.Class TYPE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("double");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $stack15 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>("boolean");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        return;
    }

    private void assertGetClassReturnsClass(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Class c, $stack3;
        java.lang.String $stack2;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        c := @parameter0: java.lang.Class;

        $stack2 = virtualinvoke c.<java.lang.Class: java.lang.String getName()>();

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>($stack2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(c, $stack3);

        return;
    }

    private void assertGetClassThrowsException(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Exception $stack13;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.StringBuilder $stack5, $stack6, $stack8, $stack9, $stack10, $stack11;
        java.lang.Class exceptionType, $stack14;
        java.lang.String className, $stack7, $stack12;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        className := @parameter0: java.lang.String;

        exceptionType := @parameter1: java.lang.Class;

     label1:
        staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String)>(className);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassUtils.getClass() should fail with an exception of type ");

        $stack7 = virtualinvoke exceptionType.<java.lang.Class: java.lang.String getName()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when given class name \"");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack12);

     label2:
        goto label4;

     label3:
        $stack13 := @caughtexception;

        $stack14 = virtualinvoke $stack13.<java.lang.Object: java.lang.Class getClass()>();

        $stack15 = virtualinvoke exceptionType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($stack14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void assertGetClassThrowsNullPointerException(java.lang.String) throws java.lang.Exception
    {
        java.lang.String className;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        className := @parameter0: java.lang.String;

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsException(java.lang.String,java.lang.Class)>(className, class "Ljava/lang/NullPointerException;");

        return;
    }

    private void assertGetClassThrowsClassNotFound(java.lang.String) throws java.lang.Exception
    {
        java.lang.String className;
        org.apache.commons.lang3.ClassUtilsTest this;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        className := @parameter0: java.lang.String;

        specialinvoke this.<org.apache.commons.lang3.ClassUtilsTest: void assertGetClassThrowsException(java.lang.String,java.lang.Class)>(className, class "Ljava/lang/ClassNotFoundException;");

        return;
    }

    public void testShowJavaBug() throws java.lang.Exception
    {
        java.lang.IllegalAccessException $stack11;
        java.lang.Object[] $stack9;
        java.util.Set $stack5;
        java.lang.Class[] $stack7;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.util.HashSet $stack4;
        java.lang.Class $stack6;
        java.lang.reflect.Method $stack8;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack4 = new java.util.HashSet;

        specialinvoke $stack4.<java.util.HashSet: void <init>()>();

        $stack5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = newarray (java.lang.Class)[0];

        $stack8 = virtualinvoke $stack6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isEmpty", $stack7);

     label1:
        $stack9 = newarray (java.lang.Object)[0];

        virtualinvoke $stack8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($stack5, $stack9);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Failed to throw IllegalAccessException as expected");

     label2:
        goto label4;

     label3:
        $stack11 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public void testGetPublicMethod() throws java.lang.Exception
    {
        java.lang.Object[] $stack12;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.util.HashSet $stack4;
        int $stack10;
        java.lang.reflect.Method $stack8, $stack15, $stack18;
        boolean $stack11;
        java.lang.IllegalAccessException $stack19;
        java.util.Set $stack5;
        java.lang.Class[] $stack7, $stack14, $stack16;
        java.lang.Class $stack6, $stack9, $stack17;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack4 = new java.util.HashSet;

        specialinvoke $stack4.<java.util.HashSet: void <init>()>();

        $stack5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = newarray (java.lang.Class)[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($stack6, "isEmpty", $stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $stack10 = virtualinvoke $stack9.<java.lang.Class: int getModifiers()>();

        $stack11 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

     label1:
        $stack12 = newarray (java.lang.Object)[0];

        virtualinvoke $stack8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($stack5, $stack12);

     label2:
        goto label4;

     label3:
        $stack19 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should not have thrown IllegalAccessException");

     label4:
        $stack14 = newarray (java.lang.Class)[0];

        $stack15 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(class "Ljava/lang/Object;", "toString", $stack14);

        $stack17 = class "Ljava/lang/Object;";

        $stack16 = newarray (java.lang.Class)[0];

        $stack18 = virtualinvoke $stack17.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toString", $stack16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack15);

        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public void testToClass_object()
    {
        java.lang.Object[] $stack2, $stack4, $stack9, $stack12, $stack15, $stack19, $stack27;
        java.lang.Double $stack23, $stack29;
        java.lang.Integer $stack21;
        org.apache.commons.lang3.ClassUtilsTest this;
        boolean $stack8, $stack14, $stack25, $stack31;
        java.lang.Class[] $stack3, $stack6, $stack7, $stack11, $stack16, $stack17, $stack18, $stack24, $stack26, $stack30;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = (java.lang.Object[]) null;

        $stack3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] toClass(java.lang.Object[])>($stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack3);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack4 = newarray (java.lang.Object)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] toClass(java.lang.Object[])>($stack4);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("empty -> empty", $stack8);

        $stack9 = newarray (java.lang.Object)[1];

        $stack9[0] = null;

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] toClass(java.lang.Object[])>($stack9);

        $stack12 = newarray (java.lang.Object)[1];

        $stack12[0] = null;

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack12, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("(Object)null -> [null]", $stack14);

        $stack16 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;

        $stack15 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] toClass(java.lang.Object[])>($stack15);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack16, $stack17);

        $stack18 = newarray (java.lang.Class)[3];

        $stack18[0] = class "Ljava/lang/String;";

        $stack18[1] = class "Ljava/lang/Integer;";

        $stack18[2] = class "Ljava/lang/Double;";

        $stack19 = newarray (java.lang.Object)[3];

        $stack19[0] = "Test";

        $stack21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack19[1] = $stack21;

        $stack23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(99.0);

        $stack19[2] = $stack23;

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] toClass(java.lang.Object[])>($stack19);

        $stack25 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack18, $stack24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = newarray (java.lang.Class)[3];

        $stack26[0] = class "Ljava/lang/String;";

        $stack26[1] = null;

        $stack26[2] = class "Ljava/lang/Double;";

        $stack27 = newarray (java.lang.Object)[3];

        $stack27[0] = "Test";

        $stack27[1] = null;

        $stack29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(99.0);

        $stack27[2] = $stack29;

        $stack30 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class[] toClass(java.lang.Object[])>($stack27);

        $stack31 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack26, $stack30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        return;
    }

    public void test_getShortCanonicalName_Object()
    {
        org.apache.commons.lang3.ClassUtilsTest$Inner $stack24;
        int[][] $stack15;
        org.apache.commons.lang3.ClassUtils[][] $stack9;
        org.apache.commons.lang3.ClassUtilsTest this;
        org.apache.commons.lang3.ClassUtils $stack3;
        int[] $stack12;
        java.lang.String $stack2, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        org.apache.commons.lang3.ClassUtilsTest$6 $stack18;
        org.apache.commons.lang3.ClassUtils[] $stack6;
        org.apache.commons.lang3.ClassUtilsTest$5Named $stack21;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>(null, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack2);

        $stack3 = new org.apache.commons.lang3.ClassUtils;

        specialinvoke $stack3.<org.apache.commons.lang3.ClassUtils: void <init>()>();

        $stack5 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack3, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack5);

        $stack6 = newarray (org.apache.commons.lang3.ClassUtils)[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack6, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[]", $stack8);

        $stack9 = newmultiarray (org.apache.commons.lang3.ClassUtils)[0][0];

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack9, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[][]", $stack11);

        $stack12 = newarray (int)[0];

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack12, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[]", $stack14);

        $stack15 = newmultiarray (int)[0][0];

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack15, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[][]", $stack17);

        $stack18 = new org.apache.commons.lang3.ClassUtilsTest$6;

        specialinvoke $stack18.<org.apache.commons.lang3.ClassUtilsTest$6: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack18, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.6", $stack20);

        $stack21 = new org.apache.commons.lang3.ClassUtilsTest$5Named;

        specialinvoke $stack21.<org.apache.commons.lang3.ClassUtilsTest$5Named: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack21, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.5Named", $stack23);

        $stack24 = new org.apache.commons.lang3.ClassUtilsTest$Inner;

        specialinvoke $stack24.<org.apache.commons.lang3.ClassUtilsTest$Inner: void <init>(org.apache.commons.lang3.ClassUtilsTest$1)>(null);

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Object,java.lang.String)>($stack24, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.Inner", $stack26);

        return;
    }

    public void test_getShortCanonicalName_Class()
    {
        org.apache.commons.lang3.ClassUtilsTest$7 $stack11;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack13;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack14, $stack16, $stack18;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>(class "[Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[]", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>(class "[[Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[][]", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>(class "[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[]", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>(class "[[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[][]", $stack10);

        $stack11 = new org.apache.commons.lang3.ClassUtilsTest$7;

        specialinvoke $stack11.<org.apache.commons.lang3.ClassUtilsTest$7: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack13 = virtualinvoke $stack11.<java.lang.Object: java.lang.Class getClass()>();

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.7", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$6Named;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.6Named", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.Inner", $stack18);

        return;
    }

    public void test_getShortCanonicalName_String()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtils");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("[Lorg.apache.commons.lang3.ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[]", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("[[Lorg.apache.commons.lang3.ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[][]", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtils[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[]", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtils[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtils[][]", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[]", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("[[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[][]", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("int[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[]", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("int[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("int[][]", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$6");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.6", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$5Named");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.5Named", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$Inner");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ClassUtilsTest.Inner", $stack24);

        return;
    }

    public void test_getPackageCanonicalName_Object()
    {
        org.apache.commons.lang3.ClassUtilsTest$Inner $stack24;
        int[][] $stack15;
        org.apache.commons.lang3.ClassUtilsTest$7Named $stack21;
        org.apache.commons.lang3.ClassUtils[][] $stack9;
        org.apache.commons.lang3.ClassUtilsTest this;
        org.apache.commons.lang3.ClassUtils $stack3;
        int[] $stack12;
        java.lang.String $stack2, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        org.apache.commons.lang3.ClassUtils[] $stack6;
        org.apache.commons.lang3.ClassUtilsTest$8 $stack18;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>(null, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack2);

        $stack3 = new org.apache.commons.lang3.ClassUtils;

        specialinvoke $stack3.<org.apache.commons.lang3.ClassUtils: void <init>()>();

        $stack5 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack3, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack5);

        $stack6 = newarray (org.apache.commons.lang3.ClassUtils)[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack6, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack8);

        $stack9 = newmultiarray (org.apache.commons.lang3.ClassUtils)[0][0];

        $stack11 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack9, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack11);

        $stack12 = newarray (int)[0];

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack12, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack14);

        $stack15 = newmultiarray (int)[0][0];

        $stack17 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack15, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack17);

        $stack18 = new org.apache.commons.lang3.ClassUtilsTest$8;

        specialinvoke $stack18.<org.apache.commons.lang3.ClassUtilsTest$8: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack18, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack20);

        $stack21 = new org.apache.commons.lang3.ClassUtilsTest$7Named;

        specialinvoke $stack21.<org.apache.commons.lang3.ClassUtilsTest$7Named: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack23 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack21, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack23);

        $stack24 = new org.apache.commons.lang3.ClassUtilsTest$Inner;

        specialinvoke $stack24.<org.apache.commons.lang3.ClassUtilsTest$Inner: void <init>(org.apache.commons.lang3.ClassUtilsTest$1)>(null);

        $stack26 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Object,java.lang.String)>($stack24, "<null>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack26);

        return;
    }

    public void test_getPackageCanonicalName_Class()
    {
        org.apache.commons.lang3.ClassUtilsTest$9 $stack11;
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.Class $stack13;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack14, $stack16, $stack18;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>(class "[Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>(class "[[Lorg/apache/commons/lang3/ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>(class "[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>(class "[[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack11 = new org.apache.commons.lang3.ClassUtilsTest$9;

        specialinvoke $stack11.<org.apache.commons.lang3.ClassUtilsTest$9: void <init>(org.apache.commons.lang3.ClassUtilsTest)>(this);

        $stack13 = virtualinvoke $stack11.<java.lang.Object: java.lang.Class getClass()>();

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$8Named;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.Class)>(class "Lorg/apache/commons/lang3/ClassUtilsTest$Inner;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack18);

        return;
    }

    public void test_getPackageCanonicalName_String()
    {
        org.apache.commons.lang3.ClassUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24;

        this := @this: org.apache.commons.lang3.ClassUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtils");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("[Lorg.apache.commons.lang3.ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("[[Lorg.apache.commons.lang3.ClassUtils;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtils[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtils[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("[[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("int[]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("int[][]");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$6");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$5Named");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>("org.apache.commons.lang3.ClassUtilsTest$Inner");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("org.apache.commons.lang3", $stack24);

        return;
    }
}
