public class org.apache.commons.lang3.builder.ToStringBuilderTest extends java.lang.Object
{
    private final java.lang.Integer base;
    private final java.lang.String baseStr;

    public void <init>()
    {
        java.lang.Integer $stack1, $stack3, $stack8;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int $stack9;
        java.lang.StringBuilder $stack2, $stack6, $stack7, $stack11;
        java.lang.Class $stack4;
        java.lang.String $stack5, $stack10, $stack12;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $stack1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base> = $stack1;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        $stack4 = virtualinvoke $stack3.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.String getName()>();

        $stack6 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $stack8 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        $stack9 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($stack8);

        $stack10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($stack9);

        $stack11 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr> = $stack12;

        return;
    }

    public void after()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void validateNullToStringStyleRegistry()>();

        return;
    }

    public void testConstructorEx1()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack3;
        org.apache.commons.lang3.builder.ToStringBuilder $stack1;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new org.apache.commons.lang3.builder.ToStringBuilder;

        specialinvoke $stack1.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>(null);

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack3);

        return;
    }

    public void testConstructorEx2()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack1, $stack4;
        java.lang.String $stack3;
        java.lang.Integer $stack5;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new org.apache.commons.lang3.builder.ToStringBuilder;

        specialinvoke $stack1.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>(null, null);

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack3);

        $stack4 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack5 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>($stack5, null);

        virtualinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        return;
    }

    public void testConstructorEx3()
    {
        org.apache.commons.lang3.builder.ToStringStyle $stack8;
        java.lang.Integer $stack5, $stack9;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack1, $stack4, $stack7;
        java.lang.String $stack3;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new org.apache.commons.lang3.builder.ToStringBuilder;

        specialinvoke $stack1.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)>(null, null, null);

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack3);

        $stack4 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack5 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)>($stack5, null, null);

        virtualinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        $stack7 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        $stack8 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle DEFAULT_STYLE>;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.StringBuffer)>($stack9, $stack8, null);

        virtualinvoke $stack7.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        return;
    }

    public void testGetSetDefault()
    {
        java.lang.Throwable $stack6;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringStyle $stack2, $stack3, $stack4, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

     label1:
        $stack2 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle NO_FIELD_NAMES_STYLE>;

        staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: void setDefaultStyle(org.apache.commons.lang3.builder.ToStringStyle)>($stack2);

        $stack3 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle NO_FIELD_NAMES_STYLE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringStyle getDefaultStyle()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack3, $stack4);

     label2:
        $stack5 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle DEFAULT_STYLE>;

        staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: void setDefaultStyle(org.apache.commons.lang3.builder.ToStringStyle)>($stack5);

        goto label5;

     label3:
        $stack6 := @caughtexception;

     label4:
        $stack7 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle DEFAULT_STYLE>;

        staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: void setDefaultStyle(org.apache.commons.lang3.builder.ToStringStyle)>($stack7);

        throw $stack6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testSetDefaultEx()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: void setDefaultStyle(org.apache.commons.lang3.builder.ToStringStyle)>(null);

        return;
    }

    public void testBlank()
    {
        java.lang.Integer $stack7;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6;
        java.lang.StringBuilder $stack1, $stack3, $stack4;
        java.lang.String $stack2, $stack5, $stack8;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack8);

        return;
    }

    public void testReflectionInteger()
    {
        java.lang.Integer $stack6;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack1, $stack3, $stack4;
        java.lang.String $stack2, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[value=5]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        $stack7 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack7);

        return;
    }

    public void testReflectionCharacter()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.Character $stack2;
        java.lang.StringBuilder $stack3, $stack5, $stack6;
        java.lang.String $stack4, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new java.lang.Character;

        specialinvoke $stack2.<java.lang.Character: void <init>(char)>(65);

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[value=A]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        return;
    }

    public void testReflectionBoolean()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.Boolean b;
        java.lang.StringBuilder $stack2, $stack4, $stack5, $stack8, $stack10, $stack11;
        java.lang.String $stack3, $stack6, $stack7, $stack9, $stack12, $stack13;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        b = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(b);

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[value=true]");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack7 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(b);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        b = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(b);

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[value=false]");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack13 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(b);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

        return;
    }

    private java.lang.String toBaseString(java.lang.Object)
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int $stack7;
        java.lang.StringBuilder $stack2, $stack5, $stack6, $stack9;
        java.lang.Object o;
        java.lang.Class $stack3;
        java.lang.String $stack4, $stack8, $stack10;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        o := @parameter0: java.lang.Object;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.String getName()>();

        $stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $stack7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(o);

        $stack8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($stack7);

        $stack9 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $stack10;
    }

    public void assertReflectionArray(java.lang.String, java.lang.Object)
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.Object actual;
        java.lang.String expected, $stack3, $stack4, $stack5, $stack6;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        expected := @parameter0: java.lang.String;

        actual := @parameter1: java.lang.Object;

        if actual != null goto label1;

        return;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(actual);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(expected, $stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>(actual, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(expected, $stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)>(actual, null, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(expected, $stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)>(actual, null, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(expected, $stack6);

        return;
    }

    public void testReflectionObjectArray()
    {
        java.lang.Object[] $stack3;
        java.lang.Integer $stack4;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int[] $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack6, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (java.lang.Object)[3];

        $stack3[0] = null;

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        $stack3[1] = $stack4;

        $stack5 = newarray (int)[2];

        $stack5[0] = 3;

        $stack5[1] = 6;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{<null>,5,{3,6}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionLongArray()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        long[] $stack3;
        java.lang.StringBuilder $stack5, $stack6, $stack7;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (long)[4];

        $stack3[0] = 1L;

        $stack3[1] = 2L;

        $stack3[2] = -3L;

        $stack3[3] = 4L;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionIntArray()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int[] $stack3;
        int $i0;
        java.lang.StringBuilder $stack6, $stack7, $u0;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (int)[4];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $i0 = (int) -3;

        $stack3[2] = $i0;

        $stack3[3] = 4;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionShortArray()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        short $s0;
        java.lang.StringBuilder $stack6, $stack7, $u0;
        short[] $stack3;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (short)[4];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $s0 = (short) -3;

        $stack3[2] = $s0;

        $stack3[3] = 4;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionyteArray()
    {
        byte[] $stack3;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack5, $stack6, $stack7;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (byte)[4];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $stack3[2] = -3;

        $stack3[3] = 4;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionCharArray()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        char[] $stack3;
        java.lang.StringBuilder $stack5, $stack6, $stack7;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (char)[4];

        $stack3[0] = 65;

        $stack3[1] = 50;

        $stack3[2] = 95;

        $stack3[3] = 68;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{A,2,_,D}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionDoubleArray()
    {
        double[] $stack3;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack5, $stack6, $stack7;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (double)[4];

        $stack3[0] = 1.0;

        $stack3[1] = 2.9876;

        $stack3[2] = -3.00001;

        $stack3[3] = 4.3;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1.0,2.9876,-3.00001,4.3}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionFloatArray()
    {
        float[] $stack3;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack5, $stack6, $stack7;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (float)[4];

        $stack3[0] = 1.0F;

        $stack3[1] = 2.9876F;

        $stack3[2] = -3.00001F;

        $stack3[3] = 4.3F;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1.0,2.9876,-3.00001,4.3}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionBooleanArray()
    {
        boolean[] $stack3;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack5, $stack6, $stack7;
        java.lang.String $stack4, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (boolean)[3];

        $stack3[0] = 1;

        $stack3[1] = 0;

        $stack3[2] = 0;

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{true,false,false}]");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", null);

        return;
    }

    public void testReflectionFloatArrayArray()
    {
        float[][] $stack3, array;
        float[] $stack4, $stack5;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack6, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (float[])[3];

        $stack4 = newarray (float)[2];

        $stack4[0] = 1.0F;

        $stack4[1] = 2.29686F;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (float)[1];

        $stack5[0] = #NaNF;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1.0,2.29686},<null>,{NaN}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        array = (float[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionLongArrayArray()
    {
        long[][] $stack3, array;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        long[] $stack4, $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack6, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (long[])[3];

        $stack4 = newarray (long)[2];

        $stack4[0] = 1L;

        $stack4[1] = 2L;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (long)[1];

        $stack5[0] = 5L;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        array = (long[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionIntArrayArray()
    {
        int[][] $stack3, array;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int[] $stack4, $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack6, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (int[])[3];

        $stack4 = newarray (int)[2];

        $stack4[0] = 1;

        $stack4[1] = 2;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (int)[1];

        $stack5[0] = 5;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        array = (int[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionhortArrayArray()
    {
        short[][] $stack3, array;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        short[] $stack4, $stack5;
        java.lang.String $stack6, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (short[])[3];

        $stack4 = newarray (short)[2];

        $stack4[0] = 1;

        $stack4[1] = 2;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (short)[1];

        $stack5[0] = 5;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        array = (short[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionByteArrayArray()
    {
        byte[] $stack4, $stack5;
        byte[][] $stack3, array;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack6, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (byte[])[3];

        $stack4 = newarray (byte)[2];

        $stack4[0] = 1;

        $stack4[1] = 2;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (byte)[1];

        $stack5[0] = 5;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        array = (byte[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionCharArrayArray()
    {
        char[][] $stack3, array;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        char[] $stack4, $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack6, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (char[])[3];

        $stack4 = newarray (char)[2];

        $stack4[0] = 65;

        $stack4[1] = 66;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (char)[1];

        $stack5[0] = 112;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{A,B},<null>,{p}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        array = (char[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionDoubleArrayArray()
    {
        double[] $stack4, $stack5;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack7, $stack8, $stack9;
        java.lang.String $stack6, $stack10, $stack11;
        double[][] $stack3, array;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (double[])[3];

        $stack4 = newarray (double)[2];

        $stack4[0] = 1.0;

        $stack4[1] = 2.29686;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (double)[1];

        $stack5[0] = #NaN;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1.0,2.29686},<null>,{NaN}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        array = (double[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionBooleanArrayArray()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack6, $stack10, $stack11, $stack15, $stack16;
        boolean[] $stack4, $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack12, $stack13, $stack14;
        boolean[][] $stack3, array;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = newarray (boolean[])[3];

        $stack4 = newarray (boolean)[2];

        $stack4[0] = 1;

        $stack4[1] = 0;

        $stack3[0] = $stack4;

        $stack3[1] = null;

        $stack5 = newarray (boolean)[1];

        $stack5[0] = 0;

        $stack3[2] = $stack5;

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{true,false},<null>,{false}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{true,false},<null>,{false}}]");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        array = (boolean[][]) null;

        virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: void assertReflectionArray(java.lang.String,java.lang.Object)>("<null>", array);

        return;
    }

    public void testReflectionHierarchyArrayList()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        return;
    }

    public void testReflectionHierarchy()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestFixtureA $stack4;
        org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestFixtureB $stack41;
        java.lang.StringBuilder $stack6, $stack7, $stack8, $stack11, $stack12, $stack13, $stack16, $stack17, $stack18, $stack21, $stack22, $stack23, $stack26, $stack27, $stack28, $stack31, $stack32, $stack33, $stack36, $stack37, $stack38, $stack43, $stack44, $stack45, $stack48, $stack49, $stack50, $stack53, $stack54, $stack55, $stack58, $stack59, $stack60, $stack63, $stack64, $stack65, $stack68, $stack69, $stack70, $stack73, $stack74, $stack75, $stack78, $stack79, $stack80, $stack83, $stack84, $stack85;
        java.lang.String $stack5, $stack9, $stack10, $stack14, $stack15, $stack19, $stack20, $stack24, $stack25, $stack29, $stack30, $stack34, $stack35, $stack39, $stack40, $stack42, $stack46, $stack47, $stack51, $stack52, $stack56, $stack57, $stack61, $stack62, $stack66, $stack67, $stack71, $stack72, $stack76, $stack77, $stack81, $stack82, $stack86, $stack87;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack4 = new org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestFixtureA;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestFixtureA: void <init>()>();

        $stack5 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack4);

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=a]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        $stack11 = new java.lang.StringBuilder;

        specialinvoke $stack11.<java.lang.StringBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=a]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>($stack4, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack15);

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=a]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)>($stack4, null, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=a,transientA=t]");

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack25 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)>($stack4, null, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack24, $stack25);

        $stack26 = new java.lang.StringBuilder;

        specialinvoke $stack26.<java.lang.StringBuilder: void <init>()>();

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=a]");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack30 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)>($stack4, null, 0, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack29, $stack30);

        $stack31 = new java.lang.StringBuilder;

        specialinvoke $stack31.<java.lang.StringBuilder: void <init>()>();

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=a]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)>($stack4, null, 0, class "Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack35);

        $stack36 = new java.lang.StringBuilder;

        specialinvoke $stack36.<java.lang.StringBuilder: void <init>()>();

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=a]");

        $stack39 = virtualinvoke $stack38.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack40 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)>($stack4, null, 0, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$ReflectionTestFixtureA;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, $stack40);

        $stack41 = new org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestFixtureB;

        specialinvoke $stack41.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestFixtureB: void <init>()>();

        $stack42 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack41);

        $stack43 = new java.lang.StringBuilder;

        specialinvoke $stack43.<java.lang.StringBuilder: void <init>()>();

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,a=a]");

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack47 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack41);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack46, $stack47);

        $stack48 = new java.lang.StringBuilder;

        specialinvoke $stack48.<java.lang.StringBuilder: void <init>()>();

        $stack49 = virtualinvoke $stack48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack50 = virtualinvoke $stack49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,a=a]");

        $stack51 = virtualinvoke $stack50.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack52 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack41);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack51, $stack52);

        $stack53 = new java.lang.StringBuilder;

        specialinvoke $stack53.<java.lang.StringBuilder: void <init>()>();

        $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack55 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,a=a]");

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack57 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>($stack41, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack56, $stack57);

        $stack58 = new java.lang.StringBuilder;

        specialinvoke $stack58.<java.lang.StringBuilder: void <init>()>();

        $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,a=a]");

        $stack61 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack62 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)>($stack41, null, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack61, $stack62);

        $stack63 = new java.lang.StringBuilder;

        specialinvoke $stack63.<java.lang.StringBuilder: void <init>()>();

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,transientB=t,a=a,transientA=t]");

        $stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack67 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean)>($stack41, null, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack66, $stack67);

        $stack68 = new java.lang.StringBuilder;

        specialinvoke $stack68.<java.lang.StringBuilder: void <init>()>();

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,a=a]");

        $stack71 = virtualinvoke $stack70.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack72 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)>($stack41, null, 0, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack71, $stack72);

        $stack73 = new java.lang.StringBuilder;

        specialinvoke $stack73.<java.lang.StringBuilder: void <init>()>();

        $stack74 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack75 = virtualinvoke $stack74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,a=a]");

        $stack76 = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack77 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)>($stack41, null, 0, class "Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack76, $stack77);

        $stack78 = new java.lang.StringBuilder;

        specialinvoke $stack78.<java.lang.StringBuilder: void <init>()>();

        $stack79 = virtualinvoke $stack78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack80 = virtualinvoke $stack79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b,a=a]");

        $stack81 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack82 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)>($stack41, null, 0, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$ReflectionTestFixtureA;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack81, $stack82);

        $stack83 = new java.lang.StringBuilder;

        specialinvoke $stack83.<java.lang.StringBuilder: void <init>()>();

        $stack84 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        $stack85 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=b]");

        $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack87 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,java.lang.Class)>($stack41, null, 0, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$ReflectionTestFixtureB;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack86, $stack87);

        return;
    }

    public void testInnerClassReflection()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest$Outer$Inner $stack7;
        org.apache.commons.lang3.builder.ToStringBuilderTest$Outer $stack2;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack9, $stack10;
        java.lang.String $stack4, $stack8, $stack11, $stack12;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilderTest$Outer;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$Outer: void <init>()>();

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[inner=");

        $stack7 = $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$Outer: org.apache.commons.lang3.builder.ToStringBuilderTest$Outer$Inner inner>;

        $stack8 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack7);

        $stack9 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]]");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$Outer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        return;
    }

    public void testReflectionArrayCycle() throws java.lang.Exception
    {
        java.lang.Object[] objects;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack2, $stack4, $stack5, $stack7, $stack8;
        java.lang.String $stack3, $stack6, $stack9, $stack10;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        objects = newarray (java.lang.Object)[1];

        objects[0] = objects;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>()>();

        $stack3 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objects);

        $stack4 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack3);

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{");

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objects);

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(objects);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        return;
    }

    public void testReflectionArrayCycleLevel2() throws java.lang.Exception
    {
        java.lang.Object[] objects, objectsLevel2;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack4, $stack7, $stack10, $stack11, $stack13, $stack16, $stack19, $stack20;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack8, $stack9, $stack12, $stack14, $stack15, $stack17, $stack18;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        objects = newarray (java.lang.Object)[1];

        objectsLevel2 = newarray (java.lang.Object)[1];

        objects[0] = objectsLevel2;

        objectsLevel2[0] = objects;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objects);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{");

        $stack7 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objects);

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(objects);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objectsLevel2);

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{");

        $stack16 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objectsLevel2);

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(objectsLevel2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        return;
    }

    public void testReflectionArrayArrayCycle() throws java.lang.Exception
    {
        java.lang.Object[] $stack3, $stack4, $stack5, $stack6;
        java.lang.Object[][] objects;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack7, $stack19, $stack20;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        objects = newmultiarray (java.lang.Object)[2][2];

        $stack3 = objects[0];

        $stack3[0] = objects;

        $stack4 = objects[0];

        $stack4[1] = objects;

        $stack5 = objects[1];

        $stack5[0] = objects;

        $stack6 = objects[1];

        $stack6[1] = objects;

        $stack7 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objects);

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("},{");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}}]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(objects);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        return;
    }

    public void testSimpleReflectionObjectCycle() throws java.lang.Exception
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack8, $stack9;
        java.lang.String $stack4, $stack7, $stack10, $stack11;
        org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture $stack2;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture: void <init>()>();

        $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture: java.lang.Object o> = $stack2;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[o=");

        $stack7 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        return;
    }

    public void testSelfInstanceVarReflectionObjectCycle() throws java.lang.Exception
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceVarReflectionTestFixture $stack2;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack8, $stack9;
        java.lang.String $stack4, $stack7, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceVarReflectionTestFixture;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceVarReflectionTestFixture: void <init>()>();

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[typeIsSelf=");

        $stack7 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceVarReflectionTestFixture: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        return;
    }

    public void testSelfInstanceTwoVarsReflectionObjectCycle() throws java.lang.Exception
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture $stack2;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack8, $stack9, $stack12, $stack13;
        java.lang.String $stack4, $stack7, $stack10, $stack11, $stack14, $stack15;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture: void <init>()>();

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[typeIsSelf=");

        $stack7 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",otherType=");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture: java.lang.String getOtherType()>();

        $stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String toString()>();

        $stack12 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack15);

        return;
    }

    public void testReflectionObjectCycle() throws java.lang.Exception
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleA $stack3;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14;
        java.lang.String $stack6, $stack9, $stack12, $stack15, $stack16;
        org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleB $stack4;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleA;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleA: void <init>()>();

        $stack4 = new org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleB;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleB: void <init>()>();

        $stack3.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleA: org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleB b> = $stack4;

        $stack4.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleB: org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleA a> = $stack3;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[b=");

        $stack9 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack4);

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=");

        $stack12 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack13 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]]");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionTestCycleA: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        return;
    }

    public void testReflectionArrayAndObjectCycle() throws java.lang.Exception
    {
        java.lang.Object[] objects;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack5, $stack8, $stack11, $stack15, $stack16, $stack18, $stack21, $stack24, $stack25;
        java.lang.StringBuilder $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack14, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture $stack3;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        objects = newarray (java.lang.Object)[1];

        $stack3 = new org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionTestFixture: void <init>(java.lang.Object)>(objects);

        objects[0] = $stack3;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objects);

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{");

        $stack8 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack9 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack8);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[o=");

        $stack11 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>(objects);

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}]");

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack16 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>(objects);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack18 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[o={");

        $stack21 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack3);

        $stack22 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}]");

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack25 = staticinvoke <org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String reflectionToString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack24, $stack25);

        return;
    }

    void validateNullToStringStyleRegistry()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.util.Map $stack2;
        java.lang.StringBuilder $stack3, $stack4, $stack5;
        java.lang.String $stack6;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.builder.ToStringStyle: java.util.Map getRegistry()>();

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected null, actual: ");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack2);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>($stack6, $stack2);

        return;
    }

    public void testAppendSuper()
    {
        java.lang.Integer $stack7, $stack16, $stack25, $stack35, $stack45;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27, $stack34, $stack36, $stack37, $stack44, $stack46, $stack47;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22, $stack29, $stack31, $stack32, $stack39, $stack41, $stack42;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28, $stack30, $stack33, $stack38, $stack40, $stack43, $stack48;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String)>("Integer@8888[]");

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String)>("Integer@8888[<null>]");

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=hello]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String)>("Integer@8888[]");

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", "hello");

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        $stack29 = new java.lang.StringBuilder;

        specialinvoke $stack29.<java.lang.StringBuilder: void <init>()>();

        $stack30 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack31 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack30);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>,a=hello]");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack34 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack35 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack34.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack35);

        $stack36 = virtualinvoke $stack34.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String)>("Integer@8888[<null>]");

        $stack37 = virtualinvoke $stack36.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", "hello");

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack33, $stack38);

        $stack39 = new java.lang.StringBuilder;

        specialinvoke $stack39.<java.lang.StringBuilder: void <init>()>();

        $stack40 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack41 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack40);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=hello]");

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack44 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack45 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack44.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack45);

        $stack46 = virtualinvoke $stack44.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendSuper(java.lang.String)>(null);

        $stack47 = virtualinvoke $stack46.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", "hello");

        $stack48 = virtualinvoke $stack47.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack43, $stack48);

        return;
    }

    public void testAppendToString()
    {
        java.lang.Integer $stack7, $stack16, $stack25, $stack35, $stack45;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27, $stack34, $stack36, $stack37, $stack44, $stack46, $stack47;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22, $stack29, $stack31, $stack32, $stack39, $stack41, $stack42;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28, $stack30, $stack33, $stack38, $stack40, $stack43, $stack48;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)>("Integer@8888[]");

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)>("Integer@8888[<null>]");

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=hello]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)>("Integer@8888[]");

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", "hello");

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        $stack29 = new java.lang.StringBuilder;

        specialinvoke $stack29.<java.lang.StringBuilder: void <init>()>();

        $stack30 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack31 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack30);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>,a=hello]");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack34 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack35 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack34.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack35);

        $stack36 = virtualinvoke $stack34.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)>("Integer@8888[<null>]");

        $stack37 = virtualinvoke $stack36.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", "hello");

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack33, $stack38);

        $stack39 = new java.lang.StringBuilder;

        specialinvoke $stack39.<java.lang.StringBuilder: void <init>()>();

        $stack40 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack41 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack40);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=hello]");

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack44 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack45 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack44.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack45);

        $stack46 = virtualinvoke $stack44.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)>(null);

        $stack47 = virtualinvoke $stack46.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", "hello");

        $stack48 = virtualinvoke $stack47.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack43, $stack48);

        return;
    }

    public void testObject()
    {
        java.lang.Integer $stack3, $stack4, $stack11, $stack21, $stack30, $stack40, $stack49, $stack59, $stack68, $stack79, $stack90, $stack101, $stack112, $stack122;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack15, $stack17, $stack18, $stack24, $stack26, $stack27, $stack34, $stack36, $stack37, $stack43, $stack45, $stack46, $stack53, $stack55, $stack56, $stack62, $stack64, $stack65, $stack73, $stack75, $stack76, $stack84, $stack86, $stack87, $stack95, $stack97, $stack98, $stack106, $stack108, $stack109, $stack116, $stack118, $stack119;
        java.util.ArrayList $stack69, $stack80;
        java.lang.String $stack6, $stack9, $stack14, $stack16, $stack19, $stack23, $stack25, $stack28, $stack33, $stack35, $stack38, $stack42, $stack44, $stack47, $stack52, $stack54, $stack57, $stack61, $stack63, $stack66, $stack72, $stack74, $stack77, $stack83, $stack85, $stack88, $stack94, $stack96, $stack99, $stack105, $stack107, $stack110, $stack115, $stack117, $stack120, $stack125;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack13, $stack20, $stack22, $stack29, $stack32, $stack39, $stack41, $stack48, $stack50, $stack51, $stack58, $stack60, $stack67, $stack71, $stack78, $stack82, $stack89, $stack93, $stack100, $stack104, $stack111, $stack114, $stack121, $stack124;
        java.util.HashMap $stack91, $stack102;
        java.lang.String[] $stack113, $stack123;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack14);

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack21 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack20.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack21);

        $stack22 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack3);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack23);

        $stack24 = new java.lang.StringBuilder;

        specialinvoke $stack24.<java.lang.StringBuilder: void <init>()>();

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack26 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<null>]");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack29 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack30 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack29.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack30);

        $stack32 = virtualinvoke $stack29.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", null);

        $stack33 = virtualinvoke $stack32.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack28, $stack33);

        $stack34 = new java.lang.StringBuilder;

        specialinvoke $stack34.<java.lang.StringBuilder: void <init>()>();

        $stack35 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack36 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack35);

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3]");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack39 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack40 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack40);

        $stack41 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", $stack3);

        $stack42 = virtualinvoke $stack41.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack38, $stack42);

        $stack43 = new java.lang.StringBuilder;

        specialinvoke $stack43.<java.lang.StringBuilder: void <init>()>();

        $stack44 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack45 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack44);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3,b=4]");

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack48 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack49 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack48.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack49);

        $stack50 = virtualinvoke $stack48.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", $stack3);

        $stack51 = virtualinvoke $stack50.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("b", $stack4);

        $stack52 = virtualinvoke $stack51.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack52);

        $stack53 = new java.lang.StringBuilder;

        specialinvoke $stack53.<java.lang.StringBuilder: void <init>()>();

        $stack54 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack55 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack54);

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<Integer>]");

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack58 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack59 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack58.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack59);

        $stack60 = virtualinvoke $stack58.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack3, 0);

        $stack61 = virtualinvoke $stack60.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack57, $stack61);

        $stack62 = new java.lang.StringBuilder;

        specialinvoke $stack62.<java.lang.StringBuilder: void <init>()>();

        $stack63 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack63);

        $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<size=0>]");

        $stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack67 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack68 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack67.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack68);

        $stack69 = new java.util.ArrayList;

        specialinvoke $stack69.<java.util.ArrayList: void <init>()>();

        $stack71 = virtualinvoke $stack67.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack69, 0);

        $stack72 = virtualinvoke $stack71.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack66, $stack72);

        $stack73 = new java.lang.StringBuilder;

        specialinvoke $stack73.<java.lang.StringBuilder: void <init>()>();

        $stack74 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack75 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack74);

        $stack76 = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=[]]");

        $stack77 = virtualinvoke $stack76.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack78 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack79 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack78.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack79);

        $stack80 = new java.util.ArrayList;

        specialinvoke $stack80.<java.util.ArrayList: void <init>()>();

        $stack82 = virtualinvoke $stack78.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack80, 1);

        $stack83 = virtualinvoke $stack82.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack83);

        $stack84 = new java.lang.StringBuilder;

        specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>();

        $stack85 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack86 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack85);

        $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<size=0>]");

        $stack88 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack89 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack90 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack89.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack90);

        $stack91 = new java.util.HashMap;

        specialinvoke $stack91.<java.util.HashMap: void <init>()>();

        $stack93 = virtualinvoke $stack89.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack91, 0);

        $stack94 = virtualinvoke $stack93.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack88, $stack94);

        $stack95 = new java.lang.StringBuilder;

        specialinvoke $stack95.<java.lang.StringBuilder: void <init>()>();

        $stack96 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack97 = virtualinvoke $stack95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack96);

        $stack98 = virtualinvoke $stack97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a={}]");

        $stack99 = virtualinvoke $stack98.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack100 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack101 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack100.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack101);

        $stack102 = new java.util.HashMap;

        specialinvoke $stack102.<java.util.HashMap: void <init>()>();

        $stack104 = virtualinvoke $stack100.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack102, 1);

        $stack105 = virtualinvoke $stack104.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack99, $stack105);

        $stack106 = new java.lang.StringBuilder;

        specialinvoke $stack106.<java.lang.StringBuilder: void <init>()>();

        $stack107 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack108 = virtualinvoke $stack106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack107);

        $stack109 = virtualinvoke $stack108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<size=0>]");

        $stack110 = virtualinvoke $stack109.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack111 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack112 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack111.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack112);

        $stack113 = newarray (java.lang.String)[0];

        $stack114 = virtualinvoke $stack111.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack113, 0);

        $stack115 = virtualinvoke $stack114.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack110, $stack115);

        $stack116 = new java.lang.StringBuilder;

        specialinvoke $stack116.<java.lang.StringBuilder: void <init>()>();

        $stack117 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack118 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack117);

        $stack119 = virtualinvoke $stack118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a={}]");

        $stack120 = virtualinvoke $stack119.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack121 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack122 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack121.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack122);

        $stack123 = newarray (java.lang.String)[0];

        $stack124 = virtualinvoke $stack121.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack123, 1);

        $stack125 = virtualinvoke $stack124.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack120, $stack125);

        return;
    }

    public void testObjectBuild()
    {
        java.lang.Integer $stack3, $stack4, $stack11, $stack21, $stack30, $stack40, $stack49, $stack59, $stack68, $stack79, $stack90, $stack101, $stack112, $stack122;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack15, $stack17, $stack18, $stack24, $stack26, $stack27, $stack34, $stack36, $stack37, $stack43, $stack45, $stack46, $stack53, $stack55, $stack56, $stack62, $stack64, $stack65, $stack73, $stack75, $stack76, $stack84, $stack86, $stack87, $stack95, $stack97, $stack98, $stack106, $stack108, $stack109, $stack116, $stack118, $stack119;
        java.util.ArrayList $stack69, $stack80;
        java.lang.String $stack6, $stack9, $stack14, $stack16, $stack19, $stack23, $stack25, $stack28, $stack33, $stack35, $stack38, $stack42, $stack44, $stack47, $stack52, $stack54, $stack57, $stack61, $stack63, $stack66, $stack72, $stack74, $stack77, $stack83, $stack85, $stack88, $stack94, $stack96, $stack99, $stack105, $stack107, $stack110, $stack115, $stack117, $stack120, $stack125;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack13, $stack20, $stack22, $stack29, $stack32, $stack39, $stack41, $stack48, $stack50, $stack51, $stack58, $stack60, $stack67, $stack71, $stack78, $stack82, $stack89, $stack93, $stack100, $stack104, $stack111, $stack114, $stack121, $stack124;
        java.util.HashMap $stack91, $stack102;
        java.lang.String[] $stack113, $stack123;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack13 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack14);

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack21 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack20.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack21);

        $stack22 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack3);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack23);

        $stack24 = new java.lang.StringBuilder;

        specialinvoke $stack24.<java.lang.StringBuilder: void <init>()>();

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack26 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<null>]");

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack29 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack30 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack29.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack30);

        $stack32 = virtualinvoke $stack29.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", null);

        $stack33 = virtualinvoke $stack32.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack28, $stack33);

        $stack34 = new java.lang.StringBuilder;

        specialinvoke $stack34.<java.lang.StringBuilder: void <init>()>();

        $stack35 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack36 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack35);

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3]");

        $stack38 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack39 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack40 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack40);

        $stack41 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", $stack3);

        $stack42 = virtualinvoke $stack41.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack38, $stack42);

        $stack43 = new java.lang.StringBuilder;

        specialinvoke $stack43.<java.lang.StringBuilder: void <init>()>();

        $stack44 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack45 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack44);

        $stack46 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3,b=4]");

        $stack47 = virtualinvoke $stack46.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack48 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack49 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack48.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack49);

        $stack50 = virtualinvoke $stack48.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("a", $stack3);

        $stack51 = virtualinvoke $stack50.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object)>("b", $stack4);

        $stack52 = virtualinvoke $stack51.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack47, $stack52);

        $stack53 = new java.lang.StringBuilder;

        specialinvoke $stack53.<java.lang.StringBuilder: void <init>()>();

        $stack54 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack55 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack54);

        $stack56 = virtualinvoke $stack55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<Integer>]");

        $stack57 = virtualinvoke $stack56.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack58 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack59 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack58.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack59);

        $stack60 = virtualinvoke $stack58.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack3, 0);

        $stack61 = virtualinvoke $stack60.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack57, $stack61);

        $stack62 = new java.lang.StringBuilder;

        specialinvoke $stack62.<java.lang.StringBuilder: void <init>()>();

        $stack63 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack63);

        $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<size=0>]");

        $stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack67 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack68 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack67.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack68);

        $stack69 = new java.util.ArrayList;

        specialinvoke $stack69.<java.util.ArrayList: void <init>()>();

        $stack71 = virtualinvoke $stack67.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack69, 0);

        $stack72 = virtualinvoke $stack71.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack66, $stack72);

        $stack73 = new java.lang.StringBuilder;

        specialinvoke $stack73.<java.lang.StringBuilder: void <init>()>();

        $stack74 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack75 = virtualinvoke $stack73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack74);

        $stack76 = virtualinvoke $stack75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=[]]");

        $stack77 = virtualinvoke $stack76.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack78 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack79 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack78.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack79);

        $stack80 = new java.util.ArrayList;

        specialinvoke $stack80.<java.util.ArrayList: void <init>()>();

        $stack82 = virtualinvoke $stack78.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack80, 1);

        $stack83 = virtualinvoke $stack82.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack77, $stack83);

        $stack84 = new java.lang.StringBuilder;

        specialinvoke $stack84.<java.lang.StringBuilder: void <init>()>();

        $stack85 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack86 = virtualinvoke $stack84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack85);

        $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<size=0>]");

        $stack88 = virtualinvoke $stack87.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack89 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack90 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack89.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack90);

        $stack91 = new java.util.HashMap;

        specialinvoke $stack91.<java.util.HashMap: void <init>()>();

        $stack93 = virtualinvoke $stack89.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack91, 0);

        $stack94 = virtualinvoke $stack93.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack88, $stack94);

        $stack95 = new java.lang.StringBuilder;

        specialinvoke $stack95.<java.lang.StringBuilder: void <init>()>();

        $stack96 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack97 = virtualinvoke $stack95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack96);

        $stack98 = virtualinvoke $stack97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a={}]");

        $stack99 = virtualinvoke $stack98.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack100 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack101 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack100.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack101);

        $stack102 = new java.util.HashMap;

        specialinvoke $stack102.<java.util.HashMap: void <init>()>();

        $stack104 = virtualinvoke $stack100.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack102, 1);

        $stack105 = virtualinvoke $stack104.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack99, $stack105);

        $stack106 = new java.lang.StringBuilder;

        specialinvoke $stack106.<java.lang.StringBuilder: void <init>()>();

        $stack107 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack108 = virtualinvoke $stack106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack107);

        $stack109 = virtualinvoke $stack108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=<size=0>]");

        $stack110 = virtualinvoke $stack109.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack111 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack112 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack111.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack112);

        $stack113 = newarray (java.lang.String)[0];

        $stack114 = virtualinvoke $stack111.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack113, 0);

        $stack115 = virtualinvoke $stack114.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack110, $stack115);

        $stack116 = new java.lang.StringBuilder;

        specialinvoke $stack116.<java.lang.StringBuilder: void <init>()>();

        $stack117 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack118 = virtualinvoke $stack116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack117);

        $stack119 = virtualinvoke $stack118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a={}]");

        $stack120 = virtualinvoke $stack119.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack121 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack122 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack121.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack122);

        $stack123 = newarray (java.lang.String)[0];

        $stack124 = virtualinvoke $stack121.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,java.lang.Object,boolean)>("a", $stack123, 1);

        $stack125 = virtualinvoke $stack124.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack120, $stack125);

        return;
    }

    public void testLong()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(long)>(3L);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long)>("a", 3L);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3,b=4]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long)>("a", 3L);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,long)>("b", 4L);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testInt()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(int)>(3);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int)>("a", 3);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3,b=4]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int)>("a", 3);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,int)>("b", 4);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testShort()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(short)>(3);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short)>("a", 3);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3,b=4]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short)>("a", 3);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,short)>("b", 4);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testChar()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[A]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(char)>(65);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=A]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char)>("a", 65);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=A,b=B]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char)>("a", 65);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,char)>("b", 66);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testByte()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(byte)>(3);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte)>("a", 3);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3,b=4]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte)>("a", 3);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,byte)>("b", 4);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testDouble()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3.2]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(double)>(3.2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3.2]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double)>("a", 3.2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3.2,b=4.3]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double)>("a", 3.2);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,double)>("b", 4.3);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testFloat()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[3.2]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(float)>(3.2F);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3.2]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float)>("a", 3.2F);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=3.2,b=4.3]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float)>("a", 3.2F);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,float)>("b", 4.3F);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testBoolean()
    {
        java.lang.Integer $stack7, $stack16, $stack25;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2, $stack5, $stack9, $stack11, $stack14, $stack18, $stack20, $stack23, $stack28;
        org.apache.commons.lang3.builder.ToStringBuilder $stack6, $stack8, $stack15, $stack17, $stack24, $stack26, $stack27;
        java.lang.StringBuilder $stack1, $stack3, $stack4, $stack10, $stack12, $stack13, $stack19, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>();

        $stack2 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack3 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack2);

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[true]");

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack6 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack7 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(boolean)>(1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack9);

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>()>();

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=true]");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack15 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack16 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack16);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean)>("a", 1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[a=true,b=false]");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack25 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack25);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean)>("a", 1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.String,boolean)>("b", 0);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack28);

        return;
    }

    public void testObjectArray()
    {
        java.lang.Integer $stack3, $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int[] $stack4;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        java.lang.Object[] $stack2;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (java.lang.Object)[3];

        $stack2[0] = null;

        $stack3 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        $stack2[1] = $stack3;

        $stack4 = newarray (int)[2];

        $stack4[0] = 3;

        $stack4[1] = 6;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{<null>,5,{3,6}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{<null>,5,{3,6}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(null);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testLongArray()
    {
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack8, $stack10, $stack17, $stack19, $stack26, $stack28, $stack35, $stack37;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack12, $stack14, $stack15, $stack21, $stack23, $stack24, $stack30, $stack32, $stack33;
        long[] $stack2;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (long)[4];

        $stack2[0] = 1L;

        $stack2[1] = 2L;

        $stack2[2] = -3L;

        $stack2[3] = 4L;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(long[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(long[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testIntArray()
    {
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int[] $stack2;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack19, $stack28, $stack37, $u1, $u3, $u5, $u7;
        java.lang.StringBuilder $stack5, $stack6, $stack14, $stack15, $stack23, $stack24, $stack32, $stack33, $u0, $u2, $u4, $u6;
        int $i0;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (int)[4];

        $stack2[0] = 1;

        $stack2[1] = 2;

        $i0 = (int) -3;

        $stack2[2] = $i0;

        $stack2[3] = 4;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u1.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $u1.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(int[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $u3 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u3.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $u3.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $u5 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u5.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $u5.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(int[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $u7 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u7.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $u7.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testShortArray()
    {
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack19, $stack28, $stack37, $u1, $u3, $u5, $u7;
        java.lang.StringBuilder $stack5, $stack6, $stack14, $stack15, $stack23, $stack24, $stack32, $stack33, $u0, $u2, $u4, $u6;
        short[] $stack2;
        short $s0;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (short)[4];

        $stack2[0] = 1;

        $stack2[1] = 2;

        $s0 = (short) -3;

        $stack2[2] = $s0;

        $stack2[3] = 4;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u1.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $u1.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(short[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $u3 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u3.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $u3.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $u5 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u5.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $u5.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(short[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $u6 = new java.lang.StringBuilder;

        specialinvoke $u6.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $u6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $u7 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $u7.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $u7.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testByteArray()
    {
        byte[] $stack2;
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack8, $stack10, $stack17, $stack19, $stack26, $stack28, $stack35, $stack37;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack12, $stack14, $stack15, $stack21, $stack23, $stack24, $stack30, $stack32, $stack33;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (byte)[4];

        $stack2[0] = 1;

        $stack2[1] = 2;

        $stack2[2] = -3;

        $stack2[3] = 4;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(byte[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1,2,-3,4}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(byte[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testCharArray()
    {
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack8, $stack10, $stack17, $stack19, $stack26, $stack28, $stack35, $stack37;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack12, $stack14, $stack15, $stack21, $stack23, $stack24, $stack30, $stack32, $stack33;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;
        char[] $stack2;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (char)[4];

        $stack2[0] = 65;

        $stack2[1] = 50;

        $stack2[2] = 95;

        $stack2[3] = 68;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{A,2,_,D}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(char[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{A,2,_,D}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(char[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testDoubleArray()
    {
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack8, $stack10, $stack17, $stack19, $stack26, $stack28, $stack35, $stack37;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack12, $stack14, $stack15, $stack21, $stack23, $stack24, $stack30, $stack32, $stack33;
        double[] $stack2;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (double)[4];

        $stack2[0] = 1.0;

        $stack2[1] = 2.9876;

        $stack2[2] = -3.00001;

        $stack2[3] = 4.3;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1.0,2.9876,-3.00001,4.3}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(double[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1.0,2.9876,-3.00001,4.3}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(double[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testFloatArray()
    {
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack8, $stack10, $stack17, $stack19, $stack26, $stack28, $stack35, $stack37;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack12, $stack14, $stack15, $stack21, $stack23, $stack24, $stack30, $stack32, $stack33;
        float[] $stack2;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (float)[4];

        $stack2[0] = 1.0F;

        $stack2[1] = 2.9876F;

        $stack2[2] = -3.00001F;

        $stack2[3] = 4.3F;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1.0,2.9876,-3.00001,4.3}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(float[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{1.0,2.9876,-3.00001,4.3}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(float[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testBooleanArray()
    {
        java.lang.Integer $stack9, $stack18, $stack27, $stack36;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack8, $stack10, $stack17, $stack19, $stack26, $stack28, $stack35, $stack37;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack12, $stack14, $stack15, $stack21, $stack23, $stack24, $stack30, $stack32, $stack33;
        java.lang.String $stack4, $stack7, $stack11, $stack13, $stack16, $stack20, $stack22, $stack25, $stack29, $stack31, $stack34, $stack38;
        boolean[] $stack2;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (boolean)[3];

        $stack2[0] = 1;

        $stack2[1] = 0;

        $stack2[2] = 0;

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{true,false,false}]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack9 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack9);

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(boolean[])>($stack2);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        $stack12 = new java.lang.StringBuilder;

        specialinvoke $stack12.<java.lang.StringBuilder: void <init>()>();

        $stack13 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{true,false,false}]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack18 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack18);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack27 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack27);

        $stack28 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(boolean[])>(null);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack29);

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack32 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack36 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack36);

        $stack37 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(null);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        return;
    }

    public void testLongArrayArray()
    {
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        long[] $stack3, $stack4;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;
        long[][] $stack2, array;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (long[])[3];

        $stack3 = newarray (long)[2];

        $stack3[0] = 1L;

        $stack3[1] = 2L;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (long)[1];

        $stack4[0] = 5L;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (long[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testIntArrayArray()
    {
        int[][] $stack2, array;
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        int[] $stack3, $stack4;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (int[])[3];

        $stack3 = newarray (int)[2];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (int)[1];

        $stack4[0] = 5;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (int[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testShortArrayArray()
    {
        short[][] $stack2, array;
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        short[] $stack3, $stack4;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (short[])[3];

        $stack3 = newarray (short)[2];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (short)[1];

        $stack4[0] = 5;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (short[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testByteArrayArray()
    {
        byte[] $stack3, $stack4;
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        byte[][] $stack2, array;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (byte[])[3];

        $stack3 = newarray (byte)[2];

        $stack3[0] = 1;

        $stack3[1] = 2;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (byte)[1];

        $stack4[0] = 5;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1,2},<null>,{5}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (byte[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testCharArrayArray()
    {
        char[][] $stack2, array;
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;
        char[] $stack3, $stack4;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (char[])[3];

        $stack3 = newarray (char)[2];

        $stack3[0] = 65;

        $stack3[1] = 66;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (char)[1];

        $stack4[0] = 112;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{A,B},<null>,{p}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{A,B},<null>,{p}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (char[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testDoubleArrayArray()
    {
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        double[][] $stack2, array;
        double[] $stack3, $stack4;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (double[])[3];

        $stack3 = newarray (double)[2];

        $stack3[0] = 1.0;

        $stack3[1] = 2.29686;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (double)[1];

        $stack4[0] = #NaN;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1.0,2.29686},<null>,{NaN}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1.0,2.29686},<null>,{NaN}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (double[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testFloatArrayArray()
    {
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        float[] $stack3, $stack4;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;
        float[][] $stack2, array;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (float[])[3];

        $stack3 = newarray (float)[2];

        $stack3[0] = 1.0F;

        $stack3[1] = 2.29686F;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (float)[1];

        $stack4[0] = #NaNF;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1.0,2.29686},<null>,{NaN}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{1.0,2.29686},<null>,{NaN}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (float[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testBooleanArrayArray()
    {
        java.lang.Integer $stack11, $stack20, $stack29, $stack38;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack10, $stack12, $stack19, $stack21, $stack28, $stack30, $stack37, $stack39;
        java.lang.StringBuilder $stack5, $stack7, $stack8, $stack14, $stack16, $stack17, $stack23, $stack25, $stack26, $stack32, $stack34, $stack35;
        java.lang.String $stack6, $stack9, $stack13, $stack15, $stack18, $stack22, $stack24, $stack27, $stack31, $stack33, $stack36, $stack40;
        boolean[] $stack3, $stack4;
        boolean[][] $stack2, array;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = newarray (boolean[])[3];

        $stack3 = newarray (boolean)[2];

        $stack3[0] = 1;

        $stack3[1] = 0;

        $stack2[0] = $stack3;

        $stack2[1] = null;

        $stack4 = newarray (boolean)[1];

        $stack4[0] = 0;

        $stack2[2] = $stack4;

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>()>();

        $stack6 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack7 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{true,false},<null>,{false}}]");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack10 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack11 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack11);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>($stack2);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[{{true,false},<null>,{false}}]");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack20 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack20);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>($stack2);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack18, $stack22);

        array = (boolean[][]) null;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack29 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack29);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object[])>(array);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String baseStr>;

        $stack34 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[<null>]");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack38 = this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.Integer base>;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object)>($stack38);

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, $stack40);

        return;
    }

    public void testObjectCycle()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle $stack4, $stack5;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.StringBuilder $stack6, $stack8, $stack9, $stack11, $stack12, $stack14, $stack15;
        java.lang.String $stack7, $stack10, $stack13, $stack16, $stack17;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack4 = new org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle: void <init>()>();

        $stack5 = new org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle: void <init>()>();

        $stack4.<org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle: java.lang.Object obj> = $stack5;

        $stack5.<org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle: java.lang.Object obj> = $stack4;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack4);

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $stack10 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack5);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $stack13 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack4);

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]]");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilderTest$ObjectCycle: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack17);

        return;
    }

    public void testSimpleReflectionStatics()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionStaticFieldsFixture $stack2;
        java.lang.String $stack4, $stack7, $stack8, $stack10, $stack13, $stack14, $stack16, $stack19, $stack20, $stack22, $stack25, $stack26;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack9, $stack11, $stack12, $stack15, $stack17, $stack18, $stack21, $stack23, $stack24;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$SimpleReflectionStaticFieldsFixture: void <init>(org.apache.commons.lang3.builder.ToStringBuilderTest)>(this);

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)>($stack2, null, 0, 1, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345]");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack14 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)>($stack2, null, 1, 1, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toStringWithStatics(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.Class)>($stack2, null, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toStringWithStatics(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.Class)>($stack2, null, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack26);

        return;
    }

    public void testReflectionStatics()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack4, $stack7, $stack8, $stack10, $stack13, $stack14, $stack16, $stack19, $stack20, $stack22, $stack25, $stack26;
        org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionStaticFieldsFixture $stack2;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack9, $stack11, $stack12, $stack15, $stack17, $stack18, $stack21, $stack23, $stack24;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionStaticFieldsFixture;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$ReflectionStaticFieldsFixture: void <init>(org.apache.commons.lang3.builder.ToStringBuilderTest)>(this);

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)>($stack2, null, 0, 1, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$ReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack14 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)>($stack2, null, 1, 1, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$ReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toStringWithStatics(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.Class)>($stack2, null, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$ReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toStringWithStatics(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.Class)>($stack2, null, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$ReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack26);

        return;
    }

    public void testInheritedReflectionStatics()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack4, $stack7, $stack8, $stack10, $stack13, $stack14, $stack16, $stack19, $stack20, $stack22, $stack25, $stack26;
        org.apache.commons.lang3.builder.ToStringBuilderTest$InheritedReflectionStaticFieldsFixture $stack2;
        java.lang.StringBuilder $stack3, $stack5, $stack6, $stack9, $stack11, $stack12, $stack15, $stack17, $stack18, $stack21, $stack23, $stack24;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilderTest$InheritedReflectionStaticFieldsFixture;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilderTest$InheritedReflectionStaticFieldsFixture: void <init>(org.apache.commons.lang3.builder.ToStringBuilderTest)>(this);

        $stack3 = new java.lang.StringBuilder;

        specialinvoke $stack3.<java.lang.StringBuilder: void <init>()>();

        $stack4 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack5 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString2=staticString2,staticInt2=67890]");

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)>($stack2, null, 0, 1, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$InheritedReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack14 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)>($stack2, null, 0, 1, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toStringWithStatics(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.Class)>($stack2, null, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        $stack21 = new java.lang.StringBuilder;

        specialinvoke $stack21.<java.lang.StringBuilder: void <init>()>();

        $stack22 = specialinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toBaseString(java.lang.Object)>($stack2);

        $stack23 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack22);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = virtualinvoke this.<org.apache.commons.lang3.builder.ToStringBuilderTest: java.lang.String toStringWithStatics(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,java.lang.Class)>($stack2, null, class "Lorg/apache/commons/lang3/builder/ToStringBuilderTest$SimpleReflectionStaticFieldsFixture;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack26);

        return;
    }

    public java.lang.String toStringWithStatics(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle, java.lang.Class)
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringStyle style;
        java.lang.Object object;
        java.lang.Class reflectUpToClass;
        java.lang.String $stack4;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        object := @parameter0: java.lang.Object;

        style := @parameter1: org.apache.commons.lang3.builder.ToStringStyle;

        reflectUpToClass := @parameter2: java.lang.Class;

        $stack4 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle,boolean,boolean,java.lang.Class)>(object, style, 0, 1, reflectUpToClass);

        return $stack4;
    }

    public void test_setUpToClass_valid()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ReflectionToStringBuilder $stack4;
        java.lang.Integer $stack3;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $stack4 = new org.apache.commons.lang3.builder.ReflectionToStringBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: void <init>(java.lang.Object)>($stack3);

        virtualinvoke $stack4.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: void setUpToClass(java.lang.Class)>(class "Ljava/lang/Number;");

        virtualinvoke $stack4.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString()>();

        return;
    }

    public void test_setUpToClass_invalid()
    {
        java.lang.Throwable $stack7;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ReflectionToStringBuilder $stack5;
        java.lang.Integer $stack4;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $stack5 = new org.apache.commons.lang3.builder.ReflectionToStringBuilder;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: void <init>(java.lang.Object)>($stack4);

     label1:
        virtualinvoke $stack5.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: void setUpToClass(java.lang.Class)>(class "Ljava/lang/String;");

     label2:
        virtualinvoke $stack5.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString()>();

        goto label5;

     label3:
        $stack7 := @caughtexception;

     label4:
        virtualinvoke $stack5.<org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString()>();

        throw $stack7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testReflectionNull()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        java.lang.String $stack2;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String toString(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<null>", $stack2);

        return;
    }

    public void testAppendToStringUsingMultiLineStyle()
    {
        org.apache.commons.lang3.builder.ToStringBuilderTest$MultiLineTestObject $stack3;
        org.apache.commons.lang3.builder.ToStringStyle $stack5;
        long $stack10;
        org.apache.commons.lang3.builder.ToStringBuilderTest this;
        org.apache.commons.lang3.builder.ToStringBuilder $stack4, $stack7;
        int $stack9;
        java.lang.String $stack6, $stack8;

        this := @this: org.apache.commons.lang3.builder.ToStringBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.ToStringBuilderTest$MultiLineTestObject;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.ToStringBuilderTest$MultiLineTestObject: void <init>(org.apache.commons.lang3.builder.ToStringBuilderTest)>(this);

        $stack4 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack5 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle MULTI_LINE_STYLE>;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>(this, $stack5);

        $stack6 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.ToStringBuilderTest$MultiLineTestObject: java.lang.String toString()>();

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder appendToString(java.lang.String)>($stack6);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        $stack9 = virtualinvoke $stack8.<java.lang.String: int indexOf(java.lang.String)>("testInt=31337");

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack10, -1L);

        return;
    }
}
