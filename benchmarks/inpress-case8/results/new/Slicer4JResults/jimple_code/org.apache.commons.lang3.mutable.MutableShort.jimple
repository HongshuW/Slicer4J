public class org.apache.commons.lang3.mutable.MutableShort extends java.lang.Number implements java.lang.Comparable, org.apache.commons.lang3.mutable.Mutable
{
    private static final long serialVersionUID;
    private short value;

    public void <init>()
    {
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        specialinvoke this.<java.lang.Number: void <init>()>();

        return;
    }

    public void <init>(short)
    {
        short value;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        value := @parameter0: short;

        specialinvoke this.<java.lang.Number: void <init>()>();

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = value;

        return;
    }

    public void <init>(java.lang.Number)
    {
        short $stack2;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Number value;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        value := @parameter0: java.lang.Number;

        specialinvoke this.<java.lang.Number: void <init>()>();

        $stack2 = virtualinvoke value.<java.lang.Number: short shortValue()>();

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack2;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        short $stack2;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.String value;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        value := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Number: void <init>()>();

        $stack2 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>(value);

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack2;

        return;
    }

    public java.lang.Short getValue()
    {
        short $stack1;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Short $stack2;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($stack1);

        return $stack2;
    }

    public void setValue(short)
    {
        short value;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        value := @parameter0: short;

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = value;

        return;
    }

    public void setValue(java.lang.Number)
    {
        short $stack2;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Number value;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        value := @parameter0: java.lang.Number;

        $stack2 = virtualinvoke value.<java.lang.Number: short shortValue()>();

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack2;

        return;
    }

    public void increment()
    {
        short $stack1, $stack3;
        int $stack2, $i0;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack1;

        $stack2 = $i0 + 1;

        $stack3 = (short) $stack2;

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack3;

        return;
    }

    public void decrement()
    {
        short $stack1, $stack3;
        int $stack2, $i0;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack1;

        $stack2 = $i0 - 1;

        $stack3 = (short) $stack2;

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack3;

        return;
    }

    public void add(short)
    {
        short operand, $stack2, $stack4;
        int $stack3, $i0, $i1;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        operand := @parameter0: short;

        $stack2 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack2;

        $i1 = (int) operand;

        $stack3 = $i0 + $i1;

        $stack4 = (short) $stack3;

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack4;

        return;
    }

    public void add(java.lang.Number)
    {
        short $stack2, $stack3, $stack5;
        int $stack4, $i0, $i1;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Number operand;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        operand := @parameter0: java.lang.Number;

        $stack2 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack3 = virtualinvoke operand.<java.lang.Number: short shortValue()>();

        $i0 = (int) $stack2;

        $i1 = (int) $stack3;

        $stack4 = $i0 + $i1;

        $stack5 = (short) $stack4;

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack5;

        return;
    }

    public void subtract(short)
    {
        short operand, $stack2, $stack4;
        int $stack3, $i0, $i1;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        operand := @parameter0: short;

        $stack2 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack2;

        $i1 = (int) operand;

        $stack3 = $i0 - $i1;

        $stack4 = (short) $stack3;

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack4;

        return;
    }

    public void subtract(java.lang.Number)
    {
        short $stack2, $stack3, $stack5;
        int $stack4, $i0, $i1;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Number operand;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        operand := @parameter0: java.lang.Number;

        $stack2 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack3 = virtualinvoke operand.<java.lang.Number: short shortValue()>();

        $i0 = (int) $stack2;

        $i1 = (int) $stack3;

        $stack4 = $i0 - $i1;

        $stack5 = (short) $stack4;

        this.<org.apache.commons.lang3.mutable.MutableShort: short value> = $stack5;

        return;
    }

    public short shortValue()
    {
        short $stack1;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        return $stack1;
    }

    public int intValue()
    {
        int $i0;
        short $stack1;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack1;

        return $i0;
    }

    public long longValue()
    {
        short $stack1;
        long $stack2;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack2 = (long) $stack1;

        return $stack2;
    }

    public float floatValue()
    {
        float $stack2;
        short $stack1;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack2 = (float) $stack1;

        return $stack2;
    }

    public double doubleValue()
    {
        short $stack1;
        org.apache.commons.lang3.mutable.MutableShort this;
        double $stack2;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack2 = (double) $stack1;

        return $stack2;
    }

    public java.lang.Short toShort()
    {
        short $stack1;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Short $stack2;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = virtualinvoke this.<org.apache.commons.lang3.mutable.MutableShort: short shortValue()>();

        $stack2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($stack1);

        return $stack2;
    }

    public boolean equals(java.lang.Object)
    {
        short $stack4, $stack5;
        int $i0, $i1;
        java.lang.Object obj;
        org.apache.commons.lang3.mutable.MutableShort this, $stack3;
        boolean $stack2, $stack6;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        obj := @parameter0: java.lang.Object;

        $stack2 = obj instanceof org.apache.commons.lang3.mutable.MutableShort;

        if $stack2 == 0 goto label3;

        $stack4 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack3 = (org.apache.commons.lang3.mutable.MutableShort) obj;

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.mutable.MutableShort: short shortValue()>();

        $i0 = (int) $stack4;

        $i1 = (int) $stack5;

        if $i0 != $i1 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        return $stack6;

     label3:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        short $stack1;
        org.apache.commons.lang3.mutable.MutableShort this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack1;

        return $i0;
    }

    public int compareTo(org.apache.commons.lang3.mutable.MutableShort)
    {
        short anotherVal, $stack3, $stack4;
        byte $stack5;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.lang3.mutable.MutableShort other, this;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        other := @parameter0: org.apache.commons.lang3.mutable.MutableShort;

        anotherVal = other.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $stack3 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack3;

        $i1 = (int) anotherVal;

        if $i0 >= $i1 goto label1;

        $stack5 = -1;

        goto label3;

     label1:
        $stack4 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i2 = (int) $stack4;

        $i3 = (int) anotherVal;

        if $i2 != $i3 goto label2;

        $stack5 = 0;

        goto label3;

     label2:
        $stack5 = 1;

     label3:
        return $stack5;
    }

    public java.lang.String toString()
    {
        short $stack1;
        int $i0;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.String $stack2;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = this.<org.apache.commons.lang3.mutable.MutableShort: short value>;

        $i0 = (int) $stack1;

        $stack2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $stack2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $stack3;
        java.lang.Object x0;
        org.apache.commons.lang3.mutable.MutableShort this, $stack2;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        x0 := @parameter0: java.lang.Object;

        $stack2 = (org.apache.commons.lang3.mutable.MutableShort) x0;

        $stack3 = virtualinvoke this.<org.apache.commons.lang3.mutable.MutableShort: int compareTo(org.apache.commons.lang3.mutable.MutableShort)>($stack2);

        return $stack3;
    }

    public volatile void setValue(java.lang.Object)
    {
        java.lang.Object x0;
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Number $stack2;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        x0 := @parameter0: java.lang.Object;

        $stack2 = (java.lang.Number) x0;

        virtualinvoke this.<org.apache.commons.lang3.mutable.MutableShort: void setValue(java.lang.Number)>($stack2);

        return;
    }

    public volatile java.lang.Object getValue()
    {
        org.apache.commons.lang3.mutable.MutableShort this;
        java.lang.Short $stack1;

        this := @this: org.apache.commons.lang3.mutable.MutableShort;

        $stack1 = virtualinvoke this.<org.apache.commons.lang3.mutable.MutableShort: java.lang.Short getValue()>();

        return $stack1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang3.mutable.MutableShort: long serialVersionUID> = -2135791679L;

        return;
    }
}
