public class org.apache.commons.lang3.mutable.MutableObjectTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.mutable.MutableObjectTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableObjectTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructors()
    {
        java.lang.Integer $stack5;
        org.apache.commons.lang3.mutable.MutableObjectTest this;
        java.lang.Object $stack4, $stack7, $stack10, $stack13;
        org.apache.commons.lang3.mutable.MutableObject $stack2, $stack6, $stack8, $stack11;

        this := @this: org.apache.commons.lang3.mutable.MutableObjectTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableObject: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableObject: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $stack6 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>($stack5);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack7);

        $stack8 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("HI");

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>("HI", $stack10);

        $stack11 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack11.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>(null);

        $stack13 = virtualinvoke $stack11.<org.apache.commons.lang3.mutable.MutableObject: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(null, $stack13);

        return;
    }

    public void testGetSet()
    {
        org.apache.commons.lang3.mutable.MutableObjectTest this;
        java.lang.Object $stack5, $stack7, $stack9;
        org.apache.commons.lang3.mutable.MutableObject $stack2, $stack3;

        this := @this: org.apache.commons.lang3.mutable.MutableObjectTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableObject: void <init>()>();

        $stack3 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack3.<org.apache.commons.lang3.mutable.MutableObject: void <init>()>();

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.mutable.MutableObject: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableObject: void setValue(java.lang.Object)>("HELLO");

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableObject: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>("HELLO", $stack7);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableObject: void setValue(java.lang.Object)>(null);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableObject: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(null, $stack9);

        return;
    }

    public void testEquals()
    {
        org.apache.commons.lang3.mutable.MutableObject $stack5, $stack6, $stack7, $stack8;
        boolean $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack20, $stack21;
        org.apache.commons.lang3.mutable.MutableObjectTest this;
        java.lang.Object $stack19;

        this := @this: org.apache.commons.lang3.mutable.MutableObjectTest;

        $stack5 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("ALPHA");

        $stack6 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("ALPHA");

        $stack7 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("BETA");

        $stack8 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>(null);

        $stack9 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        $stack16 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = virtualinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = new java.lang.Object;

        specialinvoke $stack19.<java.lang.Object: void <init>()>();

        $stack20 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>($stack19);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: boolean equals(java.lang.Object)>("0");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        return;
    }

    public void testHashCode()
    {
        long $stack22;
        int $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack19, $stack21;
        java.lang.String $stack18;
        org.apache.commons.lang3.mutable.MutableObject $stack5, $stack6, $stack7, $stack8;
        boolean $stack33, $stack30, $stack27, $stack25, $stack23;
        org.apache.commons.lang3.mutable.MutableObjectTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableObjectTest;

        $stack5 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("ALPHA");

        $stack6 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("ALPHA");

        $stack7 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("BETA");

        $stack8 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>(null);

        $stack9 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        $stack10 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        if $stack9 != $stack10 goto label01;

        $stack33 = 1;

        goto label02;

     label01:
        $stack33 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack11 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        $stack12 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        if $stack11 != $stack12 goto label03;

        $stack30 = 1;

        goto label04;

     label03:
        $stack30 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack13 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        $stack14 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        if $stack13 != $stack14 goto label05;

        $stack27 = 1;

        goto label06;

     label05:
        $stack27 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack27);

        $stack15 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        $stack16 = virtualinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        if $stack15 != $stack16 goto label07;

        $stack25 = 1;

        goto label08;

     label07:
        $stack25 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack25);

        $stack17 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        $stack18 = "ALPHA";

        $stack19 = virtualinvoke $stack18.<java.lang.String: int hashCode()>();

        if $stack17 != $stack19 goto label09;

        $stack23 = 1;

        goto label10;

     label09:
        $stack23 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack21 = virtualinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: int hashCode()>();

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack22);

        return;
    }

    public void testToString()
    {
        java.lang.Double $stack6;
        org.apache.commons.lang3.mutable.MutableObjectTest this;
        java.lang.String $stack3, $stack7, $stack10;
        org.apache.commons.lang3.mutable.MutableObject $stack1, $stack4, $stack8;

        this := @this: org.apache.commons.lang3.mutable.MutableObjectTest;

        $stack1 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack1.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>("HI");

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.mutable.MutableObject: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("HI", $stack3);

        $stack4 = new org.apache.commons.lang3.mutable.MutableObject;

        $stack6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(10.0);

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>($stack6);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableObject: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("10.0", $stack7);

        $stack8 = new org.apache.commons.lang3.mutable.MutableObject;

        specialinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: void <init>(java.lang.Object)>(null);

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.mutable.MutableObject: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("null", $stack10);

        return;
    }
}
