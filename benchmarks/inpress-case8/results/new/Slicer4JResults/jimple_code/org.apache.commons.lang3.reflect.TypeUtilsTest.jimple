public class org.apache.commons.lang3.reflect.TypeUtilsTest extends java.lang.Object
{
    public org.apache.commons.lang3.reflect.TypeUtilsTest$This dis;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$That dat;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$The da;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$Other uhder;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$Thing ding;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$Tester tester;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$Tester tester2;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$That dat2;
    public org.apache.commons.lang3.reflect.TypeUtilsTest$That dat3;
    public java.lang.Comparable[] intWildcardComparable;
    public static java.lang.Comparable stringComparable;
    public static java.lang.Comparable uriComparable;
    public static java.lang.Comparable intComparable;
    public static java.lang.Comparable longComparable;
    public static java.net.URI uri;
    public java.lang.Iterable iterable;

    public void <init>()
    {
        org.apache.commons.lang3.reflect.TypeUtilsTest this;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void dummyMethod(java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List[], java.util.List[], java.util.List[], java.util.List[], java.util.List[], java.util.List[], java.util.List[])
    {
        java.util.List[] list7, list8, list9, list10, list11, list12, list13;
        java.util.List list0, list1, list2, list3, list4, list5, list6;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        list0 := @parameter0: java.util.List;

        list1 := @parameter1: java.util.List;

        list2 := @parameter2: java.util.List;

        list3 := @parameter3: java.util.List;

        list4 := @parameter4: java.util.List;

        list5 := @parameter5: java.util.List;

        list6 := @parameter6: java.util.List;

        list7 := @parameter7: java.util.List[];

        list8 := @parameter8: java.util.List[];

        list9 := @parameter9: java.util.List[];

        list10 := @parameter10: java.util.List[];

        list11 := @parameter11: java.util.List[];

        list12 := @parameter12: java.util.List[];

        list13 := @parameter13: java.util.List[];

        return;
    }

    public void testIsAssignable() throws java.lang.SecurityException, java.lang.NoSuchMethodException, java.lang.NoSuchFieldException
    {
        java.lang.Integer $stack118, $stack125, $stack139;
        org.apache.commons.lang3.reflect.TypeUtilsTest$Tester $stack91;
        org.apache.commons.lang3.reflect.AClass$CClass $stack178;
        java.lang.Integer[] oa;
        java.lang.Object[] $stack88;
        java.lang.Class[] $stack52;
        java.lang.reflect.Field $stack56, $stack59, $stack62, $stack65, $stack68, $stack71, $stack74, $stack77, $stack80, $stack137, $stack148, $stack155, $stack162, $stack165, $stack168, $stack171, $stack174;
        org.apache.commons.lang3.reflect.TypeUtilsTest$Thing $stack87;
        java.util.List[] list8, list10, list11, list12, list13, list11#77;
        java.lang.reflect.Method $stack53;
        int $stack126;
        java.lang.Class $stack51, $stack55, $stack58, $stack61, $stack64, $stack67, $stack70, $stack73, $stack76, $stack79, $stack97, $stack98, $stack100, $stack101, $stack103, $stack104, $stack106, $stack107, $stack109, $stack110, $stack112, $stack113, $stack115, $stack116, $stack120, $stack122, $stack127, $stack130, $stack132, $stack134, $stack136, $stack140, $stack142, $stack145, $stack147, $stack150, $stack154, $stack161, $stack164, $stack167, $stack170, $stack173;
        org.apache.commons.lang3.reflect.TypeUtilsTest$That $stack82;
        org.apache.commons.lang3.reflect.AClass $stack176;
        org.apache.commons.lang3.reflect.AAClass $stack177;
        java.lang.String $stack89;
        org.apache.commons.lang3.reflect.TypeUtilsTest$Other $stack85;
        org.apache.commons.lang3.reflect.AClass$DClass $stack180, $stack186;
        boolean $stack83, $stack84, $stack86, $stack90, $stack92, $stack93, $stack94, $stack95, $stack96, $stack99, $stack102, $stack105, $stack108, $stack111, $stack114, $stack117, $stack121, $stack123, $stack124, $stack128, $stack131, $stack133, $stack135, $stack141, $stack143, $stack146, $stack151, $stack152, $stack153, $stack157, $stack158, $stack159, $stack160, $stack179, $stack181, $stack183, $stack185, $stack187, $stack189, $stack191, $stack193, $stack195, $stack197;
        org.apache.commons.lang3.reflect.AClass$FClass $stack184, $stack190, $stack194, $stack196;
        java.lang.reflect.Type $stack57, $stack60, $stack63, $stack66, $stack69, $stack72, $stack75, $stack78, $stack81, $stack138, $stack149, $stack156, $stack163, $stack166, $stack169, $stack172, $stack175;
        java.lang.reflect.Type[] $stack54;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        org.apache.commons.lang3.reflect.AClass$EClass $stack182, $stack188, $stack192;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack51 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack52 = newarray (java.lang.Class)[14];

        $stack52[0] = class "Ljava/util/List;";

        $stack52[1] = class "Ljava/util/List;";

        $stack52[2] = class "Ljava/util/List;";

        $stack52[3] = class "Ljava/util/List;";

        $stack52[4] = class "Ljava/util/List;";

        $stack52[5] = class "Ljava/util/List;";

        $stack52[6] = class "Ljava/util/List;";

        $stack52[7] = class "[Ljava/util/List;";

        $stack52[8] = class "[Ljava/util/List;";

        $stack52[9] = class "[Ljava/util/List;";

        $stack52[10] = class "[Ljava/util/List;";

        $stack52[11] = class "[Ljava/util/List;";

        $stack52[12] = class "[Ljava/util/List;";

        $stack52[13] = class "[Ljava/util/List;";

        $stack53 = virtualinvoke $stack51.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dummyMethod", $stack52);

        $stack54 = virtualinvoke $stack53.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 0, 0, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 0, 1, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 1, 0, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 0, 2, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 2, 0, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 0, 3, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 3, 0, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 0, 4, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 4, 0, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 0, 5, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 5, 0, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 0, 6, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 6, 0, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 1, 1, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 1, 2, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 2, 1, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 1, 3, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 3, 1, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 1, 4, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 4, 1, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 1, 5, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 5, 1, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 1, 6, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 6, 1, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 2, 2, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 2, 3, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 3, 2, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 2, 4, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 4, 2, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 2, 5, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 5, 2, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 2, 6, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 6, 2, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 3, 3, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 3, 4, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 4, 3, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 3, 5, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 5, 3, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 3, 6, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 6, 3, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 4, 4, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 4, 5, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 5, 4, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 4, 6, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 6, 4, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 5, 5, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 5, 6, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 6, 5, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 6, 6, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 7, 7, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 7, 8, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 8, 7, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 7, 9, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 9, 7, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 7, 10, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 10, 7, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 7, 11, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 11, 7, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 7, 12, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 12, 7, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 7, 13, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 13, 7, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 8, 8, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 8, 9, 1);

        list8 = (java.util.List[]) null;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 9, 8, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 8, 10, 1);

        list8 = (java.util.List[]) list8;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 10, 8, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 8, 11, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 11, 8, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 8, 12, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 12, 8, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 8, 13, 1);

        list8 = (java.util.List[]) list8;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 13, 8, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 9, 9, 1);

        list10 = (java.util.List[]) null;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 9, 10, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 10, 9, 1);

        list11 = (java.util.List[]) list10;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 9, 11, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 11, 9, 1);

        list12 = (java.util.List[]) list11;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 9, 12, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 12, 9, 1);

        list13 = (java.util.List[]) list12;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 9, 13, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 13, 9, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 10, 10, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 10, 11, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 11, 10, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 10, 12, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 12, 10, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 10, 13, 1);

        list10 = (java.util.List[]) list10;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 13, 10, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 11, 11, 1);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 11, 12, 1);

        list11#77 = (java.util.List[]) list11;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 12, 11, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 11, 13, 1);

        list11#77 = (java.util.List[]) list11#77;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 13, 11, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 12, 12, 1);

        list13 = (java.util.List[]) list11;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 12, 13, 0);

        list12 = (java.util.List[]) list13;

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 13, 12, 0);

        virtualinvoke this.<org.apache.commons.lang3.reflect.TypeUtilsTest: void delegateBooleanAssertion(java.lang.reflect.Type[],int,int,boolean)>($stack54, 13, 13, 1);

        $stack55 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack56 = virtualinvoke $stack55.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("dis");

        $stack57 = virtualinvoke $stack56.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack58 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack59 = virtualinvoke $stack58.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("dat");

        $stack60 = virtualinvoke $stack59.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack61 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack62 = virtualinvoke $stack61.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("da");

        $stack63 = virtualinvoke $stack62.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack64 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("uhder");

        $stack66 = virtualinvoke $stack65.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack67 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack68 = virtualinvoke $stack67.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("ding");

        $stack69 = virtualinvoke $stack68.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack70 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack71 = virtualinvoke $stack70.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("tester");

        $stack72 = virtualinvoke $stack71.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack73 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack74 = virtualinvoke $stack73.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("tester2");

        $stack75 = virtualinvoke $stack74.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack76 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack77 = virtualinvoke $stack76.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("dat2");

        $stack78 = virtualinvoke $stack77.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack79 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack80 = virtualinvoke $stack79.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("dat3");

        $stack81 = virtualinvoke $stack80.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack82 = this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$That dat>;

        this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$This dis> = $stack82;

        $stack83 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack60, $stack57);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack83);

        $stack84 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack63, $stack57);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack84);

        $stack85 = this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$Other uhder>;

        this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$This dis> = $stack85;

        $stack86 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack66, $stack57);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack87 = this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$Thing ding>;

        this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$This dis> = $stack87;

        $stack88 = newarray (java.lang.Object)[2];

        $stack88[0] = $stack69;

        $stack88[1] = $stack57;

        $stack89 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("type %s not assignable to %s!", $stack88);

        $stack90 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack69, $stack57);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($stack89, $stack90);

        $stack91 = this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$Tester tester>;

        this.<org.apache.commons.lang3.reflect.TypeUtilsTest: org.apache.commons.lang3.reflect.TypeUtilsTest$This dis> = $stack91;

        $stack92 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack72, $stack57);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack75, $stack57);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack93);

        $stack94 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack78, $stack60);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack94);

        $stack95 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack60, $stack78);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack95);

        $stack96 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack81, $stack60);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack96);

        $stack98 = <java.lang.Character: java.lang.Class TYPE>;

        $stack97 = <java.lang.Double: java.lang.Class TYPE>;

        $stack99 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack98, $stack97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack99);

        $stack101 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack100 = <java.lang.Double: java.lang.Class TYPE>;

        $stack102 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack101, $stack100);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack102);

        $stack104 = <java.lang.Short: java.lang.Class TYPE>;

        $stack103 = <java.lang.Double: java.lang.Class TYPE>;

        $stack105 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack104, $stack103);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack105);

        $stack107 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack106 = <java.lang.Double: java.lang.Class TYPE>;

        $stack108 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack107, $stack106);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack108);

        $stack110 = <java.lang.Long: java.lang.Class TYPE>;

        $stack109 = <java.lang.Double: java.lang.Class TYPE>;

        $stack111 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack110, $stack109);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack111);

        $stack113 = <java.lang.Float: java.lang.Class TYPE>;

        $stack112 = <java.lang.Double: java.lang.Class TYPE>;

        $stack114 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack113, $stack112);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack114);

        $stack116 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack115 = <java.lang.Long: java.lang.Class TYPE>;

        $stack117 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack116, $stack115);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack117);

        $stack118 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $stack118.<java.lang.Integer: int intValue()>();

        $stack120 = <java.lang.Long: java.lang.Class TYPE>;

        $stack121 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "Ljava/lang/Integer;", $stack120);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack121);

        $stack122 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack123 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack122, class "Ljava/lang/Long;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack123);

        $stack124 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "Ljava/lang/Integer;", class "Ljava/lang/Long;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack124);

        $stack125 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack126 = virtualinvoke $stack125.<java.lang.Integer: int intValue()>();

        $stack127 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack128 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "Ljava/lang/Integer;", $stack127);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack128);

        staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack126);

        $stack130 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack131 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack130, class "Ljava/lang/Integer;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack131);

        $stack132 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack133 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack132, class "Ljava/lang/Number;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack133);

        $stack134 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack135 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack134, class "Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack135);

        $stack136 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack137 = virtualinvoke $stack136.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("intComparable");

        $stack138 = virtualinvoke $stack137.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack139 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        <org.apache.commons.lang3.reflect.TypeUtilsTest: java.lang.Comparable intComparable> = $stack139;

        $stack140 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack141 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack140, $stack138);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack141);

        $stack142 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack143 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack142, class "Ljava/lang/Comparable;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack143);

        staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack145 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack146 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack145, class "Ljava/io/Serializable;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack146);

        $stack147 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack148 = virtualinvoke $stack147.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("longComparable");

        $stack149 = virtualinvoke $stack148.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack150 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack151 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack150, $stack149);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack151);

        $stack152 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "Ljava/lang/Integer;", $stack149);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack152);

        $stack153 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "[I", class "[J");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack153);

        $stack154 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack155 = virtualinvoke $stack154.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("intWildcardComparable");

        $stack156 = virtualinvoke $stack155.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        this.<org.apache.commons.lang3.reflect.TypeUtilsTest: java.lang.Comparable[] intWildcardComparable> = null;

        $stack157 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "[Ljava/lang/Integer;", $stack156);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack157);

        $stack158 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "[Ljava/lang/Integer;", class "[I");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack158);

        $stack159 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "[I", class "[Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack159);

        oa = newarray (java.lang.Integer)[0];

        $stack160 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(class "[Ljava/lang/Integer;", class "[Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack160);

        $stack161 = class "Lorg/apache/commons/lang3/reflect/AClass;";

        $stack162 = virtualinvoke $stack161.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("bClass");

        $stack163 = virtualinvoke $stack162.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack164 = class "Lorg/apache/commons/lang3/reflect/AClass;";

        $stack165 = virtualinvoke $stack164.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("cClass");

        $stack166 = virtualinvoke $stack165.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack167 = class "Lorg/apache/commons/lang3/reflect/AClass;";

        $stack168 = virtualinvoke $stack167.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("dClass");

        $stack169 = virtualinvoke $stack168.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack170 = class "Lorg/apache/commons/lang3/reflect/AClass;";

        $stack171 = virtualinvoke $stack170.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("eClass");

        $stack172 = virtualinvoke $stack171.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack173 = class "Lorg/apache/commons/lang3/reflect/AClass;";

        $stack174 = virtualinvoke $stack173.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("fClass");

        $stack175 = virtualinvoke $stack174.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack176 = new org.apache.commons.lang3.reflect.AClass;

        $stack177 = new org.apache.commons.lang3.reflect.AAClass;

        specialinvoke $stack177.<org.apache.commons.lang3.reflect.AAClass: void <init>()>();

        specialinvoke $stack176.<org.apache.commons.lang3.reflect.AClass: void <init>(org.apache.commons.lang3.reflect.AAClass)>($stack177);

        $stack178 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$CClass cClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$BClass bClass> = $stack178;

        $stack179 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack166, $stack163);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack179);

        $stack180 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$DClass dClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$BClass bClass> = $stack180;

        $stack181 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack169, $stack163);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack181);

        $stack182 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$EClass eClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$BClass bClass> = $stack182;

        $stack183 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack172, $stack163);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack183);

        $stack184 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$FClass fClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$BClass bClass> = $stack184;

        $stack185 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack175, $stack163);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack185);

        $stack186 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$DClass dClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$CClass cClass> = $stack186;

        $stack187 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack169, $stack166);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack187);

        $stack188 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$EClass eClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$CClass cClass> = $stack188;

        $stack189 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack172, $stack166);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack189);

        $stack190 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$FClass fClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$CClass cClass> = $stack190;

        $stack191 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack175, $stack166);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack191);

        $stack192 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$EClass eClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$DClass dClass> = $stack192;

        $stack193 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack172, $stack169);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack193);

        $stack194 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$FClass fClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$DClass dClass> = $stack194;

        $stack195 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack175, $stack169);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack195);

        $stack196 = $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$FClass fClass>;

        $stack176.<org.apache.commons.lang3.reflect.AClass: org.apache.commons.lang3.reflect.AClass$EClass eClass> = $stack196;

        $stack197 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>($stack175, $stack172);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack197);

        return;
    }

    public void delegateBooleanAssertion(java.lang.reflect.Type[], int, int, boolean)
    {
        boolean $stack8, expected;
        java.lang.reflect.Type type1, type2;
        java.lang.reflect.Type[] types;
        java.lang.StringBuilder $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack17, $stack18, $stack21, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack31, $stack32, $stack35;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        int i1, i2;
        java.lang.String $stack15, $stack16, $stack19, $stack20, $stack22, $stack29, $stack30, $stack33, $stack34, $stack36;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        types := @parameter0: java.lang.reflect.Type[];

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        expected := @parameter3: boolean;

        type1 = types[i1];

        type2 = types[i2];

        $stack8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(type2, type1);

        if expected == 0 goto label1;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: From ");

        $stack29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(type2);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeHtml4(java.lang.String)>($stack29);

        $stack31 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack30);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $stack33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(type1);

        $stack34 = staticinvoke <org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeHtml4(java.lang.String)>($stack33);

        $stack35 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($stack36, $stack8);

        goto label2;

     label1:
        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: From ");

        $stack15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(type2);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeHtml4(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $stack19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(type1);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringEscapeUtils: java.lang.String escapeHtml4(java.lang.String)>($stack19);

        $stack21 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($stack22, $stack8);

     label2:
        return;
    }

    public void testIsInstance() throws java.lang.SecurityException, java.lang.NoSuchFieldException
    {
        java.lang.reflect.Field $stack4, $stack7;
        java.lang.Integer $stack9, $stack10, $stack12;
        java.lang.reflect.Type $stack5, $stack8;
        java.lang.Class $stack3, $stack6;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        boolean $stack11, $stack13;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("intComparable");

        $stack5 = virtualinvoke $stack4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack6 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("uriComparable");

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        <org.apache.commons.lang3.reflect.TypeUtilsTest: java.lang.Comparable intComparable> = $stack9;

        $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isInstance(java.lang.Object,java.lang.reflect.Type)>($stack10, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isInstance(java.lang.Object,java.lang.reflect.Type)>($stack12, $stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        return;
    }

    public void testGetTypeArguments()
    {
        java.util.Map $stack5, $stack21, $stack38, $stack46, $stack58;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack14, $stack15, $stack16, $stack24, $stack25, $stack26, $stack30, $stack31, $stack32, $stack41, $stack42, $stack43;
        java.lang.Integer[] $stack36;
        long $stack61;
        java.lang.String $stack11, $stack17, $stack27, $stack33, $stack44;
        java.lang.reflect.TypeVariable $stack51, $stack56, $stack65, $stack70, $stack72, treeSetTypeVar;
        boolean $stack12, $stack28, $stack45, $stack74;
        java.lang.reflect.Type typeArg;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        int $stack47, $stack60;
        java.lang.reflect.TypeVariable[] $stack7, $stack23, $stack40, $stack50, $stack55, $stack64, $stack68, $stack71;
        java.lang.Class $stack6, $stack20, $stack22, $stack39, $stack48, $stack53, $stack62, $stack67, $stack69;
        java.lang.Object $stack13, $stack19, $stack29, $stack35, $stack52, $stack57, $stack66, $stack73;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(class "Ljava/lang/Integer;", class "Ljava/lang/Comparable;");

        $stack6 = class "Ljava/lang/Comparable;";

        $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        treeSetTypeVar = $stack7[0];

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type var assigns for Comparable from Integer: ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack5);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = interfaceinvoke $stack5.<java.util.Map: boolean containsKey(java.lang.Object)>(treeSetTypeVar);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($stack11, $stack12);

        $stack13 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>(treeSetTypeVar);

        typeArg = (java.lang.reflect.Type) $stack13;

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type argument of Comparable from Integer: ");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(typeArg);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack19 = interfaceinvoke $stack5.<java.util.Map: java.lang.Object get(java.lang.Object)>(treeSetTypeVar);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack17, class "Ljava/lang/Integer;", $stack19);

        $stack20 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack21 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>($stack20, class "Ljava/lang/Comparable;");

        $stack22 = class "Ljava/lang/Comparable;";

        $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        treeSetTypeVar = $stack23[0];

        $stack24 = new java.lang.StringBuilder;

        specialinvoke $stack24.<java.lang.StringBuilder: void <init>()>();

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type var assigns for Comparable from int: ");

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack21);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = interfaceinvoke $stack21.<java.util.Map: boolean containsKey(java.lang.Object)>(treeSetTypeVar);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($stack27, $stack28);

        $stack29 = interfaceinvoke $stack21.<java.util.Map: java.lang.Object get(java.lang.Object)>(treeSetTypeVar);

        typeArg = (java.lang.reflect.Type) $stack29;

        $stack30 = new java.lang.StringBuilder;

        specialinvoke $stack30.<java.lang.StringBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type argument of Comparable from int: ");

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(typeArg);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack35 = interfaceinvoke $stack21.<java.util.Map: java.lang.Object get(java.lang.Object)>(treeSetTypeVar);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack33, class "Ljava/lang/Integer;", $stack35);

        $stack36 = newarray (java.lang.Integer)[0];

        staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack36);

        $stack38 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(class "Ljava/util/List;", class "Ljava/util/Collection;");

        $stack39 = class "Ljava/lang/Comparable;";

        $stack40 = virtualinvoke $stack39.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        treeSetTypeVar = $stack40[0];

        $stack41 = new java.lang.StringBuilder;

        specialinvoke $stack41.<java.lang.StringBuilder: void <init>()>();

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type var assigns for Collection from List: ");

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack38);

        $stack44 = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack45 = interfaceinvoke $stack38.<java.util.Map: boolean containsKey(java.lang.Object)>(treeSetTypeVar);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>($stack44, $stack45);

        $stack46 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(class "Lorg/apache/commons/lang3/reflect/AAAClass$BBBClass;", class "Lorg/apache/commons/lang3/reflect/AAClass$BBClass;");

        $stack47 = interfaceinvoke $stack46.<java.util.Map: int size()>();

        if $stack47 != 2 goto label1;

        $stack74 = 1;

        goto label2;

     label1:
        $stack74 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack74);

        $stack48 = class "Lorg/apache/commons/lang3/reflect/AAClass;";

        $stack50 = virtualinvoke $stack48.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack51 = $stack50[0];

        $stack52 = interfaceinvoke $stack46.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack51);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $stack52);

        $stack53 = class "Lorg/apache/commons/lang3/reflect/AAClass$BBClass;";

        $stack55 = virtualinvoke $stack53.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack56 = $stack55[0];

        $stack57 = interfaceinvoke $stack46.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack56);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $stack57);

        $stack58 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(class "Lorg/apache/commons/lang3/reflect/TypeUtilsTest$Other;", class "Lorg/apache/commons/lang3/reflect/TypeUtilsTest$This;");

        $stack60 = interfaceinvoke $stack58.<java.util.Map: int size()>();

        $stack61 = (long) $stack60;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack61);

        $stack62 = class "Lorg/apache/commons/lang3/reflect/TypeUtilsTest$This;";

        $stack64 = virtualinvoke $stack62.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack65 = $stack64[0];

        $stack66 = interfaceinvoke $stack58.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack65);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $stack66);

        $stack67 = class "Lorg/apache/commons/lang3/reflect/TypeUtilsTest$Other;";

        $stack68 = virtualinvoke $stack67.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack70 = $stack68[0];

        $stack69 = class "Lorg/apache/commons/lang3/reflect/TypeUtilsTest$This;";

        $stack71 = virtualinvoke $stack69.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack72 = $stack71[1];

        $stack73 = interfaceinvoke $stack58.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack72);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack70, $stack73);

        return;
    }

    public void testTypesSatisfyVariables() throws java.lang.SecurityException, java.lang.NoSuchFieldException, java.lang.NoSuchMethodException
    {
        java.util.HashMap $stack3;
        java.lang.Integer max;
        java.lang.reflect.Method $stack7, $stack14, $stack21;
        boolean $stack11, $stack18, $stack25;
        java.lang.reflect.TypeVariable $stack9, $stack16, $stack23;
        java.lang.Class[] $stack6, $stack13, $stack20;
        java.lang.reflect.TypeVariable[] $stack8, $stack15, $stack22;
        java.lang.Comparable $stack4;
        java.lang.Class $stack5, $stack12, $stack19;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack3 = new java.util.HashMap;

        specialinvoke $stack3.<java.util.HashMap: void <init>()>();

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtilsTest: java.lang.Comparable stub()>();

        max = (java.lang.Integer) $stack4;

        $stack5 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = newarray (java.lang.Class)[0];

        $stack7 = virtualinvoke $stack5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("stub", $stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack9 = $stack8[0];

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack9, class "Ljava/lang/Integer;");

        $stack11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean typesSatisfyVariables(java.util.Map)>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        interfaceinvoke $stack3.<java.util.Map: void clear()>();

        $stack12 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack13 = newarray (java.lang.Class)[0];

        $stack14 = virtualinvoke $stack12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("stub2", $stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack16 = $stack15[0];

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack16, class "Ljava/lang/Integer;");

        $stack18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean typesSatisfyVariables(java.util.Map)>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        interfaceinvoke $stack3.<java.util.Map: void clear()>();

        $stack19 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = newarray (java.lang.Class)[0];

        $stack21 = virtualinvoke $stack19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("stub3", $stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack23 = $stack22[0];

        interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack23, class "Ljava/lang/Integer;");

        $stack25 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean typesSatisfyVariables(java.util.Map)>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testDetermineTypeVariableAssignments() throws java.lang.SecurityException, java.lang.NoSuchFieldException, java.lang.NoSuchMethodException
    {
        java.lang.reflect.TypeVariable treeSetTypeVar;
        java.lang.reflect.Field $stack5;
        java.lang.reflect.ParameterizedType iterableType;
        java.lang.reflect.Type $stack6, $stack12;
        java.lang.reflect.TypeVariable[] $stack9;
        java.util.Map $stack7;
        java.lang.reflect.Type[] $stack11;
        java.lang.Class $stack4, $stack8;
        java.lang.Object $stack13;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        boolean $stack10;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack4 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("iterable");

        $stack6 = virtualinvoke $stack5.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        iterableType = (java.lang.reflect.ParameterizedType) $stack6;

        $stack7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)>(class "Ljava/util/TreeSet;", iterableType);

        $stack8 = class "Ljava/util/TreeSet;";

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        treeSetTypeVar = $stack9[0];

        $stack10 = interfaceinvoke $stack7.<java.util.Map: boolean containsKey(java.lang.Object)>(treeSetTypeVar);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = interfaceinvoke iterableType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $stack12 = $stack11[0];

        $stack13 = interfaceinvoke $stack7.<java.util.Map: java.lang.Object get(java.lang.Object)>(treeSetTypeVar);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

        return;
    }

    public void testGetRawType() throws java.lang.SecurityException, java.lang.NoSuchFieldException
    {
        java.lang.reflect.TypeVariable genericParentT, $stack29, $stack34;
        java.lang.reflect.Field $stack6, $stack9, $stack12, $stack39;
        java.lang.reflect.Type $stack7, $stack10, $stack13, $stack40;
        java.lang.reflect.TypeVariable[] $stack15, $stack28, $stack33;
        java.lang.Class $stack5, $stack8, $stack11, $stack14, $stack17, $stack19, $stack21, $stack23, $stack25, $stack26, $stack30, $stack31, $stack35, $stack36, $stack37, $stack41;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack5 = class "Lorg/apache/commons/lang3/reflect/testbed/GenericTypeHolder;";

        $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("stringParent");

        $stack7 = virtualinvoke $stack6.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack8 = class "Lorg/apache/commons/lang3/reflect/testbed/GenericTypeHolder;";

        $stack9 = virtualinvoke $stack8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("integerParent");

        $stack10 = virtualinvoke $stack9.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack11 = class "Lorg/apache/commons/lang3/reflect/testbed/GenericTypeHolder;";

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("foos");

        $stack13 = virtualinvoke $stack12.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack14 = class "Lorg/apache/commons/lang3/reflect/testbed/GenericParent;";

        $stack15 = virtualinvoke $stack14.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        genericParentT = $stack15[0];

        $stack17 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>($stack7, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/reflect/testbed/GenericParent;", $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>($stack10, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/reflect/testbed/GenericParent;", $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>($stack13, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/util/List;", $stack21);

        $stack23 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>(genericParentT, class "Lorg/apache/commons/lang3/reflect/testbed/StringParameterizedChild;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>(genericParentT, $stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $stack25);

        $stack26 = class "Ljava/lang/Iterable;";

        $stack28 = virtualinvoke $stack26.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack29 = $stack28[0];

        $stack30 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>($stack29, $stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/reflect/testbed/Foo;", $stack30);

        $stack31 = class "Ljava/util/List;";

        $stack33 = virtualinvoke $stack31.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $stack34 = $stack33[0];

        $stack35 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>($stack34, $stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/commons/lang3/reflect/testbed/Foo;", $stack35);

        $stack36 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>(genericParentT, class "Lorg/apache/commons/lang3/reflect/testbed/GenericParent;");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack36);

        $stack37 = class "Lorg/apache/commons/lang3/reflect/testbed/GenericTypeHolder;";

        $stack39 = virtualinvoke $stack37.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("barParents");

        $stack40 = virtualinvoke $stack39.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $stack41 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>($stack40, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Lorg/apache/commons/lang3/reflect/testbed/GenericParent;", $stack41);

        return;
    }

    public void testIsArrayTypeClasses()
    {
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack27, $stack28;
        java.lang.Class $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[Z");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[B");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[S");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[I");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[C");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[J");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[F");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[D");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "[Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack11);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack13);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = <java.lang.Short: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack15);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack17);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = <java.lang.Character: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack19);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = <java.lang.Long: java.lang.Class TYPE>;

        $stack22 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack21);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        $stack23 = <java.lang.Float: java.lang.Class TYPE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack23);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack24);

        $stack25 = <java.lang.Double: java.lang.Class TYPE>;

        $stack26 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack25);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "Ljava/lang/Object;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack27);

        $stack28 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack28);

        return;
    }

    public void testIsArrayGenericTypes() throws java.lang.Exception
    {
        java.lang.reflect.Method $stack5;
        boolean $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34;
        java.lang.reflect.Type $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack33;
        java.lang.reflect.Type[] $stack6;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        java.lang.Class[] $stack4;
        java.lang.Class $stack3;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = newarray (java.lang.Class)[14];

        $stack4[0] = class "Ljava/util/List;";

        $stack4[1] = class "Ljava/util/List;";

        $stack4[2] = class "Ljava/util/List;";

        $stack4[3] = class "Ljava/util/List;";

        $stack4[4] = class "Ljava/util/List;";

        $stack4[5] = class "Ljava/util/List;";

        $stack4[6] = class "Ljava/util/List;";

        $stack4[7] = class "[Ljava/util/List;";

        $stack4[8] = class "[Ljava/util/List;";

        $stack4[9] = class "[Ljava/util/List;";

        $stack4[10] = class "[Ljava/util/List;";

        $stack4[11] = class "[Ljava/util/List;";

        $stack4[12] = class "[Ljava/util/List;";

        $stack4[13] = class "[Ljava/util/List;";

        $stack5 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dummyMethod", $stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $stack7 = $stack6[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = $stack6[1];

        $stack10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = $stack6[2];

        $stack12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack11);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = $stack6[3];

        $stack14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack13);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = $stack6[4];

        $stack16 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack15);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = $stack6[5];

        $stack18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack17);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = $stack6[6];

        $stack20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack19);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = $stack6[7];

        $stack22 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack21);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = $stack6[8];

        $stack24 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        $stack25 = $stack6[9];

        $stack26 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack25);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack27 = $stack6[10];

        $stack28 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        $stack29 = $stack6[11];

        $stack30 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack29);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = $stack6[12];

        $stack32 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack33 = $stack6[13];

        $stack34 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isArrayType(java.lang.reflect.Type)>($stack33);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        return;
    }

    public void testGetPrimitiveArrayComponentType() throws java.lang.Exception
    {
        java.lang.reflect.Type $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        java.lang.Class $stack1, $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[Z");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack1, $stack2);

        $stack3 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[B");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        $stack5 = <java.lang.Short: java.lang.Class TYPE>;

        $stack6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[S");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = <java.lang.Character: java.lang.Class TYPE>;

        $stack10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[C");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        $stack11 = <java.lang.Long: java.lang.Class TYPE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[J");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        $stack13 = <java.lang.Float: java.lang.Class TYPE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[F");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack14);

        $stack15 = <java.lang.Double: java.lang.Class TYPE>;

        $stack16 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(class "[D");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        $stack17 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack17);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack18);

        $stack19 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack19);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack20);

        $stack21 = <java.lang.Short: java.lang.Class TYPE>;

        $stack22 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack21);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack22);

        $stack23 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack24 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack23);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack24);

        $stack25 = <java.lang.Character: java.lang.Class TYPE>;

        $stack26 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack25);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack26);

        $stack27 = <java.lang.Long: java.lang.Class TYPE>;

        $stack28 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack27);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack28);

        $stack29 = <java.lang.Float: java.lang.Class TYPE>;

        $stack30 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack29);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack30);

        $stack31 = <java.lang.Double: java.lang.Class TYPE>;

        $stack32 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack31);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack32);

        return;
    }

    public void testGetArrayComponentType() throws java.lang.Exception
    {
        java.lang.reflect.Method $stack5;
        java.lang.reflect.Type $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41;
        java.lang.reflect.Type[] $stack6;
        org.apache.commons.lang3.reflect.TypeUtilsTest this;
        java.lang.Class[] $stack4;
        java.lang.Class $stack3;

        this := @this: org.apache.commons.lang3.reflect.TypeUtilsTest;

        $stack3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = newarray (java.lang.Class)[14];

        $stack4[0] = class "Ljava/util/List;";

        $stack4[1] = class "Ljava/util/List;";

        $stack4[2] = class "Ljava/util/List;";

        $stack4[3] = class "Ljava/util/List;";

        $stack4[4] = class "Ljava/util/List;";

        $stack4[5] = class "Ljava/util/List;";

        $stack4[6] = class "Ljava/util/List;";

        $stack4[7] = class "[Ljava/util/List;";

        $stack4[8] = class "[Ljava/util/List;";

        $stack4[9] = class "[Ljava/util/List;";

        $stack4[10] = class "[Ljava/util/List;";

        $stack4[11] = class "[Ljava/util/List;";

        $stack4[12] = class "[Ljava/util/List;";

        $stack4[13] = class "[Ljava/util/List;";

        $stack5 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dummyMethod", $stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $stack7 = $stack6[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack7);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack8);

        $stack9 = $stack6[1];

        $stack10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack9);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack10);

        $stack11 = $stack6[2];

        $stack12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack11);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack12);

        $stack13 = $stack6[3];

        $stack14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack13);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack14);

        $stack15 = $stack6[4];

        $stack16 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack15);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack16);

        $stack17 = $stack6[5];

        $stack18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack17);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack18);

        $stack19 = $stack6[6];

        $stack20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack19);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack20);

        $stack22 = $stack6[0];

        $stack21 = $stack6[7];

        $stack23 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack22, $stack23);

        $stack25 = $stack6[1];

        $stack24 = $stack6[8];

        $stack26 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack26);

        $stack28 = $stack6[2];

        $stack27 = $stack6[9];

        $stack29 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack28, $stack29);

        $stack31 = $stack6[3];

        $stack30 = $stack6[10];

        $stack32 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack32);

        $stack34 = $stack6[4];

        $stack33 = $stack6[11];

        $stack35 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack35);

        $stack37 = $stack6[5];

        $stack36 = $stack6[12];

        $stack38 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack37, $stack38);

        $stack40 = $stack6[6];

        $stack39 = $stack6[13];

        $stack41 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>($stack39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack40, $stack41);

        return;
    }

    public static java.lang.Comparable stub()
    {
        return null;
    }

    public static java.lang.Comparable stub2()
    {
        return null;
    }

    public static java.lang.Comparable stub3()
    {
        return null;
    }
}
