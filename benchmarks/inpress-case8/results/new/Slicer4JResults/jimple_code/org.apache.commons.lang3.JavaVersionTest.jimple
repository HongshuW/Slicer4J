public class org.apache.commons.lang3.JavaVersionTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.JavaVersionTest this;

        this := @this: org.apache.commons.lang3.JavaVersionTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetJavaVersion()
    {
        org.apache.commons.lang3.JavaVersionTest this;
        org.apache.commons.lang3.JavaVersion $stack2, $stack3, $stack5, $stack6, $stack8, $stack9, $stack11, $stack12, $stack14, $stack15, $stack17, $stack18, $stack20, $stack21, $stack23, $stack24, $stack26, $stack27, $stack29, $stack31, $stack32;

        this := @this: org.apache.commons.lang3.JavaVersionTest;

        $stack2 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_0_9>;

        $stack3 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("0.9");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("0.9 failed", $stack2, $stack3);

        $stack5 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_1>;

        $stack6 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.1 failed", $stack5, $stack6);

        $stack8 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_2>;

        $stack9 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.2 failed", $stack8, $stack9);

        $stack11 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_3>;

        $stack12 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.3");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.3 failed", $stack11, $stack12);

        $stack14 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_4>;

        $stack15 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.4");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.4 failed", $stack14, $stack15);

        $stack17 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $stack18 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.5");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.5 failed", $stack17, $stack18);

        $stack20 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_6>;

        $stack21 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.6");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.6 failed", $stack20, $stack21);

        $stack23 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_7>;

        $stack24 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.7");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.7 failed", $stack23, $stack24);

        $stack26 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_8>;

        $stack27 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("1.8 failed", $stack26, $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.9");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("1.9 unexpectedly worked", $stack29);

        $stack31 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion get(java.lang.String)>("1.5");

        $stack32 = staticinvoke <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion getJavaVersion(java.lang.String)>("1.5");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Wrapper method failed", $stack31, $stack32);

        return;
    }

    public void testAtLeast()
    {
        org.apache.commons.lang3.JavaVersionTest this;
        boolean $stack4, $stack8, $stack12, $stack16, $stack20;
        org.apache.commons.lang3.JavaVersion $stack1, $stack2, $stack5, $stack6, $stack9, $stack10, $stack13, $stack14, $stack17, $stack18;

        this := @this: org.apache.commons.lang3.JavaVersionTest;

        $stack2 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_2>;

        $stack1 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.JavaVersion: boolean atLeast(org.apache.commons.lang3.JavaVersion)>($stack1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("1.2 at least 1.5 passed", $stack4);

        $stack6 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $stack5 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_2>;

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.JavaVersion: boolean atLeast(org.apache.commons.lang3.JavaVersion)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("1.5 at least 1.2 failed", $stack8);

        $stack10 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_6>;

        $stack9 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_7>;

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.JavaVersion: boolean atLeast(org.apache.commons.lang3.JavaVersion)>($stack9);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("1.6 at least 1.7 passed", $stack12);

        $stack14 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_0_9>;

        $stack13 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_5>;

        $stack16 = virtualinvoke $stack14.<org.apache.commons.lang3.JavaVersion: boolean atLeast(org.apache.commons.lang3.JavaVersion)>($stack13);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0.9 at least 1.5 failed", $stack16);

        $stack18 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_0_9>;

        $stack17 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_6>;

        $stack20 = virtualinvoke $stack18.<org.apache.commons.lang3.JavaVersion: boolean atLeast(org.apache.commons.lang3.JavaVersion)>($stack17);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("0.9 at least 1.6 passed", $stack20);

        return;
    }

    public void testToString()
    {
        org.apache.commons.lang3.JavaVersion $stack1;
        org.apache.commons.lang3.JavaVersionTest this;
        java.lang.String $stack3;

        this := @this: org.apache.commons.lang3.JavaVersionTest;

        $stack1 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_2>;

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.JavaVersion: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1.2", $stack3);

        return;
    }
}
