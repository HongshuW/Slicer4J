class org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl extends org.apache.commons.lang3.concurrent.AtomicSafeInitializer
{
    final java.util.concurrent.atomic.AtomicInteger initCounter;

    private void <init>()
    {
        java.util.concurrent.atomic.AtomicInteger $stack1;
        org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl this;

        this := @this: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl;

        specialinvoke this.<org.apache.commons.lang3.concurrent.AtomicSafeInitializer: void <init>()>();

        $stack1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $stack1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl: java.util.concurrent.atomic.AtomicInteger initCounter> = $stack1;

        return;
    }

    protected java.lang.Object initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException
    {
        java.lang.Object $stack3;
        java.util.concurrent.atomic.AtomicInteger $stack1;
        org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl this;

        this := @this: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl;

        $stack1 = this.<org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl: java.util.concurrent.atomic.AtomicInteger initCounter>;

        virtualinvoke $stack1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $stack3 = new java.lang.Object;

        specialinvoke $stack3.<java.lang.Object: void <init>()>();

        return $stack3;
    }

    void <init>(org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$1)
    {
        org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$1 x0;
        org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl this;

        this := @this: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl;

        x0 := @parameter0: org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$1;

        specialinvoke this.<org.apache.commons.lang3.concurrent.AtomicSafeInitializerTest$AtomicSafeInitializerTestImpl: void <init>()>();

        return;
    }
}
