public class org.apache.commons.lang3.builder.CompareToBuilderTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testReflectionCompare()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack3, $stack4;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack5, $stack6, $stack7, $stack8;
        boolean $stack18, $stack13, $stack10, $stack9;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack5 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object)>($stack3, $stack3);

        if $stack5 != 0 goto label1;

        $stack18 = 1;

        goto label2;

     label1:
        $stack18 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack6 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        if $stack6 != 0 goto label3;

        $stack13 = 1;

        goto label4;

     label3:
        $stack13 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void setA(int)>(5);

        $stack7 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        if $stack7 >= 0 goto label5;

        $stack10 = 1;

        goto label6;

     label5:
        $stack10 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack8 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object)>($stack4, $stack3);

        if $stack8 <= 0 goto label7;

        $stack9 = 1;

        goto label8;

     label7:
        $stack9 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testReflectionCompareEx1()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack2;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack2 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object)>($stack2, null);

        return;
    }

    public void testReflectionCompareEx2()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        java.lang.Object $stack4;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack3;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack4 = new java.lang.Object;

        specialinvoke $stack4.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        return;
    }

    public void testReflectionHierarchyCompare()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void testReflectionHierarchyCompare(boolean,java.lang.String[])>(0, null);

        return;
    }

    public void testReflectionHierarchyCompareExcludeFields()
    {
        java.lang.String[] $stack5;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "b";

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void testReflectionHierarchyCompare(boolean,java.lang.String[])>(1, $stack5);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(1, 1);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(2, 1);

        $stack8 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(3, 1);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertXYZCompareOrder(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack6, $stack7, $stack8, 1, $stack5);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(1, 3);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(2, 2);

        $stack11 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(3, 1);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertXYZCompareOrder(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack9, $stack10, $stack11, 1, $stack5);

        return;
    }

    public void testReflectionHierarchyCompareTransients()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void testReflectionHierarchyCompare(boolean,java.lang.String[])>(1, null);

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject: void <init>(int,int)>(1, 1);

        $stack5 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject: void <init>(int,int)>(2, 2);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject: void <init>(int,int)>(3, 3);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertXYZCompareOrder(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack4, $stack5, $stack6, 1, null);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject: void <init>(int,int)>(1, 1);

        $stack8 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject: void <init>(int,int)>(1, 2);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestTransientSubObject: void <init>(int,int)>(1, 3);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertXYZCompareOrder(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack7, $stack8, $stack9, 1, null);

        return;
    }

    private void assertXYZCompareOrder(java.lang.Object, java.lang.Object, java.lang.Object, boolean, java.lang.String[])
    {
        java.lang.String[] excludeFields;
        int $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23;
        boolean testTransients, $stack67, $stack61, $stack55, $stack49, $stack43, $stack37, $stack31, $stack25, $stack24;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        java.lang.Object x, y, z;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        x := @parameter0: java.lang.Object;

        y := @parameter1: java.lang.Object;

        z := @parameter2: java.lang.Object;

        testTransients := @parameter3: boolean;

        excludeFields := @parameter4: java.lang.String[];

        $stack7 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(x, x, testTransients, null, excludeFields);

        if 0 != $stack7 goto label01;

        $stack67 = 1;

        goto label02;

     label01:
        $stack67 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack67);

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(y, y, testTransients, null, excludeFields);

        if 0 != $stack9 goto label03;

        $stack61 = 1;

        goto label04;

     label03:
        $stack61 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack61);

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(z, z, testTransients, null, excludeFields);

        if 0 != $stack11 goto label05;

        $stack55 = 1;

        goto label06;

     label05:
        $stack55 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack13 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(x, y, testTransients, null, excludeFields);

        if 0 <= $stack13 goto label07;

        $stack49 = 1;

        goto label08;

     label07:
        $stack49 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack49);

        $stack15 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(x, z, testTransients, null, excludeFields);

        if 0 <= $stack15 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack17 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(y, z, testTransients, null, excludeFields);

        if 0 <= $stack17 goto label11;

        $stack37 = 1;

        goto label12;

     label11:
        $stack37 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack19 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(y, x, testTransients, null, excludeFields);

        if 0 >= $stack19 goto label13;

        $stack31 = 1;

        goto label14;

     label13:
        $stack31 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack21 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(z, x, testTransients, null, excludeFields);

        if 0 >= $stack21 goto label15;

        $stack25 = 1;

        goto label16;

     label15:
        $stack25 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack23 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(z, y, testTransients, null, excludeFields);

        if 0 >= $stack23 goto label17;

        $stack24 = 1;

        goto label18;

     label17:
        $stack24 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    private void testReflectionHierarchyCompare(boolean, java.lang.String[])
    {
        java.lang.String[] excludeFields;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack9, $stack10, $stack11;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject $stack12, $stack13, $stack14, $stack15, $stack18;
        int $stack17, $stack20;
        boolean testTransients, $stack34, $stack21;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        testTransients := @parameter0: boolean;

        excludeFields := @parameter1: java.lang.String[];

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(1);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(2);

        $stack11 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(3);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(1, 1);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(2, 2);

        $stack14 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(3, 3);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertReflectionCompareContract(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack9, $stack9, $stack9, 0, excludeFields);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertReflectionCompareContract(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack9, $stack10, $stack11, 0, excludeFields);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertReflectionCompareContract(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack12, $stack12, $stack12, 0, excludeFields);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertReflectionCompareContract(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack12, $stack13, $stack14, 0, excludeFields);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertReflectionCompareContract(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>("1", "2", "3", 0, excludeFields);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(1, 0);

        $stack17 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean)>($stack12, $stack15, testTransients);

        if 0 == $stack17 goto label1;

        $stack34 = 1;

        goto label2;

     label1:
        $stack34 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestSubObject: void <init>(int,int)>(0, 1);

        $stack20 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean)>($stack12, $stack18, testTransients);

        if 0 == $stack20 goto label3;

        $stack21 = 1;

        goto label4;

     label3:
        $stack21 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertXYZCompareOrder(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack9, $stack10, $stack11, 1, null);

        specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: void assertXYZCompareOrder(java.lang.Object,java.lang.Object,java.lang.Object,boolean,java.lang.String[])>($stack12, $stack13, $stack14, 1, null);

        return;
    }

    private void assertReflectionCompareContract(java.lang.Object, java.lang.Object, java.lang.Object, boolean, java.lang.String[])
    {
        java.lang.String[] excludeFields;
        int $stack6, $stack7, $stack8, $stack9, $stack19, $stack20, $stack21, $stack26, $stack32, $stack10, $stack11;
        boolean testTransients, $stack13, $stack34, $stack33, $stack25, $stack12, $stack14;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        java.lang.Object x, y, z;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        x := @parameter0: java.lang.Object;

        y := @parameter1: java.lang.Object;

        z := @parameter2: java.lang.Object;

        testTransients := @parameter3: boolean;

        excludeFields := @parameter4: java.lang.String[];

        $stack6 = specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: int reflectionCompareSignum(java.lang.Object,java.lang.Object,boolean,java.lang.String[])>(x, y, testTransients, excludeFields);

        $stack7 = specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: int reflectionCompareSignum(java.lang.Object,java.lang.Object,boolean,java.lang.String[])>(y, x, testTransients, excludeFields);

        $stack8 = neg $stack7;

        if $stack6 != $stack8 goto label01;

        $stack34 = 1;

        goto label02;

     label01:
        $stack34 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(x, y, testTransients, null, excludeFields);

        if $stack9 <= 0 goto label05;

        $stack26 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(y, z, testTransients, null, excludeFields);

        if $stack26 <= 0 goto label05;

        $stack32 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(x, z, testTransients, null, excludeFields);

        if $stack32 <= 0 goto label03;

        $stack33 = 1;

        goto label04;

     label03:
        $stack33 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

     label05:
        $stack10 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(x, y, testTransients, null, excludeFields);

        if $stack10 != 0 goto label08;

        $stack19 = specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: int reflectionCompareSignum(java.lang.Object,java.lang.Object,boolean,java.lang.String[])>(x, z, testTransients, excludeFields);

        $stack20 = specialinvoke this.<org.apache.commons.lang3.builder.CompareToBuilderTest: int reflectionCompareSignum(java.lang.Object,java.lang.Object,boolean,java.lang.String[])>(y, z, testTransients, excludeFields);

        $stack21 = neg $stack20;

        if $stack19 != $stack21 goto label06;

        $stack25 = 1;

        goto label07;

     label06:
        $stack25 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

     label08:
        $stack11 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean)>(x, y, testTransients);

        if $stack11 != 0 goto label09;

        $stack12 = 1;

        goto label10;

     label09:
        $stack12 = 0;

     label10:
        $stack13 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean)>(x, y, testTransients);

        if $stack12 != $stack13 goto label11;

        $stack14 = 1;

        goto label12;

     label11:
        $stack14 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        return;
    }

    private int reflectionCompareSignum(java.lang.Object, java.lang.Object, boolean, java.lang.String[])
    {
        long $stack6;
        java.lang.String[] excludeFields;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack5, $stack8;
        java.lang.Object lhs, rhs;
        java.math.BigInteger $stack7;
        boolean testTransients;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        lhs := @parameter0: java.lang.Object;

        rhs := @parameter1: java.lang.Object;

        testTransients := @parameter2: boolean;

        excludeFields := @parameter3: java.lang.String[];

        $stack5 = staticinvoke <org.apache.commons.lang3.builder.CompareToBuilder: int reflectionCompare(java.lang.Object,java.lang.Object,boolean)>(lhs, rhs, testTransients);

        $stack6 = (long) $stack5;

        $stack7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($stack6);

        $stack8 = virtualinvoke $stack7.<java.math.BigInteger: int signum()>();

        return $stack8;
    }

    public void testAppendSuper()
    {
        boolean $stack54, $stack50, $stack46, $stack42, $stack38, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $u0, $u1;
        int $stack8, $stack12, $stack16, $stack20, $stack24, $stack28, $stack32, $i0, $i1;
        org.apache.commons.lang3.builder.CompareToBuilder $stack6, $stack7, $stack10, $stack11, $stack14, $stack15, $stack18, $stack19, $stack22, $stack23, $stack26, $stack27, $stack30, $stack31, $u2, $u3, $u4, $u5, $u6, $u7, $u8;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $u0 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $u0.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $u1 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $u1.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(5);

        $u2 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack6 = virtualinvoke $u2.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)>(0);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($u0, $u0);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 != 0 goto label01;

        $stack54 = 1;

        goto label02;

     label01:
        $stack54 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $u3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $u3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $u3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)>(0);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($u0, $u1);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label03;

        $stack50 = 1;

        goto label04;

     label03:
        $stack50 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        $u4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $u4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $u4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)>(0);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($u1, $u0);

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack16 <= 0 goto label05;

        $stack46 = 1;

        goto label06;

     label05:
        $stack46 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $u5 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $u5.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $i0 = (int) -1;

        $stack18 = virtualinvoke $u5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)>($i0);

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($u0, $u0);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 >= 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $u6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $u6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $i1 = (int) -1;

        $stack22 = virtualinvoke $u6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)>($i1);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($u0, $u1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label09;

        $stack38 = 1;

        goto label10;

     label09:
        $stack38 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $u7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $u7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $u7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)>(1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($u0, $u0);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack28 <= 0 goto label11;

        $stack34 = 1;

        goto label12;

     label11:
        $stack34 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $u8 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $u8.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack30 = virtualinvoke $u8.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder appendSuper(int)>(1);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($u0, $u1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 <= 0 goto label13;

        $stack33 = 1;

        goto label14;

     label13:
        $stack33 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testObject()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack3, $stack4;
        int $stack7, $stack10, $stack13, $stack16, $stack19, $stack24, $stack27;
        boolean $stack46, $stack41, $stack38, $stack35, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilder $stack5, $stack6, $stack8, $stack9, $stack11, $stack12, $stack14, $stack15, $stack17, $stack18, $stack20, $stack23, $stack25, $stack26;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack5 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, $stack3);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack7 != 0 goto label01;

        $stack46 = 1;

        goto label02;

     label01:
        $stack46 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        $stack8 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack10 != 0 goto label03;

        $stack41 = 1;

        goto label04;

     label03:
        $stack41 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void setA(int)>(5);

        $stack11 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack13 >= 0 goto label05;

        $stack38 = 1;

        goto label06;

     label05:
        $stack38 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack14 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack4, $stack3);

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack16 <= 0 goto label07;

        $stack35 = 1;

        goto label08;

     label07:
        $stack35 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack17 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, null);

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack19 <= 0 goto label09;

        $stack32 = 1;

        goto label10;

     label09:
        $stack32 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack20 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(null, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 != 0 goto label11;

        $stack29 = 1;

        goto label12;

     label11:
        $stack29 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label13;

        $stack28 = 1;

        goto label14;

     label13:
        $stack28 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testObjectBuild()
    {
        java.lang.Integer $stack5, $stack8, $stack9, $stack12, $stack15, $stack19, $stack23, $stack25, $stack30, $stack33;
        boolean $stack45, $stack42, $stack36, $stack35;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack3, $stack4;
        int $stack16, $stack20, $stack24, $stack34;
        org.apache.commons.lang3.builder.CompareToBuilder $stack6, $stack7, $stack10, $stack11, $stack13, $stack14, $stack17, $stack18, $stack21, $stack22, $stack26, $stack29, $stack31, $stack32;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, $stack3);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: java.lang.Integer build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack8);

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: java.lang.Integer build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack12);

        virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void setA(int)>(5);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: java.lang.Integer build()>();

        $stack16 = virtualinvoke $stack15.<java.lang.Integer: int intValue()>();

        if $stack16 >= 0 goto label1;

        $stack45 = 1;

        goto label2;

     label1:
        $stack45 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack17 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack4, $stack3);

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: java.lang.Integer build()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Integer: int intValue()>();

        if $stack20 <= 0 goto label3;

        $stack42 = 1;

        goto label4;

     label3:
        $stack42 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, null);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: java.lang.Integer build()>();

        $stack24 = virtualinvoke $stack23.<java.lang.Integer: int intValue()>();

        if $stack24 <= 0 goto label5;

        $stack36 = 1;

        goto label6;

     label5:
        $stack36 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack36);

        $stack25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack26 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack29 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(null, null);

        $stack30 = virtualinvoke $stack29.<org.apache.commons.lang3.builder.CompareToBuilder: java.lang.Integer build()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, $stack30);

        $stack31 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack33 = virtualinvoke $stack32.<org.apache.commons.lang3.builder.CompareToBuilder: java.lang.Integer build()>();

        $stack34 = virtualinvoke $stack33.<java.lang.Integer: int intValue()>();

        if $stack34 >= 0 goto label7;

        $stack35 = 1;

        goto label8;

     label7:
        $stack35 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        return;
    }

    public void testObjectEx2()
    {
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        java.lang.Object $stack4;
        org.apache.commons.lang3.builder.CompareToBuilder $stack5;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack3;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        $stack4 = new java.lang.Object;

        specialinvoke $stack4.<java.lang.Object: void <init>()>();

        $stack5 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>($stack3, $stack4);

        return;
    }

    public void testObjectComparator()
    {
        boolean $stack65, $stack61, $stack58, $stack54, $stack51, $stack48, $stack45, $stack42, $stack41;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack6, $stack10, $stack14, $stack18, $stack22, $stack26, $stack30, $stack36, $stack40;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack35, $stack37, $stack39;
        java.util.Comparator $stack4, $stack8, $stack12, $stack16, $stack20, $stack24, $stack28, $stack32, $stack38;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", "Fred", $stack4);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack65 = 1;

        goto label02;

     label01:
        $stack65 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack65);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", "Fred", $stack8);

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack10 != 0 goto label03;

        $stack61 = 1;

        goto label04;

     label03:
        $stack61 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack61);

        $stack11 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack12 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack13 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", "FRED", $stack12);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label05;

        $stack58 = 1;

        goto label06;

     label05:
        $stack58 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("FRED", "Fred", $stack16);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 != 0 goto label07;

        $stack54 = 1;

        goto label08;

     label07:
        $stack54 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", "FREDA", $stack20);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack22 >= 0 goto label09;

        $stack51 = 1;

        goto label10;

     label09:
        $stack51 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        $stack23 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack24 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack25 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("FREDA", "Fred", $stack24);

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack26 <= 0 goto label11;

        $stack48 = 1;

        goto label12;

     label11:
        $stack48 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack48);

        $stack27 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack28 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack29 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", null, $stack28);

        $stack30 = virtualinvoke $stack29.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack30 <= 0 goto label13;

        $stack45 = 1;

        goto label14;

     label13:
        $stack45 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack31 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack32 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack35 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>(null, null, $stack32);

        $stack36 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack36 != 0 goto label15;

        $stack42 = 1;

        goto label16;

     label15:
        $stack42 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack37 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack37.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack38 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>(null, "Fred", $stack38);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack40 >= 0 goto label17;

        $stack41 = 1;

        goto label18;

     label17:
        $stack41 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        return;
    }

    public void testObjectComparatorNull()
    {
        int $stack5, $stack8, $stack11, $stack14, $stack17, $stack22, $stack25;
        boolean $stack48, $stack43, $stack39, $stack35, $stack31, $stack27, $stack26;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack21, $stack23, $stack24;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", "Fred", null);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack5 != 0 goto label01;

        $stack48 = 1;

        goto label02;

     label01:
        $stack48 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack48);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", "Fred", null);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 != 0 goto label03;

        $stack43 = 1;

        goto label04;

     label03:
        $stack43 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", "Zebra", null);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 >= 0 goto label05;

        $stack39 = 1;

        goto label06;

     label05:
        $stack39 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Zebra", "Fred", null);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 <= 0 goto label07;

        $stack35 = 1;

        goto label08;

     label07:
        $stack35 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>("Fred", null, null);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 <= 0 goto label09;

        $stack31 = 1;

        goto label10;

     label09:
        $stack31 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack21 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>(null, null, null);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack22 != 0 goto label11;

        $stack27 = 1;

        goto label12;

     label11:
        $stack27 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack27);

        $stack23 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object,java.util.Comparator)>(null, "Fred", null);

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack25 >= 0 goto label13;

        $stack26 = 1;

        goto label14;

     label13:
        $stack26 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        return;
    }

    public void testLong()
    {
        int $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25;
        boolean $stack42, $stack39, $stack36, $stack33, $stack30, $stack27, $stack26;
        org.apache.commons.lang3.builder.CompareToBuilder $stack5, $stack6, $stack8, $stack9, $stack11, $stack12, $stack14, $stack15, $stack17, $stack18, $stack20, $stack21, $stack23, $stack24;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack5 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long,long)>(1L, 1L);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack7 != 0 goto label01;

        $stack42 = 1;

        goto label02;

     label01:
        $stack42 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack8 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long,long)>(1L, 2L);

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack10 >= 0 goto label03;

        $stack39 = 1;

        goto label04;

     label03:
        $stack39 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack11 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long,long)>(2L, 1L);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack13 <= 0 goto label05;

        $stack36 = 1;

        goto label06;

     label05:
        $stack36 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack36);

        $stack14 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long,long)>(1L, 9223372036854775807L);

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack16 >= 0 goto label07;

        $stack33 = 1;

        goto label08;

     label07:
        $stack33 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack17 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long,long)>(9223372036854775807L, 1L);

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack19 <= 0 goto label09;

        $stack30 = 1;

        goto label10;

     label09:
        $stack30 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack20 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long,long)>(1L, -9223372036854775808L);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack22 <= 0 goto label11;

        $stack27 = 1;

        goto label12;

     label11:
        $stack27 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack27);

        $stack23 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long,long)>(-9223372036854775808L, 1L);

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack25 >= 0 goto label13;

        $stack26 = 1;

        goto label14;

     label13:
        $stack26 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        return;
    }

    public void testInt()
    {
        int $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23;
        boolean $stack40, $stack37, $stack34, $stack31, $stack28, $stack25, $stack24;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int,int)>(1, 1);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack5 != 0 goto label01;

        $stack40 = 1;

        goto label02;

     label01:
        $stack40 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int,int)>(1, 2);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 >= 0 goto label03;

        $stack37 = 1;

        goto label04;

     label03:
        $stack37 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int,int)>(2, 1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 <= 0 goto label05;

        $stack34 = 1;

        goto label06;

     label05:
        $stack34 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int,int)>(1, 2147483647);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 >= 0 goto label07;

        $stack31 = 1;

        goto label08;

     label07:
        $stack31 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int,int)>(2147483647, 1);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 <= 0 goto label09;

        $stack28 = 1;

        goto label10;

     label09:
        $stack28 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int,int)>(1, -2147483648);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int,int)>(-2147483648, 1);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack23 >= 0 goto label13;

        $stack24 = 1;

        goto label14;

     label13:
        $stack24 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testShort()
    {
        int $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23;
        boolean $stack40, $stack37, $stack34, $stack31, $stack28, $stack25, $stack24;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short,short)>(1, 1);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack5 != 0 goto label01;

        $stack40 = 1;

        goto label02;

     label01:
        $stack40 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short,short)>(1, 2);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 >= 0 goto label03;

        $stack37 = 1;

        goto label04;

     label03:
        $stack37 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short,short)>(2, 1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 <= 0 goto label05;

        $stack34 = 1;

        goto label06;

     label05:
        $stack34 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short,short)>(1, 32767);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 >= 0 goto label07;

        $stack31 = 1;

        goto label08;

     label07:
        $stack31 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short,short)>(32767, 1);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 <= 0 goto label09;

        $stack28 = 1;

        goto label10;

     label09:
        $stack28 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short,short)>(1, -32768);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short,short)>(-32768, 1);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack23 >= 0 goto label13;

        $stack24 = 1;

        goto label14;

     label13:
        $stack24 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testChar()
    {
        int $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23;
        boolean $stack40, $stack37, $stack34, $stack31, $stack28, $stack25, $stack24;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char,char)>(1, 1);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack5 != 0 goto label01;

        $stack40 = 1;

        goto label02;

     label01:
        $stack40 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char,char)>(1, 2);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 >= 0 goto label03;

        $stack37 = 1;

        goto label04;

     label03:
        $stack37 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char,char)>(2, 1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 <= 0 goto label05;

        $stack34 = 1;

        goto label06;

     label05:
        $stack34 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char,char)>(1, 65535);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 >= 0 goto label07;

        $stack31 = 1;

        goto label08;

     label07:
        $stack31 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char,char)>(65535, 1);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 <= 0 goto label09;

        $stack28 = 1;

        goto label10;

     label09:
        $stack28 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char,char)>(1, 0);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char,char)>(0, 1);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack23 >= 0 goto label13;

        $stack24 = 1;

        goto label14;

     label13:
        $stack24 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testByte()
    {
        int $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23;
        boolean $stack40, $stack37, $stack34, $stack31, $stack28, $stack25, $stack24;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)>(1, 1);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack5 != 0 goto label01;

        $stack40 = 1;

        goto label02;

     label01:
        $stack40 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)>(1, 2);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 >= 0 goto label03;

        $stack37 = 1;

        goto label04;

     label03:
        $stack37 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)>(2, 1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 <= 0 goto label05;

        $stack34 = 1;

        goto label06;

     label05:
        $stack34 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)>(1, 127);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 >= 0 goto label07;

        $stack31 = 1;

        goto label08;

     label07:
        $stack31 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)>(127, 1);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 <= 0 goto label09;

        $stack28 = 1;

        goto label10;

     label09:
        $stack28 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)>(1, -128);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte,byte)>(-128, 1);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack23 >= 0 goto label13;

        $stack24 = 1;

        goto label14;

     label13:
        $stack24 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testDouble()
    {
        boolean $stack90, $stack87, $stack84, $stack81, $stack78, $stack75, $stack72, $stack69, $stack66, $stack63, $stack60, $stack57, $stack54, $stack51, $stack50;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $stack46, $stack49;
        org.apache.commons.lang3.builder.CompareToBuilder $stack5, $stack6, $stack8, $stack9, $stack11, $stack12, $stack14, $stack15, $stack17, $stack18, $stack20, $stack21, $stack23, $stack24, $stack26, $stack27, $stack29, $stack30, $stack32, $stack33, $stack35, $stack36, $stack38, $stack39, $stack41, $stack42, $stack44, $stack45, $stack47, $stack48;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack5 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(1.0, 1.0);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack7 != 0 goto label01;

        $stack90 = 1;

        goto label02;

     label01:
        $stack90 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack90);

        $stack8 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(1.0, 2.0);

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack10 >= 0 goto label03;

        $stack87 = 1;

        goto label04;

     label03:
        $stack87 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack87);

        $stack11 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(2.0, 1.0);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack13 <= 0 goto label05;

        $stack84 = 1;

        goto label06;

     label05:
        $stack84 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack84);

        $stack14 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(1.0, 1.7976931348623157E308);

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack16 >= 0 goto label07;

        $stack81 = 1;

        goto label08;

     label07:
        $stack81 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack81);

        $stack17 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(1.7976931348623157E308, 1.0);

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack19 <= 0 goto label09;

        $stack78 = 1;

        goto label10;

     label09:
        $stack78 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack20 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(1.0, 4.9E-324);

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack22 <= 0 goto label11;

        $stack75 = 1;

        goto label12;

     label11:
        $stack75 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack75);

        $stack23 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(4.9E-324, 1.0);

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack25 >= 0 goto label13;

        $stack72 = 1;

        goto label14;

     label13:
        $stack72 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack72);

        $stack26 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(#NaN, #NaN);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack28 != 0 goto label15;

        $stack69 = 1;

        goto label16;

     label15:
        $stack69 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack69);

        $stack29 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack29.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack30 = virtualinvoke $stack29.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(#NaN, 1.7976931348623157E308);

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack31 <= 0 goto label17;

        $stack66 = 1;

        goto label18;

     label17:
        $stack66 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack66);

        $stack32 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack32.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack33 = virtualinvoke $stack32.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(#Infinity, 1.7976931348623157E308);

        $stack34 = virtualinvoke $stack33.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack34 <= 0 goto label19;

        $stack63 = 1;

        goto label20;

     label19:
        $stack63 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack63);

        $stack35 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack36 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(#-Infinity, 4.9E-324);

        $stack37 = virtualinvoke $stack36.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack37 >= 0 goto label21;

        $stack60 = 1;

        goto label22;

     label21:
        $stack60 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack38 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack38.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack39 = virtualinvoke $stack38.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(1.0, #NaN);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack40 >= 0 goto label23;

        $stack57 = 1;

        goto label24;

     label23:
        $stack57 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack57);

        $stack41 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack41.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack42 = virtualinvoke $stack41.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(#NaN, 1.0);

        $stack43 = virtualinvoke $stack42.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack43 <= 0 goto label25;

        $stack54 = 1;

        goto label26;

     label25:
        $stack54 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack44 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack44.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack45 = virtualinvoke $stack44.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(-0.0, 0.0);

        $stack46 = virtualinvoke $stack45.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack46 >= 0 goto label27;

        $stack51 = 1;

        goto label28;

     label27:
        $stack51 = 0;

     label28:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        $stack47 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack47.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack48 = virtualinvoke $stack47.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(0.0, -0.0);

        $stack49 = virtualinvoke $stack48.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack49 <= 0 goto label29;

        $stack50 = 1;

        goto label30;

     label29:
        $stack50 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        return;
    }

    public void testFloat()
    {
        boolean $stack88, $stack85, $stack82, $stack79, $stack76, $stack73, $stack70, $stack67, $stack64, $stack61, $stack58, $stack55, $stack52, $stack49, $stack48;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack38, $stack41, $stack44, $stack47;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25, $stack27, $stack28, $stack30, $stack31, $stack33, $stack34, $stack36, $stack37, $stack39, $stack40, $stack42, $stack43, $stack45, $stack46;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(1.0F, 1.0F);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack5 != 0 goto label01;

        $stack88 = 1;

        goto label02;

     label01:
        $stack88 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack88);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(1.0F, 2.0F);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 >= 0 goto label03;

        $stack85 = 1;

        goto label04;

     label03:
        $stack85 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack85);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(2.0F, 1.0F);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 <= 0 goto label05;

        $stack82 = 1;

        goto label06;

     label05:
        $stack82 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack82);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(1.0F, 3.4028235E38F);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 >= 0 goto label07;

        $stack79 = 1;

        goto label08;

     label07:
        $stack79 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack79);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(3.4028235E38F, 1.0F);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 <= 0 goto label09;

        $stack76 = 1;

        goto label10;

     label09:
        $stack76 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack76);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(1.0F, 1.4E-45F);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack73 = 1;

        goto label12;

     label11:
        $stack73 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack73);

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(1.4E-45F, 1.0F);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack23 >= 0 goto label13;

        $stack70 = 1;

        goto label14;

     label13:
        $stack70 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack24 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(#NaNF, #NaNF);

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack26 != 0 goto label15;

        $stack67 = 1;

        goto label16;

     label15:
        $stack67 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack67);

        $stack27 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(#NaNF, 3.4028235E38F);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 <= 0 goto label17;

        $stack64 = 1;

        goto label18;

     label17:
        $stack64 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack64);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(#InfinityF, 3.4028235E38F);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 <= 0 goto label19;

        $stack61 = 1;

        goto label20;

     label19:
        $stack61 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack61);

        $stack33 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack33.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack34 = virtualinvoke $stack33.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(#-InfinityF, 1.4E-45F);

        $stack35 = virtualinvoke $stack34.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack35 >= 0 goto label21;

        $stack58 = 1;

        goto label22;

     label21:
        $stack58 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack36 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack36.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack37 = virtualinvoke $stack36.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(1.0F, #NaNF);

        $stack38 = virtualinvoke $stack37.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack38 >= 0 goto label23;

        $stack55 = 1;

        goto label24;

     label23:
        $stack55 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack39 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack39.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float,float)>(#NaNF, 1.0F);

        $stack41 = virtualinvoke $stack40.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack41 <= 0 goto label25;

        $stack52 = 1;

        goto label26;

     label25:
        $stack52 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack42 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack42.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack43 = virtualinvoke $stack42.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(-0.0, 0.0);

        $stack44 = virtualinvoke $stack43.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack44 >= 0 goto label27;

        $stack49 = 1;

        goto label28;

     label27:
        $stack49 = 0;

     label28:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack49);

        $stack45 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack45.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack46 = virtualinvoke $stack45.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double,double)>(0.0, -0.0);

        $stack47 = virtualinvoke $stack46.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack47 <= 0 goto label29;

        $stack48 = 1;

        goto label30;

     label29:
        $stack48 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack48);

        return;
    }

    public void testBoolean()
    {
        int $stack5, $stack8, $stack11, $stack14;
        boolean $stack22, $stack19, $stack16, $stack15;
        org.apache.commons.lang3.builder.CompareToBuilder $stack3, $stack4, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        $stack3 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean,boolean)>(1, 1);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack5 != 0 goto label1;

        $stack22 = 1;

        goto label2;

     label1:
        $stack22 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean,boolean)>(0, 0);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack8 != 0 goto label3;

        $stack19 = 1;

        goto label4;

     label3:
        $stack19 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean,boolean)>(1, 0);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 <= 0 goto label5;

        $stack16 = 1;

        goto label6;

     label5:
        $stack16 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean,boolean)>(0, 1);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 >= 0 goto label7;

        $stack15 = 1;

        goto label8;

     label7:
        $stack15 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testObjectArray()
    {
        boolean $stack73, $stack70, $stack67, $stack62, $stack59, $stack56, $stack53, $stack50, $stack49;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        java.lang.Object[] $stack42, $stack43;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack30;
        int $stack20, $stack23, $stack26, $stack29, $stack34, $stack37, $stack40, $stack45, $stack48;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject[] obj1, obj2, obj3;
        org.apache.commons.lang3.builder.CompareToBuilder $stack18, $stack19, $stack21, $stack22, $stack24, $stack25, $stack27, $stack28, $stack32, $stack33, $stack35, $stack36, $stack38, $stack39, $stack41, $stack44, $stack46, $stack47;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject)[2];

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        obj1[0] = $stack4;

        $stack6 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(5);

        obj1[1] = $stack6;

        obj2 = newarray (org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject)[2];

        $stack8 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        obj2[0] = $stack8;

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(5);

        obj2[1] = $stack10;

        obj3 = newarray (org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject)[3];

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        obj3[0] = $stack12;

        $stack14 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(5);

        obj3[1] = $stack14;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(6);

        obj3[2] = $stack16;

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(obj1, obj1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 != 0 goto label01;

        $stack73 = 1;

        goto label02;

     label01:
        $stack73 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack73);

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(obj1, obj2);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack23 != 0 goto label03;

        $stack70 = 1;

        goto label04;

     label03:
        $stack70 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack24 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(obj1, obj3);

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack26 >= 0 goto label05;

        $stack67 = 1;

        goto label06;

     label05:
        $stack67 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack67);

        $stack27 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(obj3, obj1);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 <= 0 goto label07;

        $stack62 = 1;

        goto label08;

     label07:
        $stack62 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack62);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(7);

        obj1[1] = $stack30;

        $stack32 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack32.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack33 = virtualinvoke $stack32.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(obj1, obj2);

        $stack34 = virtualinvoke $stack33.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack34 <= 0 goto label09;

        $stack59 = 1;

        goto label10;

     label09:
        $stack59 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack59);

        $stack35 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack36 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(obj2, obj1);

        $stack37 = virtualinvoke $stack36.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack37 >= 0 goto label11;

        $stack56 = 1;

        goto label12;

     label11:
        $stack56 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack56);

        $stack38 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack38.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack39 = virtualinvoke $stack38.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(obj1, null);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack40 <= 0 goto label13;

        $stack53 = 1;

        goto label14;

     label13:
        $stack53 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack53);

        $stack41 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack41.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack43 = (java.lang.Object[]) null;

        $stack42 = (java.lang.Object[]) null;

        $stack44 = virtualinvoke $stack41.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>($stack43, $stack42);

        $stack45 = virtualinvoke $stack44.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack45 != 0 goto label15;

        $stack50 = 1;

        goto label16;

     label15:
        $stack50 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        $stack46 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack46.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack47 = virtualinvoke $stack46.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(null, obj1);

        $stack48 = virtualinvoke $stack47.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack48 >= 0 goto label17;

        $stack49 = 1;

        goto label18;

     label17:
        $stack49 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack49);

        return;
    }

    public void testLongArray()
    {
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        long[] obj1, obj2, obj3, $stack26, $stack27;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (long)[2];

        obj1[0] = 5L;

        obj1[1] = 6L;

        obj2 = newarray (long)[2];

        obj2[0] = 5L;

        obj2[1] = 6L;

        obj3 = newarray (long)[3];

        obj3[0] = 5L;

        obj3[1] = 6L;

        obj3[2] = 7L;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 7L;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (long[]) null;

        $stack26 = (long[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(long[],long[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testIntArray()
    {
        int[] obj1, obj2, obj3, $stack26, $stack27;
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (int)[2];

        obj1[0] = 5;

        obj1[1] = 6;

        obj2 = newarray (int)[2];

        obj2[0] = 5;

        obj2[1] = 6;

        obj3 = newarray (int)[3];

        obj3[0] = 5;

        obj3[1] = 6;

        obj3[2] = 7;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 7;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (int[]) null;

        $stack26 = (int[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(int[],int[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testShortArray()
    {
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        short[] obj1, obj2, obj3, $stack26, $stack27;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (short)[2];

        obj1[0] = 5;

        obj1[1] = 6;

        obj2 = newarray (short)[2];

        obj2[0] = 5;

        obj2[1] = 6;

        obj3 = newarray (short)[3];

        obj3[0] = 5;

        obj3[1] = 6;

        obj3[2] = 7;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 7;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (short[]) null;

        $stack26 = (short[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(short[],short[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testCharArray()
    {
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;
        char[] obj1, obj2, obj3, $stack26, $stack27;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (char)[2];

        obj1[0] = 5;

        obj1[1] = 6;

        obj2 = newarray (char)[2];

        obj2[0] = 5;

        obj2[1] = 6;

        obj3 = newarray (char)[3];

        obj3[0] = 5;

        obj3[1] = 6;

        obj3[2] = 7;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 7;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (char[]) null;

        $stack26 = (char[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(char[],char[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testByteArray()
    {
        byte[] obj1, obj2, obj3, $stack26, $stack27;
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (byte)[2];

        obj1[0] = 5;

        obj1[1] = 6;

        obj2 = newarray (byte)[2];

        obj2[0] = 5;

        obj2[1] = 6;

        obj3 = newarray (byte)[3];

        obj3[0] = 5;

        obj3[1] = 6;

        obj3[2] = 7;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 7;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (byte[]) null;

        $stack26 = (byte[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(byte[],byte[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testDoubleArray()
    {
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        double[] obj1, obj2, obj3, $stack26, $stack27;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (double)[2];

        obj1[0] = 5.0;

        obj1[1] = 6.0;

        obj2 = newarray (double)[2];

        obj2[0] = 5.0;

        obj2[1] = 6.0;

        obj3 = newarray (double)[3];

        obj3[0] = 5.0;

        obj3[1] = 6.0;

        obj3[2] = 7.0;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 7.0;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (double[]) null;

        $stack26 = (double[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(double[],double[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testFloatArray()
    {
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        float[] obj1, obj2, obj3, $stack26, $stack27;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (float)[2];

        obj1[0] = 5.0F;

        obj1[1] = 6.0F;

        obj2 = newarray (float)[2];

        obj2[0] = 5.0F;

        obj2[1] = 6.0F;

        obj3 = newarray (float)[3];

        obj3[0] = 5.0F;

        obj3[1] = 6.0F;

        obj3[2] = 7.0F;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 7.0F;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (float[]) null;

        $stack26 = (float[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(float[],float[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testBooleanArray()
    {
        boolean $stack58, $stack55, $stack52, $stack46, $stack43, $stack40, $stack37, $stack34, $stack33;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack29, $stack32;
        boolean[] obj1, obj2, obj3, $stack26, $stack27;
        org.apache.commons.lang3.builder.CompareToBuilder $stack4, $stack5, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack28, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        obj1 = newarray (boolean)[2];

        obj1[0] = 1;

        obj1[1] = 0;

        obj2 = newarray (boolean)[2];

        obj2[0] = 1;

        obj2[1] = 0;

        obj3 = newarray (boolean)[3];

        obj3[0] = 1;

        obj3[1] = 0;

        obj3[2] = 1;

        $stack4 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(obj1, obj1);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack6 != 0 goto label01;

        $stack58 = 1;

        goto label02;

     label01:
        $stack58 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack58);

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(obj1, obj2);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label03;

        $stack55 = 1;

        goto label04;

     label03:
        $stack55 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(obj1, obj3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 >= 0 goto label05;

        $stack52 = 1;

        goto label06;

     label05:
        $stack52 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(obj3, obj1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 <= 0 goto label07;

        $stack46 = 1;

        goto label08;

     label07:
        $stack46 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        obj1[1] = 1;

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(obj1, obj2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label09;

        $stack43 = 1;

        goto label10;

     label09:
        $stack43 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(obj2, obj1);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label11;

        $stack40 = 1;

        goto label12;

     label11:
        $stack40 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(obj1, null);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack37 = 1;

        goto label14;

     label13:
        $stack37 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack27 = (boolean[]) null;

        $stack26 = (boolean[]) null;

        $stack28 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>($stack27, $stack26);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 != 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(boolean[],boolean[])>(null, obj1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 >= 0 goto label17;

        $stack33 = 1;

        goto label18;

     label17:
        $stack33 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        return;
    }

    public void testMultiLongArray()
    {
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        long $stack55, $stack60, $stack65;
        long[] $stack7, $stack8, $stack21, $stack48, $stack56, $stack61, $stack66;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, $stack52, $stack53, $stack54, $stack57, $stack58, $stack59, $stack62, $stack63, $stack64, i, j;
        long[][] array1, array2, array3;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (long)[2][2];

        array2 = newmultiarray (long)[2][2];

        array3 = newmultiarray (long)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label03;

        $stack56 = array1[i];

        $stack53 = i + 1;

        $stack52 = j + 1;

        $stack54 = $stack53 * $stack52;

        $stack55 = (long) $stack54;

        $stack56[j] = $stack55;

        $stack61 = array2[i];

        $stack58 = i + 1;

        $stack57 = j + 1;

        $stack59 = $stack58 * $stack57;

        $stack60 = (long) $stack59;

        $stack61[j] = $stack60;

        $stack66 = array3[i];

        $stack63 = i + 1;

        $stack62 = j + 1;

        $stack64 = $stack63 * $stack62;

        $stack65 = (long) $stack64;

        $stack66[j] = $stack65;

        j = j + 1;

        goto label02;

     label03:
        i = i + 1;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100L;

        $stack8 = array3[1];

        $stack8[2] = 100L;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 200L;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMultiIntArray()
    {
        int[][] array1, array2, array3;
        int[] $stack7, $stack8, $stack21, $stack48, $stack55, $stack59, $stack63;
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, $stack52, $stack53, $stack54, $stack56, $stack57, $stack58, $stack60, $stack61, $stack62, i, j;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (int)[2][2];

        array2 = newmultiarray (int)[2][2];

        array3 = newmultiarray (int)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label03;

        $stack55 = array1[i];

        $stack53 = i + 1;

        $stack52 = j + 1;

        $stack54 = $stack53 * $stack52;

        $stack55[j] = $stack54;

        $stack59 = array2[i];

        $stack57 = i + 1;

        $stack56 = j + 1;

        $stack58 = $stack57 * $stack56;

        $stack59[j] = $stack58;

        $stack63 = array3[i];

        $stack61 = i + 1;

        $stack60 = j + 1;

        $stack62 = $stack61 * $stack60;

        $stack63[j] = $stack62;

        j = j + 1;

        goto label02;

     label03:
        i = i + 1;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100;

        $stack8 = array3[1];

        $stack8[2] = 100;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 200;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMultiShortArray()
    {
        short[][] array1, array2, array3;
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        short[] $stack7, $stack8, $stack21, $stack48, $stack57, $stack62, $stack67;
        short $stack56, $stack61, $stack66, i, j;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, $stack50, $stack53, $stack54, $stack55, $stack58, $stack59, $stack60, $stack63, $stack64, $stack65, $stack68;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (short)[2][2];

        array2 = newmultiarray (short)[2][2];

        array3 = newmultiarray (short)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label03;

        $stack57 = array1[i];

        $stack54 = i + 1;

        $stack53 = j + 1;

        $stack55 = $stack54 * $stack53;

        $stack56 = (short) $stack55;

        $stack57[j] = $stack56;

        $stack62 = array2[i];

        $stack59 = i + 1;

        $stack58 = j + 1;

        $stack60 = $stack59 * $stack58;

        $stack61 = (short) $stack60;

        $stack62[j] = $stack61;

        $stack67 = array3[i];

        $stack64 = i + 1;

        $stack63 = j + 1;

        $stack65 = $stack64 * $stack63;

        $stack66 = (short) $stack65;

        $stack67[j] = $stack66;

        $stack68 = j + 1;

        j = (short) $stack68;

        goto label02;

     label03:
        $stack50 = i + 1;

        i = (short) $stack50;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100;

        $stack8 = array3[1];

        $stack8[2] = 100;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 200;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMultiCharArray()
    {
        char[][] array1, array2, array3;
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        short i, j;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, $stack50, $stack53, $stack54, $stack55, $stack58, $stack59, $stack60, $stack63, $stack64, $stack65, $stack68;
        char $stack56, $stack61, $stack66;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;
        char[] $stack7, $stack8, $stack21, $stack48, $stack57, $stack62, $stack67;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (char)[2][2];

        array2 = newmultiarray (char)[2][2];

        array3 = newmultiarray (char)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label03;

        $stack57 = array1[i];

        $stack54 = i + 1;

        $stack53 = j + 1;

        $stack55 = $stack54 * $stack53;

        $stack56 = (char) $stack55;

        $stack57[j] = $stack56;

        $stack62 = array2[i];

        $stack59 = i + 1;

        $stack58 = j + 1;

        $stack60 = $stack59 * $stack58;

        $stack61 = (char) $stack60;

        $stack62[j] = $stack61;

        $stack67 = array3[i];

        $stack64 = i + 1;

        $stack63 = j + 1;

        $stack65 = $stack64 * $stack63;

        $stack66 = (char) $stack65;

        $stack67[j] = $stack66;

        $stack68 = j + 1;

        j = (short) $stack68;

        goto label02;

     label03:
        $stack50 = i + 1;

        i = (short) $stack50;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100;

        $stack8 = array3[1];

        $stack8[2] = 100;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 200;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMultiByteArray()
    {
        byte[] $stack7, $stack8, $stack21, $stack48, $stack57, $stack62, $stack67;
        byte $stack56, $stack61, $stack66, i, j;
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        byte[][] array1, array2, array3;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, $stack50, $stack53, $stack54, $stack55, $stack58, $stack59, $stack60, $stack63, $stack64, $stack65, $stack68;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (byte)[2][2];

        array2 = newmultiarray (byte)[2][2];

        array3 = newmultiarray (byte)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label03;

        $stack57 = array1[i];

        $stack54 = i + 1;

        $stack53 = j + 1;

        $stack55 = $stack54 * $stack53;

        $stack56 = (byte) $stack55;

        $stack57[j] = $stack56;

        $stack62 = array2[i];

        $stack59 = i + 1;

        $stack58 = j + 1;

        $stack60 = $stack59 * $stack58;

        $stack61 = (byte) $stack60;

        $stack62[j] = $stack61;

        $stack67 = array3[i];

        $stack64 = i + 1;

        $stack63 = j + 1;

        $stack65 = $stack64 * $stack63;

        $stack66 = (byte) $stack65;

        $stack67[j] = $stack66;

        $stack68 = j + 1;

        j = (byte) $stack68;

        goto label02;

     label03:
        $stack50 = i + 1;

        i = (byte) $stack50;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100;

        $stack8 = array3[1];

        $stack8[2] = 100;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 127;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMultiFloatArray()
    {
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        float $stack55, $stack60, $stack65;
        float[] $stack7, $stack8, $stack21, $stack48, $stack56, $stack61, $stack66;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, $stack52, $stack53, $stack54, $stack57, $stack58, $stack59, $stack62, $stack63, $stack64, i, j;
        float[][] array1, array2, array3;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (float)[2][2];

        array2 = newmultiarray (float)[2][2];

        array3 = newmultiarray (float)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label03;

        $stack56 = array1[i];

        $stack53 = i + 1;

        $stack52 = j + 1;

        $stack54 = $stack53 * $stack52;

        $stack55 = (float) $stack54;

        $stack56[j] = $stack55;

        $stack61 = array2[i];

        $stack58 = i + 1;

        $stack57 = j + 1;

        $stack59 = $stack58 * $stack57;

        $stack60 = (float) $stack59;

        $stack61[j] = $stack60;

        $stack66 = array3[i];

        $stack63 = i + 1;

        $stack62 = j + 1;

        $stack64 = $stack63 * $stack62;

        $stack65 = (float) $stack64;

        $stack66[j] = $stack65;

        j = j + 1;

        goto label02;

     label03:
        i = i + 1;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100.0F;

        $stack8 = array3[1];

        $stack8[2] = 100.0F;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 127.0F;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMultiDoubleArray()
    {
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        double[][] array1, array2, array3;
        double[] $stack7, $stack8, $stack21, $stack48, $stack56, $stack61, $stack66;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, $stack52, $stack53, $stack54, $stack57, $stack58, $stack59, $stack62, $stack63, $stack64, i, j;
        double $stack55, $stack60, $stack65;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (double)[2][2];

        array2 = newmultiarray (double)[2][2];

        array3 = newmultiarray (double)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label03;

        $stack56 = array1[i];

        $stack53 = i + 1;

        $stack52 = j + 1;

        $stack54 = $stack53 * $stack52;

        $stack55 = (double) $stack54;

        $stack56[j] = $stack55;

        $stack61 = array2[i];

        $stack58 = i + 1;

        $stack57 = j + 1;

        $stack59 = $stack58 * $stack57;

        $stack60 = (double) $stack59;

        $stack61[j] = $stack60;

        $stack66 = array3[i];

        $stack63 = i + 1;

        $stack62 = j + 1;

        $stack64 = $stack63 * $stack62;

        $stack65 = (double) $stack64;

        $stack66[j] = $stack65;

        j = j + 1;

        goto label02;

     label03:
        i = i + 1;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100.0;

        $stack8 = array3[1];

        $stack8[2] = 100.0;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 127.0;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMultiBooleanArray()
    {
        boolean $stack76, $stack75, $stack52, $stack67, $stack66, $stack54, $stack62, $stack61, $stack56, $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack49, i, j, $stack77, $stack68, $stack63;
        boolean[] $stack7, $stack8, $stack21, $stack48, $stack53, $stack55, $stack57;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;
        boolean[][] array1, array2, array3;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newmultiarray (boolean)[2][2];

        array2 = newmultiarray (boolean)[2][2];

        array3 = newmultiarray (boolean)[2][3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label16;

        j = 0;

     label02:
        $stack48 = array1[0];

        $stack49 = lengthof $stack48;

        if j >= $stack49 goto label15;

        $stack53 = array1[i];

        $stack77 = j;

        if i != 1 goto label03;

        $stack76 = 1;

        goto label04;

     label03:
        $stack76 = 0;

     label04:
        if j != 1 goto label05;

        $stack75 = 1;

        goto label06;

     label05:
        $stack75 = 0;

     label06:
        $stack52 = $stack76 ^ $stack75;

        $stack53[$stack77] = $stack52;

        $stack55 = array2[i];

        $stack68 = j;

        if i != 1 goto label07;

        $stack67 = 1;

        goto label08;

     label07:
        $stack67 = 0;

     label08:
        if j != 1 goto label09;

        $stack66 = 1;

        goto label10;

     label09:
        $stack66 = 0;

     label10:
        $stack54 = $stack67 ^ $stack66;

        $stack55[$stack68] = $stack54;

        $stack57 = array3[i];

        $stack63 = j;

        if i != 1 goto label11;

        $stack62 = 1;

        goto label12;

     label11:
        $stack62 = 0;

     label12:
        if j != 1 goto label13;

        $stack61 = 1;

        goto label14;

     label13:
        $stack61 = 0;

     label14:
        $stack56 = $stack62 ^ $stack61;

        $stack57[$stack63] = $stack56;

        j = j + 1;

        goto label02;

     label15:
        i = i + 1;

        goto label01;

     label16:
        $stack7 = array3[1];

        $stack7[2] = 0;

        $stack8 = array3[1];

        $stack8[2] = 0;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label17;

        $stack45 = 1;

        goto label18;

     label17:
        $stack45 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label19;

        $stack42 = 1;

        goto label20;

     label19:
        $stack42 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label21;

        $stack39 = 1;

        goto label22;

     label21:
        $stack39 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label23;

        $stack32 = 1;

        goto label24;

     label23:
        $stack32 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 1;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label25;

        $stack29 = 1;

        goto label26;

     label25:
        $stack29 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label27;

        $stack28 = 1;

        goto label28;

     label27:
        $stack28 = 0;

     label28:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testRaggedArray()
    {
        boolean $stack45, $stack42, $stack39, $stack32, $stack29, $stack28;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        long $stack58, $stack63, $stack68;
        long[] $stack7, $stack8, $stack21, $stack48, $stack49, $stack50, $stack51, $stack59, $stack64, $stack69;
        int $stack6, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27, $stack52, $stack55, $stack56, $stack57, $stack60, $stack61, $stack62, $stack65, $stack66, $stack67, i, j;
        long[][] array1, array2, array3;
        org.apache.commons.lang3.builder.CompareToBuilder $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack22, $stack23, $stack25, $stack26;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (long[])[2];

        array2 = newarray (long[])[2];

        array3 = newarray (long[])[3];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        $stack48 = newarray (long)[2];

        array1[i] = $stack48;

        $stack49 = newarray (long)[2];

        array2[i] = $stack49;

        $stack50 = newarray (long)[3];

        array3[i] = $stack50;

        j = 0;

     label02:
        $stack51 = array1[i];

        $stack52 = lengthof $stack51;

        if j >= $stack52 goto label03;

        $stack59 = array1[i];

        $stack56 = i + 1;

        $stack55 = j + 1;

        $stack57 = $stack56 * $stack55;

        $stack58 = (long) $stack57;

        $stack59[j] = $stack58;

        $stack64 = array2[i];

        $stack61 = i + 1;

        $stack60 = j + 1;

        $stack62 = $stack61 * $stack60;

        $stack63 = (long) $stack62;

        $stack64[j] = $stack63;

        $stack69 = array3[i];

        $stack66 = i + 1;

        $stack65 = j + 1;

        $stack67 = $stack66 * $stack65;

        $stack68 = (long) $stack67;

        $stack69[j] = $stack68;

        j = j + 1;

        goto label02;

     label03:
        i = i + 1;

        goto label01;

     label04:
        $stack7 = array3[1];

        $stack7[2] = 100L;

        $stack8 = array3[1];

        $stack8[2] = 100L;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack11 != 0 goto label05;

        $stack45 = 1;

        goto label06;

     label05:
        $stack45 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack12 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack14 != 0 goto label07;

        $stack42 = 1;

        goto label08;

     label07:
        $stack42 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack17 >= 0 goto label09;

        $stack39 = 1;

        goto label10;

     label09:
        $stack39 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack18 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack18.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack20 <= 0 goto label11;

        $stack32 = 1;

        goto label12;

     label11:
        $stack32 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack21 = array1[1];

        $stack21[1] = 200L;

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label13;

        $stack29 = 1;

        goto label14;

     label13:
        $stack29 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack25 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack27 = virtualinvoke $stack26.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack27 >= 0 goto label15;

        $stack28 = 1;

        goto label16;

     label15:
        $stack28 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }

    public void testMixedArray()
    {
        java.lang.Object[] array1, array2, array3;
        long $stack64, $stack71, $stack78;
        boolean $stack51, $stack48, $stack45, $stack38, $stack35, $stack34;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        long[] $stack8, $stack9, $stack11, $stack12, $stack26, $stack27, $stack54, $stack55, $stack56, $stack60, $stack65, $stack67, $stack72, $stack74, $stack79;
        int $stack6, $stack15, $stack18, $stack21, $stack24, $stack30, $stack33, $stack61, $stack62, $stack63, $stack68, $stack69, $stack70, $stack75, $stack76, $stack77, i, j;
        org.apache.commons.lang3.builder.CompareToBuilder $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack28, $stack29, $stack31, $stack32;
        java.lang.Object $stack7, $stack10, $stack25, $stack59, $stack66, $stack73;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (java.lang.Object)[2];

        array2 = newarray (java.lang.Object)[2];

        array3 = newarray (java.lang.Object)[2];

        i = 0;

     label01:
        $stack6 = lengthof array1;

        if i >= $stack6 goto label04;

        $stack54 = newarray (long)[2];

        array1[i] = $stack54;

        $stack55 = newarray (long)[2];

        array2[i] = $stack55;

        $stack56 = newarray (long)[3];

        array3[i] = $stack56;

        j = 0;

     label02:
        if j >= 2 goto label03;

        $stack59 = array1[i];

        $stack60 = (long[]) $stack59;

        $stack65 = (long[]) $stack60;

        $stack62 = i + 1;

        $stack61 = j + 1;

        $stack63 = $stack62 * $stack61;

        $stack64 = (long) $stack63;

        $stack65[j] = $stack64;

        $stack66 = array2[i];

        $stack67 = (long[]) $stack66;

        $stack72 = (long[]) $stack67;

        $stack69 = i + 1;

        $stack68 = j + 1;

        $stack70 = $stack69 * $stack68;

        $stack71 = (long) $stack70;

        $stack72[j] = $stack71;

        $stack73 = array3[i];

        $stack74 = (long[]) $stack73;

        $stack79 = (long[]) $stack74;

        $stack76 = i + 1;

        $stack75 = j + 1;

        $stack77 = $stack76 * $stack75;

        $stack78 = (long) $stack77;

        $stack79[j] = $stack78;

        j = j + 1;

        goto label02;

     label03:
        i = i + 1;

        goto label01;

     label04:
        $stack7 = array3[0];

        $stack8 = (long[]) $stack7;

        $stack9 = (long[]) $stack8;

        $stack9[2] = 1L;

        $stack10 = array3[1];

        $stack11 = (long[]) $stack10;

        $stack12 = (long[]) $stack11;

        $stack12[2] = 1L;

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array1);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 != 0 goto label05;

        $stack51 = 1;

        goto label06;

     label05:
        $stack51 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 != 0 goto label07;

        $stack48 = 1;

        goto label08;

     label07:
        $stack48 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack48);

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array3);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 >= 0 goto label09;

        $stack45 = 1;

        goto label10;

     label09:
        $stack45 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array3, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 <= 0 goto label11;

        $stack38 = 1;

        goto label12;

     label11:
        $stack38 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack25 = array1[1];

        $stack26 = (long[]) $stack25;

        $stack27 = (long[]) $stack26;

        $stack27[1] = 200L;

        $stack28 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array1, array2);

        $stack30 = virtualinvoke $stack29.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack30 <= 0 goto label13;

        $stack35 = 1;

        goto label14;

     label13:
        $stack35 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack31 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object[],java.lang.Object[])>(array2, array1);

        $stack33 = virtualinvoke $stack32.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack33 >= 0 goto label15;

        $stack34 = 1;

        goto label16;

     label15:
        $stack34 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        return;
    }

    public void testObjectArrayHiddenByObject()
    {
        boolean $stack56, $stack53, $stack50, $stack45, $stack42, $stack41;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack33;
        int $stack23, $stack26, $stack29, $stack32, $stack37, $stack40;
        org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject[] array1, array2, array3;
        org.apache.commons.lang3.builder.CompareToBuilder $stack21, $stack22, $stack24, $stack25, $stack27, $stack28, $stack30, $stack31, $stack35, $stack36, $stack38, $stack39;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject)[2];

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        array1[0] = $stack7;

        $stack9 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(5);

        array1[1] = $stack9;

        array2 = newarray (org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject)[2];

        $stack11 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        array2[0] = $stack11;

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(5);

        array2[1] = $stack13;

        array3 = newarray (org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject)[3];

        $stack15 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack15.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(4);

        array3[0] = $stack15;

        $stack17 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(5);

        array3[1] = $stack17;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(6);

        array3[2] = $stack19;

        $stack21 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack22 = virtualinvoke $stack21.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack23 != 0 goto label01;

        $stack56 = 1;

        goto label02;

     label01:
        $stack56 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack56);

        $stack24 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack26 != 0 goto label03;

        $stack53 = 1;

        goto label04;

     label03:
        $stack53 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack53);

        $stack27 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack29 >= 0 goto label05;

        $stack50 = 1;

        goto label06;

     label05:
        $stack50 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        $stack30 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack31 = virtualinvoke $stack30.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack32 <= 0 goto label07;

        $stack45 = 1;

        goto label08;

     label07:
        $stack45 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack33 = new org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject;

        specialinvoke $stack33.<org.apache.commons.lang3.builder.CompareToBuilderTest$TestObject: void <init>(int)>(7);

        array1[1] = $stack33;

        $stack35 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack35.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack36 = virtualinvoke $stack35.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack37 = virtualinvoke $stack36.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack37 <= 0 goto label09;

        $stack42 = 1;

        goto label10;

     label09:
        $stack42 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack42);

        $stack38 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack38.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack39 = virtualinvoke $stack38.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack40 = virtualinvoke $stack39.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack40 >= 0 goto label11;

        $stack41 = 1;

        goto label12;

     label11:
        $stack41 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        return;
    }

    public void testLongArrayHiddenByObject()
    {
        long[] array1, array2, array3;
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (long)[2];

        array1[0] = 5L;

        array1[1] = 6L;

        array2 = newarray (long)[2];

        array2[0] = 5L;

        array2[1] = 6L;

        array3 = newarray (long)[3];

        array3[0] = 5L;

        array3[1] = 6L;

        array3[2] = 7L;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 7L;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testIntArrayHiddenByObject()
    {
        int[] array1, array2, array3;
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (int)[2];

        array1[0] = 5;

        array1[1] = 6;

        array2 = newarray (int)[2];

        array2[0] = 5;

        array2[1] = 6;

        array3 = newarray (int)[3];

        array3[0] = 5;

        array3[1] = 6;

        array3[2] = 7;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 7;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testShortArrayHiddenByObject()
    {
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        short[] array1, array2, array3;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (short)[2];

        array1[0] = 5;

        array1[1] = 6;

        array2 = newarray (short)[2];

        array2[0] = 5;

        array2[1] = 6;

        array3 = newarray (short)[3];

        array3[0] = 5;

        array3[1] = 6;

        array3[2] = 7;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 7;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testCharArrayHiddenByObject()
    {
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;
        char[] array1, array2, array3;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (char)[2];

        array1[0] = 5;

        array1[1] = 6;

        array2 = newarray (char)[2];

        array2[0] = 5;

        array2[1] = 6;

        array3 = newarray (char)[3];

        array3[0] = 5;

        array3[1] = 6;

        array3[2] = 7;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 7;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testByteArrayHiddenByObject()
    {
        byte[] array1, array2, array3;
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (byte)[2];

        array1[0] = 5;

        array1[1] = 6;

        array2 = newarray (byte)[2];

        array2[0] = 5;

        array2[1] = 6;

        array3 = newarray (byte)[3];

        array3[0] = 5;

        array3[1] = 6;

        array3[2] = 7;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 7;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testDoubleArrayHiddenByObject()
    {
        double[] array1, array2, array3;
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (double)[2];

        array1[0] = 5.0;

        array1[1] = 6.0;

        array2 = newarray (double)[2];

        array2[0] = 5.0;

        array2[1] = 6.0;

        array3 = newarray (double)[3];

        array3[0] = 5.0;

        array3[1] = 6.0;

        array3[2] = 7.0;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 7.0;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testFloatArrayHiddenByObject()
    {
        float[] array1, array2, array3;
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (float)[2];

        array1[0] = 5.0F;

        array1[1] = 6.0F;

        array2 = newarray (float)[2];

        array2[0] = 5.0F;

        array2[1] = 6.0F;

        array3 = newarray (float)[3];

        array3[0] = 5.0F;

        array3[1] = 6.0F;

        array3[2] = 7.0F;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 7.0F;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testBooleanArrayHiddenByObject()
    {
        int $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack41, $stack38, $stack35, $stack29, $stack26, $stack25;
        boolean[] array1, array2, array3;
        org.apache.commons.lang3.builder.CompareToBuilder $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23;
        org.apache.commons.lang3.builder.CompareToBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.CompareToBuilderTest;

        array1 = newarray (boolean)[2];

        array1[0] = 1;

        array1[1] = 0;

        array2 = newarray (boolean)[2];

        array2[0] = 1;

        array2[1] = 0;

        array3 = newarray (boolean)[3];

        array3[0] = 1;

        array3[1] = 0;

        array3[2] = 1;

        $stack7 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array1);

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack9 != 0 goto label01;

        $stack41 = 1;

        goto label02;

     label01:
        $stack41 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        $stack10 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack12 != 0 goto label03;

        $stack38 = 1;

        goto label04;

     label03:
        $stack38 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack38);

        $stack13 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack14 = virtualinvoke $stack13.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array3);

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack15 >= 0 goto label05;

        $stack35 = 1;

        goto label06;

     label05:
        $stack35 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack17 = virtualinvoke $stack16.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array3, array1);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack18 <= 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        array1[1] = 1;

        $stack19 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack21 <= 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack22 = new org.apache.commons.lang3.builder.CompareToBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();

        $stack23 = virtualinvoke $stack22.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(array2, array1);

        $stack24 = virtualinvoke $stack23.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();

        if $stack24 >= 0 goto label11;

        $stack25 = 1;

        goto label12;

     label11:
        $stack25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }
}
