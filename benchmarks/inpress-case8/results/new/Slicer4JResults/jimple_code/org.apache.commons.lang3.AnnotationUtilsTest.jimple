public class org.apache.commons.lang3.AnnotationUtilsTest extends java.lang.Object
{
    public java.lang.Object dummy1;
    public java.lang.Object dummy2;
    public java.lang.Object dummy3;
    public java.lang.Object dummy4;
    private java.lang.reflect.Field field1;
    private java.lang.reflect.Field field2;
    private java.lang.reflect.Field field3;
    private java.lang.reflect.Field field4;

    public void <init>()
    {
        org.apache.commons.lang3.AnnotationUtilsTest this;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup() throws java.lang.Exception
    {
        java.lang.reflect.Field $stack2, $stack4, $stack6, $stack8;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        java.lang.Class $stack1, $stack3, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack2 = virtualinvoke $stack1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dummy1");

        this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1> = $stack2;

        $stack3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dummy2");

        this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field2> = $stack4;

        $stack5 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dummy3");

        this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field3> = $stack6;

        $stack7 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("dummy4");

        this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field4> = $stack8;

        return;
    }

    public void testEquivalence()
    {
        java.lang.reflect.Field $stack1, $stack3, $stack6, $stack8;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        java.lang.'annotation'.Annotation $stack2, $stack4, $stack7, $stack9;
        boolean $stack5, $stack10;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack1 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack2 = virtualinvoke $stack1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack3 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field2>;

        $stack4 = virtualinvoke $stack3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack5 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack2, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field2>;

        $stack7 = virtualinvoke $stack6.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack8 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack9 = virtualinvoke $stack8.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack10 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack7, $stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        return;
    }

    public void testSameInstance()
    {
        java.lang.'annotation'.Annotation $stack2, $stack4;
        java.lang.reflect.Field $stack1, $stack3;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        boolean $stack5;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack1 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack2 = virtualinvoke $stack1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack3 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack4 = virtualinvoke $stack3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack5 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack2, $stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        return;
    }

    public void testNonEquivalentAnnotationsOfSameType()
    {
        java.lang.reflect.Field $stack1, $stack3, $stack6, $stack8;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        java.lang.'annotation'.Annotation $stack2, $stack4, $stack7, $stack9;
        boolean $stack5, $stack10;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack1 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack2 = virtualinvoke $stack1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack3 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field3>;

        $stack4 = virtualinvoke $stack3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack5 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack2, $stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field3>;

        $stack7 = virtualinvoke $stack6.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack8 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack9 = virtualinvoke $stack8.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack10 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack7, $stack9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        return;
    }

    public void testAnnotationsOfDifferingTypes()
    {
        java.lang.reflect.Field $stack1, $stack3, $stack6, $stack8;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        java.lang.'annotation'.Annotation $stack2, $stack4, $stack7, $stack9;
        boolean $stack5, $stack10;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack1 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack2 = virtualinvoke $stack1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack3 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field4>;

        $stack4 = virtualinvoke $stack3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$NestAnnotation;");

        $stack5 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack2, $stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field4>;

        $stack7 = virtualinvoke $stack6.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$NestAnnotation;");

        $stack8 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack9 = virtualinvoke $stack8.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack10 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack7, $stack9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        return;
    }

    public void testOneArgNull()
    {
        java.lang.'annotation'.Annotation $stack2, $stack6;
        java.lang.reflect.Field $stack1, $stack4;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        boolean $stack3, $stack7;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack1 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack2 = virtualinvoke $stack1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack3 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($stack2, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack6 = virtualinvoke $stack4.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        $stack7 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        return;
    }

    public void testBothArgsNull()
    {
        boolean $stack1;
        org.apache.commons.lang3.AnnotationUtilsTest this;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack1);

        return;
    }

    public void testIsValidAnnotationMemberType()
    {
        int len$, i$;
        boolean $stack15, $stack18, $stack21, $stack24;
        java.lang.Class[] $stack5, $stack14;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        java.lang.Class $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack17, $stack23, type;
        java.lang.Object $stack16, $stack22;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack5 = newarray (java.lang.Class)[14];

        $stack6 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack5[0] = $stack6;

        $stack7 = <java.lang.Short: java.lang.Class TYPE>;

        $stack5[1] = $stack7;

        $stack8 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack5[2] = $stack8;

        $stack9 = <java.lang.Character: java.lang.Class TYPE>;

        $stack5[3] = $stack9;

        $stack10 = <java.lang.Long: java.lang.Class TYPE>;

        $stack5[4] = $stack10;

        $stack11 = <java.lang.Float: java.lang.Class TYPE>;

        $stack5[5] = $stack11;

        $stack12 = <java.lang.Double: java.lang.Class TYPE>;

        $stack5[6] = $stack12;

        $stack13 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack5[7] = $stack13;

        $stack5[8] = class "Ljava/lang/String;";

        $stack5[9] = class "Ljava/lang/Class;";

        $stack5[10] = class "Lorg/apache/commons/lang3/AnnotationUtilsTest$NestAnnotation;";

        $stack5[11] = class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;";

        $stack5[12] = class "Lorg/apache/commons/lang3/AnnotationUtilsTest$Stooge;";

        $stack5[13] = class "Ljava/lang/annotation/ElementType;";

        len$ = lengthof $stack5;

        i$ = 0;

     label1:
        if i$ >= len$ goto label2;

        type = $stack5[i$];

        $stack21 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean isValidAnnotationMemberType(java.lang.Class)>(type);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        $stack22 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(type, 0);

        $stack23 = virtualinvoke $stack22.<java.lang.Object: java.lang.Class getClass()>();

        $stack24 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean isValidAnnotationMemberType(java.lang.Class)>($stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        i$ = i$ + 1;

        goto label1;

     label2:
        $stack14 = newarray (java.lang.Class)[3];

        $stack14[0] = class "Ljava/lang/Object;";

        $stack14[1] = class "Ljava/util/Map;";

        $stack14[2] = class "Ljava/util/Collection;";

        len$ = lengthof $stack14;

        i$ = 0;

     label3:
        if i$ >= len$ goto label4;

        type = $stack14[i$];

        $stack15 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean isValidAnnotationMemberType(java.lang.Class)>(type);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(type, 0);

        $stack17 = virtualinvoke $stack16.<java.lang.Object: java.lang.Class getClass()>();

        $stack18 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean isValidAnnotationMemberType(java.lang.Class)>($stack17);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        i$ = i$ + 1;

        goto label3;

     label4:
        return;
    }

    public void testGeneratedAnnotationEquivalentToRealAnnotation() throws java.lang.Exception
    {
        java.lang.Thread $stack10, $stack18;
        java.lang.reflect.Method $stack7;
        boolean $stack14, $stack15, $stack16, $stack17, $stack22, $stack23, $stack24, $stack25;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        org.apache.commons.lang3.AnnotationUtilsTest$1 $u0;
        java.lang.'annotation'.Annotation $stack8, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.ClassLoader $stack11, $stack19;
        java.lang.Class[] $stack6, $stack12, $stack20;
        org.junit.Test real, generated, generated2;
        java.lang.Class $stack5;
        java.lang.Object $stack13, $stack21;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack5 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = newarray (java.lang.Class)[0];

        $stack7 = virtualinvoke $stack5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("testGeneratedAnnotationEquivalentToRealAnnotation", $stack6);

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        real = (org.junit.Test) $stack8;

        $u0 = new org.apache.commons.lang3.AnnotationUtilsTest$1;

        specialinvoke $u0.<org.apache.commons.lang3.AnnotationUtilsTest$1: void <init>(org.apache.commons.lang3.AnnotationUtilsTest,org.junit.Test)>(this, real);

        $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $stack12 = newarray (java.lang.Class)[1];

        $stack12[0] = class "Lorg/junit/Test;";

        $stack13 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($stack11, $stack12, $u0);

        generated = (org.junit.Test) $stack13;

        $stack14 = virtualinvoke real.<java.lang.Object: boolean equals(java.lang.Object)>(generated);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = virtualinvoke generated.<java.lang.Object: boolean equals(java.lang.Object)>(real);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $r0 = (java.lang.'annotation'.Annotation) generated;

        $r1 = (java.lang.'annotation'.Annotation) real;

        $stack16 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r0, $r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $r2 = (java.lang.'annotation'.Annotation) real;

        $r3 = (java.lang.'annotation'.Annotation) generated;

        $stack17 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r2, $r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $stack19 = virtualinvoke $stack18.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $stack20 = newarray (java.lang.Class)[1];

        $stack20[0] = class "Lorg/junit/Test;";

        $stack21 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($stack19, $stack20, $u0);

        generated2 = (org.junit.Test) $stack21;

        $stack22 = virtualinvoke generated.<java.lang.Object: boolean equals(java.lang.Object)>(generated2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        $stack23 = virtualinvoke generated2.<java.lang.Object: boolean equals(java.lang.Object)>(generated);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack23);

        $r4 = (java.lang.'annotation'.Annotation) generated;

        $r5 = (java.lang.'annotation'.Annotation) generated2;

        $stack24 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r4, $r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        $r6 = (java.lang.'annotation'.Annotation) generated2;

        $r7 = (java.lang.'annotation'.Annotation) generated;

        $stack25 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: boolean equals(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)>($r6, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        return;
    }

    public void testHashCode() throws java.lang.Exception
    {
        org.apache.commons.lang3.AnnotationUtilsTest$TestAnnotation testAnnotation1, testAnnotation3;
        long $stack9, $stack11, $stack15, $stack17, $stack21, $stack23;
        int $stack8, $stack10, $stack14, $stack16, $stack20, $stack22;
        java.lang.reflect.Method $stack6;
        java.lang.Class[] $stack5;
        org.junit.Test test;
        java.lang.reflect.Field $stack12, $stack18;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        java.lang.'annotation'.Annotation $stack7, $stack13, $stack19, $r0;
        java.lang.Class $stack4;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack4 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = newarray (java.lang.Class)[0];

        $stack6 = virtualinvoke $stack4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("testHashCode", $stack5);

        $stack7 = virtualinvoke $stack6.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        test = (org.junit.Test) $stack7;

        $stack8 = virtualinvoke test.<java.lang.Object: int hashCode()>();

        $stack9 = (long) $stack8;

        $r0 = (java.lang.'annotation'.Annotation) test;

        $stack10 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: int hashCode(java.lang.'annotation'.Annotation)>($r0);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack9, $stack11);

        $stack12 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field1>;

        $stack13 = virtualinvoke $stack12.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        testAnnotation1 = (org.apache.commons.lang3.AnnotationUtilsTest$TestAnnotation) $stack13;

        $stack14 = virtualinvoke testAnnotation1.<java.lang.Object: int hashCode()>();

        $stack15 = (long) $stack14;

        $stack16 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: int hashCode(java.lang.'annotation'.Annotation)>(testAnnotation1);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack15, $stack17);

        $stack18 = this.<org.apache.commons.lang3.AnnotationUtilsTest: java.lang.reflect.Field field3>;

        $stack19 = virtualinvoke $stack18.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/commons/lang3/AnnotationUtilsTest$TestAnnotation;");

        testAnnotation3 = (org.apache.commons.lang3.AnnotationUtilsTest$TestAnnotation) $stack19;

        $stack20 = virtualinvoke testAnnotation3.<java.lang.Object: int hashCode()>();

        $stack21 = (long) $stack20;

        $stack22 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: int hashCode(java.lang.'annotation'.Annotation)>(testAnnotation3);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack21, $stack23);

        return;
    }

    public void testToString() throws java.lang.Exception
    {
        java.lang.Class[] $stack4;
        org.junit.Test testAnno;
        org.apache.commons.lang3.AnnotationUtilsTest this;
        java.lang.'annotation'.Annotation $stack6, $r0;
        java.lang.Class $stack3;
        java.lang.String $stack7;
        java.lang.reflect.Method $stack5;
        boolean $stack8, $stack9, $stack10, $stack11, $stack12;

        this := @this: org.apache.commons.lang3.AnnotationUtilsTest;

        $stack3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = newarray (java.lang.Class)[0];

        $stack5 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("testToString", $stack4);

        $stack6 = virtualinvoke $stack5.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        testAnno = (org.junit.Test) $stack6;

        $r0 = (java.lang.'annotation'.Annotation) testAnno;

        $stack7 = staticinvoke <org.apache.commons.lang3.AnnotationUtils: java.lang.String toString(java.lang.'annotation'.Annotation)>($r0);

        $stack8 = virtualinvoke $stack7.<java.lang.String: boolean startsWith(java.lang.String)>("@org.junit.Test(");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = virtualinvoke $stack7.<java.lang.String: boolean endsWith(java.lang.String)>(")");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack7.<java.lang.String: boolean contains(java.lang.CharSequence)>("expected=class org.junit.Test$None");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack7.<java.lang.String: boolean contains(java.lang.CharSequence)>("timeout=666000");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = virtualinvoke $stack7.<java.lang.String: boolean contains(java.lang.CharSequence)>(", ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        return;
    }
}
