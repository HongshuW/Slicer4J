public class org.apache.commons.lang3.concurrent.LazyInitializerTest extends org.apache.commons.lang3.concurrent.AbstractConcurrentInitializerTest
{
    private org.apache.commons.lang3.concurrent.LazyInitializerTest$LazyInitializerTestImpl initializer;

    public void <init>()
    {
        org.apache.commons.lang3.concurrent.LazyInitializerTest this;

        this := @this: org.apache.commons.lang3.concurrent.LazyInitializerTest;

        specialinvoke this.<org.apache.commons.lang3.concurrent.AbstractConcurrentInitializerTest: void <init>()>();

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.commons.lang3.concurrent.LazyInitializerTest$LazyInitializerTestImpl $stack1;
        org.apache.commons.lang3.concurrent.LazyInitializerTest this;

        this := @this: org.apache.commons.lang3.concurrent.LazyInitializerTest;

        $stack1 = new org.apache.commons.lang3.concurrent.LazyInitializerTest$LazyInitializerTestImpl;

        specialinvoke $stack1.<org.apache.commons.lang3.concurrent.LazyInitializerTest$LazyInitializerTestImpl: void <init>(org.apache.commons.lang3.concurrent.LazyInitializerTest$1)>(null);

        this.<org.apache.commons.lang3.concurrent.LazyInitializerTest: org.apache.commons.lang3.concurrent.LazyInitializerTest$LazyInitializerTestImpl initializer> = $stack1;

        return;
    }

    protected org.apache.commons.lang3.concurrent.ConcurrentInitializer createInitializer()
    {
        org.apache.commons.lang3.concurrent.LazyInitializerTest$LazyInitializerTestImpl $stack1;
        org.apache.commons.lang3.concurrent.LazyInitializerTest this;

        this := @this: org.apache.commons.lang3.concurrent.LazyInitializerTest;

        $stack1 = this.<org.apache.commons.lang3.concurrent.LazyInitializerTest: org.apache.commons.lang3.concurrent.LazyInitializerTest$LazyInitializerTestImpl initializer>;

        return $stack1;
    }
}
