public class org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    private void testInteger(boolean)
    {
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;
        java.lang.Integer $stack4, $stack5;
        boolean testTransients;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        testTransients := @parameter0: boolean;

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12345);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12345);

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void assertEqualsAndHashCodeContract(java.lang.Object,java.lang.Object,boolean)>($stack4, $stack5, testTransients);

        return;
    }

    public void testInteger()
    {
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void testInteger(boolean)>(0);

        return;
    }

    public void testIntegerWithTransients()
    {
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void testInteger(boolean)>(1);

        return;
    }

    public void testFixture()
    {
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void testFixture(boolean)>(0);

        return;
    }

    public void testFixtureWithTransients()
    {
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void testFixture(boolean)>(1);

        return;
    }

    private void testFixture(boolean)
    {
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubAllTransientFixture $stack8, $stack9;
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$TestFixture $stack2, $stack3;
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$AllTransientFixture $stack4, $stack5;
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubTestFixture $stack6, $stack7;
        boolean testTransients;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        testTransients := @parameter0: boolean;

        $stack2 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$TestFixture;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$TestFixture: void <init>(int,char,java.lang.String,short)>(2, 99, "Test", 2);

        $stack3 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$TestFixture;

        specialinvoke $stack3.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$TestFixture: void <init>(int,char,java.lang.String,short)>(2, 99, "Test", 2);

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void assertEqualsAndHashCodeContract(java.lang.Object,java.lang.Object,boolean)>($stack2, $stack3, testTransients);

        $stack4 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$AllTransientFixture;

        specialinvoke $stack4.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$AllTransientFixture: void <init>(int,char,java.lang.String,short)>(2, 99, "Test", 2);

        $stack5 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$AllTransientFixture;

        specialinvoke $stack5.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$AllTransientFixture: void <init>(int,char,java.lang.String,short)>(2, 99, "Test", 2);

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void assertEqualsAndHashCodeContract(java.lang.Object,java.lang.Object,boolean)>($stack4, $stack5, testTransients);

        $stack6 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubTestFixture;

        specialinvoke $stack6.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubTestFixture: void <init>(int,char,java.lang.String,short,java.lang.String)>(2, 99, "Test", 2, "Same");

        $stack7 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubTestFixture;

        specialinvoke $stack7.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubTestFixture: void <init>(int,char,java.lang.String,short,java.lang.String)>(2, 99, "Test", 2, "Same");

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void assertEqualsAndHashCodeContract(java.lang.Object,java.lang.Object,boolean)>($stack6, $stack7, testTransients);

        $stack8 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubAllTransientFixture;

        specialinvoke $stack8.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubAllTransientFixture: void <init>(int,char,java.lang.String,short,java.lang.String)>(2, 99, "Test", 2, "Same");

        $stack9 = new org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubAllTransientFixture;

        specialinvoke $stack9.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest$SubAllTransientFixture: void <init>(int,char,java.lang.String,short,java.lang.String)>(2, 99, "Test", 2, "Same");

        specialinvoke this.<org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest: void assertEqualsAndHashCodeContract(java.lang.Object,java.lang.Object,boolean)>($stack8, $stack9, testTransients);

        return;
    }

    private void assertEqualsAndHashCodeContract(java.lang.Object, java.lang.Object, boolean)
    {
        long $stack6, $stack8, $stack10, $stack12, $stack14, $stack16;
        org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest this;
        int $stack5, $stack7, $stack9, $stack11, $stack13, $stack15;
        boolean testTransients, $stack4;
        java.lang.Object lhs, rhs;

        this := @this: org.apache.commons.lang3.builder.HashCodeBuilderAndEqualsBuilderTest;

        lhs := @parameter0: java.lang.Object;

        rhs := @parameter1: java.lang.Object;

        testTransients := @parameter2: boolean;

        $stack4 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean)>(lhs, rhs, testTransients);

        if $stack4 == 0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: int reflectionHashCode(java.lang.Object,boolean)>(lhs, testTransients);

        $stack6 = (long) $stack5;

        $stack7 = staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: int reflectionHashCode(java.lang.Object,boolean)>(rhs, testTransients);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack6, $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: int reflectionHashCode(java.lang.Object,boolean)>(lhs, testTransients);

        $stack10 = (long) $stack9;

        $stack11 = staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: int reflectionHashCode(java.lang.Object,boolean)>(rhs, testTransients);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack10, $stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: int reflectionHashCode(java.lang.Object,boolean)>(lhs, testTransients);

        $stack14 = (long) $stack13;

        $stack15 = staticinvoke <org.apache.commons.lang3.builder.HashCodeBuilder: int reflectionHashCode(java.lang.Object,boolean)>(rhs, testTransients);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack14, $stack16);

     label1:
        return;
    }
}
