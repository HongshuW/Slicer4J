public class org.apache.commons.lang3.ArrayUtils extends java.lang.Object
{
    public static final java.lang.Object[] EMPTY_OBJECT_ARRAY;
    public static final java.lang.Class[] EMPTY_CLASS_ARRAY;
    public static final java.lang.String[] EMPTY_STRING_ARRAY;
    public static final long[] EMPTY_LONG_ARRAY;
    public static final java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY;
    public static final int[] EMPTY_INT_ARRAY;
    public static final java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY;
    public static final short[] EMPTY_SHORT_ARRAY;
    public static final java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY;
    public static final byte[] EMPTY_BYTE_ARRAY;
    public static final java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY;
    public static final double[] EMPTY_DOUBLE_ARRAY;
    public static final java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY;
    public static final float[] EMPTY_FLOAT_ARRAY;
    public static final java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY;
    public static final boolean[] EMPTY_BOOLEAN_ARRAY;
    public static final java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY;
    public static final char[] EMPTY_CHAR_ARRAY;
    public static final java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY;
    public static final int INDEX_NOT_FOUND;

    public void <init>()
    {
        org.apache.commons.lang3.ArrayUtils this;

        this := @this: org.apache.commons.lang3.ArrayUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object array;
        java.lang.String $stack1;

        array := @parameter0: java.lang.Object;

        $stack1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>(array, "{}");

        return $stack1;
    }

    public static java.lang.String toString(java.lang.Object, java.lang.String)
    {
        org.apache.commons.lang3.builder.ToStringBuilder $stack2, $stack4;
        org.apache.commons.lang3.builder.ToStringStyle $stack3;
        java.lang.Object array;
        java.lang.String $stack5, stringIfNull;

        array := @parameter0: java.lang.Object;

        stringIfNull := @parameter1: java.lang.String;

        if array != null goto label1;

        return stringIfNull;

     label1:
        $stack2 = new org.apache.commons.lang3.builder.ToStringBuilder;

        $stack3 = <org.apache.commons.lang3.builder.ToStringStyle: org.apache.commons.lang3.builder.ToStringStyle SIMPLE_STYLE>;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilder: void <init>(java.lang.Object,org.apache.commons.lang3.builder.ToStringStyle)>(array, $stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.ToStringBuilder: org.apache.commons.lang3.builder.ToStringBuilder append(java.lang.Object)>(array);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.builder.ToStringBuilder: java.lang.String toString()>();

        return $stack5;
    }

    public static int hashCode(java.lang.Object)
    {
        org.apache.commons.lang3.builder.HashCodeBuilder $stack1, $stack2;
        int $stack3;
        java.lang.Object array;

        array := @parameter0: java.lang.Object;

        $stack1 = new org.apache.commons.lang3.builder.HashCodeBuilder;

        specialinvoke $stack1.<org.apache.commons.lang3.builder.HashCodeBuilder: void <init>()>();

        $stack2 = virtualinvoke $stack1.<org.apache.commons.lang3.builder.HashCodeBuilder: org.apache.commons.lang3.builder.HashCodeBuilder append(java.lang.Object)>(array);

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.HashCodeBuilder: int toHashCode()>();

        return $stack3;
    }

    public static boolean isEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object array1, array2;
        org.apache.commons.lang3.builder.EqualsBuilder $stack2, $stack3;
        boolean $stack4;

        array1 := @parameter0: java.lang.Object;

        array2 := @parameter1: java.lang.Object;

        $stack2 = new org.apache.commons.lang3.builder.EqualsBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.builder.EqualsBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>(array1, array2);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals()>();

        return $stack4;
    }

    public static java.util.Map toMap(java.lang.Object[])
    {
        boolean $stack11, $stack12;
        java.lang.StringBuilder $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34;
        java.lang.Object[] array, $stack21, entry#3;
        java.util.HashMap $stack5;
        int $stack6, $stack9, $stack10, $stack22, i;
        java.lang.String $stack20, $stack35;
        double $stack7, $stack8;
        java.util.Map$Entry entry;
        java.lang.IllegalArgumentException $stack13, $stack28;
        java.lang.Object object, $stack23, $stack24, $stack36, $stack37;

        array := @parameter0: java.lang.Object[];

        if array != null goto label1;

        return null;

     label1:
        $stack5 = new java.util.HashMap;

        $stack6 = lengthof array;

        $stack7 = (double) $stack6;

        $stack8 = $stack7 * 1.5;

        $stack9 = (int) $stack8;

        specialinvoke $stack5.<java.util.HashMap: void <init>(int)>($stack9);

        i = 0;

     label2:
        $stack10 = lengthof array;

        if i >= $stack10 goto label7;

        object = array[i];

        $stack11 = object instanceof java.util.Map$Entry;

        if $stack11 == 0 goto label3;

        entry = (java.util.Map$Entry) object;

        $stack36 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $stack37 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack36, $stack37);

        goto label6;

     label3:
        $stack12 = object instanceof java.lang.Object[];

        if $stack12 == 0 goto label5;

        $stack21 = (java.lang.Object[]) object;

        entry#3 = (java.lang.Object[]) $stack21;

        $stack22 = lengthof entry#3;

        if $stack22 >= 2 goto label4;

        $stack28 = new java.lang.IllegalArgumentException;

        $stack29 = new java.lang.StringBuilder;

        specialinvoke $stack29.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array element ");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", \'");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(object);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', has a length less than 2");

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack35);

        throw $stack28;

     label4:
        $stack24 = entry#3[0];

        $stack23 = entry#3[1];

        interfaceinvoke $stack5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack24, $stack23);

        goto label6;

     label5:
        $stack13 = new java.lang.IllegalArgumentException;

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array element ");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", \'");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(object);

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', is neither of type Map.Entry nor an Array");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack20);

        throw $stack13;

     label6:
        i = i + 1;

        goto label2;

     label7:
        return $stack5;
    }

    public static transient java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] items;

        items := @parameter0: java.lang.Object[];

        return items;
    }

    public static java.lang.Object[] clone(java.lang.Object[])
    {
        java.lang.Object $stack1;
        java.lang.Object[] array, $stack2;

        array := @parameter0: java.lang.Object[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (java.lang.Object[]) $stack1;

        return $stack2;
    }

    public static long[] clone(long[])
    {
        java.lang.Object $stack1;
        long[] array, $stack2;

        array := @parameter0: long[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (long[]) $stack1;

        return $stack2;
    }

    public static int[] clone(int[])
    {
        java.lang.Object $stack1;
        int[] array, $stack2;

        array := @parameter0: int[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (int[]) $stack1;

        return $stack2;
    }

    public static short[] clone(short[])
    {
        java.lang.Object $stack1;
        short[] array, $stack2;

        array := @parameter0: short[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (short[]) $stack1;

        return $stack2;
    }

    public static char[] clone(char[])
    {
        char[] array, $stack2;
        java.lang.Object $stack1;

        array := @parameter0: char[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (char[]) $stack1;

        return $stack2;
    }

    public static byte[] clone(byte[])
    {
        byte[] array, $stack2;
        java.lang.Object $stack1;

        array := @parameter0: byte[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (byte[]) $stack1;

        return $stack2;
    }

    public static double[] clone(double[])
    {
        double[] array, $stack2;
        java.lang.Object $stack1;

        array := @parameter0: double[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (double[]) $stack1;

        return $stack2;
    }

    public static float[] clone(float[])
    {
        float[] array, $stack2;
        java.lang.Object $stack1;

        array := @parameter0: float[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (float[]) $stack1;

        return $stack2;
    }

    public static boolean[] clone(boolean[])
    {
        boolean[] array, $stack2;
        java.lang.Object $stack1;

        array := @parameter0: boolean[];

        if array != null goto label1;

        return null;

     label1:
        $stack1 = virtualinvoke array.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (boolean[]) $stack1;

        return $stack2;
    }

    public static java.lang.Object[] nullToEmpty(java.lang.Object[])
    {
        int $stack2;
        java.lang.Object[] array, $stack1;

        array := @parameter0: java.lang.Object[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.String[] nullToEmpty(java.lang.String[])
    {
        int $stack2;
        java.lang.String[] array, $stack1;

        array := @parameter0: java.lang.String[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static long[] nullToEmpty(long[])
    {
        int $stack2;
        long[] array, $stack1;

        array := @parameter0: long[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static int[] nullToEmpty(int[])
    {
        int $stack2;
        int[] array, $stack1;

        array := @parameter0: int[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static short[] nullToEmpty(short[])
    {
        int $stack2;
        short[] array, $stack1;

        array := @parameter0: short[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static char[] nullToEmpty(char[])
    {
        int $stack2;
        char[] array, $stack1;

        array := @parameter0: char[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static byte[] nullToEmpty(byte[])
    {
        int $stack2;
        byte[] array, $stack1;

        array := @parameter0: byte[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static double[] nullToEmpty(double[])
    {
        double[] array, $stack1;
        int $stack2;

        array := @parameter0: double[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static float[] nullToEmpty(float[])
    {
        int $stack2;
        float[] array, $stack1;

        array := @parameter0: float[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static boolean[] nullToEmpty(boolean[])
    {
        boolean[] array, $stack1;
        int $stack2;

        array := @parameter0: boolean[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Long[] nullToEmpty(java.lang.Long[])
    {
        int $stack2;
        java.lang.Long[] array, $stack1;

        array := @parameter0: java.lang.Long[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Integer[] nullToEmpty(java.lang.Integer[])
    {
        int $stack2;
        java.lang.Integer[] array, $stack1;

        array := @parameter0: java.lang.Integer[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Short[] nullToEmpty(java.lang.Short[])
    {
        int $stack2;
        java.lang.Short[] array, $stack1;

        array := @parameter0: java.lang.Short[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Character[] nullToEmpty(java.lang.Character[])
    {
        int $stack2;
        java.lang.Character[] array, $stack1;

        array := @parameter0: java.lang.Character[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Byte[] nullToEmpty(java.lang.Byte[])
    {
        int $stack2;
        java.lang.Byte[] array, $stack1;

        array := @parameter0: java.lang.Byte[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Double[] nullToEmpty(java.lang.Double[])
    {
        java.lang.Double[] array, $stack1;
        int $stack2;

        array := @parameter0: java.lang.Double[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Float[] nullToEmpty(java.lang.Float[])
    {
        int $stack2;
        java.lang.Float[] array, $stack1;

        array := @parameter0: java.lang.Float[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Boolean[] nullToEmpty(java.lang.Boolean[])
    {
        int $stack2;
        java.lang.Boolean[] array, $stack1;

        array := @parameter0: java.lang.Boolean[];

        if array == null goto label1;

        $stack2 = lengthof array;

        if $stack2 != 0 goto label2;

     label1:
        $stack1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;

        return $stack1;

     label2:
        return array;
    }

    public static java.lang.Object[] subarray(java.lang.Object[], int, int)
    {
        java.lang.Object[] array, $stack10, $stack12, emptyArray;
        int $stack6, $stack15, startIndexInclusive, endIndexExclusive;
        java.lang.Class $stack7, $stack8;
        java.lang.Object $stack9, $stack11;

        array := @parameter0: java.lang.Object[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack6 = lengthof array;

        if endIndexExclusive <= $stack6 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack15 = endIndexExclusive - startIndexInclusive;

        $stack7 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $stack8 = virtualinvoke $stack7.<java.lang.Class: java.lang.Class getComponentType()>();

        if $stack15 > 0 goto label4;

        $stack11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($stack8, 0);

        $stack12 = (java.lang.Object[]) $stack11;

        emptyArray = (java.lang.Object[]) $stack12;

        return emptyArray;

     label4:
        $stack9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($stack8, $stack15);

        $stack10 = (java.lang.Object[]) $stack9;

        emptyArray = (java.lang.Object[]) $stack10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, emptyArray, 0, $stack15);

        return emptyArray;
    }

    public static long[] subarray(long[], int, int)
    {
        long[] array, subarray, $stack6;
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;

        array := @parameter0: long[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (long)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static int[] subarray(int[], int, int)
    {
        int[] array, subarray, $stack6;
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;

        array := @parameter0: int[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (int)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static short[] subarray(short[], int, int)
    {
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;
        short[] array, subarray, $stack6;

        array := @parameter0: short[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (short)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static char[] subarray(char[], int, int)
    {
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;
        char[] array, subarray, $stack6;

        array := @parameter0: char[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (char)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static byte[] subarray(byte[], int, int)
    {
        byte[] array, subarray, $stack6;
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;

        array := @parameter0: byte[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (byte)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static double[] subarray(double[], int, int)
    {
        double[] array, subarray, $stack6;
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;

        array := @parameter0: double[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (double)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static float[] subarray(float[], int, int)
    {
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;
        float[] array, subarray, $stack6;

        array := @parameter0: float[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (float)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static boolean[] subarray(boolean[], int, int)
    {
        boolean[] array, subarray, $stack6;
        int $stack5, $stack9, startIndexInclusive, endIndexExclusive;

        array := @parameter0: boolean[];

        startIndexInclusive := @parameter1: int;

        endIndexExclusive := @parameter2: int;

        if array != null goto label1;

        return null;

     label1:
        if startIndexInclusive >= 0 goto label2;

        startIndexInclusive = 0;

     label2:
        $stack5 = lengthof array;

        if endIndexExclusive <= $stack5 goto label3;

        endIndexExclusive = lengthof array;

     label3:
        $stack9 = endIndexExclusive - startIndexInclusive;

        if $stack9 > 0 goto label4;

        $stack6 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        return $stack6;

     label4:
        subarray = newarray (boolean)[$stack9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, startIndexInclusive, subarray, 0, $stack9);

        return subarray;
    }

    public static boolean isSameLength(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] array1, array2;
        int $stack3, $stack4, $stack6, $stack9;

        array1 := @parameter0: java.lang.Object[];

        array2 := @parameter1: java.lang.Object[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(long[], long[])
    {
        long[] array1, array2;
        int $stack3, $stack4, $stack6, $stack9;

        array1 := @parameter0: long[];

        array2 := @parameter1: long[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(int[], int[])
    {
        int[] array1, array2;
        int $stack3, $stack4, $stack6, $stack9;

        array1 := @parameter0: int[];

        array2 := @parameter1: int[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(short[], short[])
    {
        int $stack3, $stack4, $stack6, $stack9;
        short[] array1, array2;

        array1 := @parameter0: short[];

        array2 := @parameter1: short[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(char[], char[])
    {
        int $stack3, $stack4, $stack6, $stack9;
        char[] array1, array2;

        array1 := @parameter0: char[];

        array2 := @parameter1: char[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(byte[], byte[])
    {
        byte[] array1, array2;
        int $stack3, $stack4, $stack6, $stack9;

        array1 := @parameter0: byte[];

        array2 := @parameter1: byte[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(double[], double[])
    {
        double[] array1, array2;
        int $stack3, $stack4, $stack6, $stack9;

        array1 := @parameter0: double[];

        array2 := @parameter1: double[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(float[], float[])
    {
        int $stack3, $stack4, $stack6, $stack9;
        float[] array1, array2;

        array1 := @parameter0: float[];

        array2 := @parameter1: float[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static boolean isSameLength(boolean[], boolean[])
    {
        boolean[] array1, array2;
        int $stack3, $stack4, $stack6, $stack9;

        array1 := @parameter0: boolean[];

        array2 := @parameter1: boolean[];

        if array1 != null goto label1;

        if array2 == null goto label1;

        $stack9 = lengthof array2;

        if $stack9 > 0 goto label3;

     label1:
        if array2 != null goto label2;

        if array1 == null goto label2;

        $stack6 = lengthof array1;

        if $stack6 > 0 goto label3;

     label2:
        if array1 == null goto label4;

        if array2 == null goto label4;

        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        if $stack4 == $stack3 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    public static int getLength(java.lang.Object)
    {
        int $stack1;
        java.lang.Object array;

        array := @parameter0: java.lang.Object;

        if array != null goto label1;

        return 0;

     label1:
        $stack1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(array);

        return $stack1;
    }

    public static boolean isSameType(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalArgumentException $stack2;
        java.lang.Object array1, array2;
        java.lang.Class $stack3, $stack5;
        java.lang.String $stack4, $stack6;
        boolean $stack7;

        array1 := @parameter0: java.lang.Object;

        array2 := @parameter1: java.lang.Object;

        if array1 == null goto label1;

        if array2 != null goto label2;

     label1:
        $stack2 = new java.lang.IllegalArgumentException;

        specialinvoke $stack2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The Array must not be null");

        throw $stack2;

     label2:
        $stack3 = virtualinvoke array1.<java.lang.Object: java.lang.Class getClass()>();

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.String getName()>();

        $stack5 = virtualinvoke array2.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>();

        $stack7 = virtualinvoke $stack4.<java.lang.String: boolean equals(java.lang.Object)>($stack6);

        return $stack7;
    }

    public static void reverse(java.lang.Object[])
    {
        java.lang.Object[] array;
        int $stack4, i, j, $i0;
        java.lang.Object tmp, $stack5;

        array := @parameter0: java.lang.Object[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack4 = lengthof array;

        j = $stack4 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack5 = array[i];

        array[j] = $stack5;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(long[])
    {
        long[] array;
        int $stack5, i, j, $i0;
        long tmp, $stack6;

        array := @parameter0: long[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack5 = lengthof array;

        j = $stack5 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack6 = array[i];

        array[j] = $stack6;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(int[])
    {
        int[] array;
        int $stack4, tmp, $stack5, i, j, $i0;

        array := @parameter0: int[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack4 = lengthof array;

        j = $stack4 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack5 = array[i];

        array[j] = $stack5;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(short[])
    {
        short tmp, $stack5;
        int $stack4, i, j, $i0;
        short[] array;

        array := @parameter0: short[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack4 = lengthof array;

        j = $stack4 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack5 = array[i];

        array[j] = $stack5;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(char[])
    {
        int $stack4, i, j, $i0;
        char[] array;
        char tmp, $stack5;

        array := @parameter0: char[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack4 = lengthof array;

        j = $stack4 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack5 = array[i];

        array[j] = $stack5;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(byte[])
    {
        byte[] array;
        byte tmp, $stack5;
        int $stack4, i, j, $i0;

        array := @parameter0: byte[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack4 = lengthof array;

        j = $stack4 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack5 = array[i];

        array[j] = $stack5;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(double[])
    {
        double[] array;
        int $stack5, i, j, $i0;
        double tmp, $stack6;

        array := @parameter0: double[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack5 = lengthof array;

        j = $stack5 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack6 = array[i];

        array[j] = $stack6;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(float[])
    {
        int $stack4, i, j, $i0;
        float tmp, $stack5;
        float[] array;

        array := @parameter0: float[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack4 = lengthof array;

        j = $stack4 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack5 = array[i];

        array[j] = $stack5;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static void reverse(boolean[])
    {
        boolean[] array;
        int $stack4, i, j, $i0;
        boolean tmp, $stack5;

        array := @parameter0: boolean[];

        if array != null goto label1;

        return;

     label1:
        i = 0;

        $stack4 = lengthof array;

        j = $stack4 - 1;

     label2:
        if j <= i goto label3;

        tmp = array[j];

        $stack5 = array[i];

        array[j] = $stack5;

        array[i] = tmp;

        $i0 = (int) -1;

        j = j + $i0;

        i = i + 1;

        goto label2;

     label3:
        return;
    }

    public static int indexOf(java.lang.Object[], java.lang.Object)
    {
        int $stack2;
        java.lang.Object objectToFind;
        java.lang.Object[] array;

        array := @parameter0: java.lang.Object[];

        objectToFind := @parameter1: java.lang.Object;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(array, objectToFind, 0);

        return $stack2;
    }

    public static int indexOf(java.lang.Object[], java.lang.Object, int)
    {
        java.lang.Object[] array;
        int $stack7, $stack13, startIndex, i, $i0, $i1;
        java.lang.Object objectToFind, $stack9, $stack14;
        java.lang.Class $stack4, $stack5;
        boolean $stack6, $stack10;

        array := @parameter0: java.lang.Object[];

        objectToFind := @parameter1: java.lang.Object;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        if objectToFind != null goto label6;

        i = startIndex;

     label3:
        $stack13 = lengthof array;

        if i >= $stack13 goto label5;

        $stack14 = array[i];

        if $stack14 != null goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        goto label9;

     label6:
        $stack4 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $stack5 = virtualinvoke $stack4.<java.lang.Class: java.lang.Class getComponentType()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Class: boolean isInstance(java.lang.Object)>(objectToFind);

        if $stack6 == 0 goto label9;

        i = startIndex;

     label7:
        $stack7 = lengthof array;

        if i >= $stack7 goto label9;

        $stack9 = array[i];

        $stack10 = virtualinvoke objectToFind.<java.lang.Object: boolean equals(java.lang.Object)>($stack9);

        if $stack10 == 0 goto label8;

        return i;

     label8:
        i = i + 1;

        goto label7;

     label9:
        $i1 = (int) -1;

        return $i1;
    }

    public static int lastIndexOf(java.lang.Object[], java.lang.Object)
    {
        int $stack2;
        java.lang.Object objectToFind;
        java.lang.Object[] array;

        array := @parameter0: java.lang.Object[];

        objectToFind := @parameter1: java.lang.Object;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>(array, objectToFind, 2147483647);

        return $stack2;
    }

    public static int lastIndexOf(java.lang.Object[], java.lang.Object, int)
    {
        java.lang.Object[] array;
        int $stack4, $stack14, startIndex, i, $i0, $i1, $i2, $i3, $i4;
        boolean $stack7, $stack10;
        java.lang.Object objectToFind, $stack9, $stack12;
        java.lang.Class $stack5, $stack6;

        array := @parameter0: java.lang.Object[];

        objectToFind := @parameter1: java.lang.Object;

        startIndex := @parameter2: int;

        if array != null goto label01;

        $i0 = (int) -1;

        return $i0;

     label01:
        if startIndex >= 0 goto label02;

        $i1 = (int) -1;

        return $i1;

     label02:
        $stack4 = lengthof array;

        if startIndex < $stack4 goto label03;

        $stack14 = lengthof array;

        startIndex = $stack14 - 1;

     label03:
        if objectToFind != null goto label07;

        i = startIndex;

     label04:
        if i < 0 goto label06;

        $stack12 = array[i];

        if $stack12 != null goto label05;

        return i;

     label05:
        $i2 = (int) -1;

        i = i + $i2;

        goto label04;

     label06:
        goto label10;

     label07:
        $stack5 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = virtualinvoke $stack5.<java.lang.Class: java.lang.Class getComponentType()>();

        $stack7 = virtualinvoke $stack6.<java.lang.Class: boolean isInstance(java.lang.Object)>(objectToFind);

        if $stack7 == 0 goto label10;

        i = startIndex;

     label08:
        if i < 0 goto label10;

        $stack9 = array[i];

        $stack10 = virtualinvoke objectToFind.<java.lang.Object: boolean equals(java.lang.Object)>($stack9);

        if $stack10 == 0 goto label09;

        return i;

     label09:
        $i3 = (int) -1;

        i = i + $i3;

        goto label08;

     label10:
        $i4 = (int) -1;

        return $i4;
    }

    public static boolean contains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] array;
        int $stack2, $i0;
        java.lang.Object objectToFind;
        boolean $stack3;

        array := @parameter0: java.lang.Object[];

        objectToFind := @parameter1: java.lang.Object;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(array, objectToFind);

        $i0 = (int) -1;

        if $stack2 == $i0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public static int indexOf(long[], long)
    {
        int $stack3;
        long valueToFind;
        long[] array;

        array := @parameter0: long[];

        valueToFind := @parameter1: long;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>(array, valueToFind, 0);

        return $stack3;
    }

    public static int indexOf(long[], long, int)
    {
        long valueToFind, $stack6;
        long[] array;
        byte $stack7;
        int startIndex, i, $stack5, $i0, $i1;

        array := @parameter0: long[];

        valueToFind := @parameter1: long;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label5;

        $stack6 = array[i];

        $stack7 = valueToFind cmp $stack6;

        if $stack7 != 0 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i1 = (int) -1;

        return $i1;
    }

    public static int lastIndexOf(long[], long)
    {
        int $stack3;
        long valueToFind;
        long[] array;

        array := @parameter0: long[];

        valueToFind := @parameter1: long;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>(array, valueToFind, 2147483647);

        return $stack3;
    }

    public static int lastIndexOf(long[], long, int)
    {
        long valueToFind, $stack6;
        long[] array;
        byte $stack7;
        int $stack5, $stack9, startIndex, i, $i0, $i1, $i2, $i3;

        array := @parameter0: long[];

        valueToFind := @parameter1: long;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack5 = lengthof array;

        if startIndex < $stack5 goto label3;

        $stack9 = lengthof array;

        startIndex = $stack9 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack6 = array[i];

        $stack7 = valueToFind cmp $stack6;

        if $stack7 != 0 goto label5;

        return i;

     label5:
        $i2 = (int) -1;

        i = i + $i2;

        goto label4;

     label6:
        $i3 = (int) -1;

        return $i3;
    }

    public static boolean contains(long[], long)
    {
        long[] array;
        int $stack3, $i0;
        long valueToFind;
        boolean $stack4;

        array := @parameter0: long[];

        valueToFind := @parameter1: long;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack3 == $i0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public static int indexOf(int[], int)
    {
        int valueToFind, $stack2;
        int[] array;

        array := @parameter0: int[];

        valueToFind := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>(array, valueToFind, 0);

        return $stack2;
    }

    public static int indexOf(int[], int, int)
    {
        int[] array;
        int valueToFind, $stack5, startIndex, i, $stack4, $i0, $i1;

        array := @parameter0: int[];

        valueToFind := @parameter1: int;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack4 = lengthof array;

        if i >= $stack4 goto label5;

        $stack5 = array[i];

        if valueToFind != $stack5 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i1 = (int) -1;

        return $i1;
    }

    public static int lastIndexOf(int[], int)
    {
        int valueToFind, $stack2;
        int[] array;

        array := @parameter0: int[];

        valueToFind := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>(array, valueToFind, 2147483647);

        return $stack2;
    }

    public static int lastIndexOf(int[], int, int)
    {
        int[] array;
        int $stack4, valueToFind, $stack5, $stack7, startIndex, i, $i0, $i1, $i2, $i3;

        array := @parameter0: int[];

        valueToFind := @parameter1: int;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack4 = lengthof array;

        if startIndex < $stack4 goto label3;

        $stack7 = lengthof array;

        startIndex = $stack7 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack5 = array[i];

        if valueToFind != $stack5 goto label5;

        return i;

     label5:
        $i2 = (int) -1;

        i = i + $i2;

        goto label4;

     label6:
        $i3 = (int) -1;

        return $i3;
    }

    public static boolean contains(int[], int)
    {
        int[] array;
        int valueToFind, $stack2, $i0;
        boolean $stack3;

        array := @parameter0: int[];

        valueToFind := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack2 == $i0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public static int indexOf(short[], short)
    {
        int $stack2;
        short valueToFind;
        short[] array;

        array := @parameter0: short[];

        valueToFind := @parameter1: short;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>(array, valueToFind, 0);

        return $stack2;
    }

    public static int indexOf(short[], short, int)
    {
        short valueToFind, $stack5;
        int startIndex, i, $stack4, $i0, $i1, $i2, $i3;
        short[] array;

        array := @parameter0: short[];

        valueToFind := @parameter1: short;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack4 = lengthof array;

        if i >= $stack4 goto label5;

        $stack5 = array[i];

        $i1 = (int) valueToFind;

        $i2 = (int) $stack5;

        if $i1 != $i2 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i3 = (int) -1;

        return $i3;
    }

    public static int lastIndexOf(short[], short)
    {
        int $stack2;
        short valueToFind;
        short[] array;

        array := @parameter0: short[];

        valueToFind := @parameter1: short;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>(array, valueToFind, 2147483647);

        return $stack2;
    }

    public static int lastIndexOf(short[], short, int)
    {
        short valueToFind, $stack5;
        int $stack4, $stack7, startIndex, i, $i0, $i1, $i2, $i3, $i4, $i5;
        short[] array;

        array := @parameter0: short[];

        valueToFind := @parameter1: short;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack4 = lengthof array;

        if startIndex < $stack4 goto label3;

        $stack7 = lengthof array;

        startIndex = $stack7 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack5 = array[i];

        $i2 = (int) valueToFind;

        $i3 = (int) $stack5;

        if $i2 != $i3 goto label5;

        return i;

     label5:
        $i4 = (int) -1;

        i = i + $i4;

        goto label4;

     label6:
        $i5 = (int) -1;

        return $i5;
    }

    public static boolean contains(short[], short)
    {
        short valueToFind;
        int $stack2, $i0;
        short[] array;
        boolean $stack3;

        array := @parameter0: short[];

        valueToFind := @parameter1: short;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack2 == $i0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public static int indexOf(char[], char)
    {
        int $stack2;
        char[] array;
        char valueToFind;

        array := @parameter0: char[];

        valueToFind := @parameter1: char;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>(array, valueToFind, 0);

        return $stack2;
    }

    public static int indexOf(char[], char, int)
    {
        char valueToFind, $stack5;
        int startIndex, i, $stack4, $i0, $i1, $i2, $i3;
        char[] array;

        array := @parameter0: char[];

        valueToFind := @parameter1: char;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack4 = lengthof array;

        if i >= $stack4 goto label5;

        $stack5 = array[i];

        $i1 = (int) valueToFind;

        $i2 = (int) $stack5;

        if $i1 != $i2 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i3 = (int) -1;

        return $i3;
    }

    public static int lastIndexOf(char[], char)
    {
        int $stack2;
        char[] array;
        char valueToFind;

        array := @parameter0: char[];

        valueToFind := @parameter1: char;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>(array, valueToFind, 2147483647);

        return $stack2;
    }

    public static int lastIndexOf(char[], char, int)
    {
        char valueToFind, $stack5;
        int $stack4, $stack7, startIndex, i, $i0, $i1, $i2, $i3, $i4, $i5;
        char[] array;

        array := @parameter0: char[];

        valueToFind := @parameter1: char;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack4 = lengthof array;

        if startIndex < $stack4 goto label3;

        $stack7 = lengthof array;

        startIndex = $stack7 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack5 = array[i];

        $i2 = (int) valueToFind;

        $i3 = (int) $stack5;

        if $i2 != $i3 goto label5;

        return i;

     label5:
        $i4 = (int) -1;

        i = i + $i4;

        goto label4;

     label6:
        $i5 = (int) -1;

        return $i5;
    }

    public static boolean contains(char[], char)
    {
        int $stack2, $i0;
        char[] array;
        char valueToFind;
        boolean $stack3;

        array := @parameter0: char[];

        valueToFind := @parameter1: char;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack2 == $i0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public static int indexOf(byte[], byte)
    {
        int $stack2;
        byte[] array;
        byte valueToFind;

        array := @parameter0: byte[];

        valueToFind := @parameter1: byte;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>(array, valueToFind, 0);

        return $stack2;
    }

    public static int indexOf(byte[], byte, int)
    {
        byte[] array;
        byte valueToFind, $stack5;
        int startIndex, i, $stack4, $i0, $i1, $i2, $i3;

        array := @parameter0: byte[];

        valueToFind := @parameter1: byte;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack4 = lengthof array;

        if i >= $stack4 goto label5;

        $stack5 = array[i];

        $i1 = (int) valueToFind;

        $i2 = (int) $stack5;

        if $i1 != $i2 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i3 = (int) -1;

        return $i3;
    }

    public static int lastIndexOf(byte[], byte)
    {
        int $stack2;
        byte[] array;
        byte valueToFind;

        array := @parameter0: byte[];

        valueToFind := @parameter1: byte;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>(array, valueToFind, 2147483647);

        return $stack2;
    }

    public static int lastIndexOf(byte[], byte, int)
    {
        byte[] array;
        byte valueToFind, $stack5;
        int $stack4, $stack7, startIndex, i, $i0, $i1, $i2, $i3, $i4, $i5;

        array := @parameter0: byte[];

        valueToFind := @parameter1: byte;

        startIndex := @parameter2: int;

        if array != null goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack4 = lengthof array;

        if startIndex < $stack4 goto label3;

        $stack7 = lengthof array;

        startIndex = $stack7 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack5 = array[i];

        $i2 = (int) valueToFind;

        $i3 = (int) $stack5;

        if $i2 != $i3 goto label5;

        return i;

     label5:
        $i4 = (int) -1;

        i = i + $i4;

        goto label4;

     label6:
        $i5 = (int) -1;

        return $i5;
    }

    public static boolean contains(byte[], byte)
    {
        byte[] array;
        byte valueToFind;
        int $stack2, $i0;
        boolean $stack3;

        array := @parameter0: byte[];

        valueToFind := @parameter1: byte;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack2 == $i0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public static int indexOf(double[], double)
    {
        double[] array;
        int $stack3;
        double valueToFind;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>(array, valueToFind, 0);

        return $stack3;
    }

    public static int indexOf(double[], double, double)
    {
        double[] array;
        int $stack5;
        double valueToFind, tolerance;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        tolerance := @parameter2: double;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>(array, valueToFind, 0, tolerance);

        return $stack5;
    }

    public static int indexOf(double[], double, int)
    {
        double[] array;
        byte $stack8;
        int startIndex, i, $stack6, $i0, $i1;
        boolean $stack5;
        double valueToFind, $stack7;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        startIndex := @parameter2: int;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(array);

        if $stack5 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack6 = lengthof array;

        if i >= $stack6 goto label5;

        $stack7 = array[i];

        $stack8 = valueToFind cmpl $stack7;

        if $stack8 != 0 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i1 = (int) -1;

        return $i1;
    }

    public static int indexOf(double[], double, int, double)
    {
        double[] array;
        byte $stack14, $stack18;
        int startIndex, i, $stack12, $i0, $i1, $i2, $i3;
        boolean $stack11;
        double valueToFind, tolerance, $stack13, $stack17, $stack21, $stack24;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        startIndex := @parameter2: int;

        tolerance := @parameter3: double;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(array);

        if $stack11 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        $stack21 = valueToFind - tolerance;

        $stack24 = valueToFind + tolerance;

        i = startIndex;

     label3:
        $stack12 = lengthof array;

        if i >= $stack12 goto label5;

        $stack13 = array[i];

        $stack14 = $stack13 cmpl $stack21;

        $i1 = (int) $stack14;

        if $i1 < 0 goto label4;

        $stack17 = array[i];

        $stack18 = $stack17 cmpg $stack24;

        $i2 = (int) $stack18;

        if $i2 > 0 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i3 = (int) -1;

        return $i3;
    }

    public static int lastIndexOf(double[], double)
    {
        double[] array;
        int $stack3;
        double valueToFind;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>(array, valueToFind, 2147483647);

        return $stack3;
    }

    public static int lastIndexOf(double[], double, double)
    {
        double[] array;
        int $stack5;
        double valueToFind, tolerance;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        tolerance := @parameter2: double;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>(array, valueToFind, 2147483647, tolerance);

        return $stack5;
    }

    public static int lastIndexOf(double[], double, int)
    {
        double[] array;
        byte $stack8;
        int $stack6, $stack10, startIndex, i, $i0, $i1, $i2, $i3;
        boolean $stack5;
        double valueToFind, $stack7;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        startIndex := @parameter2: int;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(array);

        if $stack5 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack6 = lengthof array;

        if startIndex < $stack6 goto label3;

        $stack10 = lengthof array;

        startIndex = $stack10 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack7 = array[i];

        $stack8 = valueToFind cmpl $stack7;

        if $stack8 != 0 goto label5;

        return i;

     label5:
        $i2 = (int) -1;

        i = i + $i2;

        goto label4;

     label6:
        $i3 = (int) -1;

        return $i3;
    }

    public static int lastIndexOf(double[], double, int, double)
    {
        double[] array;
        byte $stack14, $stack17;
        int $stack12, $stack18, startIndex, i, $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $stack11;
        double valueToFind, tolerance, $stack13, $stack16, $stack21, $stack24;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        startIndex := @parameter2: int;

        tolerance := @parameter3: double;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(array);

        if $stack11 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack12 = lengthof array;

        if startIndex < $stack12 goto label3;

        $stack18 = lengthof array;

        startIndex = $stack18 - 1;

     label3:
        $stack21 = valueToFind - tolerance;

        $stack24 = valueToFind + tolerance;

        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack13 = array[i];

        $stack14 = $stack13 cmpl $stack21;

        $i2 = (int) $stack14;

        if $i2 < 0 goto label5;

        $stack16 = array[i];

        $stack17 = $stack16 cmpg $stack24;

        $i3 = (int) $stack17;

        if $i3 > 0 goto label5;

        return i;

     label5:
        $i4 = (int) -1;

        i = i + $i4;

        goto label4;

     label6:
        $i5 = (int) -1;

        return $i5;
    }

    public static boolean contains(double[], double)
    {
        double[] array;
        int $stack3, $i0;
        double valueToFind;
        boolean $stack4;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack3 == $i0 goto label1;

        $stack4 = 1;

        goto label2;

     label1:
        $stack4 = 0;

     label2:
        return $stack4;
    }

    public static boolean contains(double[], double, double)
    {
        double[] array;
        int $stack5, $i0;
        double valueToFind, tolerance;
        boolean $stack6;

        array := @parameter0: double[];

        valueToFind := @parameter1: double;

        tolerance := @parameter2: double;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>(array, valueToFind, 0, tolerance);

        $i0 = (int) -1;

        if $stack5 == $i0 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        return $stack6;
    }

    public static int indexOf(float[], float)
    {
        int $stack2;
        float valueToFind;
        float[] array;

        array := @parameter0: float[];

        valueToFind := @parameter1: float;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>(array, valueToFind, 0);

        return $stack2;
    }

    public static int indexOf(float[], float, int)
    {
        float[] array;
        byte $stack7;
        int startIndex, i, $stack5, $i0, $i1;
        float valueToFind, $stack6;
        boolean $stack4;

        array := @parameter0: float[];

        valueToFind := @parameter1: float;

        startIndex := @parameter2: int;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(array);

        if $stack4 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label5;

        $stack6 = array[i];

        $stack7 = valueToFind cmpl $stack6;

        if $stack7 != 0 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i1 = (int) -1;

        return $i1;
    }

    public static int lastIndexOf(float[], float)
    {
        int $stack2;
        float valueToFind;
        float[] array;

        array := @parameter0: float[];

        valueToFind := @parameter1: float;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>(array, valueToFind, 2147483647);

        return $stack2;
    }

    public static int lastIndexOf(float[], float, int)
    {
        float[] array;
        byte $stack7;
        int $stack5, $stack9, startIndex, i, $i0, $i1, $i2, $i3;
        float valueToFind, $stack6;
        boolean $stack4;

        array := @parameter0: float[];

        valueToFind := @parameter1: float;

        startIndex := @parameter2: int;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(array);

        if $stack4 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack5 = lengthof array;

        if startIndex < $stack5 goto label3;

        $stack9 = lengthof array;

        startIndex = $stack9 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack6 = array[i];

        $stack7 = valueToFind cmpl $stack6;

        if $stack7 != 0 goto label5;

        return i;

     label5:
        $i2 = (int) -1;

        i = i + $i2;

        goto label4;

     label6:
        $i3 = (int) -1;

        return $i3;
    }

    public static boolean contains(float[], float)
    {
        int $stack2, $i0;
        float valueToFind;
        float[] array;
        boolean $stack3;

        array := @parameter0: float[];

        valueToFind := @parameter1: float;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack2 == $i0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public static int indexOf(boolean[], boolean)
    {
        boolean[] array;
        int $stack2;
        boolean valueToFind;

        array := @parameter0: boolean[];

        valueToFind := @parameter1: boolean;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>(array, valueToFind, 0);

        return $stack2;
    }

    public static int indexOf(boolean[], boolean, int)
    {
        boolean[] array;
        int startIndex, i, $stack5, $i0, $i1;
        boolean $stack4, valueToFind, $stack6;

        array := @parameter0: boolean[];

        valueToFind := @parameter1: boolean;

        startIndex := @parameter2: int;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(array);

        if $stack4 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        startIndex = 0;

     label2:
        i = startIndex;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label5;

        $stack6 = array[i];

        if valueToFind != $stack6 goto label4;

        return i;

     label4:
        i = i + 1;

        goto label3;

     label5:
        $i1 = (int) -1;

        return $i1;
    }

    public static int lastIndexOf(boolean[], boolean)
    {
        boolean[] array;
        int $stack2;
        boolean valueToFind;

        array := @parameter0: boolean[];

        valueToFind := @parameter1: boolean;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>(array, valueToFind, 2147483647);

        return $stack2;
    }

    public static int lastIndexOf(boolean[], boolean, int)
    {
        boolean[] array;
        int $stack5, $stack8, startIndex, i, $i0, $i1, $i2, $i3;
        boolean $stack4, valueToFind, $stack6;

        array := @parameter0: boolean[];

        valueToFind := @parameter1: boolean;

        startIndex := @parameter2: int;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(array);

        if $stack4 == 0 goto label1;

        $i0 = (int) -1;

        return $i0;

     label1:
        if startIndex >= 0 goto label2;

        $i1 = (int) -1;

        return $i1;

     label2:
        $stack5 = lengthof array;

        if startIndex < $stack5 goto label3;

        $stack8 = lengthof array;

        startIndex = $stack8 - 1;

     label3:
        i = startIndex;

     label4:
        if i < 0 goto label6;

        $stack6 = array[i];

        if valueToFind != $stack6 goto label5;

        return i;

     label5:
        $i2 = (int) -1;

        i = i + $i2;

        goto label4;

     label6:
        $i3 = (int) -1;

        return $i3;
    }

    public static boolean contains(boolean[], boolean)
    {
        boolean[] array;
        int $stack2, $i0;
        boolean valueToFind, $stack3;

        array := @parameter0: boolean[];

        valueToFind := @parameter1: boolean;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>(array, valueToFind);

        $i0 = (int) -1;

        if $stack2 == $i0 goto label1;

        $stack3 = 1;

        goto label2;

     label1:
        $stack3 = 0;

     label2:
        return $stack3;
    }

    public static char[] toPrimitive(java.lang.Character[])
    {
        char $stack7;
        java.lang.Character $stack6;
        int $stack3, $stack4, $stack5, i;
        java.lang.Character[] array;
        char[] result, $stack10;

        array := @parameter0: java.lang.Character[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (char)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Character: char charValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static char[] toPrimitive(java.lang.Character[], char)
    {
        char valueForNull, $stack8;
        java.lang.Character b;
        int $stack5, $stack6, $stack7, $stack11, i;
        java.lang.Character[] array;
        char[] result, $stack13;

        array := @parameter0: java.lang.Character[];

        valueForNull := @parameter1: char;

        if array != null goto label1;

        return null;

     label1:
        $stack5 = lengthof array;

        if $stack5 != 0 goto label2;

        $stack13 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        return $stack13;

     label2:
        $stack6 = lengthof array;

        result = newarray (char)[$stack6];

        i = 0;

     label3:
        $stack7 = lengthof array;

        if i >= $stack7 goto label6;

        b = array[i];

        $stack11 = i;

        if b != null goto label4;

        $stack8 = valueForNull;

        goto label5;

     label4:
        $stack8 = virtualinvoke b.<java.lang.Character: char charValue()>();

     label5:
        result[$stack11] = $stack8;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Character[] toObject(char[])
    {
        char $stack6;
        java.lang.Character $stack7;
        int $stack3, $stack4, $stack5, i;
        char[] array;
        java.lang.Character[] result, $stack10;

        array := @parameter0: char[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Character)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($stack6);

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static long[] toPrimitive(java.lang.Long[])
    {
        java.lang.Long[] array;
        long $stack7;
        long[] result, $stack10;
        java.lang.Long $stack6;
        int $stack3, $stack4, $stack5, i;

        array := @parameter0: java.lang.Long[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (long)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Long: long longValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static long[] toPrimitive(java.lang.Long[], long)
    {
        java.lang.Long[] array;
        long valueForNull, $stack9;
        long[] result, $stack14;
        java.lang.Long b;
        int $stack6, $stack7, $stack8, $stack12, i;

        array := @parameter0: java.lang.Long[];

        valueForNull := @parameter1: long;

        if array != null goto label1;

        return null;

     label1:
        $stack6 = lengthof array;

        if $stack6 != 0 goto label2;

        $stack14 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        return $stack14;

     label2:
        $stack7 = lengthof array;

        result = newarray (long)[$stack7];

        i = 0;

     label3:
        $stack8 = lengthof array;

        if i >= $stack8 goto label6;

        b = array[i];

        $stack12 = i;

        if b != null goto label4;

        $stack9 = valueForNull;

        goto label5;

     label4:
        $stack9 = virtualinvoke b.<java.lang.Long: long longValue()>();

     label5:
        result[$stack12] = $stack9;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Long[] toObject(long[])
    {
        java.lang.Long[] result, $stack10;
        long $stack6;
        long[] array;
        java.lang.Long $stack7;
        int $stack3, $stack4, $stack5, i;

        array := @parameter0: long[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Long)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($stack6);

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static int[] toPrimitive(java.lang.Integer[])
    {
        java.lang.Integer $stack6;
        int[] result, $stack10;
        int $stack3, $stack4, $stack5, $stack7, i;
        java.lang.Integer[] array;

        array := @parameter0: java.lang.Integer[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (int)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Integer: int intValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static int[] toPrimitive(java.lang.Integer[], int)
    {
        java.lang.Integer b;
        int[] result, $stack13;
        int $stack5, $stack6, $stack7, valueForNull, $stack11, i, $stack8;
        java.lang.Integer[] array;

        array := @parameter0: java.lang.Integer[];

        valueForNull := @parameter1: int;

        if array != null goto label1;

        return null;

     label1:
        $stack5 = lengthof array;

        if $stack5 != 0 goto label2;

        $stack13 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        return $stack13;

     label2:
        $stack6 = lengthof array;

        result = newarray (int)[$stack6];

        i = 0;

     label3:
        $stack7 = lengthof array;

        if i >= $stack7 goto label6;

        b = array[i];

        $stack11 = i;

        if b != null goto label4;

        $stack8 = valueForNull;

        goto label5;

     label4:
        $stack8 = virtualinvoke b.<java.lang.Integer: int intValue()>();

     label5:
        result[$stack11] = $stack8;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Integer[] toObject(int[])
    {
        java.lang.Integer $stack7;
        int[] array;
        int $stack3, $stack4, $stack5, $stack6, i;
        java.lang.Integer[] result, $stack10;

        array := @parameter0: int[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Integer)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack6);

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static short[] toPrimitive(java.lang.Short[])
    {
        java.lang.Short[] array;
        short $stack7;
        java.lang.Short $stack6;
        int $stack3, $stack4, $stack5, i;
        short[] result, $stack10;

        array := @parameter0: java.lang.Short[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (short)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Short: short shortValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static short[] toPrimitive(java.lang.Short[], short)
    {
        java.lang.Short[] array;
        short valueForNull, $stack8;
        java.lang.Short b;
        int $stack5, $stack6, $stack7, $stack11, i;
        short[] result, $stack13;

        array := @parameter0: java.lang.Short[];

        valueForNull := @parameter1: short;

        if array != null goto label1;

        return null;

     label1:
        $stack5 = lengthof array;

        if $stack5 != 0 goto label2;

        $stack13 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        return $stack13;

     label2:
        $stack6 = lengthof array;

        result = newarray (short)[$stack6];

        i = 0;

     label3:
        $stack7 = lengthof array;

        if i >= $stack7 goto label6;

        b = array[i];

        $stack11 = i;

        if b != null goto label4;

        $stack8 = valueForNull;

        goto label5;

     label4:
        $stack8 = virtualinvoke b.<java.lang.Short: short shortValue()>();

     label5:
        result[$stack11] = $stack8;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Short[] toObject(short[])
    {
        java.lang.Short[] result, $stack10;
        short $stack6;
        java.lang.Short $stack7;
        int $stack3, $stack4, $stack5, i;
        short[] array;

        array := @parameter0: short[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Short)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($stack6);

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static byte[] toPrimitive(java.lang.Byte[])
    {
        byte[] result, $stack10;
        java.lang.Byte[] array;
        byte $stack7;
        int $stack3, $stack4, $stack5, i;
        java.lang.Byte $stack6;

        array := @parameter0: java.lang.Byte[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (byte)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Byte: byte byteValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static byte[] toPrimitive(java.lang.Byte[], byte)
    {
        byte[] result, $stack13;
        java.lang.Byte[] array;
        byte valueForNull, $stack8;
        int $stack5, $stack6, $stack7, $stack11, i;
        java.lang.Byte b;

        array := @parameter0: java.lang.Byte[];

        valueForNull := @parameter1: byte;

        if array != null goto label1;

        return null;

     label1:
        $stack5 = lengthof array;

        if $stack5 != 0 goto label2;

        $stack13 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        return $stack13;

     label2:
        $stack6 = lengthof array;

        result = newarray (byte)[$stack6];

        i = 0;

     label3:
        $stack7 = lengthof array;

        if i >= $stack7 goto label6;

        b = array[i];

        $stack11 = i;

        if b != null goto label4;

        $stack8 = valueForNull;

        goto label5;

     label4:
        $stack8 = virtualinvoke b.<java.lang.Byte: byte byteValue()>();

     label5:
        result[$stack11] = $stack8;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Byte[] toObject(byte[])
    {
        byte[] array;
        java.lang.Byte[] result, $stack10;
        byte $stack6;
        int $stack3, $stack4, $stack5, i;
        java.lang.Byte $stack7;

        array := @parameter0: byte[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Byte)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($stack6);

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static double[] toPrimitive(java.lang.Double[])
    {
        java.lang.Double $stack6;
        java.lang.Double[] array;
        double[] result, $stack10;
        int $stack3, $stack4, $stack5, i;
        double $stack7;

        array := @parameter0: java.lang.Double[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (double)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Double: double doubleValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static double[] toPrimitive(java.lang.Double[], double)
    {
        java.lang.Double b;
        java.lang.Double[] array;
        double[] result, $stack14;
        int $stack6, $stack7, $stack8, $stack12, i;
        double valueForNull, $stack9;

        array := @parameter0: java.lang.Double[];

        valueForNull := @parameter1: double;

        if array != null goto label1;

        return null;

     label1:
        $stack6 = lengthof array;

        if $stack6 != 0 goto label2;

        $stack14 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        return $stack14;

     label2:
        $stack7 = lengthof array;

        result = newarray (double)[$stack7];

        i = 0;

     label3:
        $stack8 = lengthof array;

        if i >= $stack8 goto label6;

        b = array[i];

        $stack12 = i;

        if b != null goto label4;

        $stack9 = valueForNull;

        goto label5;

     label4:
        $stack9 = virtualinvoke b.<java.lang.Double: double doubleValue()>();

     label5:
        result[$stack12] = $stack9;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Double[] toObject(double[])
    {
        java.lang.Double $stack7;
        double[] array;
        java.lang.Double[] result, $stack10;
        int $stack3, $stack4, $stack5, i;
        double $stack6;

        array := @parameter0: double[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Double)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($stack6);

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static float[] toPrimitive(java.lang.Float[])
    {
        java.lang.Float $stack6;
        float[] result, $stack10;
        int $stack3, $stack4, $stack5, i;
        float $stack7;
        java.lang.Float[] array;

        array := @parameter0: java.lang.Float[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (float)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Float: float floatValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static float[] toPrimitive(java.lang.Float[], float)
    {
        java.lang.Float b;
        float[] result, $stack13;
        int $stack5, $stack6, $stack7, $stack11, i;
        float valueForNull, $stack8;
        java.lang.Float[] array;

        array := @parameter0: java.lang.Float[];

        valueForNull := @parameter1: float;

        if array != null goto label1;

        return null;

     label1:
        $stack5 = lengthof array;

        if $stack5 != 0 goto label2;

        $stack13 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        return $stack13;

     label2:
        $stack6 = lengthof array;

        result = newarray (float)[$stack6];

        i = 0;

     label3:
        $stack7 = lengthof array;

        if i >= $stack7 goto label6;

        b = array[i];

        $stack11 = i;

        if b != null goto label4;

        $stack8 = valueForNull;

        goto label5;

     label4:
        $stack8 = virtualinvoke b.<java.lang.Float: float floatValue()>();

     label5:
        result[$stack11] = $stack8;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Float[] toObject(float[])
    {
        java.lang.Float $stack7;
        float[] array;
        int $stack3, $stack4, $stack5, i;
        float $stack6;
        java.lang.Float[] result, $stack10;

        array := @parameter0: float[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Float)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($stack6);

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static boolean[] toPrimitive(java.lang.Boolean[])
    {
        boolean[] result, $stack10;
        java.lang.Boolean[] array;
        int $stack3, $stack4, $stack5, i;
        java.lang.Boolean $stack6;
        boolean $stack7;

        array := @parameter0: java.lang.Boolean[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack10 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        return $stack10;

     label2:
        $stack4 = lengthof array;

        result = newarray (boolean)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label4;

        $stack6 = array[i];

        $stack7 = virtualinvoke $stack6.<java.lang.Boolean: boolean booleanValue()>();

        result[i] = $stack7;

        i = i + 1;

        goto label3;

     label4:
        return result;
    }

    public static boolean[] toPrimitive(java.lang.Boolean[], boolean)
    {
        boolean[] result, $stack13;
        java.lang.Boolean[] array;
        int $stack5, $stack6, $stack7, $stack11, i;
        java.lang.Boolean b;
        boolean valueForNull, $stack8;

        array := @parameter0: java.lang.Boolean[];

        valueForNull := @parameter1: boolean;

        if array != null goto label1;

        return null;

     label1:
        $stack5 = lengthof array;

        if $stack5 != 0 goto label2;

        $stack13 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        return $stack13;

     label2:
        $stack6 = lengthof array;

        result = newarray (boolean)[$stack6];

        i = 0;

     label3:
        $stack7 = lengthof array;

        if i >= $stack7 goto label6;

        b = array[i];

        $stack11 = i;

        if b != null goto label4;

        $stack8 = valueForNull;

        goto label5;

     label4:
        $stack8 = virtualinvoke b.<java.lang.Boolean: boolean booleanValue()>();

     label5:
        result[$stack11] = $stack8;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static java.lang.Boolean[] toObject(boolean[])
    {
        boolean[] array;
        java.lang.Boolean[] result, $stack12;
        int $stack3, $stack4, $stack5, $stack10, i;
        java.lang.Boolean $stack7;
        boolean $stack6;

        array := @parameter0: boolean[];

        if array != null goto label1;

        return null;

     label1:
        $stack3 = lengthof array;

        if $stack3 != 0 goto label2;

        $stack12 = <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;

        return $stack12;

     label2:
        $stack4 = lengthof array;

        result = newarray (java.lang.Boolean)[$stack4];

        i = 0;

     label3:
        $stack5 = lengthof array;

        if i >= $stack5 goto label6;

        $stack10 = i;

        $stack6 = array[i];

        if $stack6 == 0 goto label4;

        $stack7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label5;

     label4:
        $stack7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label5:
        result[$stack10] = $stack7;

        i = i + 1;

        goto label3;

     label6:
        return result;
    }

    public static boolean isEmpty(java.lang.Object[])
    {
        int $stack1;
        java.lang.Object[] array;
        boolean $stack2;

        array := @parameter0: java.lang.Object[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(long[])
    {
        int $stack1;
        long[] array;
        boolean $stack2;

        array := @parameter0: long[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(int[])
    {
        int $stack1;
        int[] array;
        boolean $stack2;

        array := @parameter0: int[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(short[])
    {
        int $stack1;
        short[] array;
        boolean $stack2;

        array := @parameter0: short[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(char[])
    {
        int $stack1;
        char[] array;
        boolean $stack2;

        array := @parameter0: char[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(byte[])
    {
        int $stack1;
        byte[] array;
        boolean $stack2;

        array := @parameter0: byte[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(double[])
    {
        double[] array;
        int $stack1;
        boolean $stack2;

        array := @parameter0: double[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(float[])
    {
        int $stack1;
        float[] array;
        boolean $stack2;

        array := @parameter0: float[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isEmpty(boolean[])
    {
        boolean[] array;
        int $stack1;
        boolean $stack2;

        array := @parameter0: boolean[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 != 0 goto label2;

     label1:
        $stack2 = 1;

        goto label3;

     label2:
        $stack2 = 0;

     label3:
        return $stack2;
    }

    public static boolean isNotEmpty(java.lang.Object[])
    {
        int $stack1;
        java.lang.Object[] array;
        boolean $stack2;

        array := @parameter0: java.lang.Object[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(long[])
    {
        int $stack1;
        long[] array;
        boolean $stack2;

        array := @parameter0: long[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(int[])
    {
        int $stack1;
        int[] array;
        boolean $stack2;

        array := @parameter0: int[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(short[])
    {
        int $stack1;
        short[] array;
        boolean $stack2;

        array := @parameter0: short[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(char[])
    {
        int $stack1;
        char[] array;
        boolean $stack2;

        array := @parameter0: char[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(byte[])
    {
        int $stack1;
        byte[] array;
        boolean $stack2;

        array := @parameter0: byte[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(double[])
    {
        double[] array;
        int $stack1;
        boolean $stack2;

        array := @parameter0: double[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(float[])
    {
        int $stack1;
        float[] array;
        boolean $stack2;

        array := @parameter0: float[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static boolean isNotEmpty(boolean[])
    {
        boolean[] array;
        int $stack1;
        boolean $stack2;

        array := @parameter0: boolean[];

        if array == null goto label1;

        $stack1 = lengthof array;

        if $stack1 == 0 goto label1;

        $stack2 = 1;

        goto label2;

     label1:
        $stack2 = 0;

     label2:
        return $stack2;
    }

    public static transient java.lang.Object[] addAll(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] array1, array2, $stack12, joinedArray, $stack16, $stack17;
        int $stack8, $stack9, $stack10, $stack13, $stack14, $stack15;
        java.lang.String $stack25, $stack28, $stack30;
        boolean $stack21;
        java.lang.IllegalArgumentException $stack22;
        java.lang.Class $stack6, $stack7, $stack19, $stack20;
        java.lang.Object $stack11;
        java.lang.StringBuilder $stack23, $stack24, $stack26, $stack27, $stack29;
        java.lang.ArrayStoreException $stack18;

        array1 := @parameter0: java.lang.Object[];

        array2 := @parameter1: java.lang.Object[];

        if array1 != null goto label1;

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(array2);

        return $stack17;

     label1:
        if array2 != null goto label2;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(array1);

        return $stack16;

     label2:
        $stack6 = virtualinvoke array1.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.Class getComponentType()>();

        $stack9 = lengthof array1;

        $stack8 = lengthof array2;

        $stack10 = $stack9 + $stack8;

        $stack11 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($stack7, $stack10);

        $stack12 = (java.lang.Object[]) $stack11;

        joinedArray = (java.lang.Object[]) $stack12;

        $stack13 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack13);

     label3:
        $stack15 = lengthof array1;

        $stack14 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack15, $stack14);

     label4:
        goto label7;

     label5:
        $stack18 := @caughtexception;

        $stack19 = virtualinvoke array2.<java.lang.Object: java.lang.Class getClass()>();

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.Class getComponentType()>();

        $stack21 = virtualinvoke $stack7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($stack20);

        if $stack21 != 0 goto label6;

        $stack22 = new java.lang.IllegalArgumentException;

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>()>();

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot store ");

        $stack25 = virtualinvoke $stack20.<java.lang.Class: java.lang.String getName()>();

        $stack26 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25);

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in an array of ");

        $stack28 = virtualinvoke $stack7.<java.lang.Class: java.lang.String getName()>();

        $stack29 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack28);

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($stack30, $stack18);

        throw $stack22;

     label6:
        throw $stack18;

     label7:
        return joinedArray;

        catch java.lang.ArrayStoreException from label3 to label4 with label5;
    }

    public static transient boolean[] addAll(boolean[], boolean[])
    {
        boolean[] array1, array2, joinedArray, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        array1 := @parameter0: boolean[];

        array2 := @parameter1: boolean[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (boolean)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static transient char[] addAll(char[], char[])
    {
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        char[] array1, array2, joinedArray, $stack9, $stack10;

        array1 := @parameter0: char[];

        array2 := @parameter1: char[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (char)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static transient byte[] addAll(byte[], byte[])
    {
        byte[] array1, array2, joinedArray, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        array1 := @parameter0: byte[];

        array2 := @parameter1: byte[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (byte)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static transient short[] addAll(short[], short[])
    {
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;
        short[] array1, array2, joinedArray, $stack9, $stack10;

        array1 := @parameter0: short[];

        array2 := @parameter1: short[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (short)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static transient int[] addAll(int[], int[])
    {
        int[] array1, array2, joinedArray, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        array1 := @parameter0: int[];

        array2 := @parameter1: int[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (int)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static transient long[] addAll(long[], long[])
    {
        long[] array1, array2, joinedArray, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        array1 := @parameter0: long[];

        array2 := @parameter1: long[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (long)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static transient float[] addAll(float[], float[])
    {
        float[] array1, array2, joinedArray, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        array1 := @parameter0: float[];

        array2 := @parameter1: float[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (float)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static transient double[] addAll(double[], double[])
    {
        double[] array1, array2, joinedArray, $stack9, $stack10;
        int $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;

        array1 := @parameter0: double[];

        array2 := @parameter1: double[];

        if array1 != null goto label1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(array2);

        return $stack10;

     label1:
        if array2 != null goto label2;

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(array1);

        return $stack9;

     label2:
        $stack4 = lengthof array1;

        $stack3 = lengthof array2;

        $stack5 = $stack4 + $stack3;

        joinedArray = newarray (double)[$stack5];

        $stack6 = lengthof array1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array1, 0, joinedArray, 0, $stack6);

        $stack8 = lengthof array1;

        $stack7 = lengthof array2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array2, 0, joinedArray, $stack8, $stack7);

        return joinedArray;
    }

    public static java.lang.Object[] add(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] array, $stack7, $stack13;
        java.lang.IllegalArgumentException $stack4;
        int $stack8, $stack9;
        java.lang.Object element, $stack6;
        java.lang.Class type;

        array := @parameter0: java.lang.Object[];

        element := @parameter1: java.lang.Object;

        if array == null goto label1;

        type = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        goto label3;

     label1:
        if element == null goto label2;

        type = virtualinvoke element.<java.lang.Object: java.lang.Class getClass()>();

        goto label3;

     label2:
        $stack4 = new java.lang.IllegalArgumentException;

        specialinvoke $stack4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Arguments cannot both be null");

        throw $stack4;

     label3:
        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, type);

        $stack7 = (java.lang.Object[]) $stack6;

        $stack13 = (java.lang.Object[]) $stack7;

        $stack8 = lengthof $stack13;

        $stack9 = $stack8 - 1;

        $stack13[$stack9] = element;

        return $stack13;
    }

    public static boolean[] add(boolean[], boolean)
    {
        boolean[] array, $stack5, newArray;
        int $stack6, $stack7;
        java.lang.Class $stack3;
        java.lang.Object $stack4;
        boolean element;

        array := @parameter0: boolean[];

        element := @parameter1: boolean;

        $stack3 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack3);

        $stack5 = (boolean[]) $stack4;

        newArray = (boolean[]) $stack5;

        $stack6 = lengthof newArray;

        $stack7 = $stack6 - 1;

        newArray[$stack7] = element;

        return newArray;
    }

    public static byte[] add(byte[], byte)
    {
        byte[] array, $stack5, newArray;
        byte element;
        int $stack6, $stack7;
        java.lang.Class $stack3;
        java.lang.Object $stack4;

        array := @parameter0: byte[];

        element := @parameter1: byte;

        $stack3 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack3);

        $stack5 = (byte[]) $stack4;

        newArray = (byte[]) $stack5;

        $stack6 = lengthof newArray;

        $stack7 = $stack6 - 1;

        newArray[$stack7] = element;

        return newArray;
    }

    public static char[] add(char[], char)
    {
        char element;
        int $stack6, $stack7;
        char[] array, $stack5, newArray;
        java.lang.Class $stack3;
        java.lang.Object $stack4;

        array := @parameter0: char[];

        element := @parameter1: char;

        $stack3 = <java.lang.Character: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack3);

        $stack5 = (char[]) $stack4;

        newArray = (char[]) $stack5;

        $stack6 = lengthof newArray;

        $stack7 = $stack6 - 1;

        newArray[$stack7] = element;

        return newArray;
    }

    public static double[] add(double[], double)
    {
        double[] array, $stack6, newArray;
        int $stack7, $stack8;
        java.lang.Class $stack4;
        java.lang.Object $stack5;
        double element;

        array := @parameter0: double[];

        element := @parameter1: double;

        $stack4 = <java.lang.Double: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack4);

        $stack6 = (double[]) $stack5;

        newArray = (double[]) $stack6;

        $stack7 = lengthof newArray;

        $stack8 = $stack7 - 1;

        newArray[$stack8] = element;

        return newArray;
    }

    public static float[] add(float[], float)
    {
        float[] array, $stack5, newArray;
        int $stack6, $stack7;
        float element;
        java.lang.Class $stack3;
        java.lang.Object $stack4;

        array := @parameter0: float[];

        element := @parameter1: float;

        $stack3 = <java.lang.Float: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack3);

        $stack5 = (float[]) $stack4;

        newArray = (float[]) $stack5;

        $stack6 = lengthof newArray;

        $stack7 = $stack6 - 1;

        newArray[$stack7] = element;

        return newArray;
    }

    public static int[] add(int[], int)
    {
        int[] array, $stack5, newArray;
        int $stack6, element, $stack7;
        java.lang.Class $stack3;
        java.lang.Object $stack4;

        array := @parameter0: int[];

        element := @parameter1: int;

        $stack3 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack3);

        $stack5 = (int[]) $stack4;

        newArray = (int[]) $stack5;

        $stack6 = lengthof newArray;

        $stack7 = $stack6 - 1;

        newArray[$stack7] = element;

        return newArray;
    }

    public static long[] add(long[], long)
    {
        long element;
        long[] array, $stack6, newArray;
        int $stack7, $stack8;
        java.lang.Class $stack4;
        java.lang.Object $stack5;

        array := @parameter0: long[];

        element := @parameter1: long;

        $stack4 = <java.lang.Long: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack4);

        $stack6 = (long[]) $stack5;

        newArray = (long[]) $stack6;

        $stack7 = lengthof newArray;

        $stack8 = $stack7 - 1;

        newArray[$stack8] = element;

        return newArray;
    }

    public static short[] add(short[], short)
    {
        short element;
        int $stack6, $stack7;
        java.lang.Class $stack3;
        java.lang.Object $stack4;
        short[] array, $stack5, newArray;

        array := @parameter0: short[];

        element := @parameter1: short;

        $stack3 = <java.lang.Short: java.lang.Class TYPE>;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object copyArrayGrow1(java.lang.Object,java.lang.Class)>(array, $stack3);

        $stack5 = (short[]) $stack4;

        newArray = (short[]) $stack5;

        $stack6 = lengthof newArray;

        $stack7 = $stack6 - 1;

        newArray[$stack7] = element;

        return newArray;
    }

    private static java.lang.Object copyArrayGrow1(java.lang.Object, java.lang.Class)
    {
        int $stack5, $stack8;
        java.lang.Object array, $stack4, $stack9;
        java.lang.Class newArrayComponentType, $stack6, $stack7;

        array := @parameter0: java.lang.Object;

        newArrayComponentType := @parameter1: java.lang.Class;

        if array == null goto label1;

        $stack5 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(array);

        $stack6 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = virtualinvoke $stack6.<java.lang.Class: java.lang.Class getComponentType()>();

        $stack8 = $stack5 + 1;

        $stack9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($stack7, $stack8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, 0, $stack9, 0, $stack5);

        return $stack9;

     label1:
        $stack4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(newArrayComponentType, 1);

        return $stack4;
    }

    public static java.lang.Object[] add(java.lang.Object[], int, java.lang.Object)
    {
        java.lang.Object[] array, $stack8, $stack15;
        java.lang.IllegalArgumentException $stack5;
        int index;
        java.lang.Object element, $stack7;
        java.lang.Class $stack9, clss;

        array := @parameter0: java.lang.Object[];

        index := @parameter1: int;

        element := @parameter2: java.lang.Object;

        if array == null goto label1;

        $stack9 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        clss = virtualinvoke $stack9.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label3;

     label1:
        if element == null goto label2;

        clss = virtualinvoke element.<java.lang.Object: java.lang.Class getClass()>();

        goto label3;

     label2:
        $stack5 = new java.lang.IllegalArgumentException;

        specialinvoke $stack5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array and element cannot both be null");

        throw $stack5;

     label3:
        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, element, clss);

        $stack8 = (java.lang.Object[]) $stack7;

        $stack15 = (java.lang.Object[]) $stack8;

        return $stack15;
    }

    public static boolean[] add(boolean[], int, boolean)
    {
        boolean[] array, $stack6, $stack7;
        int index;
        java.lang.Boolean $stack3;
        java.lang.Class $stack4;
        java.lang.Object $stack5;
        boolean element;

        array := @parameter0: boolean[];

        index := @parameter1: int;

        element := @parameter2: boolean;

        $stack3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(element);

        $stack4 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack3, $stack4);

        $stack6 = (boolean[]) $stack5;

        $stack7 = (boolean[]) $stack6;

        return $stack7;
    }

    public static char[] add(char[], int, char)
    {
        char element;
        java.lang.Character $stack3;
        int index;
        char[] array, $stack6, $stack7;
        java.lang.Class $stack4;
        java.lang.Object $stack5;

        array := @parameter0: char[];

        index := @parameter1: int;

        element := @parameter2: char;

        $stack3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(element);

        $stack4 = <java.lang.Character: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack3, $stack4);

        $stack6 = (char[]) $stack5;

        $stack7 = (char[]) $stack6;

        return $stack7;
    }

    public static byte[] add(byte[], int, byte)
    {
        byte[] array, $stack6, $stack7;
        byte element;
        int index;
        java.lang.Class $stack4;
        java.lang.Object $stack5;
        java.lang.Byte $stack3;

        array := @parameter0: byte[];

        index := @parameter1: int;

        element := @parameter2: byte;

        $stack3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(element);

        $stack4 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack3, $stack4);

        $stack6 = (byte[]) $stack5;

        $stack7 = (byte[]) $stack6;

        return $stack7;
    }

    public static short[] add(short[], int, short)
    {
        short element;
        java.lang.Short $stack3;
        int index;
        java.lang.Class $stack4;
        java.lang.Object $stack5;
        short[] array, $stack6, $stack7;

        array := @parameter0: short[];

        index := @parameter1: int;

        element := @parameter2: short;

        $stack3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(element);

        $stack4 = <java.lang.Short: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack3, $stack4);

        $stack6 = (short[]) $stack5;

        $stack7 = (short[]) $stack6;

        return $stack7;
    }

    public static int[] add(int[], int, int)
    {
        java.lang.Integer $stack3;
        int[] array, $stack6, $stack7;
        int index, element;
        java.lang.Class $stack4;
        java.lang.Object $stack5;

        array := @parameter0: int[];

        index := @parameter1: int;

        element := @parameter2: int;

        $stack3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(element);

        $stack4 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack3, $stack4);

        $stack6 = (int[]) $stack5;

        $stack7 = (int[]) $stack6;

        return $stack7;
    }

    public static long[] add(long[], int, long)
    {
        long element;
        long[] array, $stack7, $stack8;
        java.lang.Long $stack4;
        int index;
        java.lang.Class $stack5;
        java.lang.Object $stack6;

        array := @parameter0: long[];

        index := @parameter1: int;

        element := @parameter2: long;

        $stack4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(element);

        $stack5 = <java.lang.Long: java.lang.Class TYPE>;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack4, $stack5);

        $stack7 = (long[]) $stack6;

        $stack8 = (long[]) $stack7;

        return $stack8;
    }

    public static float[] add(float[], int, float)
    {
        java.lang.Float $stack3;
        float[] array, $stack6, $stack7;
        int index;
        float element;
        java.lang.Class $stack4;
        java.lang.Object $stack5;

        array := @parameter0: float[];

        index := @parameter1: int;

        element := @parameter2: float;

        $stack3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(element);

        $stack4 = <java.lang.Float: java.lang.Class TYPE>;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack3, $stack4);

        $stack6 = (float[]) $stack5;

        $stack7 = (float[]) $stack6;

        return $stack7;
    }

    public static double[] add(double[], int, double)
    {
        java.lang.Double $stack4;
        double[] array, $stack7, $stack8;
        int index;
        java.lang.Class $stack5;
        java.lang.Object $stack6;
        double element;

        array := @parameter0: double[];

        index := @parameter1: int;

        element := @parameter2: double;

        $stack4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(element);

        $stack5 = <java.lang.Double: java.lang.Class TYPE>;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object add(java.lang.Object,int,java.lang.Object,java.lang.Class)>(array, index, $stack4, $stack5);

        $stack7 = (double[]) $stack6;

        $stack8 = (double[]) $stack7;

        return $stack8;
    }

    private static java.lang.Object add(java.lang.Object, int, java.lang.Object, java.lang.Class)
    {
        java.lang.IndexOutOfBoundsException $stack7, $stack24;
        int $stack6, index, $stack14, $stack16, $stack17;
        java.lang.String $stack13, $stack29;
        java.lang.Object array, $stack15, element, $stack23;
        java.lang.StringBuilder $stack8, $stack9, $stack10, $stack11, $stack12, $stack25, $stack26, $stack27, $stack28;
        java.lang.Class clss;

        array := @parameter0: java.lang.Object;

        index := @parameter1: int;

        element := @parameter2: java.lang.Object;

        clss := @parameter3: java.lang.Class;

        if array != null goto label2;

        if index == 0 goto label1;

        $stack24 = new java.lang.IndexOutOfBoundsException;

        $stack25 = new java.lang.StringBuilder;

        specialinvoke $stack25.<java.lang.StringBuilder: void <init>()>();

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Length: 0");

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack24.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($stack29);

        throw $stack24;

     label1:
        $stack23 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(clss, 1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($stack23, 0, element);

        return $stack23;

     label2:
        $stack6 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(array);

        if index > $stack6 goto label3;

        if index >= 0 goto label4;

     label3:
        $stack7 = new java.lang.IndexOutOfBoundsException;

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Length: ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack6);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($stack13);

        throw $stack7;

     label4:
        $stack14 = $stack6 + 1;

        $stack15 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(clss, $stack14);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, 0, $stack15, 0, index);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($stack15, index, element);

        if index >= $stack6 goto label5;

        $stack17 = index + 1;

        $stack16 = $stack6 - index;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, index, $stack15, $stack17, $stack16);

     label5:
        return $stack15;
    }

    public static java.lang.Object[] remove(java.lang.Object[], int)
    {
        java.lang.Object[] array, $stack3, $stack4;
        int index;
        java.lang.Object $stack2;

        array := @parameter0: java.lang.Object[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (java.lang.Object[]) $stack2;

        $stack4 = (java.lang.Object[]) $stack3;

        return $stack4;
    }

    public static java.lang.Object[] removeElement(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] array, $stack4, $stack5;
        int $stack3, $i0;
        java.lang.Object element;

        array := @parameter0: java.lang.Object[];

        element := @parameter1: java.lang.Object;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(array, element);

        $i0 = (int) -1;

        if $stack3 != $i0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(array);

        return $stack5;

     label1:
        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] remove(java.lang.Object[],int)>(array, $stack3);

        return $stack4;
    }

    public static boolean[] remove(boolean[], int)
    {
        boolean[] array, $stack3, $stack4;
        int index;
        java.lang.Object $stack2;

        array := @parameter0: boolean[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (boolean[]) $stack2;

        $stack4 = (boolean[]) $stack3;

        return $stack4;
    }

    public static boolean[] removeElement(boolean[], boolean)
    {
        boolean[] array, $stack4, $stack5;
        int $stack3, $i0;
        boolean element;

        array := @parameter0: boolean[];

        element := @parameter1: boolean;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>(array, element);

        $i0 = (int) -1;

        if $stack3 != $i0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(array);

        return $stack5;

     label1:
        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] remove(boolean[],int)>(array, $stack3);

        return $stack4;
    }

    public static byte[] remove(byte[], int)
    {
        byte[] array, $stack3, $stack4;
        int index;
        java.lang.Object $stack2;

        array := @parameter0: byte[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (byte[]) $stack2;

        $stack4 = (byte[]) $stack3;

        return $stack4;
    }

    public static byte[] removeElement(byte[], byte)
    {
        byte[] array, $stack4, $stack5;
        byte element;
        int $stack3, $i0;

        array := @parameter0: byte[];

        element := @parameter1: byte;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>(array, element);

        $i0 = (int) -1;

        if $stack3 != $i0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(array);

        return $stack5;

     label1:
        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] remove(byte[],int)>(array, $stack3);

        return $stack4;
    }

    public static char[] remove(char[], int)
    {
        int index;
        char[] array, $stack3, $stack4;
        java.lang.Object $stack2;

        array := @parameter0: char[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (char[]) $stack2;

        $stack4 = (char[]) $stack3;

        return $stack4;
    }

    public static char[] removeElement(char[], char)
    {
        int $stack3, $i0;
        char[] array, $stack4, $stack5;
        char element;

        array := @parameter0: char[];

        element := @parameter1: char;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>(array, element);

        $i0 = (int) -1;

        if $stack3 != $i0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(array);

        return $stack5;

     label1:
        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] remove(char[],int)>(array, $stack3);

        return $stack4;
    }

    public static double[] remove(double[], int)
    {
        double[] array, $stack3, $stack4;
        int index;
        java.lang.Object $stack2;

        array := @parameter0: double[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (double[]) $stack2;

        $stack4 = (double[]) $stack3;

        return $stack4;
    }

    public static double[] removeElement(double[], double)
    {
        double[] array, $stack5, $stack6;
        int $stack4, $i0;
        double element;

        array := @parameter0: double[];

        element := @parameter1: double;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>(array, element);

        $i0 = (int) -1;

        if $stack4 != $i0 goto label1;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(array);

        return $stack6;

     label1:
        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] remove(double[],int)>(array, $stack4);

        return $stack5;
    }

    public static float[] remove(float[], int)
    {
        int index;
        float[] array, $stack3, $stack4;
        java.lang.Object $stack2;

        array := @parameter0: float[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (float[]) $stack2;

        $stack4 = (float[]) $stack3;

        return $stack4;
    }

    public static float[] removeElement(float[], float)
    {
        int $stack3, $i0;
        float element;
        float[] array, $stack4, $stack5;

        array := @parameter0: float[];

        element := @parameter1: float;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>(array, element);

        $i0 = (int) -1;

        if $stack3 != $i0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(array);

        return $stack5;

     label1:
        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] remove(float[],int)>(array, $stack3);

        return $stack4;
    }

    public static int[] remove(int[], int)
    {
        int[] array, $stack3, $stack4;
        int index;
        java.lang.Object $stack2;

        array := @parameter0: int[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (int[]) $stack2;

        $stack4 = (int[]) $stack3;

        return $stack4;
    }

    public static int[] removeElement(int[], int)
    {
        int[] array, $stack4, $stack5;
        int element, $stack3, $i0;

        array := @parameter0: int[];

        element := @parameter1: int;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>(array, element);

        $i0 = (int) -1;

        if $stack3 != $i0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(array);

        return $stack5;

     label1:
        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] remove(int[],int)>(array, $stack3);

        return $stack4;
    }

    public static long[] remove(long[], int)
    {
        long[] array, $stack3, $stack4;
        int index;
        java.lang.Object $stack2;

        array := @parameter0: long[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (long[]) $stack2;

        $stack4 = (long[]) $stack3;

        return $stack4;
    }

    public static long[] removeElement(long[], long)
    {
        long[] array, $stack5, $stack6;
        int $stack4, $i0;
        long element;

        array := @parameter0: long[];

        element := @parameter1: long;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>(array, element);

        $i0 = (int) -1;

        if $stack4 != $i0 goto label1;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(array);

        return $stack6;

     label1:
        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] remove(long[],int)>(array, $stack4);

        return $stack5;
    }

    public static short[] remove(short[], int)
    {
        int index;
        java.lang.Object $stack2;
        short[] array, $stack3, $stack4;

        array := @parameter0: short[];

        index := @parameter1: int;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object remove(java.lang.Object,int)>(array, index);

        $stack3 = (short[]) $stack2;

        $stack4 = (short[]) $stack3;

        return $stack4;
    }

    public static short[] removeElement(short[], short)
    {
        short element;
        int $stack3, $i0;
        short[] array, $stack4, $stack5;

        array := @parameter0: short[];

        element := @parameter1: short;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>(array, element);

        $i0 = (int) -1;

        if $stack3 != $i0 goto label1;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(array);

        return $stack5;

     label1:
        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] remove(short[],int)>(array, $stack3);

        return $stack4;
    }

    private static java.lang.Object remove(java.lang.Object, int)
    {
        java.lang.IndexOutOfBoundsException $stack5;
        int $stack4, index, $stack14, $stack16, $stack17, $stack18, $stack19;
        java.lang.String $stack11;
        java.lang.Object array, $stack15;
        java.lang.StringBuilder $stack6, $stack7, $stack8, $stack9, $stack10;
        java.lang.Class $stack12, $stack13;

        array := @parameter0: java.lang.Object;

        index := @parameter1: int;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(array);

        if index < 0 goto label1;

        if index < $stack4 goto label2;

     label1:
        $stack5 = new java.lang.IndexOutOfBoundsException;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Length: ");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack4);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($stack11);

        throw $stack5;

     label2:
        $stack12 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $stack13 = virtualinvoke $stack12.<java.lang.Class: java.lang.Class getComponentType()>();

        $stack14 = $stack4 - 1;

        $stack15 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($stack13, $stack14);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, 0, $stack15, 0, index);

        $stack16 = $stack4 - 1;

        if index >= $stack16 goto label3;

        $stack19 = index + 1;

        $stack17 = $stack4 - index;

        $stack18 = $stack17 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, $stack19, $stack15, index, $stack18);

     label3:
        return $stack15;
    }

    public static transient java.lang.Object[] removeAll(java.lang.Object[], int[])
    {
        java.lang.Object[] array, $stack4, $stack5;
        int[] indices, $stack2;
        java.lang.Object $stack3;

        array := @parameter0: java.lang.Object[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (java.lang.Object[]) $stack3;

        $stack5 = (java.lang.Object[]) $stack4;

        return $stack5;
    }

    public static transient java.lang.Object[] removeElements(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] array, $stack11, values, $stack20;
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack36, count;
        java.util.HashMap $stack13;
        java.lang.Integer $stack29;
        java.util.HashSet $stack15;
        int[] $stack19;
        int $stack14, $stack25, $stack27, len$, i$, count#10, i;
        boolean $stack10, $stack12, $stack18;
        java.util.Map$Entry i$#8;
        java.util.Iterator $stack17;
        java.util.Set $stack16;
        java.lang.Object $stack21, $stack22, $stack23, $stack33, v;

        array := @parameter0: java.lang.Object[];

        values := @parameter1: java.lang.Object[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack33 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack33;

        if count != null goto label04;

        $stack36 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack36.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v, $stack36);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#8 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#8.<java.util.Map$Entry: java.lang.Object getKey()>();

        count#10 = 0;

        i = 0;

        $stack23 = interfaceinvoke i$#8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if i >= $stack25 goto label10;

        $stack27 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(array, $stack22, count#10);

        if $stack27 >= 0 goto label09;

        goto label10;

     label09:
        count#10 = $stack27 + 1;

        $stack29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack27);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack29);

        i = i + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient byte[] removeAll(byte[], int[])
    {
        byte[] array, $stack4, $stack5;
        int[] indices, $stack2;
        java.lang.Object $stack3;

        array := @parameter0: byte[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (byte[]) $stack3;

        $stack5 = (byte[]) $stack4;

        return $stack5;
    }

    public static transient byte[] removeElements(byte[], byte[])
    {
        byte[] array, $stack11, values, $stack20;
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30;
        byte $stack27, v;
        int[] $stack19;
        java.lang.Byte $stack34, v#10;
        boolean $stack10, $stack12, $stack18;
        java.util.Set $stack16;
        java.util.HashMap $stack13;
        java.util.HashSet $stack15;
        int $stack14, $stack25, $stack28, len$, i$, boxed, count#12;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: byte[];

        values := @parameter1: byte[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Byte) $stack22;

        boxed = 0;

        count#12 = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if count#12 >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Byte: byte byteValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>(array, $stack27, boxed);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        boxed = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        count#12 = count#12 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] removeAll(byte[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient short[] removeAll(short[], int[])
    {
        int[] indices, $stack2;
        java.lang.Object $stack3;
        short[] array, $stack4, $stack5;

        array := @parameter0: short[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (short[]) $stack3;

        $stack5 = (short[]) $stack4;

        return $stack5;
    }

    public static transient short[] removeElements(short[], short[])
    {
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30;
        int[] $stack19;
        java.lang.Short $stack34, v#10;
        boolean $stack10, $stack12, $stack18;
        java.util.Set $stack16;
        short[] array, $stack11, values, $stack20;
        java.util.HashMap $stack13;
        java.util.HashSet $stack15;
        short $stack27, v;
        int $stack14, $stack25, $stack28, len$, i$, boxed, count#12;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: short[];

        values := @parameter1: short[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Short) $stack22;

        boxed = 0;

        count#12 = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if count#12 >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Short: short shortValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>(array, $stack27, boxed);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        boxed = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        count#12 = count#12 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] removeAll(short[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient int[] removeAll(int[], int[])
    {
        int[] array, indices, $stack2, $stack4, $stack5;
        java.lang.Object $stack3;

        array := @parameter0: int[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (int[]) $stack3;

        $stack5 = (int[]) $stack4;

        return $stack5;
    }

    public static transient int[] removeElements(int[], int[])
    {
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30, $stack34, v#10;
        int[] array, $stack11, values, $stack19, $stack20;
        boolean $stack10, $stack12, $stack18;
        java.util.Set $stack16;
        java.util.HashMap $stack13;
        java.util.HashSet $stack15;
        int $stack14, $stack25, $stack27, $stack28, len$, i$, v, boxed, count#12;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: int[];

        values := @parameter1: int[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Integer) $stack22;

        boxed = 0;

        count#12 = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if count#12 >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Integer: int intValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>(array, $stack27, boxed);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        boxed = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        count#12 = count#12 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] removeAll(int[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient char[] removeAll(char[], int[])
    {
        int[] indices, $stack2;
        char[] array, $stack4, $stack5;
        java.lang.Object $stack3;

        array := @parameter0: char[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (char[]) $stack3;

        $stack5 = (char[]) $stack4;

        return $stack5;
    }

    public static transient char[] removeElements(char[], char[])
    {
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30;
        java.lang.Character $stack34, v#10;
        int[] $stack19;
        boolean $stack10, $stack12, $stack18;
        java.util.Set $stack16;
        java.util.HashMap $stack13;
        java.util.HashSet $stack15;
        int $stack14, $stack25, $stack28, len$, i$, boxed, count#12;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        char $stack27, v;
        char[] array, $stack11, values, $stack20;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: char[];

        values := @parameter1: char[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Character) $stack22;

        boxed = 0;

        count#12 = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if count#12 >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Character: char charValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>(array, $stack27, boxed);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        boxed = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        count#12 = count#12 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] removeAll(char[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient long[] removeAll(long[], int[])
    {
        long[] array, $stack4, $stack5;
        int[] indices, $stack2;
        java.lang.Object $stack3;

        array := @parameter0: long[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (long[]) $stack3;

        $stack5 = (long[]) $stack4;

        return $stack5;
    }

    public static transient long[] removeElements(long[], long[])
    {
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30;
        int[] $stack19;
        java.lang.Long $stack34, v#10;
        boolean $stack10, $stack12, $stack18;
        java.util.Set $stack16;
        java.util.HashMap $stack13;
        long $stack27, v;
        java.util.HashSet $stack15;
        long[] array, $stack11, values, $stack20;
        int $stack14, $stack25, $stack28, len$, i$, found, boxed;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: long[];

        values := @parameter1: long[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Long) $stack22;

        found = 0;

        boxed = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if boxed >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Long: long longValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>(array, $stack27, found);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        found = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        boxed = boxed + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] removeAll(long[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient float[] removeAll(float[], int[])
    {
        int[] indices, $stack2;
        float[] array, $stack4, $stack5;
        java.lang.Object $stack3;

        array := @parameter0: float[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (float[]) $stack3;

        $stack5 = (float[]) $stack4;

        return $stack5;
    }

    public static transient float[] removeElements(float[], float[])
    {
        java.lang.Float $stack34, v#10;
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30;
        int[] $stack19;
        boolean $stack10, $stack12, $stack18;
        java.util.Set $stack16;
        float $stack27, v;
        float[] array, $stack11, values, $stack20;
        java.util.HashMap $stack13;
        java.util.HashSet $stack15;
        int $stack14, $stack25, $stack28, len$, i$, boxed, count#12;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: float[];

        values := @parameter1: float[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Float) $stack22;

        boxed = 0;

        count#12 = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if count#12 >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Float: float floatValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>(array, $stack27, boxed);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        boxed = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        count#12 = count#12 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] removeAll(float[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient double[] removeAll(double[], int[])
    {
        int[] indices, $stack2;
        double[] array, $stack4, $stack5;
        java.lang.Object $stack3;

        array := @parameter0: double[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (double[]) $stack3;

        $stack5 = (double[]) $stack4;

        return $stack5;
    }

    public static transient double[] removeElements(double[], double[])
    {
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30;
        int[] $stack19;
        boolean $stack10, $stack12, $stack18;
        java.util.Set $stack16;
        java.lang.Double $stack34, v#10;
        double[] array, $stack11, values, $stack20;
        java.util.HashMap $stack13;
        java.util.HashSet $stack15;
        int $stack14, $stack25, $stack28, len$, i$, found, boxed;
        double $stack27, v;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: double[];

        values := @parameter1: double[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Double) $stack22;

        found = 0;

        boxed = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if boxed >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Double: double doubleValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>(array, $stack27, found);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        found = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        boxed = boxed + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] removeAll(double[],int[])>(array, $stack19);

        return $stack20;
    }

    public static transient boolean[] removeAll(boolean[], int[])
    {
        int[] indices, $stack2;
        boolean[] array, $stack4, $stack5;
        java.lang.Object $stack3;

        array := @parameter0: boolean[];

        indices := @parameter1: int[];

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>(indices);

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object removeAll(java.lang.Object,int[])>(array, $stack2);

        $stack4 = (boolean[]) $stack3;

        $stack5 = (boolean[]) $stack4;

        return $stack5;
    }

    public static transient boolean[] removeElements(boolean[], boolean[])
    {
        org.apache.commons.lang3.mutable.MutableInt $stack24, $stack38, count;
        java.lang.Integer $stack30;
        int[] $stack19;
        boolean $stack10, $stack12, $stack18, $stack27, v;
        java.util.Set $stack16;
        java.util.HashMap $stack13;
        java.util.HashSet $stack15;
        int $stack14, $stack25, $stack28, len$, i$, boxed, count#12;
        java.lang.Boolean $stack34, v#10;
        java.util.Map$Entry i$#9;
        java.util.Iterator $stack17;
        boolean[] array, $stack11, values, $stack20;
        java.lang.Object $stack21, $stack22, $stack23, $stack35;

        array := @parameter0: boolean[];

        values := @parameter1: boolean[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(array);

        if $stack10 != 0 goto label01;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(values);

        if $stack12 == 0 goto label02;

     label01:
        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>(array);

        return $stack11;

     label02:
        $stack13 = new java.util.HashMap;

        $stack14 = lengthof values;

        specialinvoke $stack13.<java.util.HashMap: void <init>(int)>($stack14);

        len$ = lengthof values;

        i$ = 0;

     label03:
        if i$ >= len$ goto label06;

        v = values[i$];

        $stack34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v);

        $stack35 = virtualinvoke $stack13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack34);

        count = (org.apache.commons.lang3.mutable.MutableInt) $stack35;

        if count != null goto label04;

        $stack38 = new org.apache.commons.lang3.mutable.MutableInt;

        specialinvoke $stack38.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);

        virtualinvoke $stack13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack34, $stack38);

        goto label05;

     label04:
        virtualinvoke count.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();

     label05:
        i$ = i$ + 1;

        goto label03;

     label06:
        $stack15 = new java.util.HashSet;

        specialinvoke $stack15.<java.util.HashSet: void <init>()>();

        $stack16 = virtualinvoke $stack13.<java.util.HashMap: java.util.Set entrySet()>();

        $stack17 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $stack18 = interfaceinvoke $stack17.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label11;

        $stack21 = interfaceinvoke $stack17.<java.util.Iterator: java.lang.Object next()>();

        i$#9 = (java.util.Map$Entry) $stack21;

        $stack22 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getKey()>();

        v#10 = (java.lang.Boolean) $stack22;

        boxed = 0;

        count#12 = 0;

        $stack23 = interfaceinvoke i$#9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $stack24 = (org.apache.commons.lang3.mutable.MutableInt) $stack23;

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();

     label08:
        if count#12 >= $stack25 goto label10;

        $stack27 = virtualinvoke v#10.<java.lang.Boolean: boolean booleanValue()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>(array, $stack27, boxed);

        if $stack28 >= 0 goto label09;

        goto label10;

     label09:
        boxed = $stack28 + 1;

        $stack30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack28);

        virtualinvoke $stack15.<java.util.HashSet: boolean add(java.lang.Object)>($stack30);

        count#12 = count#12 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] extractIndices(java.util.HashSet)>($stack15);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] removeAll(boolean[],int[])>(array, $stack19);

        return $stack20;
    }

    private static transient java.lang.Object removeAll(java.lang.Object, int[])
    {
        java.lang.IndexOutOfBoundsException $u1;
        int[] indices;
        int $stack10, $stack14, $stack16, index_2, $stack18, $stack20, cp, $stack21, diff, i_1, prevIndex, index_1, i_2, $i0, $i1;
        java.lang.String $stack34;
        boolean $stack11;
        java.lang.Object array, $stack15;
        java.lang.Class $stack12, $stack13;
        java.lang.StringBuilder $stack30, $stack31, $stack32, $stack33, $u0;

        array := @parameter0: java.lang.Object;

        indices := @parameter1: int[];

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(array);

        diff = 0;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(int[])>(indices);

        if $stack11 == 0 goto label5;

        staticinvoke <java.util.Arrays: void sort(int[])>(indices);

        i_1 = lengthof indices;

        prevIndex = $stack10;

     label1:
        $i0 = (int) -1;

        i_1 = i_1 + $i0;

        if i_1 < 0 goto label5;

        index_1 = indices[i_1];

        if index_1 < 0 goto label2;

        if index_1 < $stack10 goto label3;

     label2:
        $u1 = new java.lang.IndexOutOfBoundsException;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack30 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index_1);

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Length: ");

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack10);

        $stack34 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($stack34);

        throw $u1;

     label3:
        if index_1 < prevIndex goto label4;

        goto label1;

     label4:
        diff = diff + 1;

        prevIndex = index_1;

        goto label1;

     label5:
        $stack12 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $stack13 = virtualinvoke $stack12.<java.lang.Class: java.lang.Class getComponentType()>();

        $stack14 = $stack10 - diff;

        $stack15 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($stack13, $stack14);

        if diff >= $stack10 goto label9;

        prevIndex = $stack10;

        index_1 = $stack10 - diff;

        $stack16 = lengthof indices;

        i_2 = $stack16 - 1;

     label6:
        if i_2 < 0 goto label8;

        index_2 = indices[i_2];

        $stack18 = prevIndex - index_2;

        if $stack18 <= 1 goto label7;

        $stack20 = prevIndex - index_2;

        cp = $stack20 - 1;

        index_1 = index_1 - cp;

        $stack21 = index_2 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, $stack21, $stack15, index_1, cp);

     label7:
        prevIndex = index_2;

        $i1 = (int) -1;

        i_2 = i_2 + $i1;

        goto label6;

     label8:
        if prevIndex <= 0 goto label9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(array, 0, $stack15, 0, prevIndex);

     label9:
        return $stack15;
    }

    private static int[] extractIndices(java.util.HashSet)
    {
        java.util.Iterator $stack6;
        java.lang.Integer index;
        java.util.HashSet coll;
        int[] result;
        int $stack5, $stack9, $stack10, i;
        java.lang.Object $stack8;
        boolean $stack7;

        coll := @parameter0: java.util.HashSet;

        $stack5 = virtualinvoke coll.<java.util.HashSet: int size()>();

        result = newarray (int)[$stack5];

        i = 0;

        $stack6 = virtualinvoke coll.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $stack7 = interfaceinvoke $stack6.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack8 = interfaceinvoke $stack6.<java.util.Iterator: java.lang.Object next()>();

        index = (java.lang.Integer) $stack8;

        $stack9 = i;

        i = i + 1;

        $stack10 = virtualinvoke index.<java.lang.Integer: int intValue()>();

        result[$stack9] = $stack10;

        goto label1;

     label2:
        return result;
    }

    static void <clinit>()
    {
        byte[] $stack9;
        java.lang.Object[] $stack0;
        java.lang.Short[] $stack8;
        double[] $stack11;
        java.lang.String[] $stack2;
        float[] $stack13;
        long[] $stack3;
        int[] $stack5;
        java.lang.Long[] $stack4;
        java.lang.Double[] $stack12;
        boolean[] $stack15;
        java.lang.Class[] $stack1;
        java.lang.Boolean[] $stack16;
        java.lang.Byte[] $stack10;
        char[] $stack17;
        java.lang.Character[] $stack18;
        short[] $stack7;
        java.lang.Integer[] $stack6;
        java.lang.Float[] $stack14;

        <org.apache.commons.lang3.ArrayUtils: int INDEX_NOT_FOUND> = -1;

        $stack0 = newarray (java.lang.Object)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY> = $stack0;

        $stack1 = newarray (java.lang.Class)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY> = $stack1;

        $stack2 = newarray (java.lang.String)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY> = $stack2;

        $stack3 = newarray (long)[0];

        <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY> = $stack3;

        $stack4 = newarray (java.lang.Long)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY> = $stack4;

        $stack5 = newarray (int)[0];

        <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY> = $stack5;

        $stack6 = newarray (java.lang.Integer)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY> = $stack6;

        $stack7 = newarray (short)[0];

        <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY> = $stack7;

        $stack8 = newarray (java.lang.Short)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY> = $stack8;

        $stack9 = newarray (byte)[0];

        <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY> = $stack9;

        $stack10 = newarray (java.lang.Byte)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY> = $stack10;

        $stack11 = newarray (double)[0];

        <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY> = $stack11;

        $stack12 = newarray (java.lang.Double)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY> = $stack12;

        $stack13 = newarray (float)[0];

        <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY> = $stack13;

        $stack14 = newarray (java.lang.Float)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY> = $stack14;

        $stack15 = newarray (boolean)[0];

        <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY> = $stack15;

        $stack16 = newarray (java.lang.Boolean)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY> = $stack16;

        $stack17 = newarray (char)[0];

        <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY> = $stack17;

        $stack18 = newarray (java.lang.Character)[0];

        <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY> = $stack18;

        return;
    }
}
