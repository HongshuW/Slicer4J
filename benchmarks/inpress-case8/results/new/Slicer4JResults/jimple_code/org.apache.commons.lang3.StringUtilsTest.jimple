public class org.apache.commons.lang3.StringUtilsTest extends java.lang.Object
{
    static final java.lang.String WHITESPACE;
    static final java.lang.String NON_WHITESPACE;
    static final java.lang.String TRIMMABLE;
    static final java.lang.String NON_TRIMMABLE;
    private static final java.lang.String[] ARRAY_LIST;
    private static final java.lang.String[] EMPTY_ARRAY_LIST;
    private static final java.lang.String[] NULL_ARRAY_LIST;
    private static final java.lang.Object[] NULL_TO_STRING_LIST;
    private static final java.lang.String[] MIXED_ARRAY_LIST;
    private static final java.lang.Object[] MIXED_TYPE_LIST;
    private static final java.lang.String SEPARATOR;
    private static final char SEPARATOR_CHAR;
    private static final java.lang.String TEXT_LIST;
    private static final java.lang.String TEXT_LIST_CHAR;
    private static final java.lang.String TEXT_LIST_NOSEP;
    private static final java.lang.String FOO_UNCAP;
    private static final java.lang.String FOO_CAP;
    private static final java.lang.String SENTENCE_UNCAP;
    private static final java.lang.String SENTENCE_CAP;

    public void <init>()
    {
        org.apache.commons.lang3.StringUtilsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructor()
    {
        long $stack6;
        org.apache.commons.lang3.StringUtils $stack2;
        java.lang.reflect.Constructor $stack7;
        java.lang.reflect.Constructor[] $stack4;
        int $stack5, $stack8, $stack11, $stack14;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = new org.apache.commons.lang3.StringUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.StringUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/StringUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/StringUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/StringUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testCaseFunctions()
    {
        java.util.Locale $stack3, $stack8, $stack58, $stack62, $stack66, $stack70;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack5, $stack7, $stack10, $stack12, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack33, $stack36, $stack37, $stack40, $stack41, $stack44, $stack45, $stack48, $stack51, $stack54, $stack57, $stack61, $stack65, $stack69, $stack73;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String upperCase(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String upperCase(java.lang.String,java.util.Locale)>(null, $stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String lowerCase(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack7);

        $stack8 = <java.util.Locale: java.util.Locale ENGLISH>;

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String lowerCase(java.lang.String,java.util.Locale)>(null, $stack8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String capitalize(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack14);

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String capitalize(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("capitalize(empty-string) failed", "", $stack17);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String capitalize(java.lang.String)>("x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("capitalize(single-char-string) failed", "X", $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>("Foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("uncapitalize(String) failed", "foo", $stack23);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("uncapitalize(empty-string) failed", "", $stack26);

        $stack29 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>("X");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("uncapitalize(single-char-string) failed", "x", $stack29);

        $stack32 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String capitalize(java.lang.String)>("foo bar baz");

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>($stack32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("uncapitalize(capitalize(String)) failed", "foo bar baz", $stack33);

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>("Foo Bar Baz");

        $stack37 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String capitalize(java.lang.String)>($stack36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("capitalize(uncapitalize(String)) failed", "Foo Bar Baz", $stack37);

        $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String capitalize(java.lang.String)>("foo");

        $stack41 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>($stack40);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("uncapitalize(capitalize(String)) failed", "foo", $stack41);

        $stack44 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String uncapitalize(java.lang.String)>("Foo");

        $stack45 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String capitalize(java.lang.String)>($stack44);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("capitalize(uncapitalize(String)) failed", "Foo", $stack45);

        $stack48 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String upperCase(java.lang.String)>("fOo test THING");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("upperCase(String) failed", "FOO TEST THING", $stack48);

        $stack51 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String upperCase(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("upperCase(empty-string) failed", "", $stack51);

        $stack54 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String lowerCase(java.lang.String)>("fOo test THING");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("lowerCase(String) failed", "foo test thing", $stack54);

        $stack57 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String lowerCase(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("lowerCase(empty-string) failed", "", $stack57);

        $stack58 = <java.util.Locale: java.util.Locale ENGLISH>;

        $stack61 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String upperCase(java.lang.String,java.util.Locale)>("fOo test THING", $stack58);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("upperCase(String, Locale) failed", "FOO TEST THING", $stack61);

        $stack62 = <java.util.Locale: java.util.Locale ENGLISH>;

        $stack65 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String upperCase(java.lang.String,java.util.Locale)>("", $stack62);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("upperCase(empty-string, Locale) failed", "", $stack65);

        $stack66 = <java.util.Locale: java.util.Locale ENGLISH>;

        $stack69 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String lowerCase(java.lang.String,java.util.Locale)>("fOo test THING", $stack66);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("lowerCase(String, Locale) failed", "foo test thing", $stack69);

        $stack70 = <java.util.Locale: java.util.Locale ENGLISH>;

        $stack73 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String lowerCase(java.lang.String,java.util.Locale)>("", $stack70);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("lowerCase(empty-string, Locale) failed", "", $stack73);

        return;
    }

    public void testSwapCase_String()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack21;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String swapCase(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String swapCase(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String swapCase(java.lang.String)>("  ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  ", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String swapCase(java.lang.String)>("I");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("i", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String swapCase(java.lang.String)>("i");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("I", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String swapCase(java.lang.String)>("i am here 123");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("I AM HERE 123", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String swapCase(java.lang.String)>("I Am Here 123");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("i aM hERE 123", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String swapCase(java.lang.String)>("i am HERE 123");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("I AM here 123", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String swapCase(java.lang.String)>("I AM HERE 123");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("i am here 123", $stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String swapCase(java.lang.String)>("This String contains a TitleCase character: \u01c8");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01c9", $stack21);

        return;
    }

    public void testJoin_Objects()
    {
        java.lang.Object[] $stack7;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack1, $stack4;
        java.lang.String $stack3, $stack6, $stack9;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = newarray (java.lang.String)[3];

        $stack1[0] = "a";

        $stack1[1] = "b";

        $stack1[2] = "c";

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack3);

        $stack4 = newarray (java.lang.String)[3];

        $stack4[0] = null;

        $stack4[1] = "";

        $stack4[2] = "a";

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack6);

        $stack7 = (java.lang.Object[]) null;

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack9);

        return;
    }

    public void testJoin_Objectarray()
    {
        java.lang.Object[] $stack1, $stack4, $stack7, $stack17, $stack29;
        java.lang.String[] $stack11, $stack14, $stack20, $stack23, $stack26;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = (java.lang.Object[]) null;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack4 = newarray (java.lang.Object)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack7 = newarray (java.lang.Object)[1];

        $stack7[0] = null;

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack11 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack13);

        $stack14 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] NULL_ARRAY_LIST>;

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack17 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] NULL_TO_STRING_LIST>;

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("null", $stack19);

        $stack20 = newarray (java.lang.String)[3];

        $stack20[0] = "a";

        $stack20[1] = "b";

        $stack20[2] = "c";

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack22);

        $stack23 = newarray (java.lang.String)[3];

        $stack23[0] = null;

        $stack23[1] = "a";

        $stack23[2] = "";

        $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack23);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack25);

        $stack26 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack28);

        $stack29 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack29);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo2", $stack31);

        return;
    }

    public void testJoin_ArrayChar()
    {
        java.lang.Object[] $stack1, $stack13, $stack22, $stack25, $stack28, $stack31, $stack34;
        java.lang.String[] $stack4, $stack7, $stack10, $stack16, $stack19;
        int $stack17, $stack18;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack3, $stack6, $stack9, $stack12, $stack15, $stack21, $stack24, $stack27, $stack30, $stack33, $stack36;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = (java.lang.Object[]) null;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char)>($stack1, 44);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack4 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char)>($stack4, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo;bar;baz", $stack6);

        $stack7 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char)>($stack7, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack9);

        $stack10 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char)>($stack10, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(";;foo", $stack12);

        $stack13 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char)>($stack13, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo;2", $stack15);

        $stack19 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack16 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack17 = lengthof $stack16;

        $stack18 = $stack17 - 1;

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>($stack19, 47, 0, $stack18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/", $stack21);

        $stack22 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>($stack22, 47, 0, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack24);

        $stack25 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] NULL_TO_STRING_LIST>;

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>($stack25, 47, 0, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("null", $stack27);

        $stack28 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>($stack28, 47, 0, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo/2", $stack30);

        $stack31 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>($stack31, 47, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("2", $stack33);

        $stack34 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>($stack34, 47, 2, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack36);

        return;
    }

    public void testJoin_ArrayString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.Object[] $stack1, $stack28, $stack43, $stack46, $stack49, $stack52;
        java.lang.String[] $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack31, $stack34, $stack37, $stack40;
        int $stack32, $stack33, $stack38, $stack39;
        java.lang.String $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack36, $stack42, $stack45, $stack48, $stack51, $stack54;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = (java.lang.Object[]) null;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack1, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack4 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack4, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobarbaz", $stack6);

        $stack7 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack7, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobarbaz", $stack9);

        $stack10 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] NULL_ARRAY_LIST>;

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack10, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack13 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack13, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack15);

        $stack16 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack16, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        $stack19 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack19, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack21);

        $stack22 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack22, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo,bar,baz", $stack24);

        $stack25 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack25, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(",,foo", $stack27);

        $stack28 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($stack28, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo,2", $stack30);

        $stack34 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack31 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack32 = lengthof $stack31;

        $stack33 = $stack32 - 1;

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>($stack34, "/", 0, $stack33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/", $stack36);

        $stack40 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack37 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST>;

        $stack38 = lengthof $stack37;

        $stack39 = $stack38 - 1;

        $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>($stack40, "", 0, $stack39);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack42);

        $stack43 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack45 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>($stack43, "/", 0, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack45);

        $stack46 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack48 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>($stack46, "/", 0, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo/2", $stack48);

        $stack49 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack51 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>($stack49, "/", 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("2", $stack51);

        $stack52 = <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST>;

        $stack54 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>($stack52, "/", 2, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack54);

        return;
    }

    public void testJoin_IteratorChar()
    {
        java.lang.String[] $stack4, $stack9, $stack14;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack3, $stack8, $stack13, $stack18, $stack22;
        java.util.Iterator $stack7, $stack12, $stack17, $stack21;
        java.util.Set $stack20;
        java.util.List $stack6, $stack11, $stack16;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>(null, 44);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack4 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>($stack7, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo;bar;baz", $stack8);

        $stack9 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] NULL_ARRAY_LIST>;

        $stack11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        $stack12 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>();

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>($stack12, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack13);

        $stack14 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack14);

        $stack17 = interfaceinvoke $stack16.<java.util.List: java.util.Iterator iterator()>();

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>($stack17, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        $stack20 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("foo");

        $stack21 = interfaceinvoke $stack20.<java.util.Set: java.util.Iterator iterator()>();

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>($stack21, 120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack22);

        return;
    }

    public void testJoin_IteratorString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.util.Set $stack15, $stack19;
        java.util.List $stack6, $stack11, $stack24, $stack29, $stack34, $stack39, $stack44;
        java.lang.String[] $stack4, $stack9, $stack22, $stack27, $stack32, $stack37, $stack42;
        java.lang.String $stack3, $stack8, $stack13, $stack17, $stack21, $stack26, $stack31, $stack36, $stack41, $stack46;
        java.util.Iterator $stack7, $stack12, $stack16, $stack20, $stack25, $stack30, $stack35, $stack40, $stack45;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack4 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        $stack7 = interfaceinvoke $stack6.<java.util.List: java.util.Iterator iterator()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack7, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobarbaz", $stack8);

        $stack9 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack9);

        $stack12 = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>();

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack12, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobarbaz", $stack13);

        $stack15 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("foo");

        $stack16 = interfaceinvoke $stack15.<java.util.Set: java.util.Iterator iterator()>();

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack16, "x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack17);

        $stack19 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("foo");

        $stack20 = interfaceinvoke $stack19.<java.util.Set: java.util.Iterator iterator()>();

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack20, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack21);

        $stack22 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] NULL_ARRAY_LIST>;

        $stack24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack22);

        $stack25 = interfaceinvoke $stack24.<java.util.List: java.util.Iterator iterator()>();

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack25, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack26);

        $stack27 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack27);

        $stack30 = interfaceinvoke $stack29.<java.util.List: java.util.Iterator iterator()>();

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack30, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack31);

        $stack32 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack34 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack32);

        $stack35 = interfaceinvoke $stack34.<java.util.List: java.util.Iterator iterator()>();

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack35, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack36);

        $stack37 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack39 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack37);

        $stack40 = interfaceinvoke $stack39.<java.util.List: java.util.Iterator iterator()>();

        $stack41 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack40, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack41);

        $stack42 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack44 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack42);

        $stack45 = interfaceinvoke $stack44.<java.util.List: java.util.Iterator iterator()>();

        $stack46 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($stack45, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo,bar,baz", $stack46);

        return;
    }

    public void testJoin_IterableChar()
    {
        java.util.Set $stack17;
        java.lang.String[] $stack4, $stack8, $stack12;
        java.util.List $stack6, $stack10, $stack14;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack3, $stack7, $stack11, $stack15, $stack18;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,char)>(null, 44);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack4 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,char)>($stack6, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo;bar;baz", $stack7);

        $stack8 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] NULL_ARRAY_LIST>;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack8);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,char)>($stack10, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack11);

        $stack12 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack12);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,char)>($stack14, 59);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack15);

        $stack17 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("foo");

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,char)>($stack17, 120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack18);

        return;
    }

    public void testJoin_IterableString()
    {
        java.lang.String[] $stack4, $stack8, $stack18, $stack22, $stack26, $stack30, $stack34;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack3, $stack7, $stack11, $stack14, $stack17, $stack21, $stack25, $stack29, $stack33, $stack37;
        java.util.Set $stack13, $stack16;
        java.util.List $stack6, $stack10, $stack20, $stack24, $stack28, $stack32, $stack36;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack4 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack4);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack6, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobarbaz", $stack7);

        $stack8 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack8);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack10, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foobarbaz", $stack11);

        $stack13 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("foo");

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack13, "x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack14);

        $stack16 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("foo");

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack16, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack17);

        $stack18 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] NULL_ARRAY_LIST>;

        $stack20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack18);

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack20, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack21);

        $stack22 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack22);

        $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack24, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack25);

        $stack26 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack26);

        $stack29 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack28, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack29);

        $stack30 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST>;

        $stack32 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack30);

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack32, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack33);

        $stack34 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST>;

        $stack36 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack34);

        $stack37 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Iterable,java.lang.String)>($stack36, ",");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo,bar,baz", $stack37);

        return;
    }

    public void testSplit_String()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.StringBuilder $stack19, $stack20, $stack22, $stack23, $stack25, $stack26, $stack32, $stack33, $stack35, $stack36;
        java.lang.String[] $stack4, $stack6, $stack9, $stack15, $stack28;
        long $stack8, $stack11, $stack17, $stack30;
        int $stack7, $stack10, $stack16, $stack29;
        java.lang.String $stack12, $stack13, $stack14, $stack18, $stack21, $stack24, $stack27, $stack31, $stack34, $stack37, $stack38;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String)>("");

        $stack7 = lengthof $stack6;

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String)>("a b  .c");

        $stack10 = lengthof $stack9;

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack11);

        $stack12 = $stack9[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack12);

        $stack13 = $stack9[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack13);

        $stack14 = $stack9[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(".c", $stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String)>(" a ");

        $stack16 = lengthof $stack15;

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack17);

        $stack18 = $stack15[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack18);

        $stack19 = new java.lang.StringBuilder;

        specialinvoke $stack19.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a");

        $stack21 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack22 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21);

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $stack24 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack25 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack24);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String)>($stack27);

        $stack29 = lengthof $stack28;

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack30);

        $stack31 = $stack28[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack31);

        $stack32 = new java.lang.StringBuilder;

        specialinvoke $stack32.<java.lang.StringBuilder: void <init>()>();

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $stack34 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack35 = virtualinvoke $stack33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack38 = $stack28[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack37, $stack38);

        return;
    }

    public void testSplit_StringChar()
    {
        java.lang.String[] $stack4, $stack6, $stack9, $stack15, $stack19;
        long $stack8, $stack11, $stack17, $stack21;
        int $stack7, $stack10, $stack16, $stack20;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack12, $stack13, $stack14, $stack18, $stack22, $stack23, $stack24;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,char)>(null, 46);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,char)>("", 46);

        $stack7 = lengthof $stack6;

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,char)>("a.b.. c", 46);

        $stack10 = lengthof $stack9;

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack11);

        $stack12 = $stack9[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack12);

        $stack13 = $stack9[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack13);

        $stack14 = $stack9[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" c", $stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,char)>(".a.", 46);

        $stack16 = lengthof $stack15;

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack17);

        $stack18 = $stack15[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,char)>("a b c", 32);

        $stack20 = lengthof $stack19;

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack21);

        $stack22 = $stack19[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack22);

        $stack23 = $stack19[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack23);

        $stack24 = $stack19[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack24);

        return;
    }

    public void testSplit_StringString_StringStringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack6, $stack8, $stack10, $stack14, $stack19, $stack20, $stack26, $stack27;
        long $stack12, $stack16, $stack23, $stack24, $stack30, $stack31;
        int $stack11, $stack15, $stack18, $stack21, $stack22, $stack25, $stack28, $stack29, $stack32, $stack42, i_1, j, i_2, i_3;
        java.lang.String $stack17, $stack33, $stack34, $stack37, $stack38, $stack41, $stack44, $stack46, $stack49, $stack51, $stack53, $stack54;
        char $stack45, $stack48, $stack50, $stack52, $stack55;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(null, ".");

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>(null, ".", 3);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>("", ".");

        $stack11 = lengthof $stack10;

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>("", ".", 3);

        $stack15 = lengthof $stack14;

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack16);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplit(char,java.lang.String,char)>(46, ".", 32);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplit(char,java.lang.String,char)>(46, ".", 44);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplit(char,java.lang.String,char)>(46, ".,", 120);

        i_1 = 0;

     label1:
        $stack17 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack18 = virtualinvoke $stack17.<java.lang.String: int length()>();

        if i_1 >= $stack18 goto label4;

        j = 0;

     label2:
        $stack41 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack42 = virtualinvoke $stack41.<java.lang.String: int length()>();

        if j >= $stack42 goto label3;

        $stack44 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack45 = virtualinvoke $stack44.<java.lang.String: char charAt(int)>(i_1);

        $stack46 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack48 = virtualinvoke $stack46.<java.lang.String: char charAt(int)>(j);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplit(char,java.lang.String,char)>($stack45, null, $stack48);

        $stack49 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack50 = virtualinvoke $stack49.<java.lang.String: char charAt(int)>(i_1);

        $stack51 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack52 = virtualinvoke $stack51.<java.lang.String: char charAt(int)>(i_1);

        $stack53 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack52);

        $stack54 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack55 = virtualinvoke $stack54.<java.lang.String: char charAt(int)>(j);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplit(char,java.lang.String,char)>($stack50, $stack53, $stack55);

        j = j + 1;

        goto label2;

     label3:
        i_1 = i_1 + 1;

        goto label1;

     label4:
        $stack19 = newarray (java.lang.String)[2];

        $stack19[0] = "ab";

        $stack19[1] = "de fg";

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>("ab   de fg", null, 2);

        $stack21 = lengthof $stack19;

        $stack24 = (long) $stack21;

        $stack22 = lengthof $stack20;

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack24, $stack23);

        i_2 = 0;

     label5:
        $stack25 = lengthof $stack19;

        if i_2 >= $stack25 goto label6;

        $stack38 = $stack19[i_2];

        $stack37 = $stack20[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack38, $stack37);

        i_2 = i_2 + 1;

        goto label5;

     label6:
        $stack26 = newarray (java.lang.String)[2];

        $stack26[0] = "ab";

        $stack26[1] = "cd:ef";

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>("ab:cd:ef", ":", 2);

        $stack28 = lengthof $stack26;

        $stack31 = (long) $stack28;

        $stack29 = lengthof $stack27;

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack31, $stack30);

        i_3 = 0;

     label7:
        $stack32 = lengthof $stack26;

        if i_3 >= $stack32 goto label8;

        $stack34 = $stack26[i_3];

        $stack33 = $stack27[i_3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack34, $stack33);

        i_3 = i_3 + 1;

        goto label7;

     label8:
        return;
    }

    private void innerTestSplit(char, java.lang.String, char)
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.StringBuilder $stack9, $stack11, $stack12, $stack14, $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack34, $stack35, $stack39, $stack40, $stack41, $stack53, $stack54, $stack63, $stack64, $u0, $u1, $u2, $u3, $u4, $u5;
        long $stack30, $stack45, $stack49, $stack59, $stack69, $stack73;
        java.lang.String $stack10, $stack13, sepStr, $stack18, $stack27, $stack31, $stack32, $stack36, $stack37, $stack42, $stack46, $stack50, $stack51, $stack55, $stack56, $stack60, $stack61, $stack65, $stack66, $stack70, $stack74, $stack75, $stack76;
        java.lang.String[] $stack28, $stack43, $stack47, $stack57, $stack67, $stack71;
        int $stack29, $stack44, $stack48, $stack58, $stack68, $stack72, $i0, $i1, $i2;
        char separator, noMatch;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        separator := @parameter0: char;

        sepStr := @parameter1: java.lang.String;

        noMatch := @parameter2: char;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed on separator hex(");

        $i0 = (int) separator;

        $stack10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), noMatch hex(");

        $i1 = (int) noMatch;

        $stack13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), sepStr(");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sepStr);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($stack27, sepStr);

        $stack29 = lengthof $stack28;

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 3L, $stack30);

        $stack31 = $stack28[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack31);

        $stack32 = $stack28[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "b", $stack32);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack35 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack37 = $stack28[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack36, $stack37);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack39 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a");

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack43 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($stack42, sepStr);

        $stack44 = lengthof $stack43;

        $stack45 = (long) $stack44;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 1L, $stack45);

        $stack46 = $stack43[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack46);

        $i2 = (int) -1;

        $stack47 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>($stack27, sepStr, $i2);

        $stack48 = lengthof $stack47;

        $stack49 = (long) $stack48;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 3L, $stack49);

        $stack50 = $stack47[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack50);

        $stack51 = $stack47[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "b", $stack51);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack53 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack55 = virtualinvoke $stack54.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack56 = $stack47[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack55, $stack56);

        $stack57 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>($stack27, sepStr, 0);

        $stack58 = lengthof $stack57;

        $stack59 = (long) $stack58;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 3L, $stack59);

        $stack60 = $stack57[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack60);

        $stack61 = $stack57[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "b", $stack61);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack63 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack66 = $stack57[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack65, $stack66);

        $stack67 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>($stack27, sepStr, 1);

        $stack68 = lengthof $stack67;

        $stack69 = (long) $stack68;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 1L, $stack69);

        $stack70 = $stack67[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack27, $stack70);

        $stack71 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>($stack27, sepStr, 2);

        $stack72 = lengthof $stack71;

        $stack73 = (long) $stack72;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 2L, $stack73);

        $stack74 = $stack71[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack74);

        $stack75 = virtualinvoke $stack27.<java.lang.String: java.lang.String substring(int)>(2);

        $stack76 = $stack71[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack75, $stack76);

        return;
    }

    public void testSplitByWholeString_StringStringBoolean()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack11, $stack13, $stack16, $stack17, $stack23, $stack24, $stack30, $stack31;
        long $stack15, $stack20, $stack21, $stack27, $stack28, $stack34, $stack35;
        int $stack14, $stack18, $stack19, $stack22, $stack25, $stack26, $stack29, $stack32, $stack33, $stack36, i_1, i_2, i_3;
        java.lang.String $stack37, $stack38, $stack41, $stack42, $stack45, $stack46;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)>(null, ".");

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)>("", ".");

        $stack14 = lengthof $stack13;

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack16 = newarray (java.lang.String)[3];

        $stack16[0] = "ab";

        $stack16[1] = "de";

        $stack16[2] = "fg";

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)>("ab   de fg", null);

        $stack18 = lengthof $stack16;

        $stack21 = (long) $stack18;

        $stack19 = lengthof $stack17;

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack21, $stack20);

        i_1 = 0;

     label1:
        $stack22 = lengthof $stack16;

        if i_1 >= $stack22 goto label2;

        $stack46 = $stack16[i_1];

        $stack45 = $stack17[i_1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack46, $stack45);

        i_1 = i_1 + 1;

        goto label1;

     label2:
        $stack23 = newarray (java.lang.String)[2];

        $stack23[0] = "abstemiously";

        $stack23[1] = "abstemiously";

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)>("abstemiouslyaeiouyabstemiously", "aeiouy");

        $stack25 = lengthof $stack23;

        $stack28 = (long) $stack25;

        $stack26 = lengthof $stack24;

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack28, $stack27);

        i_2 = 0;

     label3:
        $stack29 = lengthof $stack23;

        if i_2 >= $stack29 goto label4;

        $stack42 = $stack23[i_2];

        $stack41 = $stack24[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack42, $stack41);

        i_2 = i_2 + 1;

        goto label3;

     label4:
        $stack30 = newarray (java.lang.String)[3];

        $stack30[0] = "ab";

        $stack30[1] = "cd";

        $stack30[2] = "ef";

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String)>("ab:cd::ef", ":");

        $stack32 = lengthof $stack30;

        $stack35 = (long) $stack32;

        $stack33 = lengthof $stack31;

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack35, $stack34);

        i_3 = 0;

     label5:
        $stack36 = lengthof $stack30;

        if i_3 >= $stack36 goto label6;

        $stack38 = $stack30[i_3];

        $stack37 = $stack31[i_3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack38, $stack37);

        i_3 = i_3 + 1;

        goto label5;

     label6:
        return;
    }

    public void testSplitByWholeString_StringStringBooleanInt()
    {
        java.lang.String[] $stack9, $stack11, $stack14, $stack15, $stack21, $stack22;
        long $stack13, $stack18, $stack19, $stack25, $stack26;
        int $stack12, $stack16, $stack17, $stack20, $stack23, $stack24, $stack27, i_1, i_2;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack28, $stack29, $stack32, $stack33;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String,int)>(null, ".", 3);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String,int)>("", ".", 3);

        $stack12 = lengthof $stack11;

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack13);

        $stack14 = newarray (java.lang.String)[2];

        $stack14[0] = "ab";

        $stack14[1] = "de fg";

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String,int)>("ab   de fg", null, 2);

        $stack16 = lengthof $stack14;

        $stack19 = (long) $stack16;

        $stack17 = lengthof $stack15;

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack19, $stack18);

        i_1 = 0;

     label1:
        $stack20 = lengthof $stack14;

        if i_1 >= $stack20 goto label2;

        $stack33 = $stack14[i_1];

        $stack32 = $stack15[i_1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack33, $stack32);

        i_1 = i_1 + 1;

        goto label1;

     label2:
        $stack21 = newarray (java.lang.String)[2];

        $stack21[0] = "abstemiously";

        $stack21[1] = "abstemiouslyaeiouyabstemiously";

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparator(java.lang.String,java.lang.String,int)>("abstemiouslyaeiouyabstemiouslyaeiouyabstemiously", "aeiouy", 2);

        $stack23 = lengthof $stack21;

        $stack26 = (long) $stack23;

        $stack24 = lengthof $stack22;

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack26, $stack25);

        i_2 = 0;

     label3:
        $stack27 = lengthof $stack21;

        if i_2 >= $stack27 goto label4;

        $stack29 = $stack21[i_2];

        $stack28 = $stack22[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack29, $stack28);

        i_2 = i_2 + 1;

        goto label3;

     label4:
        return;
    }

    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack6, $stack8, $stack11, $stack12, $stack18, $stack19, $stack25, $stack26, $stack32, $stack33;
        long $stack10, $stack15, $stack16, $stack22, $stack23, $stack29, $stack30, $stack36, $stack37;
        int $stack9, $stack13, $stack14, $stack17, $stack20, $stack21, $stack24, $stack27, $stack28, $stack31, $stack34, $stack35, $stack38, i, $i0, $i1, $i2, $i3, $i4;
        java.lang.String $stack39, $stack40, $stack43, $stack44, $stack47, $stack48, $stack51, $stack52;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $i0 = (int) -1;

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)>(null, ".", $i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack6);

        $i1 = (int) -1;

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)>("", ".", $i1);

        $stack9 = lengthof $stack8;

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack10);

        $stack11 = newarray (java.lang.String)[5];

        $stack11[0] = "ab";

        $stack11[1] = "";

        $stack11[2] = "";

        $stack11[3] = "de";

        $stack11[4] = "fg";

        $i2 = (int) -1;

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab   de fg", null, $i2);

        $stack13 = lengthof $stack11;

        $stack16 = (long) $stack13;

        $stack14 = lengthof $stack12;

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack16, $stack15);

        i = 0;

     label1:
        $stack17 = lengthof $stack12;

        if i >= $stack17 goto label2;

        $stack52 = $stack11[i];

        $stack51 = $stack12[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack52, $stack51);

        i = i + 1;

        goto label1;

     label2:
        $stack18 = newarray (java.lang.String)[10];

        $stack18[0] = "1";

        $stack18[1] = "";

        $stack18[2] = "2";

        $stack18[3] = "";

        $stack18[4] = "";

        $stack18[5] = "3";

        $stack18[6] = "";

        $stack18[7] = "";

        $stack18[8] = "";

        $stack18[9] = "4";

        $i3 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)>("1::2:::3::::4", ":", $i3);

        $stack20 = lengthof $stack18;

        $stack23 = (long) $stack20;

        $stack21 = lengthof $stack19;

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack23, $stack22);

        i = 0;

     label3:
        $stack24 = lengthof $stack19;

        if i >= $stack24 goto label4;

        $stack48 = $stack18[i];

        $stack47 = $stack19[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack48, $stack47);

        i = i + 1;

        goto label3;

     label4:
        $stack25 = newarray (java.lang.String)[5];

        $stack25[0] = "1";

        $stack25[1] = "2";

        $stack25[2] = ":3";

        $stack25[3] = "";

        $stack25[4] = "4";

        $i4 = (int) -1;

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)>("1::2:::3::::4", "::", $i4);

        $stack27 = lengthof $stack25;

        $stack30 = (long) $stack27;

        $stack28 = lengthof $stack26;

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack30, $stack29);

        i = 0;

     label5:
        $stack31 = lengthof $stack26;

        if i >= $stack31 goto label6;

        $stack44 = $stack25[i];

        $stack43 = $stack26[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack44, $stack43);

        i = i + 1;

        goto label5;

     label6:
        $stack32 = newarray (java.lang.String)[4];

        $stack32[0] = "1";

        $stack32[1] = "";

        $stack32[2] = "2";

        $stack32[3] = ":3:4";

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String,java.lang.String,int)>("1::2::3:4", ":", 4);

        $stack34 = lengthof $stack32;

        $stack37 = (long) $stack34;

        $stack35 = lengthof $stack33;

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack37, $stack36);

        i = 0;

     label7:
        $stack38 = lengthof $stack33;

        if i >= $stack38 goto label8;

        $stack40 = $stack32[i];

        $stack39 = $stack33[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack40, $stack39);

        i = i + 1;

        goto label7;

     label8:
        return;
    }

    public void testSplitPreserveAllTokens_String()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.StringBuilder $stack62, $stack63, $stack65, $stack66, $stack68, $stack69, $stack82, $stack83, $stack85, $stack86;
        long $stack9, $stack12, $stack17, $stack23, $stack29, $stack35, $stack42, $stack50, $stack57, $stack76, $stack77;
        java.lang.String $stack13, $stack14, $stack18, $stack19, $stack20, $stack24, $stack25, $stack26, $stack30, $stack31, $stack32, $stack36, $stack37, $stack38, $stack39, $stack43, $stack44, $stack45, $stack46, $stack47, $stack51, $stack52, $stack53, $stack54, $stack58, $stack59, $stack60, $stack61, $stack64, $stack67, $stack70, $stack72, $stack78, $stack79, $stack84, $stack87, $stack88, $stack90, $stack91;
        java.lang.String[] $stack5, $stack7, $stack10, $stack15, $stack21, $stack27, $stack33, $stack40, $stack48, $stack55, $stack71;
        int $stack8, $stack11, $stack16, $stack22, $stack28, $stack34, $stack41, $stack49, $stack56, $stack73, $stack74, $stack75, $stack80, $stack81, $stack89, i;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>("");

        $stack8 = lengthof $stack7;

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>("abc def");

        $stack11 = lengthof $stack10;

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack12);

        $stack13 = $stack10[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack13);

        $stack14 = $stack10[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("def", $stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>("abc  def");

        $stack16 = lengthof $stack15;

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack18 = $stack15[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack18);

        $stack19 = $stack15[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack19);

        $stack20 = $stack15[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("def", $stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>(" abc ");

        $stack22 = lengthof $stack21;

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack23);

        $stack24 = $stack21[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack24);

        $stack25 = $stack21[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack25);

        $stack26 = $stack21[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>("a b .c");

        $stack28 = lengthof $stack27;

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack29);

        $stack30 = $stack27[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack30);

        $stack31 = $stack27[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack31);

        $stack32 = $stack27[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(".c", $stack32);

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>(" a b .c");

        $stack34 = lengthof $stack33;

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack35);

        $stack36 = $stack33[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack36);

        $stack37 = $stack33[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack37);

        $stack38 = $stack33[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack38);

        $stack39 = $stack33[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(".c", $stack39);

        $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>("a  b  .c");

        $stack41 = lengthof $stack40;

        $stack42 = (long) $stack41;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack42);

        $stack43 = $stack40[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack43);

        $stack44 = $stack40[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack44);

        $stack45 = $stack40[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack45);

        $stack46 = $stack40[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack46);

        $stack47 = $stack40[4];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(".c", $stack47);

        $stack48 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>(" a  ");

        $stack49 = lengthof $stack48;

        $stack50 = (long) $stack49;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack50);

        $stack51 = $stack48[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack51);

        $stack52 = $stack48[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack52);

        $stack53 = $stack48[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack53);

        $stack54 = $stack48[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack54);

        $stack55 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>(" a  b");

        $stack56 = lengthof $stack55;

        $stack57 = (long) $stack56;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack57);

        $stack58 = $stack55[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack58);

        $stack59 = $stack55[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack59);

        $stack60 = $stack55[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack60);

        $stack61 = $stack55[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack61);

        $stack62 = new java.lang.StringBuilder;

        specialinvoke $stack62.<java.lang.StringBuilder: void <init>()>();

        $stack63 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a");

        $stack64 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack65 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack64);

        $stack66 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $stack67 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack68 = virtualinvoke $stack66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack67);

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack71 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String)>($stack70);

        $stack72 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack73 = virtualinvoke $stack72.<java.lang.String: int length()>();

        $stack74 = $stack73 + 1;

        $stack77 = (long) $stack74;

        $stack75 = lengthof $stack71;

        $stack76 = (long) $stack75;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack77, $stack76);

        $stack78 = $stack71[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack78);

        i = 1;

     label1:
        $stack79 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack80 = virtualinvoke $stack79.<java.lang.String: int length()>();

        $stack81 = $stack80 - 1;

        if i >= $stack81 goto label2;

        $stack91 = $stack71[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack91);

        i = i + 1;

        goto label1;

     label2:
        $stack82 = new java.lang.StringBuilder;

        specialinvoke $stack82.<java.lang.StringBuilder: void <init>()>();

        $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $stack84 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack85 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack84);

        $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack87 = virtualinvoke $stack86.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack88 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack89 = virtualinvoke $stack88.<java.lang.String: int length()>();

        $stack90 = $stack71[$stack89];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack87, $stack90);

        return;
    }

    public void testSplitPreserveAllTokens_StringChar()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        long $stack11, $stack14, $stack20, $stack27, $stack33, $stack40, $stack47, $stack53, $stack59, $stack67, $stack74, $stack82, $stack89, $stack99, $stack100;
        java.lang.String $stack15, $stack16, $stack17, $stack21, $stack22, $stack23, $stack24, $stack28, $stack29, $stack30, $stack34, $stack35, $stack36, $stack37, $stack41, $stack42, $stack43, $stack44, $stack48, $stack49, $stack50, $stack54, $stack55, $stack56, $stack60, $stack61, $stack62, $stack63, $stack64, $stack68, $stack69, $stack70, $stack71, $stack75, $stack76, $stack77, $stack78, $stack79, $stack83, $stack84, $stack85, $stack86, $stack90, $stack91, $stack92, $stack93, $stack94, $stack102, $stack103;
        java.lang.String[] $stack7, $stack9, $stack12, $stack18, $stack25, $stack31, $stack38, $stack45, $stack51, $stack57, $stack65, $stack72, $stack80, $stack87, $stack95, $stack96;
        int $stack10, $stack13, $stack19, $stack26, $stack32, $stack39, $stack46, $stack52, $stack58, $stack66, $stack73, $stack81, $stack88, $stack97, $stack98, $stack101, i;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>(null, 46);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("", 46);

        $stack10 = lengthof $stack9;

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("a.b. c", 46);

        $stack13 = lengthof $stack12;

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack14);

        $stack15 = $stack12[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack15);

        $stack16 = $stack12[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack16);

        $stack17 = $stack12[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" c", $stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("a.b.. c", 46);

        $stack19 = lengthof $stack18;

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack20);

        $stack21 = $stack18[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack21);

        $stack22 = $stack18[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack22);

        $stack23 = $stack18[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack23);

        $stack24 = $stack18[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" c", $stack24);

        $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>(".a.", 46);

        $stack26 = lengthof $stack25;

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack27);

        $stack28 = $stack25[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack28);

        $stack29 = $stack25[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack29);

        $stack30 = $stack25[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>(".a..", 46);

        $stack32 = lengthof $stack31;

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack33);

        $stack34 = $stack31[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack34);

        $stack35 = $stack31[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack35);

        $stack36 = $stack31[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack36);

        $stack37 = $stack31[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack37);

        $stack38 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("..a.", 46);

        $stack39 = lengthof $stack38;

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack40);

        $stack41 = $stack38[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack41);

        $stack42 = $stack38[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack42);

        $stack43 = $stack38[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack43);

        $stack44 = $stack38[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack44);

        $stack45 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("..a", 46);

        $stack46 = lengthof $stack45;

        $stack47 = (long) $stack46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack47);

        $stack48 = $stack45[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack48);

        $stack49 = $stack45[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack49);

        $stack50 = $stack45[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack50);

        $stack51 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("a b c", 32);

        $stack52 = lengthof $stack51;

        $stack53 = (long) $stack52;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack53);

        $stack54 = $stack51[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack54);

        $stack55 = $stack51[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack55);

        $stack56 = $stack51[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack56);

        $stack57 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("a  b  c", 32);

        $stack58 = lengthof $stack57;

        $stack59 = (long) $stack58;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack59);

        $stack60 = $stack57[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack60);

        $stack61 = $stack57[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack61);

        $stack62 = $stack57[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack62);

        $stack63 = $stack57[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack63);

        $stack64 = $stack57[4];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack64);

        $stack65 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>(" a b c", 32);

        $stack66 = lengthof $stack65;

        $stack67 = (long) $stack66;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack67);

        $stack68 = $stack65[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack68);

        $stack69 = $stack65[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack69);

        $stack70 = $stack65[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack70);

        $stack71 = $stack65[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack71);

        $stack72 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("  a b c", 32);

        $stack73 = lengthof $stack72;

        $stack74 = (long) $stack73;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack74);

        $stack75 = $stack72[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack75);

        $stack76 = $stack72[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack76);

        $stack77 = $stack72[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack77);

        $stack78 = $stack72[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack78);

        $stack79 = $stack72[4];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack79);

        $stack80 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("a b c ", 32);

        $stack81 = lengthof $stack80;

        $stack82 = (long) $stack81;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack82);

        $stack83 = $stack80[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack83);

        $stack84 = $stack80[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack84);

        $stack85 = $stack80[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack85);

        $stack86 = $stack80[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack86);

        $stack87 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("a b c  ", 32);

        $stack88 = lengthof $stack87;

        $stack89 = (long) $stack88;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack89);

        $stack90 = $stack87[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack90);

        $stack91 = $stack87[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack91);

        $stack92 = $stack87[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack92);

        $stack93 = $stack87[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack93);

        $stack94 = $stack87[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack94);

        $stack95 = newarray (java.lang.String)[4];

        $stack95[0] = "a";

        $stack95[1] = "";

        $stack95[2] = "b";

        $stack95[3] = "c";

        $stack96 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,char)>("a..b.c", 46);

        $stack97 = lengthof $stack95;

        $stack100 = (long) $stack97;

        $stack98 = lengthof $stack96;

        $stack99 = (long) $stack98;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack100, $stack99);

        i = 0;

     label1:
        $stack101 = lengthof $stack95;

        if i >= $stack101 goto label2;

        $stack103 = $stack95[i];

        $stack102 = $stack96[i];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack103, $stack102);

        i = i + 1;

        goto label1;

     label2:
        return;
    }

    public void testSplitPreserveAllTokens_StringString_StringStringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        long $stack11, $stack15, $stack22, $stack23, $stack29, $stack30, $stack36, $stack37, $stack43, $stack44, $stack50, $stack51, $stack57, $stack58, $stack64, $stack65, $stack71, $stack72, $stack78, $stack79, $stack85, $stack86, $stack92, $stack93;
        java.lang.String $stack16, $stack95, $stack96, $stack99, $stack100, $stack103, $stack104, $stack107, $stack108, $stack111, $stack112, $stack115, $stack116, $stack119, $stack120, $stack123, $stack124, $stack127, $stack128, $stack131, $stack132, $stack135, $stack136, $stack139, $stack142, $stack144, $stack147, $stack149, $stack151, $stack152;
        java.lang.String[] $stack5, $stack7, $stack9, $stack13, $stack18, $stack19, $stack25, $stack26, $stack32, $stack33, $stack39, $stack40, $stack46, $stack47, $stack53, $stack54, $stack60, $stack61, $stack67, $stack68, $stack74, $stack75, $stack81, $stack82, $stack88, $stack89;
        int $stack10, $stack14, $stack17, $stack20, $stack21, $stack24, $stack27, $stack28, $stack31, $stack34, $stack35, $stack38, $stack41, $stack42, $stack45, $stack48, $stack49, $stack52, $stack55, $stack56, $stack59, $stack62, $stack63, $stack66, $stack69, $stack70, $stack73, $stack76, $stack77, $stack80, $stack83, $stack84, $stack87, $stack90, $stack91, $stack94, $stack140, i_1, j, i_2;
        char $stack143, $stack146, $stack148, $stack150, $stack153;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String)>(null, ".");

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>(null, ".", 3);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String)>("", ".");

        $stack10 = lengthof $stack9;

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("", ".", 3);

        $stack14 = lengthof $stack13;

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplitPreserveAllTokens(char,java.lang.String,char)>(46, ".", 32);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplitPreserveAllTokens(char,java.lang.String,char)>(46, ".", 44);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplitPreserveAllTokens(char,java.lang.String,char)>(46, ".,", 120);

        i_1 = 0;

     label01:
        $stack16 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack17 = virtualinvoke $stack16.<java.lang.String: int length()>();

        if i_1 >= $stack17 goto label04;

        j = 0;

     label02:
        $stack139 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack140 = virtualinvoke $stack139.<java.lang.String: int length()>();

        if j >= $stack140 goto label03;

        $stack142 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack143 = virtualinvoke $stack142.<java.lang.String: char charAt(int)>(i_1);

        $stack144 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack146 = virtualinvoke $stack144.<java.lang.String: char charAt(int)>(j);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplitPreserveAllTokens(char,java.lang.String,char)>($stack143, null, $stack146);

        $stack147 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack148 = virtualinvoke $stack147.<java.lang.String: char charAt(int)>(i_1);

        $stack149 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack150 = virtualinvoke $stack149.<java.lang.String: char charAt(int)>(i_1);

        $stack151 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack150);

        $stack152 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack153 = virtualinvoke $stack152.<java.lang.String: char charAt(int)>(j);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void innerTestSplitPreserveAllTokens(char,java.lang.String,char)>($stack148, $stack151, $stack153);

        j = j + 1;

        goto label02;

     label03:
        i_1 = i_1 + 1;

        goto label01;

     label04:
        $stack18 = newarray (java.lang.String)[2];

        $stack18[0] = "ab";

        $stack18[1] = "de fg";

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab de fg", null, 2);

        $stack20 = lengthof $stack18;

        $stack23 = (long) $stack20;

        $stack21 = lengthof $stack19;

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack23, $stack22);

        i_2 = 0;

     label05:
        $stack24 = lengthof $stack18;

        if i_2 >= $stack24 goto label06;

        $stack136 = $stack18[i_2];

        $stack135 = $stack19[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack136, $stack135);

        i_2 = i_2 + 1;

        goto label05;

     label06:
        $stack25 = newarray (java.lang.String)[2];

        $stack25[0] = "ab";

        $stack25[1] = "  de fg";

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab   de fg", null, 2);

        $stack27 = lengthof $stack25;

        $stack30 = (long) $stack27;

        $stack28 = lengthof $stack26;

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack30, $stack29);

        i_2 = 0;

     label07:
        $stack31 = lengthof $stack25;

        if i_2 >= $stack31 goto label08;

        $stack132 = $stack25[i_2];

        $stack131 = $stack26[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack132, $stack131);

        i_2 = i_2 + 1;

        goto label07;

     label08:
        $stack32 = newarray (java.lang.String)[2];

        $stack32[0] = "ab";

        $stack32[1] = "::de:fg";

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab:::de:fg", ":", 2);

        $stack34 = lengthof $stack32;

        $stack37 = (long) $stack34;

        $stack35 = lengthof $stack33;

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack37, $stack36);

        i_2 = 0;

     label09:
        $stack38 = lengthof $stack32;

        if i_2 >= $stack38 goto label10;

        $stack128 = $stack32[i_2];

        $stack127 = $stack33[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack128, $stack127);

        i_2 = i_2 + 1;

        goto label09;

     label10:
        $stack39 = newarray (java.lang.String)[3];

        $stack39[0] = "ab";

        $stack39[1] = "";

        $stack39[2] = " de fg";

        $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab   de fg", null, 3);

        $stack41 = lengthof $stack39;

        $stack44 = (long) $stack41;

        $stack42 = lengthof $stack40;

        $stack43 = (long) $stack42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack44, $stack43);

        i_2 = 0;

     label11:
        $stack45 = lengthof $stack39;

        if i_2 >= $stack45 goto label12;

        $stack124 = $stack39[i_2];

        $stack123 = $stack40[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack124, $stack123);

        i_2 = i_2 + 1;

        goto label11;

     label12:
        $stack46 = newarray (java.lang.String)[4];

        $stack46[0] = "ab";

        $stack46[1] = "";

        $stack46[2] = "";

        $stack46[3] = "de fg";

        $stack47 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab   de fg", null, 4);

        $stack48 = lengthof $stack46;

        $stack51 = (long) $stack48;

        $stack49 = lengthof $stack47;

        $stack50 = (long) $stack49;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack51, $stack50);

        i_2 = 0;

     label13:
        $stack52 = lengthof $stack46;

        if i_2 >= $stack52 goto label14;

        $stack120 = $stack46[i_2];

        $stack119 = $stack47[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack120, $stack119);

        i_2 = i_2 + 1;

        goto label13;

     label14:
        $stack53 = newarray (java.lang.String)[2];

        $stack53[0] = "ab";

        $stack53[1] = "cd:ef";

        $stack54 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab:cd:ef", ":", 2);

        $stack55 = lengthof $stack53;

        $stack58 = (long) $stack55;

        $stack56 = lengthof $stack54;

        $stack57 = (long) $stack56;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack58, $stack57);

        i_2 = 0;

     label15:
        $stack59 = lengthof $stack53;

        if i_2 >= $stack59 goto label16;

        $stack116 = $stack53[i_2];

        $stack115 = $stack54[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack116, $stack115);

        i_2 = i_2 + 1;

        goto label15;

     label16:
        $stack60 = newarray (java.lang.String)[2];

        $stack60[0] = "ab";

        $stack60[1] = ":cd:ef";

        $stack61 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab::cd:ef", ":", 2);

        $stack62 = lengthof $stack60;

        $stack65 = (long) $stack62;

        $stack63 = lengthof $stack61;

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack65, $stack64);

        i_2 = 0;

     label17:
        $stack66 = lengthof $stack60;

        if i_2 >= $stack66 goto label18;

        $stack112 = $stack60[i_2];

        $stack111 = $stack61[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack112, $stack111);

        i_2 = i_2 + 1;

        goto label17;

     label18:
        $stack67 = newarray (java.lang.String)[3];

        $stack67[0] = "ab";

        $stack67[1] = "";

        $stack67[2] = ":cd:ef";

        $stack68 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab:::cd:ef", ":", 3);

        $stack69 = lengthof $stack67;

        $stack72 = (long) $stack69;

        $stack70 = lengthof $stack68;

        $stack71 = (long) $stack70;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack72, $stack71);

        i_2 = 0;

     label19:
        $stack73 = lengthof $stack67;

        if i_2 >= $stack73 goto label20;

        $stack108 = $stack67[i_2];

        $stack107 = $stack68[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack108, $stack107);

        i_2 = i_2 + 1;

        goto label19;

     label20:
        $stack74 = newarray (java.lang.String)[4];

        $stack74[0] = "ab";

        $stack74[1] = "";

        $stack74[2] = "";

        $stack74[3] = "cd:ef";

        $stack75 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("ab:::cd:ef", ":", 4);

        $stack76 = lengthof $stack74;

        $stack79 = (long) $stack76;

        $stack77 = lengthof $stack75;

        $stack78 = (long) $stack77;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack79, $stack78);

        i_2 = 0;

     label21:
        $stack80 = lengthof $stack74;

        if i_2 >= $stack80 goto label22;

        $stack104 = $stack74[i_2];

        $stack103 = $stack75[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack104, $stack103);

        i_2 = i_2 + 1;

        goto label21;

     label22:
        $stack81 = newarray (java.lang.String)[5];

        $stack81[0] = "";

        $stack81[1] = "ab";

        $stack81[2] = "";

        $stack81[3] = "";

        $stack81[4] = "cd:ef";

        $stack82 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>(":ab:::cd:ef", ":", 5);

        $stack83 = lengthof $stack81;

        $stack86 = (long) $stack83;

        $stack84 = lengthof $stack82;

        $stack85 = (long) $stack84;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack86, $stack85);

        i_2 = 0;

     label23:
        $stack87 = lengthof $stack81;

        if i_2 >= $stack87 goto label24;

        $stack100 = $stack81[i_2];

        $stack99 = $stack82[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack100, $stack99);

        i_2 = i_2 + 1;

        goto label23;

     label24:
        $stack88 = newarray (java.lang.String)[6];

        $stack88[0] = "";

        $stack88[1] = "";

        $stack88[2] = "ab";

        $stack88[3] = "";

        $stack88[4] = "";

        $stack88[5] = "cd:ef";

        $stack89 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>("::ab:::cd:ef", ":", 6);

        $stack90 = lengthof $stack88;

        $stack93 = (long) $stack90;

        $stack91 = lengthof $stack89;

        $stack92 = (long) $stack91;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack93, $stack92);

        i_2 = 0;

     label25:
        $stack94 = lengthof $stack88;

        if i_2 >= $stack94 goto label26;

        $stack96 = $stack88[i_2];

        $stack95 = $stack89[i_2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack96, $stack95);

        i_2 = i_2 + 1;

        goto label25;

     label26:
        return;
    }

    private void innerTestSplitPreserveAllTokens(char, java.lang.String, char)
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.StringBuilder $stack9, $stack11, $stack12, $stack14, $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack35, $stack36, $stack40, $stack41, $stack42, $stack57, $stack58, $stack68, $stack69, $u0, $u1, $u2, $u3, $u4, $u5;
        long $stack30, $stack46, $stack52, $stack63, $stack74, $stack78;
        java.lang.String $stack10, $stack13, sepStr, $stack18, $stack27, $stack31, $stack32, $stack33, $stack37, $stack38, $stack43, $stack47, $stack48, $stack49, $stack53, $stack54, $stack55, $stack59, $stack60, $stack64, $stack65, $stack66, $stack70, $stack71, $stack75, $stack79, $stack80, $stack81;
        java.lang.String[] $stack28, $stack44, $stack50, $stack61, $stack72, $stack76;
        int $stack29, $stack45, $stack51, $stack62, $stack73, $stack77, $i0, $i1, $i2;
        char separator, noMatch;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        separator := @parameter0: char;

        sepStr := @parameter1: java.lang.String;

        noMatch := @parameter2: char;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed on separator hex(");

        $i0 = (int) separator;

        $stack10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), noMatch hex(");

        $i1 = (int) noMatch;

        $stack13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $stack14 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack13);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), sepStr(");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sepStr);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack20 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a");

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack27 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String)>($stack27, sepStr);

        $stack29 = lengthof $stack28;

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 4L, $stack30);

        $stack31 = $stack28[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack31);

        $stack32 = $stack28[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "b", $stack32);

        $stack33 = $stack28[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "", $stack33);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack35 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack36 = virtualinvoke $stack35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack37 = virtualinvoke $stack36.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack38 = $stack28[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack37, $stack38);

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack40 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a");

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(separator);

        $stack43 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack44 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String)>($stack43, sepStr);

        $stack45 = lengthof $stack44;

        $stack46 = (long) $stack45;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 3L, $stack46);

        $stack47 = $stack44[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "", $stack47);

        $stack48 = $stack44[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack48);

        $stack49 = $stack44[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "", $stack49);

        $i2 = (int) -1;

        $stack50 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>($stack27, sepStr, $i2);

        $stack51 = lengthof $stack50;

        $stack52 = (long) $stack51;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 4L, $stack52);

        $stack53 = $stack50[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack53);

        $stack54 = $stack50[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "b", $stack54);

        $stack55 = $stack50[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "", $stack55);

        $u4 = new java.lang.StringBuilder;

        specialinvoke $u4.<java.lang.StringBuilder: void <init>()>();

        $stack57 = virtualinvoke $u4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack58 = virtualinvoke $stack57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack60 = $stack50[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack59, $stack60);

        $stack61 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>($stack27, sepStr, 0);

        $stack62 = lengthof $stack61;

        $stack63 = (long) $stack62;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 4L, $stack63);

        $stack64 = $stack61[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack64);

        $stack65 = $stack61[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "b", $stack65);

        $stack66 = $stack61[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "", $stack66);

        $u5 = new java.lang.StringBuilder;

        specialinvoke $u5.<java.lang.StringBuilder: void <init>()>();

        $stack68 = virtualinvoke $u5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(noMatch);

        $stack69 = virtualinvoke $stack68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("c");

        $stack70 = virtualinvoke $stack69.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack71 = $stack61[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack70, $stack71);

        $stack72 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>($stack27, sepStr, 1);

        $stack73 = lengthof $stack72;

        $stack74 = (long) $stack73;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 1L, $stack74);

        $stack75 = $stack72[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack27, $stack75);

        $stack76 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitPreserveAllTokens(java.lang.String,java.lang.String,int)>($stack27, sepStr, 2);

        $stack77 = lengthof $stack76;

        $stack78 = (long) $stack77;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($stack18, 2L, $stack78);

        $stack79 = $stack76[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, "a", $stack79);

        $stack80 = virtualinvoke $stack27.<java.lang.String: java.lang.String substring(int)>(2);

        $stack81 = $stack76[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($stack18, $stack80, $stack81);

        return;
    }

    public void testSplitByCharacterType()
    {
        java.lang.String[] $stack1, $stack3, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25;
        long $stack5;
        int $stack4;
        org.apache.commons.lang3.StringUtilsTest this;
        boolean $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack1);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("");

        $stack4 = lengthof $stack3;

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack6 = newarray (java.lang.String)[5];

        $stack6[0] = "ab";

        $stack6[1] = " ";

        $stack6[2] = "de";

        $stack6[3] = " ";

        $stack6[4] = "fg";

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("ab de fg");

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = newarray (java.lang.String)[5];

        $stack9[0] = "ab";

        $stack9[1] = "   ";

        $stack9[2] = "de";

        $stack9[3] = " ";

        $stack9[4] = "fg";

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("ab   de fg");

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = newarray (java.lang.String)[5];

        $stack12[0] = "ab";

        $stack12[1] = ":";

        $stack12[2] = "cd";

        $stack12[3] = ":";

        $stack12[4] = "ef";

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("ab:cd:ef");

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = newarray (java.lang.String)[2];

        $stack15[0] = "number";

        $stack15[1] = "5";

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("number5");

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = newarray (java.lang.String)[3];

        $stack18[0] = "foo";

        $stack18[1] = "B";

        $stack18[2] = "ar";

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("fooBar");

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack18, $stack19);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = newarray (java.lang.String)[4];

        $stack21[0] = "foo";

        $stack21[1] = "200";

        $stack21[2] = "B";

        $stack21[3] = "ar";

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("foo200Bar");

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack21, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack24 = newarray (java.lang.String)[2];

        $stack24[0] = "ASFR";

        $stack24[1] = "ules";

        $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String)>("ASFRules");

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack24, $stack25);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        return;
    }

    public void testSplitByCharacterTypeCamelCase()
    {
        java.lang.String[] $stack1, $stack3, $stack6, $stack7, $stack9, $stack10, $stack12, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25;
        long $stack5;
        int $stack4;
        org.apache.commons.lang3.StringUtilsTest this;
        boolean $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack1);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("");

        $stack4 = lengthof $stack3;

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack6 = newarray (java.lang.String)[5];

        $stack6[0] = "ab";

        $stack6[1] = " ";

        $stack6[2] = "de";

        $stack6[3] = " ";

        $stack6[4] = "fg";

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("ab de fg");

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = newarray (java.lang.String)[5];

        $stack9[0] = "ab";

        $stack9[1] = "   ";

        $stack9[2] = "de";

        $stack9[3] = " ";

        $stack9[4] = "fg";

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("ab   de fg");

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = newarray (java.lang.String)[5];

        $stack12[0] = "ab";

        $stack12[1] = ":";

        $stack12[2] = "cd";

        $stack12[3] = ":";

        $stack12[4] = "ef";

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("ab:cd:ef");

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = newarray (java.lang.String)[2];

        $stack15[0] = "number";

        $stack15[1] = "5";

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("number5");

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack15, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = newarray (java.lang.String)[2];

        $stack18[0] = "foo";

        $stack18[1] = "Bar";

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("fooBar");

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack18, $stack19);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = newarray (java.lang.String)[3];

        $stack21[0] = "foo";

        $stack21[1] = "200";

        $stack21[2] = "Bar";

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("foo200Bar");

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack21, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack24 = newarray (java.lang.String)[2];

        $stack24[0] = "ASF";

        $stack24[1] = "Rules";

        $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)>("ASFRules");

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack24, $stack25);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        return;
    }

    public void testDeleteWhitespace_String()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack7, $stack9, $stack10, $stack11, $stack12, $stack14, $stack16, $stack18;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>("  \f  \t\t\u001f\n\n \u000b  ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack7 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack9);

        $stack11 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack10 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>($stack10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>("  \u00a0  \t\t\n\n \u202f  ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\u00a0\u202f", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>("\u00a0\u202f");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\u00a0\u202f", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>("\u000bt  \t\n\te\rs\n\n   \tt");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("test", $stack18);

        return;
    }

    public void testLang623()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)>("\u00de", 222, 116);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("t", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)>("\u00fe", 254, 116);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("t", $stack4);

        return;
    }

    public void testReplace_StringStringString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(null, null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(null, null, "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(null, "any", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(null, "any", "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("", null, "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("", "any", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("", "any", "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("FOO", "", "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("FOO", null, "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("FOO", "F", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("FOO", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("foofoofoo", "foo", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("foofoofoo", "foo", "bar");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("barbarbar", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>("foofoofoo", "oo", "ar");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("farfarfar", $stack30);

        return;
    }

    public void testReplace_StringStringStringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0, $i1, $i2;
        java.lang.String $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34, $stack36, $u0;
        char[] $stack19;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(null, null, null, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(null, null, "any", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(null, "any", null, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(null, "any", "any", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("", null, null, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("", null, "any", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack13);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("", "any", null, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("", "any", "any", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack17);

        $u0 = new java.lang.String;

        $stack19 = newarray (char)[5];

        $stack19[0] = 111;

        $stack19[1] = 111;

        $stack19[2] = 102;

        $stack19[3] = 111;

        $stack19[4] = 111;

        specialinvoke $u0.<java.lang.String: void <init>(char[])>($stack19);

        $i0 = (int) -1;

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>($u0, "x", "", $i0);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($u0, $stack20);

        $i1 = (int) -1;

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", $i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("f", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("oofoo", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ofoo", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("fo", $stack30);

        $stack32 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("f", $stack32);

        $i2 = (int) -5;

        $stack34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", $i2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("f", $stack34);

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>("oofoo", "o", "", 1000);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("f", $stack36);

        return;
    }

    public void testReplaceOnce_StringStringString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>(null, null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>(null, null, "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>(null, "any", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>(null, "any", "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("", null, "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("", "any", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("", "any", "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("FOO", "", "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("FOO", null, "any");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("FOO", "F", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("FOO", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("FOO", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceOnce(java.lang.String,java.lang.String,java.lang.String)>("foofoofoo", "foo", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foofoo", $stack26);

        return;
    }

    public void testReplace_StringStringArrayStringArray()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack1, $stack2, $stack4, $stack5, $stack8, $stack10, $stack12, $stack14, $stack15, $stack17, $stack18, $stack20, $stack21, $stack23, $stack24, $stack26, $stack27, $stack30, $stack31, $stack34, $stack35, $stack37, $stack38;
        java.lang.String $stack3, $stack6, $stack7, $stack9, $stack11, $stack13, $stack16, $stack19, $stack22, $stack25, $stack29, $stack33, $stack36, $stack39;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = newarray (java.lang.String)[1];

        $stack1[0] = "a";

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "b";

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>(null, $stack1, $stack2);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack3);

        $stack4 = newarray (java.lang.String)[1];

        $stack4[0] = "a";

        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "b";

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("", $stack4, $stack5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, "");

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, "aba");

        $stack8 = newarray (java.lang.String)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack8, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, "aba");

        $stack10 = newarray (java.lang.String)[0];

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", null, $stack10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, "aba");

        $stack12 = newarray (java.lang.String)[1];

        $stack12[0] = "a";

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack12, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, "aba");

        $stack14 = newarray (java.lang.String)[1];

        $stack14[0] = "a";

        $stack15 = newarray (java.lang.String)[1];

        $stack15[0] = "";

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack14, $stack15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, "b");

        $stack17 = newarray (java.lang.String)[1];

        $stack17[0] = null;

        $stack18 = newarray (java.lang.String)[1];

        $stack18[0] = "a";

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack17, $stack18);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, "aba");

        $stack20 = newarray (java.lang.String)[2];

        $stack20[0] = "ab";

        $stack20[1] = "d";

        $stack21 = newarray (java.lang.String)[2];

        $stack21[0] = "w";

        $stack21[1] = "t";

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("abcde", $stack20, $stack21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack22, "wcte");

        $stack23 = newarray (java.lang.String)[2];

        $stack23[0] = "ab";

        $stack23[1] = "d";

        $stack24 = newarray (java.lang.String)[2];

        $stack24[0] = "d";

        $stack24[1] = "t";

        $stack25 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("abcde", $stack23, $stack24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack25, "dcte");

        $stack26 = newarray (java.lang.String)[2];

        $stack26[0] = "a";

        $stack26[1] = "b";

        $stack27 = newarray (java.lang.String)[2];

        $stack27[0] = "b";

        $stack27[1] = "c";

        $stack29 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("abc", $stack26, $stack27);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcc", $stack29);

        $stack30 = newarray (java.lang.String)[61];

        $stack30[0] = "a";

        $stack30[1] = "b";

        $stack30[2] = "c";

        $stack30[3] = "d";

        $stack30[4] = "e";

        $stack30[5] = "f";

        $stack30[6] = "g";

        $stack30[7] = "h";

        $stack30[8] = "i";

        $stack30[9] = "j";

        $stack30[10] = "k";

        $stack30[11] = "l";

        $stack30[12] = "m";

        $stack30[13] = "n";

        $stack30[14] = "o";

        $stack30[15] = "p";

        $stack30[16] = "q";

        $stack30[17] = "r";

        $stack30[18] = "s";

        $stack30[19] = "t";

        $stack30[20] = "u";

        $stack30[21] = "v";

        $stack30[22] = "w";

        $stack30[23] = "x";

        $stack30[24] = "y";

        $stack30[25] = "z";

        $stack30[26] = "A";

        $stack30[27] = "B";

        $stack30[28] = "C";

        $stack30[29] = "D";

        $stack30[30] = "E";

        $stack30[31] = "F";

        $stack30[32] = "G";

        $stack30[33] = "H";

        $stack30[34] = "I";

        $stack30[35] = "J";

        $stack30[36] = "K";

        $stack30[37] = "L";

        $stack30[38] = "M";

        $stack30[39] = "N";

        $stack30[40] = "O";

        $stack30[41] = "P";

        $stack30[42] = "Q";

        $stack30[43] = "R";

        $stack30[44] = "S";

        $stack30[45] = "T";

        $stack30[46] = "U";

        $stack30[47] = "V";

        $stack30[48] = "W";

        $stack30[49] = "X";

        $stack30[50] = "Y";

        $stack30[51] = "Z";

        $stack30[52] = "1";

        $stack30[53] = "2";

        $stack30[54] = "3";

        $stack30[55] = "4";

        $stack30[56] = "5";

        $stack30[57] = "6";

        $stack30[58] = "7";

        $stack30[59] = "8";

        $stack30[60] = "9";

        $stack31 = newarray (java.lang.String)[61];

        $stack31[0] = "n";

        $stack31[1] = "o";

        $stack31[2] = "p";

        $stack31[3] = "q";

        $stack31[4] = "r";

        $stack31[5] = "s";

        $stack31[6] = "t";

        $stack31[7] = "u";

        $stack31[8] = "v";

        $stack31[9] = "w";

        $stack31[10] = "x";

        $stack31[11] = "y";

        $stack31[12] = "z";

        $stack31[13] = "a";

        $stack31[14] = "b";

        $stack31[15] = "c";

        $stack31[16] = "d";

        $stack31[17] = "e";

        $stack31[18] = "f";

        $stack31[19] = "g";

        $stack31[20] = "h";

        $stack31[21] = "i";

        $stack31[22] = "j";

        $stack31[23] = "k";

        $stack31[24] = "l";

        $stack31[25] = "m";

        $stack31[26] = "N";

        $stack31[27] = "O";

        $stack31[28] = "P";

        $stack31[29] = "Q";

        $stack31[30] = "R";

        $stack31[31] = "S";

        $stack31[32] = "T";

        $stack31[33] = "U";

        $stack31[34] = "V";

        $stack31[35] = "W";

        $stack31[36] = "X";

        $stack31[37] = "Y";

        $stack31[38] = "Z";

        $stack31[39] = "A";

        $stack31[40] = "B";

        $stack31[41] = "C";

        $stack31[42] = "D";

        $stack31[43] = "E";

        $stack31[44] = "F";

        $stack31[45] = "G";

        $stack31[46] = "H";

        $stack31[47] = "I";

        $stack31[48] = "J";

        $stack31[49] = "K";

        $stack31[50] = "L";

        $stack31[51] = "M";

        $stack31[52] = "5";

        $stack31[53] = "6";

        $stack31[54] = "7";

        $stack31[55] = "8";

        $stack31[56] = "9";

        $stack31[57] = "1";

        $stack31[58] = "2";

        $stack31[59] = "3";

        $stack31[60] = "4";

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("d216.102oren", $stack30, $stack31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("q651.506bera", $stack33);

        $stack34 = newarray (java.lang.String)[1];

        $stack34[0] = "a";

        $stack35 = newarray (java.lang.String)[1];

        $stack35[0] = null;

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack34, $stack35);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack36, "aba");

        $stack37 = newarray (java.lang.String)[2];

        $stack37[0] = "a";

        $stack37[1] = "b";

        $stack38 = newarray (java.lang.String)[2];

        $stack38[0] = "c";

        $stack38[1] = null;

        $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack37, $stack38);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack39, "cbc");

        return;
    }

    public void testReplace_StringStringArrayStringArrayBoolean()
    {
        java.lang.IllegalStateException $stack30;
        java.lang.String[] $stack2, $stack3, $stack5, $stack6, $stack9, $stack11, $stack13, $stack15, $stack16, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25, $stack27, $stack28;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack4, $stack7, $stack8, $stack10, $stack12, $stack14, $stack17, $stack20, $stack23, $stack26;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = newarray (java.lang.String)[1];

        $stack2[0] = "a";

        $stack3 = newarray (java.lang.String)[1];

        $stack3[0] = "b";

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>(null, $stack2, $stack3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack4);

        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "a";

        $stack6 = newarray (java.lang.String)[1];

        $stack6[0] = "b";

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("", $stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, "");

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("aba", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, "aba");

        $stack9 = newarray (java.lang.String)[0];

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack9, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, "aba");

        $stack11 = newarray (java.lang.String)[0];

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("aba", null, $stack11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack12, "aba");

        $stack13 = newarray (java.lang.String)[0];

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack13, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, "aba");

        $stack15 = newarray (java.lang.String)[1];

        $stack15[0] = "a";

        $stack16 = newarray (java.lang.String)[1];

        $stack16[0] = "";

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack15, $stack16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack17, "b");

        $stack18 = newarray (java.lang.String)[1];

        $stack18[0] = null;

        $stack19 = newarray (java.lang.String)[1];

        $stack19[0] = "a";

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("aba", $stack18, $stack19);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack20, "aba");

        $stack21 = newarray (java.lang.String)[2];

        $stack21[0] = "ab";

        $stack21[1] = "d";

        $stack22 = newarray (java.lang.String)[2];

        $stack22[0] = "w";

        $stack22[1] = "t";

        $stack23 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("abcde", $stack21, $stack22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, "wcte");

        $stack24 = newarray (java.lang.String)[2];

        $stack24[0] = "ab";

        $stack24[1] = "d";

        $stack25 = newarray (java.lang.String)[2];

        $stack25[0] = "d";

        $stack25[1] = "t";

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("abcde", $stack24, $stack25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack26, "tcte");

     label1:
        $stack27 = newarray (java.lang.String)[2];

        $stack27[0] = "ab";

        $stack27[1] = "d";

        $stack28 = newarray (java.lang.String)[2];

        $stack28[0] = "d";

        $stack28[1] = "ab";

        staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEachRepeatedly(java.lang.String,java.lang.String[],java.lang.String[])>("abcde", $stack27, $stack28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should be a circular reference");

     label2:
        goto label4;

     label3:
        $stack30 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testReplaceChars_StringCharChar()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)>(null, 98, 122);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)>("", 98, 122);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)>("abcba", 98, 122);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("azcza", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,char,char)>("abcba", 120, 122);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcba", $stack8);

        return;
    }

    public void testReplaceChars_StringStringString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34, $stack36, $stack38, $stack40, $stack42, $stack44, $stack46, $stack48, $stack50, $stack52, $stack54, $stack56, $stack58, $stack60;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>(null, null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>(null, "", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>(null, "a", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>(null, null, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>(null, null, "x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("", "", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("", "a", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("", null, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("", null, "x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", null, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", null, "x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", "", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", "", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack30);

        $stack32 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", "", "x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack32);

        $stack34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", "b", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ac", $stack34);

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", "b", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ac", $stack36);

        $stack38 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", "b", "x");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("axc", $stack38);

        $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "bc", "yz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ayzya", $stack40);

        $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "bc", "y");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ayya", $stack42);

        $stack44 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "bc", "yzx");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ayzya", $stack44);

        $stack46 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "z", "w");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcba", $stack46);

        $stack48 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "z", "w");

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>("abcba", $stack48);

        $stack50 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("hello", "ho", "jy");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("jelly", $stack50);

        $stack52 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "bc", "yz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ayzya", $stack52);

        $stack54 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "bc", "y");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ayya", $stack54);

        $stack56 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abcba", "bc", "yzx");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ayzya", $stack56);

        $stack58 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("abc", "ab", "bc");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcc", $stack58);

        $stack60 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>("d216.102oren", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("q651.506bera", $stack60);

        return;
    }

    public void testOverlay_StringStringIntInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34, $stack36, $stack38, $stack40, $stack42;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>(null, null, 2, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $i0 = (int) -2;

        $i1 = (int) -4;

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>(null, null, $i0, $i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("", null, 0, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("", "", 0, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("", "zzzz", 0, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzz", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("", "zzzz", 2, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzz", $stack12);

        $i2 = (int) -2;

        $i3 = (int) -4;

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("", "zzzz", $i2, $i3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzz", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", null, 2, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abef", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", null, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abef", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "", 2, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abef", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "", 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abef", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", 2, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abzzzzef", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abzzzzef", $stack26);

        $i4 = (int) -1;

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", $i4, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzzef", $stack28);

        $i5 = (int) -1;

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", 4, $i5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzzef", $stack30);

        $i6 = (int) -2;

        $i7 = (int) -1;

        $stack32 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", $i6, $i7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzzabcdef", $stack32);

        $i8 = (int) -1;

        $i9 = (int) -2;

        $stack34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", $i8, $i9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzzabcdef", $stack34);

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", 4, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcdzzzz", $stack36);

        $stack38 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", 10, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcdzzzz", $stack38);

        $stack40 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", 8, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcdefzzzz", $stack40);

        $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String overlay(java.lang.String,java.lang.String,int,int)>("abcdef", "zzzz", 10, 8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcdefzzzz", $stack42);

        return;
    }

    public void testRepeat_StringInt()
    {
        long $stack17;
        int $stack16;
        org.apache.commons.lang3.StringUtilsTest this;
        char[] $stack18;
        java.lang.String $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack14;
        boolean $stack19;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>(null, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>("ab", 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>("", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>("a", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaa", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>("ab", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ababab", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>("abc", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcabcabc", $stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>("a", 10000);

        $stack16 = virtualinvoke $stack14.<java.lang.String: int length()>();

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10000L, $stack17);

        $stack18 = newarray (char)[1];

        $stack18[0] = 97;

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsOnly(java.lang.CharSequence,char[])>($stack14, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        return;
    }

    public void testRepeat_StringStringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,java.lang.String,int)>(null, null, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,java.lang.String,int)>(null, "x", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,java.lang.String,int)>("", null, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,java.lang.String,int)>("ab", "", 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,java.lang.String,int)>("", "", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,java.lang.String,int)>("", "x", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xx", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,java.lang.String,int)>("?", ", ", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("?, ?, ?", $stack14);

        return;
    }

    public void testChop()
    {
        java.lang.String[] $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, chopCase;
        int len$, i$;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String original, expectedResult, $stack22;
        java.lang.String[][] $stack8;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack8 = newarray (java.lang.String[])[12];

        $stack9 = newarray (java.lang.String)[2];

        $stack9[0] = "foo\r\n";

        $stack9[1] = "foo";

        $stack8[0] = $stack9;

        $stack10 = newarray (java.lang.String)[2];

        $stack10[0] = "foo\n";

        $stack10[1] = "foo";

        $stack8[1] = $stack10;

        $stack11 = newarray (java.lang.String)[2];

        $stack11[0] = "foo\r";

        $stack11[1] = "foo";

        $stack8[2] = $stack11;

        $stack12 = newarray (java.lang.String)[2];

        $stack12[0] = "foo \r";

        $stack12[1] = "foo ";

        $stack8[3] = $stack12;

        $stack13 = newarray (java.lang.String)[2];

        $stack13[0] = "foo";

        $stack13[1] = "fo";

        $stack8[4] = $stack13;

        $stack14 = newarray (java.lang.String)[2];

        $stack14[0] = "foo\nfoo";

        $stack14[1] = "foo\nfo";

        $stack8[5] = $stack14;

        $stack15 = newarray (java.lang.String)[2];

        $stack15[0] = "\n";

        $stack15[1] = "";

        $stack8[6] = $stack15;

        $stack16 = newarray (java.lang.String)[2];

        $stack16[0] = "\r";

        $stack16[1] = "";

        $stack8[7] = $stack16;

        $stack17 = newarray (java.lang.String)[2];

        $stack17[0] = "\r\n";

        $stack17[1] = "";

        $stack8[8] = $stack17;

        $stack18 = newarray (java.lang.String)[2];

        $stack18[0] = null;

        $stack18[1] = null;

        $stack8[9] = $stack18;

        $stack19 = newarray (java.lang.String)[2];

        $stack19[0] = "";

        $stack19[1] = "";

        $stack8[10] = $stack19;

        $stack20 = newarray (java.lang.String)[2];

        $stack20[0] = "a";

        $stack20[1] = "";

        $stack8[11] = $stack20;

        len$ = lengthof $stack8;

        i$ = 0;

     label1:
        if i$ >= len$ goto label2;

        chopCase = $stack8[i$];

        original = chopCase[0];

        expectedResult = chopCase[1];

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chop(java.lang.String)>(original);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chop(String) failed", expectedResult, $stack22);

        i$ = i$ + 1;

        goto label1;

     label2:
        return;
    }

    public void testChomp()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, chompCase;
        int len$, i$;
        java.lang.String $stack27, $stack30, $stack33, $stack36, $stack39, $stack42, $stack45, $stack48, $stack51, $stack54, $stack57, $stack60, $stack63, $stack66, original, expectedResult, $stack68;
        java.lang.String[][] $stack8;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack8 = newarray (java.lang.String[])[16];

        $stack9 = newarray (java.lang.String)[2];

        $stack9[0] = "foo\r\n";

        $stack9[1] = "foo";

        $stack8[0] = $stack9;

        $stack10 = newarray (java.lang.String)[2];

        $stack10[0] = "foo\n";

        $stack10[1] = "foo";

        $stack8[1] = $stack10;

        $stack11 = newarray (java.lang.String)[2];

        $stack11[0] = "foo\r";

        $stack11[1] = "foo";

        $stack8[2] = $stack11;

        $stack12 = newarray (java.lang.String)[2];

        $stack12[0] = "foo \r";

        $stack12[1] = "foo ";

        $stack8[3] = $stack12;

        $stack13 = newarray (java.lang.String)[2];

        $stack13[0] = "foo";

        $stack13[1] = "foo";

        $stack8[4] = $stack13;

        $stack14 = newarray (java.lang.String)[2];

        $stack14[0] = "foo\n\n";

        $stack14[1] = "foo\n";

        $stack8[5] = $stack14;

        $stack15 = newarray (java.lang.String)[2];

        $stack15[0] = "foo\r\n\r\n";

        $stack15[1] = "foo\r\n";

        $stack8[6] = $stack15;

        $stack16 = newarray (java.lang.String)[2];

        $stack16[0] = "foo\nfoo";

        $stack16[1] = "foo\nfoo";

        $stack8[7] = $stack16;

        $stack17 = newarray (java.lang.String)[2];

        $stack17[0] = "foo\n\rfoo";

        $stack17[1] = "foo\n\rfoo";

        $stack8[8] = $stack17;

        $stack18 = newarray (java.lang.String)[2];

        $stack18[0] = "\n";

        $stack18[1] = "";

        $stack8[9] = $stack18;

        $stack19 = newarray (java.lang.String)[2];

        $stack19[0] = "\r";

        $stack19[1] = "";

        $stack8[10] = $stack19;

        $stack20 = newarray (java.lang.String)[2];

        $stack20[0] = "a";

        $stack20[1] = "a";

        $stack8[11] = $stack20;

        $stack21 = newarray (java.lang.String)[2];

        $stack21[0] = "\r\n";

        $stack21[1] = "";

        $stack8[12] = $stack21;

        $stack22 = newarray (java.lang.String)[2];

        $stack22[0] = "";

        $stack22[1] = "";

        $stack8[13] = $stack22;

        $stack23 = newarray (java.lang.String)[2];

        $stack23[0] = null;

        $stack23[1] = null;

        $stack8[14] = $stack23;

        $stack24 = newarray (java.lang.String)[2];

        $stack24[0] = "foo\n\r";

        $stack24[1] = "foo\n";

        $stack8[15] = $stack24;

        len$ = lengthof $stack8;

        i$ = 0;

     label1:
        if i$ >= len$ goto label2;

        chompCase = $stack8[i$];

        original = chompCase[0];

        expectedResult = chompCase[1];

        $stack68 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String)>(original);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String) failed", expectedResult, $stack68);

        i$ = i$ + 1;

        goto label1;

     label2:
        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("foobar", "bar");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "foo", $stack27);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("foobar", "baz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "foobar", $stack30);

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("foo", "foooo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "foo", $stack33);

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("foobar", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "foobar", $stack36);

        $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("foobar", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "foobar", $stack39);

        $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("", "foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "", $stack42);

        $stack45 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "", $stack45);

        $stack48 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "", $stack48);

        $stack51 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>(null, "foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", null, $stack51);

        $stack54 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", null, $stack54);

        $stack57 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>(null, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", null, $stack57);

        $stack60 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("foo", "foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "", $stack60);

        $stack63 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>(" foo", "foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", " ", $stack63);

        $stack66 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String chomp(java.lang.String,java.lang.String)>("foo ", "foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("chomp(String, String) failed", "foo ", $stack66);

        return;
    }

    public void testRightPad_StringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>(null, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>("", 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("     ", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>("abc", 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc  ", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>("abc", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack8);

        $i0 = (int) -1;

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int)>("abc", $i0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack10);

        return;
    }

    public void testRightPad_StringIntChar()
    {
        long $stack17;
        int $stack16, $i0;
        org.apache.commons.lang3.StringUtilsTest this;
        char[] $stack18;
        java.lang.String $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack14;
        boolean $stack19;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(null, 5, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>("", 5, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("     ", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>("abc", 5, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc  ", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>("abc", 2, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack9);

        $i0 = (int) -1;

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>("abc", $i0, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>("abc", 5, 120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcxx", $stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>("aaa", 10000, 97);

        $stack16 = virtualinvoke $stack14.<java.lang.String: int length()>();

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10000L, $stack17);

        $stack18 = newarray (char)[1];

        $stack18[0] = 97;

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsOnly(java.lang.CharSequence,char[])>($stack14, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        return;
    }

    public void testRightPad_StringIntString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(null, 5, "-+");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("", 5, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("     ", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(null, 8, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("abc", 7, "-+");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc-+-+", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("abc", 6, "-+~");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc-+~", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("abc", 5, "-+~");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc-+", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("abc", 2, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack14);

        $i0 = (int) -1;

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("abc", $i0, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("abc", 5, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc  ", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>("abc", 5, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc  ", $stack20);

        return;
    }

    public void testLeftPad_StringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int)>(null, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int)>("", 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("     ", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int)>("abc", 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  abc", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int)>("abc", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack8);

        return;
    }

    public void testLeftPad_StringIntChar()
    {
        long $stack17;
        int $stack16;
        org.apache.commons.lang3.StringUtilsTest this;
        char[] $stack18;
        java.lang.String $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack14;
        boolean $stack19;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(null, 5, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>("", 5, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("     ", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>("abc", 5, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  abc", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>("abc", 5, 120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xxabc", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>("abc", 5, 65535);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\uffff\uffffabc", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>("abc", 2, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>("aaa", 10000, 97);

        $stack16 = virtualinvoke $stack14.<java.lang.String: int length()>();

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10000L, $stack17);

        $stack18 = newarray (char)[1];

        $stack18[0] = 97;

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsOnly(java.lang.CharSequence,char[])>($stack14, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        return;
    }

    public void testLeftPad_StringIntString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(null, 5, "-+");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(null, 5, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("", 5, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("     ", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("abc", 7, "-+");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-+-+abc", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("abc", 6, "-+~");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-+~abc", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("abc", 5, "-+~");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-+abc", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("abc", 2, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack14);

        $i0 = (int) -1;

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("abc", $i0, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("abc", 5, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  abc", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>("abc", 5, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  abc", $stack20);

        return;
    }

    public void testLengthString()
    {
        long $stack3, $stack6, $stack9, $stack12, $stack15, $stack18;
        int $stack2, $stack5, $stack8, $stack11, $stack14, $stack17;
        org.apache.commons.lang3.StringUtilsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(null);

        $stack3 = (long) $stack2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>("");

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>("");

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>("A");

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(" ");

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>("ABCDEFGH");

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack18);

        return;
    }

    public void testLengthStringBuffer()
    {
        long $stack4, $stack8, $stack12, $stack16, $stack20;
        java.lang.StringBuffer $stack1, $stack5, $stack9, $stack13, $stack17;
        int $stack3, $stack7, $stack11, $stack15, $stack19;
        org.apache.commons.lang3.StringUtilsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = new java.lang.StringBuffer;

        specialinvoke $stack1.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack1);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $stack5 = new java.lang.StringBuffer;

        specialinvoke $stack5.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack5);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack9 = new java.lang.StringBuffer;

        specialinvoke $stack9.<java.lang.StringBuffer: void <init>(java.lang.String)>("A");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack9);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack12);

        $stack13 = new java.lang.StringBuffer;

        specialinvoke $stack13.<java.lang.StringBuffer: void <init>(java.lang.String)>(" ");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack13);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack16);

        $stack17 = new java.lang.StringBuffer;

        specialinvoke $stack17.<java.lang.StringBuffer: void <init>(java.lang.String)>("ABCDEFGH");

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack17);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack20);

        return;
    }

    public void testLengthStringBuilder()
    {
        long $stack4, $stack8, $stack12, $stack16, $stack20;
        int $stack3, $stack7, $stack11, $stack15, $stack19;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.StringBuilder $stack1, $stack5, $stack9, $stack13, $stack17;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = new java.lang.StringBuilder;

        specialinvoke $stack1.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack1);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $stack5 = new java.lang.StringBuilder;

        specialinvoke $stack5.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack5);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>(java.lang.String)>("A");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack9);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack12);

        $stack13 = new java.lang.StringBuilder;

        specialinvoke $stack13.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack13);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack16);

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>("ABCDEFGH");

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack17);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack20);

        return;
    }

    public void testLength_CharBuffer()
    {
        java.nio.CharBuffer $stack2, $stack6, $stack10, $stack14;
        long $stack4, $stack8, $stack12, $stack16;
        int $stack3, $stack7, $stack11, $stack15;
        org.apache.commons.lang3.StringUtilsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("");

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $stack6 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("A");

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack6);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack8);

        $stack10 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(" ");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack10);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack12);

        $stack14 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("ABCDEFGH");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>($stack14);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack16);

        return;
    }

    public void testCenter_StringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0, $i1;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $i0 = (int) -1;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>(null, $i0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>(null, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("    ", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("ab", 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack8);

        $i1 = (int) -1;

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("ab", $i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("ab", 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("    ", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("ab", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" ab ", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("abcd", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcd", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("a", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" a  ", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int)>("a", 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  a  ", $stack22);

        return;
    }

    public void testCenter_StringIntChar()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0, $i1;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $i0 = (int) -1;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>(null, $i0, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>(null, 4, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("", 4, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("    ", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("ab", 0, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack8);

        $i1 = (int) -1;

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("ab", $i1, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("ab", 1, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("", 4, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("    ", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("ab", 4, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" ab ", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("abcd", 2, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcd", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("a", 4, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" a  ", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("a", 5, 32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  a  ", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>("a", 5, 120);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xxaxx", $stack24);

        return;
    }

    public void testCenter_StringIntString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0, $i1;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>(null, 4, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $i0 = (int) -1;

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>(null, $i0, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>(null, 4, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("", 4, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("    ", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("ab", 0, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack10);

        $i1 = (int) -1;

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("ab", $i1, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("ab", 1, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("", 4, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("    ", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("ab", 4, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" ab ", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("abcd", 2, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcd", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("a", 4, " ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(" a  ", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("a", 4, "yz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("yayz", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("a", 7, "yz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("yzyayzy", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("abc", 7, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  abc  ", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,java.lang.String)>("abc", 7, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("  abc  ", $stack30);

        return;
    }

    public void testReverse_String()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverse(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverse(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverse(java.lang.String)>("backwards");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("sdrawkcab", $stack6);

        return;
    }

    public void testReverseDelimited_StringChar()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverseDelimited(java.lang.String,char)>(null, 46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverseDelimited(java.lang.String,char)>("", 46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverseDelimited(java.lang.String,char)>("a.b.c", 46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c.b.a", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverseDelimited(java.lang.String,char)>("a b c", 46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String reverseDelimited(java.lang.String,char)>("", 46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        return;
    }

    public void testDefault_String()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String)>("abc");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack6);

        return;
    }

    public void testDefault_StringString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String,java.lang.String)>(null, "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String,java.lang.String)>("", "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String,java.lang.String)>("abc", "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack6);

        return;
    }

    public void testDefaultIfEmpty_StringString()
    {
        java.lang.CharSequence $stack3, $stack5, $stack7, $stack8, $stack9;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String s;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>(null, "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>("", "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>("abc", "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>("", null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>("abc", "NULL");

        s = (java.lang.String) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", s);

        return;
    }

    public void testDefaultIfBlank_StringString()
    {
        java.lang.CharSequence $stack3, $stack5, $stack7, $stack9, $stack10, $stack11;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String s;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>(null, "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>("", "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>(" ", "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>("abc", "NULL");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>("", null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>("abc", "NULL");

        s = (java.lang.String) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", s);

        return;
    }

    public void testDefaultIfEmpty_StringBuilders()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack7, $stack13, $stack20;
        java.lang.CharSequence $stack5, $stack11, $stack15, $stack18;
        java.lang.StringBuilder $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack17, s;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>(java.lang.String)>("NULL");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack2, $stack4);

        $stack6 = (java.lang.StringBuilder) $stack5;

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack7);

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>(java.lang.String)>("abc");

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>(java.lang.String)>("NULL");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack8, $stack10);

        $stack12 = (java.lang.StringBuilder) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack14, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack15);

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>(java.lang.String)>("abc");

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>("NULL");

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack16, $stack17);

        s = (java.lang.StringBuilder) $stack18;

        $stack20 = virtualinvoke s.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack20);

        return;
    }

    public void testDefaultIfBlank_StringBuilders()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack7, $stack13, $stack19, $stack26;
        java.lang.CharSequence $stack5, $stack11, $stack17, $stack21, $stack24;
        java.lang.StringBuilder $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack23, s;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = new java.lang.StringBuilder;

        specialinvoke $stack2.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>(java.lang.String)>("NULL");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack2, $stack4);

        $stack6 = (java.lang.StringBuilder) $stack5;

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack7);

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");

        $stack10 = new java.lang.StringBuilder;

        specialinvoke $stack10.<java.lang.StringBuilder: void <init>(java.lang.String)>("NULL");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack8, $stack10);

        $stack12 = (java.lang.StringBuilder) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack13);

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>(java.lang.String)>("abc");

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>(java.lang.String)>("NULL");

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack14, $stack16);

        $stack18 = (java.lang.StringBuilder) $stack17;

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack19);

        $stack20 = new java.lang.StringBuilder;

        specialinvoke $stack20.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack20, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack21);

        $stack22 = new java.lang.StringBuilder;

        specialinvoke $stack22.<java.lang.StringBuilder: void <init>(java.lang.String)>("abc");

        $stack23 = new java.lang.StringBuilder;

        specialinvoke $stack23.<java.lang.StringBuilder: void <init>(java.lang.String)>("NULL");

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack22, $stack23);

        s = (java.lang.StringBuilder) $stack24;

        $stack26 = virtualinvoke s.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack26);

        return;
    }

    public void testDefaultIfEmpty_StringBuffers()
    {
        java.lang.StringBuffer $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack17, s;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack7, $stack13, $stack20;
        java.lang.CharSequence $stack5, $stack11, $stack15, $stack18;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = new java.lang.StringBuffer;

        specialinvoke $stack2.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        $stack4 = new java.lang.StringBuffer;

        specialinvoke $stack4.<java.lang.StringBuffer: void <init>(java.lang.String)>("NULL");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack2, $stack4);

        $stack6 = (java.lang.StringBuffer) $stack5;

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack7);

        $stack8 = new java.lang.StringBuffer;

        specialinvoke $stack8.<java.lang.StringBuffer: void <init>(java.lang.String)>("abc");

        $stack10 = new java.lang.StringBuffer;

        specialinvoke $stack10.<java.lang.StringBuffer: void <init>(java.lang.String)>("NULL");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack8, $stack10);

        $stack12 = (java.lang.StringBuffer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack13);

        $stack14 = new java.lang.StringBuffer;

        specialinvoke $stack14.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack14, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack15);

        $stack16 = new java.lang.StringBuffer;

        specialinvoke $stack16.<java.lang.StringBuffer: void <init>(java.lang.String)>("abc");

        $stack17 = new java.lang.StringBuffer;

        specialinvoke $stack17.<java.lang.StringBuffer: void <init>(java.lang.String)>("NULL");

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack16, $stack17);

        s = (java.lang.StringBuffer) $stack18;

        $stack20 = virtualinvoke s.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack20);

        return;
    }

    public void testDefaultIfBlank_StringBuffers()
    {
        java.lang.StringBuffer $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack23, s;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack7, $stack13, $stack19, $stack26;
        java.lang.CharSequence $stack5, $stack11, $stack17, $stack21, $stack24;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = new java.lang.StringBuffer;

        specialinvoke $stack2.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        $stack4 = new java.lang.StringBuffer;

        specialinvoke $stack4.<java.lang.StringBuffer: void <init>(java.lang.String)>("NULL");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack2, $stack4);

        $stack6 = (java.lang.StringBuffer) $stack5;

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack7);

        $stack8 = new java.lang.StringBuffer;

        specialinvoke $stack8.<java.lang.StringBuffer: void <init>(java.lang.String)>(" ");

        $stack10 = new java.lang.StringBuffer;

        specialinvoke $stack10.<java.lang.StringBuffer: void <init>(java.lang.String)>("NULL");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack8, $stack10);

        $stack12 = (java.lang.StringBuffer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack13);

        $stack14 = new java.lang.StringBuffer;

        specialinvoke $stack14.<java.lang.StringBuffer: void <init>(java.lang.String)>("abc");

        $stack16 = new java.lang.StringBuffer;

        specialinvoke $stack16.<java.lang.StringBuffer: void <init>(java.lang.String)>("NULL");

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack14, $stack16);

        $stack18 = (java.lang.StringBuffer) $stack17;

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack19);

        $stack20 = new java.lang.StringBuffer;

        specialinvoke $stack20.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack20, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack21);

        $stack22 = new java.lang.StringBuffer;

        specialinvoke $stack22.<java.lang.StringBuffer: void <init>(java.lang.String)>("abc");

        $stack23 = new java.lang.StringBuffer;

        specialinvoke $stack23.<java.lang.StringBuffer: void <init>(java.lang.String)>("NULL");

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack22, $stack23);

        s = (java.lang.StringBuffer) $stack24;

        $stack26 = virtualinvoke s.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack26);

        return;
    }

    public void testDefaultIfEmpty_CharBuffers()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack7, $stack13, $stack20;
        java.lang.CharSequence $stack5, $stack11, $stack15, $stack18;
        java.nio.CharBuffer $stack3, $stack4, $stack6, $stack9, $stack10, $stack12, $stack14, $stack16, $stack17, s;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("");

        $stack4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("NULL");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack3, $stack4);

        $stack6 = (java.nio.CharBuffer) $stack5;

        $stack7 = virtualinvoke $stack6.<java.nio.CharBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack7);

        $stack9 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("abc");

        $stack10 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("NULL");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack9, $stack10);

        $stack12 = (java.nio.CharBuffer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.nio.CharBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack13);

        $stack14 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack14, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack15);

        $stack16 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("abc");

        $stack17 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("NULL");

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)>($stack16, $stack17);

        s = (java.nio.CharBuffer) $stack18;

        $stack20 = virtualinvoke s.<java.nio.CharBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack20);

        return;
    }

    public void testDefaultIfBlank_CharBuffers()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack7, $stack13, $stack19, $stack26;
        java.lang.CharSequence $stack5, $stack11, $stack17, $stack21, $stack24;
        java.nio.CharBuffer $stack3, $stack4, $stack6, $stack9, $stack10, $stack12, $stack15, $stack16, $stack18, $stack20, $stack22, $stack23, s;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("");

        $stack4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("NULL");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack3, $stack4);

        $stack6 = (java.nio.CharBuffer) $stack5;

        $stack7 = virtualinvoke $stack6.<java.nio.CharBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack7);

        $stack9 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(" ");

        $stack10 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("NULL");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack9, $stack10);

        $stack12 = (java.nio.CharBuffer) $stack11;

        $stack13 = virtualinvoke $stack12.<java.nio.CharBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack13);

        $stack15 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("abc");

        $stack16 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("NULL");

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack15, $stack16);

        $stack18 = (java.nio.CharBuffer) $stack17;

        $stack19 = virtualinvoke $stack18.<java.nio.CharBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack19);

        $stack20 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("");

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack20, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack21);

        $stack22 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("abc");

        $stack23 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>("NULL");

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.CharSequence defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)>($stack22, $stack23);

        s = (java.nio.CharBuffer) $stack24;

        $stack26 = virtualinvoke s.<java.nio.CharBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack26);

        return;
    }

    public void testAbbreviate_StringInt()
    {
        java.lang.IllegalArgumentException $stack28;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>(null, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("", 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("short", 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("short", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("Now is the time for all good men to come to the aid of their party.", 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Now is ...", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("raspberry peach", 14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("raspberry p...", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("raspberry peach", 15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("raspberry peach", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("raspberry peach", 16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("raspberry peach", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("abcdefg", 6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc...", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("abcdefg", 7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcdefg", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("abcdefg", 8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcdefg", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("abcdefg", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a...", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack26);

     label1:
        staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>("abc", 3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("StringUtils.abbreviate expecting IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $stack28 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testAbbreviate_StringIntInt()
    {
        java.lang.IllegalArgumentException $stack14, $stack102;
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0;
        java.lang.String $stack3, $stack5, $stack7, $stack11, $stack13;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>(null, 10, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>("", 0, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>("", 2, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack7);

     label1:
        staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>("abcdefghij", 0, 3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("StringUtils.abbreviate expecting IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $stack102 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>("abcdefghij", 5, 6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("StringUtils.abbreviate expecting IllegalArgumentException");

     label5:
        goto label7;

     label6:
        $stack14 := @caughtexception;

     label7:
        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>("raspberry peach", 11, 15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("raspberry peach", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>(null, 7, 14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack13);

        $i0 = (int) -1;

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("abcdefg...", $i0, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("abcdefg...", 0, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("abcdefg...", 1, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("abcdefg...", 2, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("abcdefg...", 3, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("abcdefg...", 4, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...fghi...", 5, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ghij...", 6, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...hijk...", 7, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 8, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 9, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 10, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 10, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 11, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 12, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 13, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 14, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 15, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 16, 10);

        specialinvoke this.<org.apache.commons.lang3.StringUtilsTest: void assertAbbreviateWithOffset(java.lang.String,int,int)>("...ijklmno", 2147483647, 10);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    private void assertAbbreviateWithOffset(java.lang.String, int, int)
    {
        int offset, maxWidth, $stack17, $stack26, $stack28, $stack12, $i0, $i1;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String abcdefghijklmno, $stack7, $stack11, expected, $stack25;
        boolean $stack29, $stack13;
        char $stack27;
        java.lang.StringBuilder $stack23, $stack24, $stack9, $stack10, $u0, $u1;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        expected := @parameter0: java.lang.String;

        offset := @parameter1: int;

        maxWidth := @parameter2: int;

        abcdefghijklmno = "abcdefghijklmno";

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>("abcdefghijklmno", offset, maxWidth);

        if offset < 0 goto label3;

        $stack17 = virtualinvoke abcdefghijklmno.<java.lang.String: int length()>();

        if offset >= $stack17 goto label3;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack23 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abbreviate(String,int,int) failed");

        $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- should contain offset character");

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack26 = 97 + offset;

        $stack27 = (char) $stack26;

        $i0 = (int) $stack27;

        $stack28 = virtualinvoke $stack7.<java.lang.String: int indexOf(int)>($i0);

        $i1 = (int) -1;

        if $stack28 == $i1 goto label1;

        $stack29 = 1;

        goto label2;

     label1:
        $stack29 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($stack25, $stack29);

     label3:
        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abbreviate(String,int,int) failed");

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- should not be greater than maxWidth");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack12 = virtualinvoke $stack7.<java.lang.String: int length()>();

        if $stack12 > maxWidth goto label4;

        $stack13 = 1;

        goto label5;

     label4:
        $stack13 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($stack11, $stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("abbreviate(String,int,int) failed", expected, $stack7);

        return;
    }

    public void testAbbreviateMiddle()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        int $i0;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack15, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34;
        java.lang.StringBuilder $stack14, $stack16, $stack17, $u0;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>(null, null, 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abc", null, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abc", ".", 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abc", ".", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abcdef", ".", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab.f", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("A very long text with unimportant stuff in the middle but interesting start and end to see if the text is complete.", "...", 50);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("A very long text with un...f the text is complete.", $stack12);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start text");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>("x", 10000);

        $stack16 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack15);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close text");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>($stack18, "->", 22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Start text->Close text", $stack20);

        $i0 = (int) -1;

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abc", ".", $i0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abc", ".", 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abc", ".", 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("a", ".", 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abcd", ".", 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a.d", $stack30);

        $stack32 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abcdef", "..", 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a..f", $stack32);

        $stack34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviateMiddle(java.lang.String,java.lang.String,int)>("abcdef", ".", 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab.ef", $stack34);

        return;
    }

    public void testDifference_StringString()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>("", "abc");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>("abc", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>(null, "i am a robot");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("i am a robot", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>("i am a machine", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("i am a machine", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>("i am a machine", "i am a robot");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("robot", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>("abc", "abc");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String difference(java.lang.String,java.lang.String)>("i am a robot", "you are a robot");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("you are a robot", $stack18);

        return;
    }

    public void testDifferenceAt_StringString()
    {
        long $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27;
        int $stack2, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        org.apache.commons.lang3.StringUtilsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>(null, null);

        $stack3 = (long) $stack2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>(null, "i am a robot");

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>("", "");

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>("", "abc");

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>("abc", "");

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>("i am a machine", null);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>("i am a machine", "i am a robot");

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack21);

        $stack23 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>("foo", "foo");

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>("i am a robot", "you are a robot");

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack27);

        return;
    }

    public void testGetLevenshteinDistance_StringString()
    {
        long $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31;
        int $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.IllegalArgumentException $stack34, $stack35;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("", "");

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("", "a");

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("aaapppp", "");

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("frog", "fog");

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack13);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("fly", "ant");

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("elephant", "hippo");

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("hippo", "elephant");

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("hippo", "zzzzzzzz");

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack25);

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("zzzzzzzz", "hippo");

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("hello", "hallo");

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack31);

     label1:
        staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>("a", null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label2:
        goto label4;

     label3:
        $stack35 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence)>(null, "a");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label5:
        goto label7;

     label6:
        $stack34 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testGetLevenshteinDistance_StringStringInt()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        long $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $stack46, $stack49, $stack52, $stack55, $stack58, $stack61, $stack64, $stack67, $stack70, $stack73, $stack76, $stack79, $stack82, $stack85, $stack88, $stack91, $stack94;
        int $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack33, $stack36, $stack39, $stack42, $stack45, $stack48, $stack51, $stack54, $stack57, $stack60, $stack63, $stack66, $stack69, $stack72, $stack75, $stack78, $stack81, $stack84, $stack87, $stack90, $stack93, $i0;
        java.lang.IllegalArgumentException $stack98, $stack99, $stack104;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("", "", 0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaapppp", "", 8);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaapppp", "", 7);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaapppp", "", 6);

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack13);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("b", "a", 0);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("a", "b", 0);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aa", "aa", 0);

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aa", "aa", 2);

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack25);

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaa", "bbb", 2);

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaa", "bbb", 3);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack31);

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaaaaa", "b", 10);

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack34);

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaapppp", "b", 8);

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack37);

        $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("a", "bbb", 4);

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack40);

        $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaapppp", "b", 7);

        $stack43 = (long) $stack42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack43);

        $stack45 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("a", "bbb", 3);

        $stack46 = (long) $stack45;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack46);

        $stack48 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("a", "bbb", 2);

        $stack49 = (long) $stack48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack49);

        $stack51 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("bbb", "a", 2);

        $stack52 = (long) $stack51;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack52);

        $stack54 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("aaapppp", "b", 6);

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack55);

        $stack57 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("a", "bbb", 1);

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack58);

        $stack60 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("bbb", "a", 1);

        $stack61 = (long) $stack60;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack61);

        $stack63 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("12345", "1234567", 1);

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack64);

        $stack66 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("1234567", "12345", 1);

        $stack67 = (long) $stack66;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack67);

        $stack69 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("frog", "fog", 1);

        $stack70 = (long) $stack69;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack70);

        $stack72 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("fly", "ant", 3);

        $stack73 = (long) $stack72;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack73);

        $stack75 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("elephant", "hippo", 7);

        $stack76 = (long) $stack75;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack76);

        $stack78 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("elephant", "hippo", 6);

        $stack79 = (long) $stack78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack79);

        $stack81 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("hippo", "elephant", 7);

        $stack82 = (long) $stack81;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack82);

        $stack84 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("hippo", "elephant", 6);

        $stack85 = (long) $stack84;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack85);

        $stack87 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("hippo", "zzzzzzzz", 8);

        $stack88 = (long) $stack87;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack88);

        $stack90 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("zzzzzzzz", "hippo", 8);

        $stack91 = (long) $stack90;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack91);

        $stack93 = staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("hello", "hallo", 1);

        $stack94 = (long) $stack93;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack94);

     label01:
        staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("a", null, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label02:
        goto label04;

     label03:
        $stack104 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>(null, "a", 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label05:
        goto label07;

     label06:
        $stack99 := @caughtexception;

     label07:
        $i0 = (int) -1;

        staticinvoke <org.apache.commons.lang3.StringUtils: int getLevenshteinDistance(java.lang.CharSequence,java.lang.CharSequence,int)>("a", "a", $i0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label08:
        goto label10;

     label09:
        $stack98 := @caughtexception;

     label10:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }

    public void testEMPTY()
    {
        int $stack3;
        org.apache.commons.lang3.StringUtilsTest this;
        long $stack4;
        java.lang.String $stack1;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", "");

        $stack1 = "";

        $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>();

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        return;
    }

    public void testIsAllLowerCase()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllLowerCase(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllLowerCase(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllLowerCase(java.lang.CharSequence)>("abc");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllLowerCase(java.lang.CharSequence)>("abc ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllLowerCase(java.lang.CharSequence)>("abC");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        return;
    }

    public void testIsAllUpperCase()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllUpperCase(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllUpperCase(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllUpperCase(java.lang.CharSequence)>("ABC");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllUpperCase(java.lang.CharSequence)>("ABC ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAllUpperCase(java.lang.CharSequence)>("aBC");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        return;
    }

    public void testRemoveStart()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>(null, "");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>(null, "a");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>("", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, "");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, "");

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>("", "a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, "");

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>("www.domain.com", "www.");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, "domain.com");

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>("domain.com", "www.");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, "domain.com");

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>("domain.com", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, "domain.com");

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStart(java.lang.String,java.lang.String)>("domain.com", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, "domain.com");

        return;
    }

    public void testRemoveStartIgnoreCase()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("removeStartIgnoreCase(null, null)", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>(null, "");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("removeStartIgnoreCase(null, \"\")", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>(null, "a");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("removeStartIgnoreCase(null, \"a\")", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"\", null)", $stack8, "");

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"\", \"\")", $stack10, "");

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("", "a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"\", \"a\")", $stack12, "");

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("www.domain.com", "www.");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"www.domain.com\", \"www.\")", $stack14, "domain.com");

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("domain.com", "www.");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"domain.com\", \"www.\")", $stack16, "domain.com");

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("domain.com", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"domain.com\", \"\")", $stack18, "domain.com");

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("domain.com", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"domain.com\", null)", $stack20, "domain.com");

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeStartIgnoreCase(java.lang.String,java.lang.String)>("www.domain.com", "WWW.");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")", $stack22, "domain.com");

        return;
    }

    public void testRemoveEnd()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(null, "");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(null, "a");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, "");

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, "");

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("", "a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, "");

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("www.domain.com.", ".com");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, "www.domain.com.");

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("www.domain.com", ".com");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack8, "www.domain");

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("www.domain", ".com");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, "www.domain");

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("domain.com", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, "domain.com");

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>("domain.com", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, "domain.com");

        return;
    }

    public void testRemoveEndIgnoreCase()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("removeEndIgnoreCase(null, null)", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>(null, "");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("removeEndIgnoreCase(null, \"\")", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>(null, "a");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("removeEndIgnoreCase(null, \"a\")", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"\", null)", $stack8, "");

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"\", \"\")", $stack10, "");

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("", "a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"\", \"a\")", $stack12, "");

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("www.domain.com.", ".com");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", $stack14, "www.domain.com.");

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("www.domain.com", ".com");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"www.domain.com\", \".com\")", $stack16, "www.domain");

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("www.domain", ".com");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"www.domain\", \".com\")", $stack18, "www.domain");

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("domain.com", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"domain.com\", \"\")", $stack20, "domain.com");

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("domain.com", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"domain.com\", null)", $stack22, "domain.com");

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("www.domain.com", ".COM");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", $stack24, "www.domain");

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEndIgnoreCase(java.lang.String,java.lang.String)>("www.domain.COM", ".com");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", $stack26, "www.domain");

        return;
    }

    public void testRemove_String()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>(null, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>(null, "a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("", "a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>(null, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("a", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>(null, "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("a", "");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("queued", "ue");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("qd", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,java.lang.String)>("queued", "zz");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("queued", $stack28);

        return;
    }

    public void testRemove_char()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>(null, 97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>(null, 97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>(null, 97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>("", 97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>("", 97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>("", 97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>("queued", 117);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("qeed", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String remove(java.lang.String,char)>("queued", 122);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("queued", $stack16);

        return;
    }

    public void testDifferenceAt_StringArray()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack1, $stack5, $stack9, $stack13, $stack17, $stack21, $stack25, $stack29, $stack33, $stack37, $stack41, $stack45, $stack49, $stack53, $stack57, $stack61, $stack65;
        long $stack4, $stack8, $stack12, $stack16, $stack20, $stack24, $stack28, $stack32, $stack36, $stack40, $stack44, $stack48, $stack52, $stack56, $stack60, $stack64, $stack68;
        int $stack3, $stack7, $stack11, $stack15, $stack19, $stack23, $stack27, $stack31, $stack35, $stack39, $stack43, $stack47, $stack51, $stack55, $stack59, $stack63, $stack67;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = (java.lang.String[]) null;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack1);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (java.lang.String)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack5);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack8);

        $stack9 = newarray (java.lang.String)[1];

        $stack9[0] = "abc";

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack9);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack12);

        $stack13 = newarray (java.lang.String)[2];

        $stack13[0] = null;

        $stack13[1] = null;

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack13);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack16);

        $stack17 = newarray (java.lang.String)[2];

        $stack17[0] = "";

        $stack17[1] = "";

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack17);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack21 = newarray (java.lang.String)[2];

        $stack21[0] = "";

        $stack21[1] = null;

        $stack23 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack21);

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack24);

        $stack25 = newarray (java.lang.String)[3];

        $stack25[0] = "abc";

        $stack25[1] = null;

        $stack25[2] = null;

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack25);

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack28);

        $stack29 = newarray (java.lang.String)[3];

        $stack29[0] = null;

        $stack29[1] = null;

        $stack29[2] = "abc";

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack29);

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack32);

        $stack33 = newarray (java.lang.String)[2];

        $stack33[0] = "";

        $stack33[1] = "abc";

        $stack35 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack33);

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack36);

        $stack37 = newarray (java.lang.String)[2];

        $stack37[0] = "abc";

        $stack37[1] = "";

        $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack37);

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack40);

        $stack41 = newarray (java.lang.String)[2];

        $stack41[0] = "abc";

        $stack41[1] = "abc";

        $stack43 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack41);

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack44);

        $stack45 = newarray (java.lang.String)[2];

        $stack45[0] = "abc";

        $stack45[1] = "a";

        $stack47 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack45);

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack48);

        $stack49 = newarray (java.lang.String)[2];

        $stack49[0] = "ab";

        $stack49[1] = "abxyz";

        $stack51 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack49);

        $stack52 = (long) $stack51;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack52);

        $stack53 = newarray (java.lang.String)[2];

        $stack53[0] = "abcde";

        $stack53[1] = "abxyz";

        $stack55 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack53);

        $stack56 = (long) $stack55;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack56);

        $stack57 = newarray (java.lang.String)[2];

        $stack57[0] = "abcde";

        $stack57[1] = "xyz";

        $stack59 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack57);

        $stack60 = (long) $stack59;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack60);

        $stack61 = newarray (java.lang.String)[2];

        $stack61[0] = "xyz";

        $stack61[1] = "abcde";

        $stack63 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack61);

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack64);

        $stack65 = newarray (java.lang.String)[2];

        $stack65[0] = "i am a machine";

        $stack65[1] = "i am a robot";

        $stack67 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>($stack65);

        $stack68 = (long) $stack67;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack68);

        return;
    }

    public void testGetCommonPrefix_StringArray()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String[] $stack1, $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $stack46, $stack49;
        java.lang.String $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack33, $stack36, $stack39, $stack42, $stack45, $stack48, $stack51;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack1 = (java.lang.String[]) null;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack3);

        $stack4 = newarray (java.lang.String)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = "abc";

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack9);

        $stack10 = newarray (java.lang.String)[2];

        $stack10[0] = null;

        $stack10[1] = null;

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack13 = newarray (java.lang.String)[2];

        $stack13[0] = "";

        $stack13[1] = "";

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack15);

        $stack16 = newarray (java.lang.String)[2];

        $stack16[0] = "";

        $stack16[1] = null;

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack16);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        $stack19 = newarray (java.lang.String)[3];

        $stack19[0] = "abc";

        $stack19[1] = null;

        $stack19[2] = null;

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack19);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack21);

        $stack22 = newarray (java.lang.String)[3];

        $stack22[0] = null;

        $stack22[1] = null;

        $stack22[2] = "abc";

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack24);

        $stack25 = newarray (java.lang.String)[2];

        $stack25[0] = "";

        $stack25[1] = "abc";

        $stack27 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack27);

        $stack28 = newarray (java.lang.String)[2];

        $stack28[0] = "abc";

        $stack28[1] = "";

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack28);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack30);

        $stack31 = newarray (java.lang.String)[2];

        $stack31[0] = "abc";

        $stack31[1] = "abc";

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack33);

        $stack34 = newarray (java.lang.String)[2];

        $stack34[0] = "abc";

        $stack34[1] = "a";

        $stack36 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack36);

        $stack37 = newarray (java.lang.String)[2];

        $stack37[0] = "ab";

        $stack37[1] = "abxyz";

        $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack37);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack39);

        $stack40 = newarray (java.lang.String)[2];

        $stack40[0] = "abcde";

        $stack40[1] = "abxyz";

        $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack40);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab", $stack42);

        $stack43 = newarray (java.lang.String)[2];

        $stack43[0] = "abcde";

        $stack43[1] = "xyz";

        $stack45 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack43);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack45);

        $stack46 = newarray (java.lang.String)[2];

        $stack46[0] = "xyz";

        $stack46[1] = "abcde";

        $stack48 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack46);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack48);

        $stack49 = newarray (java.lang.String)[2];

        $stack49[0] = "i am a machine";

        $stack49[1] = "i am a robot";

        $stack51 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($stack49);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("i am a ", $stack51);

        return;
    }

    public void testNormalizeSpace()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>(" ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\t");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\n");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\t");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\u000b");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\f");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\u001c");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\u001d");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\u001e");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\u001f");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\f");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("\r");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("  a  ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack30);

        $stack32 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("  a  b   c  ");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c", $stack32);

        $stack34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String normalizeSpace(java.lang.String)>("a\t\f\r  b\u000b   c\n");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c", $stack34);

        return;
    }

    public void testLANG666()
    {
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack2, $stack4;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)>("120.00", ".0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("12", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)>("121.00", ".0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("121", $stack4);

        return;
    }

    public void testStringUtilsCharSequenceContract()
    {
        java.lang.reflect.Method[] $stack8;
        int len$, $stack11, $stack26, i$;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack19, $stack32;
        java.lang.reflect.Method m;
        java.lang.Class[] $stack10, $stack25;
        java.lang.Class c, $stack9, $stack14, $stack20, $stack24, $stack27, $stack33;
        java.lang.StringBuilder $stack15, $stack16, $stack17, $stack18, $stack28, $stack29, $stack30, $stack31;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        c = class "Lorg/apache/commons/lang3/StringUtils;";

        $stack8 = virtualinvoke c.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        len$ = lengthof $stack8;

        i$ = 0;

     label1:
        if i$ >= len$ goto label8;

        m = $stack8[i$];

        $stack9 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $stack9 == class "Ljava/lang/String;" goto label2;

        $stack24 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $stack24 != class "[Ljava/lang/String;" goto label5;

     label2:
        $stack10 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $stack11 = lengthof $stack10;

        if $stack11 <= 0 goto label4;

        $stack14 = $stack10[0];

        if $stack14 == class "Ljava/lang/CharSequence;" goto label3;

        $stack20 = $stack10[0];

        if $stack20 != class "[Ljava/lang/CharSequence;" goto label4;

     label3:
        $stack15 = new java.lang.StringBuilder;

        specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The method ");

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(m);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appears to be mutable in spirit and therefore must not accept a CharSequence");

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack19);

     label4:
        goto label7;

     label5:
        $stack25 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $stack26 = lengthof $stack25;

        if $stack26 <= 0 goto label7;

        $stack27 = $stack25[0];

        if $stack27 == class "Ljava/lang/String;" goto label6;

        $stack33 = $stack25[0];

        if $stack33 != class "[Ljava/lang/String;" goto label7;

     label6:
        $stack28 = new java.lang.StringBuilder;

        specialinvoke $stack28.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The method ");

        $stack30 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(m);

        $stack31 = virtualinvoke $stack30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appears to be immutable in spirit and therefore must not accept a String");

        $stack32 = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack32);

     label7:
        i$ = i$ + 1;

        goto label1;

     label8:
        return;
    }

    public void testToString() throws java.io.UnsupportedEncodingException
    {
        byte[] $stack5, $stack7, $stack13;
        org.apache.commons.lang3.StringUtilsTest this;
        java.lang.String $stack4, $stack6, $stack9, $stack11, $stack12, $stack15, encoding;

        this := @this: org.apache.commons.lang3.StringUtilsTest;

        encoding = <org.apache.commons.lang3.SystemUtils: java.lang.String FILE_ENCODING>;

        $stack4 = "The quick brown fox jumped over the lazy dog.";

        $stack5 = virtualinvoke $stack4.<java.lang.String: byte[] getBytes(java.lang.String)>(encoding);

        $stack6 = "The quick brown fox jumped over the lazy dog.";

        $stack7 = virtualinvoke $stack6.<java.lang.String: byte[] getBytes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($stack5, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String toString(byte[],java.lang.String)>($stack5, null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("The quick brown fox jumped over the lazy dog.", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String toString(byte[],java.lang.String)>($stack5, encoding);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("The quick brown fox jumped over the lazy dog.", $stack11);

        $stack12 = "The quick brown fox jumped over the lazy dog.";

        $stack13 = virtualinvoke $stack12.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-16");

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String toString(byte[],java.lang.String)>($stack13, "UTF-16");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("The quick brown fox jumped over the lazy dog.", $stack15);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $stack14;
        boolean $stack24;
        org.apache.commons.lang3.StringUtilsTest$1 $u4;
        java.lang.StringBuilder $stack16, $stack19, $stack28, $stack31, $stack34, $stack37, $stack40, $stack43, $u0, $u1, $u2, $u3;
        java.lang.Object[] $stack8, $stack12;
        java.lang.String[] $stack5, $stack6, $stack7, $stack11;
        int i, $i0;
        java.lang.String $stack18, $stack30, $stack36, $stack42, ws, nws, tr, ntr;
        char $stack17, $stack23, $stack29, $stack35, $stack41;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String SENTENCE_CAP> = "Foo Bar Baz";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String SENTENCE_UNCAP> = "foo bar baz";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String FOO_CAP> = "Foo";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String FOO_UNCAP> = "foo";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String TEXT_LIST_NOSEP> = "foobarbaz";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String TEXT_LIST_CHAR> = "foo;bar;baz";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String TEXT_LIST> = "foo,bar,baz";

        <org.apache.commons.lang3.StringUtilsTest: char SEPARATOR_CHAR> = 59;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String SEPARATOR> = ",";

        ws = "";

        nws = "";

        tr = "";

        ntr = "";

        i = 0;

     label1:
        $i0 = (int) 65535;

        if i >= $i0 goto label4;

        $stack23 = (char) i;

        $stack24 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack23);

        if $stack24 == 0 goto label2;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack34 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ws);

        $stack35 = (char) i;

        $stack36 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack35);

        $stack37 = virtualinvoke $stack34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack36);

        ws = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.String toString()>();

        if i <= 32 goto label3;

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack40 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(ntr);

        $stack41 = (char) i;

        $stack42 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack41);

        $stack43 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack42);

        ntr = virtualinvoke $stack43.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        if i >= 40 goto label3;

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack28 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(nws);

        $stack29 = (char) i;

        $stack30 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack29);

        $stack31 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack30);

        nws = virtualinvoke $stack31.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        i = i + 1;

        goto label1;

     label4:
        i = 0;

     label5:
        if i > 32 goto label6;

        $u3 = new java.lang.StringBuilder;

        specialinvoke $u3.<java.lang.StringBuilder: void <init>()>();

        $stack16 = virtualinvoke $u3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tr);

        $stack17 = (char) i;

        $stack18 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack17);

        $stack19 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack18);

        tr = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        i = i + 1;

        goto label5;

     label6:
        <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE> = ws;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE> = nws;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String TRIMMABLE> = tr;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_TRIMMABLE> = ntr;

        $stack5 = newarray (java.lang.String)[3];

        $stack5[0] = "foo";

        $stack5[1] = "bar";

        $stack5[2] = "baz";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] ARRAY_LIST> = $stack5;

        $stack6 = newarray (java.lang.String)[0];

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] EMPTY_ARRAY_LIST> = $stack6;

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = null;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] NULL_ARRAY_LIST> = $stack7;

        $stack8 = newarray (java.lang.Object)[1];

        $u4 = new org.apache.commons.lang3.StringUtilsTest$1;

        specialinvoke $u4.<org.apache.commons.lang3.StringUtilsTest$1: void <init>()>();

        $stack8[0] = $u4;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] NULL_TO_STRING_LIST> = $stack8;

        $stack11 = newarray (java.lang.String)[3];

        $stack11[0] = null;

        $stack11[1] = "";

        $stack11[2] = "foo";

        <org.apache.commons.lang3.StringUtilsTest: java.lang.String[] MIXED_ARRAY_LIST> = $stack11;

        $stack12 = newarray (java.lang.Object)[2];

        $stack12[0] = "foo";

        $stack14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $stack12[1] = $stack14;

        <org.apache.commons.lang3.StringUtilsTest: java.lang.Object[] MIXED_TYPE_LIST> = $stack12;

        return;
    }
}
