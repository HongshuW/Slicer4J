public class org.apache.commons.lang3.ArrayUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructor()
    {
        org.apache.commons.lang3.ArrayUtils $stack2;
        long $stack6;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.reflect.Constructor $stack7;
        java.lang.reflect.Constructor[] $stack4;
        int $stack5, $stack8, $stack11, $stack14;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = new org.apache.commons.lang3.ArrayUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.ArrayUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/ArrayUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/ArrayUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/ArrayUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testToString()
    {
        java.lang.Object[] $stack3, $stack17;
        java.lang.String[] $stack6, $stack9, $stack12, $stack20, $stack23, $stack26;
        java.lang.String $stack2, $stack5, $stack8, $stack11, $stack14, $stack16, $stack19, $stack22, $stack25, $stack28;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{}", $stack2);

        $stack3 = newarray (java.lang.Object)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{}", $stack5);

        $stack6 = newarray (java.lang.String)[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{}", $stack8);

        $stack9 = newarray (java.lang.String)[1];

        $stack9[0] = null;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object)>($stack9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{<null>}", $stack11);

        $stack12 = newarray (java.lang.String)[2];

        $stack12[0] = "pink";

        $stack12[1] = "blue";

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object)>($stack12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{pink,blue}", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>(null, "<empty>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("<empty>", $stack16);

        $stack17 = newarray (java.lang.Object)[0];

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>($stack17, "<empty>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{}", $stack19);

        $stack20 = newarray (java.lang.String)[0];

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>($stack20, "<empty>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{}", $stack22);

        $stack23 = newarray (java.lang.String)[1];

        $stack23[0] = null;

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>($stack23, "<empty>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{<null>}", $stack25);

        $stack26 = newarray (java.lang.String)[2];

        $stack26[0] = "pink";

        $stack26[1] = "blue";

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object,java.lang.String)>($stack26, "<empty>");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("{pink,blue}", $stack28);

        return;
    }

    public void testHashCode()
    {
        int[] $stack28, $stack31;
        boolean $stack79, $stack67, $stack64, $stack35, $stack34;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Object[] $stack17, $stack21, $stack26, $stack29;
        long[] $stack8, $stack9, $stack11, $stack12;
        int $stack13, $stack14, $stack15, $stack16, $stack22, $stack23, $stack24, $stack25, $stack32, $stack33;
        java.lang.String $stack18;
        long[][] $stack7, $stack10;
        boolean[] $stack27, $stack30;
        char[] $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack7 = newarray (long[])[2];

        $stack8 = newarray (long)[2];

        $stack8[0] = 2L;

        $stack8[1] = 5L;

        $stack7[0] = $stack8;

        $stack9 = newarray (long)[2];

        $stack9[0] = 4L;

        $stack9[1] = 5L;

        $stack7[1] = $stack9;

        $stack10 = newarray (long[])[2];

        $stack11 = newarray (long)[2];

        $stack11[0] = 2L;

        $stack11[1] = 5L;

        $stack10[0] = $stack11;

        $stack12 = newarray (long)[2];

        $stack12[0] = 4L;

        $stack12[1] = 6L;

        $stack10[1] = $stack12;

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack7);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack7);

        if $stack13 != $stack14 goto label01;

        $stack79 = 1;

        goto label02;

     label01:
        $stack79 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack79);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack7);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack10);

        if $stack15 != $stack16 goto label03;

        $stack67 = 1;

        goto label04;

     label03:
        $stack67 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack67);

        $stack17 = newarray (java.lang.Object)[1];

        $stack18 = new java.lang.String;

        $stack19 = newarray (char)[2];

        $stack19[0] = 65;

        $stack19[1] = 66;

        specialinvoke $stack18.<java.lang.String: void <init>(char[])>($stack19);

        $stack17[0] = $stack18;

        $stack21 = newarray (java.lang.Object)[1];

        $stack21[0] = "AB";

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack17);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack17);

        if $stack22 != $stack23 goto label05;

        $stack64 = 1;

        goto label06;

     label05:
        $stack64 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack64);

        $stack24 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack17);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack21);

        if $stack24 != $stack25 goto label07;

        $stack35 = 1;

        goto label08;

     label07:
        $stack35 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack26 = newarray (java.lang.Object)[2];

        $stack27 = newarray (boolean)[2];

        $stack27[0] = 1;

        $stack27[1] = 0;

        $stack26[0] = $stack27;

        $stack28 = newarray (int)[2];

        $stack28[0] = 6;

        $stack28[1] = 7;

        $stack26[1] = $stack28;

        $stack29 = newarray (java.lang.Object)[2];

        $stack30 = newarray (boolean)[2];

        $stack30[0] = 1;

        $stack30[1] = 0;

        $stack29[0] = $stack30;

        $stack31 = newarray (int)[2];

        $stack31[0] = 6;

        $stack31[1] = 7;

        $stack29[1] = $stack31;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack29);

        $stack33 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int hashCode(java.lang.Object)>($stack26);

        if $stack32 != $stack33 goto label09;

        $stack34 = 1;

        goto label10;

     label09:
        $stack34 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        return;
    }

    private void assertIsEquals(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Object array1, array2, array3;
        boolean $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        array1 := @parameter0: java.lang.Object;

        array2 := @parameter1: java.lang.Object;

        array3 := @parameter2: java.lang.Object;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array1, array1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array2, array2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array3, array3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array1, array2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array2, array1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array1, array3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array3, array1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array1, array2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(array2, array1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        return;
    }

    public void testIsEquals()
    {
        byte[] $stack63, $stack64, $stack66, $stack67, $stack68;
        char[][] $stack69, $stack72;
        org.apache.commons.lang3.ArrayUtilsTest this;
        byte[][] $stack62, $stack65;
        double[][] $stack55, $stack58;
        java.lang.Object[] $stack83, $stack87;
        double[] $stack56, $stack57, $stack59, $stack60, $stack61;
        float[] $stack49, $stack50, $stack52, $stack53, $stack54;
        java.lang.String $stack84;
        long[][] $stack27, $stack30;
        boolean[] $stack77, $stack78, $stack80, $stack81, $stack82;
        char[] $stack70, $stack71, $stack73, $stack74, $stack75, $stack85;
        int[][] $stack34, $stack37;
        short[][] $stack41, $stack44;
        int[] $stack35, $stack36, $stack38, $stack39, $stack40;
        boolean $stack88, $stack89, $stack90, $stack91;
        short[] $stack42, $stack43, $stack45, $stack46, $stack47;
        long[] $stack28, $stack29, $stack31, $stack32, $stack33;
        float[][] $stack48, $stack51;
        boolean[][] $stack76, $stack79;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack27 = newarray (long[])[2];

        $stack28 = newarray (long)[2];

        $stack28[0] = 2L;

        $stack28[1] = 5L;

        $stack27[0] = $stack28;

        $stack29 = newarray (long)[2];

        $stack29[0] = 4L;

        $stack29[1] = 5L;

        $stack27[1] = $stack29;

        $stack30 = newarray (long[])[2];

        $stack31 = newarray (long)[2];

        $stack31[0] = 2L;

        $stack31[1] = 5L;

        $stack30[0] = $stack31;

        $stack32 = newarray (long)[2];

        $stack32[0] = 4L;

        $stack32[1] = 6L;

        $stack30[1] = $stack32;

        $stack33 = newarray (long)[2];

        $stack33[0] = 2L;

        $stack33[1] = 5L;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack27, $stack30, $stack33);

        $stack34 = newarray (int[])[2];

        $stack35 = newarray (int)[2];

        $stack35[0] = 2;

        $stack35[1] = 5;

        $stack34[0] = $stack35;

        $stack36 = newarray (int)[2];

        $stack36[0] = 4;

        $stack36[1] = 5;

        $stack34[1] = $stack36;

        $stack37 = newarray (int[])[2];

        $stack38 = newarray (int)[2];

        $stack38[0] = 2;

        $stack38[1] = 5;

        $stack37[0] = $stack38;

        $stack39 = newarray (int)[2];

        $stack39[0] = 4;

        $stack39[1] = 6;

        $stack37[1] = $stack39;

        $stack40 = newarray (int)[2];

        $stack40[0] = 2;

        $stack40[1] = 5;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack34, $stack37, $stack40);

        $stack41 = newarray (short[])[2];

        $stack42 = newarray (short)[2];

        $stack42[0] = 2;

        $stack42[1] = 5;

        $stack41[0] = $stack42;

        $stack43 = newarray (short)[2];

        $stack43[0] = 4;

        $stack43[1] = 5;

        $stack41[1] = $stack43;

        $stack44 = newarray (short[])[2];

        $stack45 = newarray (short)[2];

        $stack45[0] = 2;

        $stack45[1] = 5;

        $stack44[0] = $stack45;

        $stack46 = newarray (short)[2];

        $stack46[0] = 4;

        $stack46[1] = 6;

        $stack44[1] = $stack46;

        $stack47 = newarray (short)[2];

        $stack47[0] = 2;

        $stack47[1] = 5;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack41, $stack44, $stack47);

        $stack48 = newarray (float[])[2];

        $stack49 = newarray (float)[2];

        $stack49[0] = 2.0F;

        $stack49[1] = 5.0F;

        $stack48[0] = $stack49;

        $stack50 = newarray (float)[2];

        $stack50[0] = 4.0F;

        $stack50[1] = 5.0F;

        $stack48[1] = $stack50;

        $stack51 = newarray (float[])[2];

        $stack52 = newarray (float)[2];

        $stack52[0] = 2.0F;

        $stack52[1] = 5.0F;

        $stack51[0] = $stack52;

        $stack53 = newarray (float)[2];

        $stack53[0] = 4.0F;

        $stack53[1] = 6.0F;

        $stack51[1] = $stack53;

        $stack54 = newarray (float)[2];

        $stack54[0] = 2.0F;

        $stack54[1] = 5.0F;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack48, $stack51, $stack54);

        $stack55 = newarray (double[])[2];

        $stack56 = newarray (double)[2];

        $stack56[0] = 2.0;

        $stack56[1] = 5.0;

        $stack55[0] = $stack56;

        $stack57 = newarray (double)[2];

        $stack57[0] = 4.0;

        $stack57[1] = 5.0;

        $stack55[1] = $stack57;

        $stack58 = newarray (double[])[2];

        $stack59 = newarray (double)[2];

        $stack59[0] = 2.0;

        $stack59[1] = 5.0;

        $stack58[0] = $stack59;

        $stack60 = newarray (double)[2];

        $stack60[0] = 4.0;

        $stack60[1] = 6.0;

        $stack58[1] = $stack60;

        $stack61 = newarray (double)[2];

        $stack61[0] = 2.0;

        $stack61[1] = 5.0;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack55, $stack58, $stack61);

        $stack62 = newarray (byte[])[2];

        $stack63 = newarray (byte)[2];

        $stack63[0] = 2;

        $stack63[1] = 5;

        $stack62[0] = $stack63;

        $stack64 = newarray (byte)[2];

        $stack64[0] = 4;

        $stack64[1] = 5;

        $stack62[1] = $stack64;

        $stack65 = newarray (byte[])[2];

        $stack66 = newarray (byte)[2];

        $stack66[0] = 2;

        $stack66[1] = 5;

        $stack65[0] = $stack66;

        $stack67 = newarray (byte)[2];

        $stack67[0] = 4;

        $stack67[1] = 6;

        $stack65[1] = $stack67;

        $stack68 = newarray (byte)[2];

        $stack68[0] = 2;

        $stack68[1] = 5;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack62, $stack65, $stack68);

        $stack69 = newarray (char[])[2];

        $stack70 = newarray (char)[2];

        $stack70[0] = 2;

        $stack70[1] = 5;

        $stack69[0] = $stack70;

        $stack71 = newarray (char)[2];

        $stack71[0] = 4;

        $stack71[1] = 5;

        $stack69[1] = $stack71;

        $stack72 = newarray (char[])[2];

        $stack73 = newarray (char)[2];

        $stack73[0] = 2;

        $stack73[1] = 5;

        $stack72[0] = $stack73;

        $stack74 = newarray (char)[2];

        $stack74[0] = 4;

        $stack74[1] = 6;

        $stack72[1] = $stack74;

        $stack75 = newarray (char)[2];

        $stack75[0] = 2;

        $stack75[1] = 5;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack69, $stack72, $stack75);

        $stack76 = newarray (boolean[])[2];

        $stack77 = newarray (boolean)[2];

        $stack77[0] = 1;

        $stack77[1] = 0;

        $stack76[0] = $stack77;

        $stack78 = newarray (boolean)[2];

        $stack78[0] = 1;

        $stack78[1] = 1;

        $stack76[1] = $stack78;

        $stack79 = newarray (boolean[])[2];

        $stack80 = newarray (boolean)[2];

        $stack80[0] = 1;

        $stack80[1] = 0;

        $stack79[0] = $stack80;

        $stack81 = newarray (boolean)[2];

        $stack81[0] = 1;

        $stack81[1] = 0;

        $stack79[1] = $stack81;

        $stack82 = newarray (boolean)[2];

        $stack82[0] = 0;

        $stack82[1] = 1;

        specialinvoke this.<org.apache.commons.lang3.ArrayUtilsTest: void assertIsEquals(java.lang.Object,java.lang.Object,java.lang.Object)>($stack76, $stack79, $stack82);

        $stack83 = newarray (java.lang.Object)[1];

        $stack84 = new java.lang.String;

        $stack85 = newarray (char)[2];

        $stack85[0] = 65;

        $stack85[1] = 66;

        specialinvoke $stack84.<java.lang.String: void <init>(char[])>($stack85);

        $stack83[0] = $stack84;

        $stack87 = newarray (java.lang.Object)[1];

        $stack87[0] = "AB";

        $stack88 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack83, $stack83);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack88);

        $stack89 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack83, $stack87);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack89);

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack90);

        $stack91 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>(null, $stack87);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack91);

        return;
    }

    public void testArrayCreation()
    {
        java.lang.Object[] $stack3;
        java.lang.String[] $stack2, array;
        long $stack5;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack4;
        java.lang.String $stack6, $stack7;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.String)[2];

        $stack2[0] = "foo";

        $stack2[1] = "bar";

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] toArray(java.lang.Object[])>($stack2);

        array = (java.lang.String[]) $stack3;

        $stack4 = lengthof array;

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack5);

        $stack6 = array[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack6);

        $stack7 = array[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack7);

        return;
    }

    public void testArrayCreationWithGeneralReturnType()
    {
        java.lang.Object[] $stack3;
        java.lang.String[] $stack2;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack4;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.String)[2];

        $stack2[0] = "foo";

        $stack2[1] = "bar";

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] toArray(java.lang.Object[])>($stack2);

        $stack4 = $stack3 instanceof java.lang.String[];

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        return;
    }

    public void testArrayCreationWithDifferentTypes()
    {
        java.lang.Object[] $stack7;
        java.lang.Double $stack6, $stack12;
        long $stack9;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Integer $stack4, $stack10;
        java.lang.Number[] $stack2, array;
        int $stack8;
        java.lang.Number $stack11, $stack13;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.Number)[2];

        $stack4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $stack2[0] = $stack4;

        $stack6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.141592653589793);

        $stack2[1] = $stack6;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] toArray(java.lang.Object[])>($stack2);

        array = (java.lang.Number[]) $stack7;

        $stack8 = lengthof array;

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack9);

        $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $stack11 = array[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack11);

        $stack12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.141592653589793);

        $stack13 = array[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

        return;
    }

    public void testIndirectArrayCreation()
    {
        java.lang.Object[] $stack3;
        java.lang.String[] $stack2, array;
        long $stack5;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack4;
        java.lang.String $stack6, $stack7;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.String)[2];

        $stack2[0] = "foo";

        $stack2[1] = "bar";

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtilsTest: java.lang.Object[] toArrayPropagatingType(java.lang.Object[])>($stack2);

        array = (java.lang.String[]) $stack3;

        $stack4 = lengthof array;

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack5);

        $stack6 = array[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("foo", $stack6);

        $stack7 = array[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack7);

        return;
    }

    public void testEmptyArrayCreation()
    {
        java.lang.Object[] $stack3;
        int $stack4;
        java.lang.String[] $stack2, array;
        long $stack5;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.String)[0];

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] toArray(java.lang.Object[])>($stack2);

        array = (java.lang.String[]) $stack3;

        $stack4 = lengthof array;

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        return;
    }

    public void testIndirectEmptyArrayCreation()
    {
        java.lang.Object[] $stack3;
        int $stack4;
        java.lang.String[] $stack2, array;
        long $stack5;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.String)[0];

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtilsTest: java.lang.Object[] toArrayPropagatingType(java.lang.Object[])>($stack2);

        array = (java.lang.String[]) $stack3;

        $stack4 = lengthof array;

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        return;
    }

    private static transient java.lang.Object[] toArrayPropagatingType(java.lang.Object[])
    {
        java.lang.Object[] items, $stack1;

        items := @parameter0: java.lang.Object[];

        $stack1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] toArray(java.lang.Object[])>(items);

        return $stack1;
    }

    public void testToMap()
    {
        java.lang.Object[] $stack17, $stack18, $stack20, $stack21, $stack23;
        java.lang.String[] $stack4, $stack5, $stack14, $stack15;
        java.util.Map $stack6, $stack12, $stack26;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.IllegalArgumentException $stack29, $stack34, $stack45;
        org.apache.commons.lang3.ArrayUtilsTest$1 $stack24;
        java.lang.Object $stack8, $stack10, $stack28;
        java.lang.String[][] $stack3, $stack13;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = newarray (java.lang.String[])[2];

        $stack4 = newarray (java.lang.String)[2];

        $stack4[0] = "foo";

        $stack4[1] = "bar";

        $stack3[0] = $stack4;

        $stack5 = newarray (java.lang.String)[2];

        $stack5[0] = "hello";

        $stack5[1] = "world";

        $stack3[1] = $stack5;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.Map toMap(java.lang.Object[])>($stack3);

        $stack8 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>("foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack8);

        $stack10 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>("hello");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("world", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.Map toMap(java.lang.Object[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack12);

     label01:
        $stack13 = newarray (java.lang.String[])[2];

        $stack14 = newarray (java.lang.String)[2];

        $stack14[0] = "foo";

        $stack14[1] = "bar";

        $stack13[0] = $stack14;

        $stack15 = newarray (java.lang.String)[1];

        $stack15[0] = "short";

        $stack13[1] = $stack15;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.Map toMap(java.lang.Object[])>($stack13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label02:
        goto label04;

     label03:
        $stack45 := @caughtexception;

     label04:
        $stack17 = newarray (java.lang.Object)[2];

        $stack18 = newarray (java.lang.Object)[2];

        $stack18[0] = "foo";

        $stack18[1] = "bar";

        $stack17[0] = $stack18;

        $stack17[1] = "illegal type";

        staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.Map toMap(java.lang.Object[])>($stack17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label05:
        goto label07;

     label06:
        $stack34 := @caughtexception;

     label07:
        $stack20 = newarray (java.lang.Object)[2];

        $stack21 = newarray (java.lang.Object)[2];

        $stack21[0] = "foo";

        $stack21[1] = "bar";

        $stack20[0] = $stack21;

        $stack20[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.Map toMap(java.lang.Object[])>($stack20);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label08:
        goto label10;

     label09:
        $stack29 := @caughtexception;

     label10:
        $stack23 = newarray (java.lang.Object)[1];

        $stack24 = new org.apache.commons.lang3.ArrayUtilsTest$1;

        specialinvoke $stack24.<org.apache.commons.lang3.ArrayUtilsTest$1: void <init>(org.apache.commons.lang3.ArrayUtilsTest)>(this);

        $stack23[0] = $stack24;

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.util.Map toMap(java.lang.Object[])>($stack23);

        $stack28 = interfaceinvoke $stack26.<java.util.Map: java.lang.Object get(java.lang.Object)>("foo");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack28);

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }

    public void testClone()
    {
        java.lang.Object[] $stack4, $stack6, $stack7, $stack10, $stack12, original1;
        java.lang.String[] $stack11;
        java.lang.StringBuffer $stack9;
        boolean $stack8, $stack13, $stack33, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Object $stack14, $stack15, $stack16, $stack17, $stack18, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = (java.lang.Object[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack6);

        original1 = newarray (java.lang.Object)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>(original1);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(original1, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if original1 == $stack7 goto label1;

        $stack33 = 1;

        goto label2;

     label1:
        $stack33 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        $stack9 = new java.lang.StringBuffer;

        specialinvoke $stack9.<java.lang.StringBuffer: void <init>(java.lang.String)>("pick");

        $stack10 = newarray (java.lang.Object)[3];

        $stack10[0] = $stack9;

        $stack10[1] = "a";

        $stack11 = newarray (java.lang.String)[1];

        $stack11[0] = "stick";

        $stack10[2] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] clone(java.lang.Object[])>($stack10);

        $stack13 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack10, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        if $stack10 == $stack12 goto label3;

        $stack20 = 1;

        goto label4;

     label3:
        $stack20 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack15 = $stack10[0];

        $stack14 = $stack12[0];

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack15, $stack14);

        $stack17 = $stack10[1];

        $stack16 = $stack12[1];

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack17, $stack16);

        $stack19 = $stack10[2];

        $stack18 = $stack12[2];

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack19, $stack18);

        return;
    }

    public void testCloneBoolean()
    {
        boolean[] $stack3, $stack5, $stack6, $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (boolean[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (boolean)[2];

        $stack6[0] = 1;

        $stack6[1] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] clone(boolean[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testCloneLong()
    {
        long[] $stack3, $stack5, $stack6, $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (long[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (long)[2];

        $stack6[0] = 0L;

        $stack6[1] = 1L;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] clone(long[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testCloneInt()
    {
        int[] $stack3, $stack5, $stack6, $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (int[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (int)[2];

        $stack6[0] = 5;

        $stack6[1] = 8;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] clone(int[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testCloneShort()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] $stack3, $stack5, $stack6, $stack7;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (short[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (short)[2];

        $stack6[0] = 1;

        $stack6[1] = 4;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] clone(short[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testCloneChar()
    {
        char[] $stack3, $stack5, $stack6, $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (char[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (char)[2];

        $stack6[0] = 97;

        $stack6[1] = 52;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] clone(char[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testCloneByte()
    {
        byte[] $stack3, $stack5, $stack6, $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (byte[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (byte)[2];

        $stack6[0] = 1;

        $stack6[1] = 6;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] clone(byte[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testCloneDouble()
    {
        double[] $stack3, $stack5, $stack6, $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (double[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (double)[2];

        $stack6[0] = 2.4;

        $stack6[1] = 5.7;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] clone(double[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testCloneFloat()
    {
        float[] $stack3, $stack5, $stack6, $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = (float[]) null;

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack6 = newarray (float)[2];

        $stack6[0] = 2.6F;

        $stack6[1] = 6.4F;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] clone(float[])>($stack6);

        $stack8 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack6, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        if $stack6 == $stack7 goto label1;

        $stack9 = 1;

        goto label2;

     label1:
        $stack9 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testNullToEmptyBoolean()
    {
        boolean[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack4 = (boolean[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] nullToEmpty(boolean[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (boolean)[2];

        $stack7[0] = 1;

        $stack7[1] = 0;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] nullToEmpty(boolean[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (boolean)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] nullToEmpty(boolean[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyLong()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        long[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack4 = (long[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] nullToEmpty(long[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (long)[2];

        $stack7[0] = 1L;

        $stack7[1] = 2L;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] nullToEmpty(long[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (long)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] nullToEmpty(long[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyInt()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        int[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack4 = (int[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] nullToEmpty(int[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (int)[2];

        $stack7[0] = 1;

        $stack7[1] = 2;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] nullToEmpty(int[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (int)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] nullToEmpty(int[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyShort()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack4 = (short[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] nullToEmpty(short[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (short)[2];

        $stack7[0] = 1;

        $stack7[1] = 2;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] nullToEmpty(short[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (short)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] nullToEmpty(short[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyChar()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        char[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack4 = (char[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] nullToEmpty(char[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (char)[2];

        $stack7[0] = 97;

        $stack7[1] = 98;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] nullToEmpty(char[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (char)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] nullToEmpty(char[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyByte()
    {
        byte[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack4 = (byte[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] nullToEmpty(byte[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (byte)[2];

        $stack7[0] = 15;

        $stack7[1] = 14;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] nullToEmpty(byte[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (byte)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] nullToEmpty(byte[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyDouble()
    {
        double[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack4 = (double[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] nullToEmpty(double[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (double)[2];

        $stack7[0] = 1.0;

        $stack7[1] = 2.0;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] nullToEmpty(double[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (double)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] nullToEmpty(double[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyFloat()
    {
        float[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack4 = (float[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] nullToEmpty(float[])>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (float)[2];

        $stack7[0] = 2.6F;

        $stack7[1] = 3.8F;

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] nullToEmpty(float[])>($stack7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        empty = newarray (float)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] nullToEmpty(float[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyObject()
    {
        java.lang.Object[] $stack4, $stack5, $stack6, $stack7, $stack10, empty, $stack11, $stack12;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Boolean $stack8, $stack9;
        boolean $stack13;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack4 = (java.lang.Object[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] nullToEmpty(java.lang.Object[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Object)[2];

        $stack8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack7[0] = $stack8;

        $stack9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack7[1] = $stack9;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] nullToEmpty(java.lang.Object[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack10);

        empty = newarray (java.lang.Object)[0];

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] nullToEmpty(java.lang.Object[])>(empty);

        $stack12 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack12, $stack11);

        if empty == $stack11 goto label1;

        $stack13 = 1;

        goto label2;

     label1:
        $stack13 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        return;
    }

    public void testNullToEmptyString()
    {
        java.lang.String[] $stack4, $stack5, $stack6, $stack7, $stack8, empty, $stack9, $stack10;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack11;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        $stack4 = (java.lang.String[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String[] nullToEmpty(java.lang.String[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.String)[2];

        $stack7[0] = "abc";

        $stack7[1] = "def";

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String[] nullToEmpty(java.lang.String[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack8);

        empty = newarray (java.lang.String)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String[] nullToEmpty(java.lang.String[])>(empty);

        $stack10 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack10, $stack9);

        if empty == $stack9 goto label1;

        $stack11 = 1;

        goto label2;

     label1:
        $stack11 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        return;
    }

    public void testNullToEmptyBooleanObject()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Boolean[] $stack4, $stack5, $stack6, $stack7, $stack10, empty, $stack11, $stack12;
        java.lang.Boolean $stack8, $stack9;
        boolean $stack13;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;

        $stack4 = (java.lang.Boolean[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] nullToEmpty(java.lang.Boolean[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Boolean)[2];

        $stack8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack7[0] = $stack8;

        $stack9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack7[1] = $stack9;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] nullToEmpty(java.lang.Boolean[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack10);

        empty = newarray (java.lang.Boolean)[0];

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] nullToEmpty(java.lang.Boolean[])>(empty);

        $stack12 = <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack12, $stack11);

        if empty == $stack11 goto label1;

        $stack13 = 1;

        goto label2;

     label1:
        $stack13 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        return;
    }

    public void testNullToEmptyLongObject()
    {
        java.lang.Long[] $stack4, $stack5, $stack6, $stack7, $stack12, empty, $stack13, $stack14;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Long $stack9, $stack11;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;

        $stack4 = (java.lang.Long[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] nullToEmpty(java.lang.Long[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Long)[2];

        $stack9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $stack7[1] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] nullToEmpty(java.lang.Long[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        empty = newarray (java.lang.Long)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] nullToEmpty(java.lang.Long[])>(empty);

        $stack14 = <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, $stack13);

        if empty == $stack13 goto label1;

        $stack15 = 1;

        goto label2;

     label1:
        $stack15 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testNullToEmptyIntObject()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Integer $stack9, $stack11;
        java.lang.Integer[] $stack4, $stack5, $stack6, $stack7, $stack12, empty, $stack13, $stack14;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;

        $stack4 = (java.lang.Integer[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] nullToEmpty(java.lang.Integer[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Integer)[2];

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $stack7[1] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] nullToEmpty(java.lang.Integer[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        empty = newarray (java.lang.Integer)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] nullToEmpty(java.lang.Integer[])>(empty);

        $stack14 = <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, $stack13);

        if empty == $stack13 goto label1;

        $stack15 = 1;

        goto label2;

     label1:
        $stack15 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testNullToEmptyShortObject()
    {
        java.lang.Short[] $stack4, $stack5, $stack6, $stack7, $stack12, empty, $stack13, $stack14;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Short $stack9, $stack11;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;

        $stack4 = (java.lang.Short[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] nullToEmpty(java.lang.Short[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Short)[2];

        $stack9 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(1);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        $stack7[1] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] nullToEmpty(java.lang.Short[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        empty = newarray (java.lang.Short)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] nullToEmpty(java.lang.Short[])>(empty);

        $stack14 = <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, $stack13);

        if empty == $stack13 goto label1;

        $stack15 = 1;

        goto label2;

     label1:
        $stack15 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testNullToEmptyCharObject()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Character $stack9, $stack11;
        java.lang.Character[] $stack4, $stack5, $stack6, $stack7, $stack12, empty, $stack13, $stack14;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;

        $stack4 = (java.lang.Character[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] nullToEmpty(java.lang.Character[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Character)[2];

        $stack9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(97);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(98);

        $stack7[1] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] nullToEmpty(java.lang.Character[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        empty = newarray (java.lang.Character)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] nullToEmpty(java.lang.Character[])>(empty);

        $stack14 = <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, $stack13);

        if empty == $stack13 goto label1;

        $stack15 = 1;

        goto label2;

     label1:
        $stack15 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testNullToEmptyByteObject()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Byte[] $stack4, $stack5, $stack6, $stack7, $stack12, empty, $stack13, $stack14;
        java.lang.Byte $stack9, $stack11;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;

        $stack4 = (java.lang.Byte[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] nullToEmpty(java.lang.Byte[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Byte)[2];

        $stack9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(15);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(14);

        $stack7[1] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] nullToEmpty(java.lang.Byte[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        empty = newarray (java.lang.Byte)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] nullToEmpty(java.lang.Byte[])>(empty);

        $stack14 = <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, $stack13);

        if empty == $stack13 goto label1;

        $stack15 = 1;

        goto label2;

     label1:
        $stack15 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testNullToEmptyDoubleObject()
    {
        java.lang.Double $stack9, $stack11;
        java.lang.Double[] $stack4, $stack5, $stack6, $stack7, $stack12, empty, $stack13, $stack14;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;

        $stack4 = (java.lang.Double[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] nullToEmpty(java.lang.Double[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Double)[2];

        $stack9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $stack7[1] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] nullToEmpty(java.lang.Double[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        empty = newarray (java.lang.Double)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] nullToEmpty(java.lang.Double[])>(empty);

        $stack14 = <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, $stack13);

        if empty == $stack13 goto label1;

        $stack15 = 1;

        goto label2;

     label1:
        $stack15 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testNullToEmptyFloatObject()
    {
        java.lang.Float $stack9, $stack11;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Float[] $stack4, $stack5, $stack6, $stack7, $stack12, empty, $stack13, $stack14;
        boolean $stack15;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;

        $stack4 = (java.lang.Float[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] nullToEmpty(java.lang.Float[])>($stack4);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        $stack7 = newarray (java.lang.Float)[2];

        $stack9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(2.6F);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.8F);

        $stack7[1] = $stack11;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] nullToEmpty(java.lang.Float[])>($stack7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        empty = newarray (java.lang.Float)[0];

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] nullToEmpty(java.lang.Float[])>(empty);

        $stack14 = <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($stack14, $stack13);

        if empty == $stack13 goto label1;

        $stack15 = 1;

        goto label2;

     label1:
        $stack15 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        return;
    }

    public void testSubarrayObject()
    {
        java.util.Date $u0, $u2, $u3, $u4, $u5;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.util.Date[] $stack55, $stack76, $stack82;
        java.lang.Object[] $stack5, $stack8, $stack13, $stack17, $stack22, $stack25, $stack26, $stack29, $stack33, $stack37, $stack41, $stack45, $stack49, $stack53, $stack70, $stack75, $stack81, $stack85;
        long $stack59;
        java.lang.ClassCastException $stack87;
        int $stack10, $stack19, $i0, $i1;
        java.lang.String $stack9, $stack14, $stack18, $stack23, $stack30, $stack34, $stack38, $stack42, $stack46, $stack50, $stack54;
        java.sql.Date $u1;
        java.sql.Date[] $stack86, dummy;
        java.lang.Class $stack71, $stack72, $stack77, $stack78, $stack83, $stack84;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack5 = newarray (java.lang.Object)[6];

        $stack5[0] = "a";

        $stack5[1] = "b";

        $stack5[2] = "c";

        $stack5[3] = "d";

        $stack5[4] = "e";

        $stack5[5] = "f";

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 0, 4);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("0 start, mid end", "abcd", $stack9);

        $stack10 = lengthof $stack5;

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 0, $stack10);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("0 start, length end", "abcdef", $stack14);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 1, 4);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("mid start, mid end", "bcd", $stack18);

        $stack19 = lengthof $stack5;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 1, $stack19);

        $stack23 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("mid start, length end", "bcdef", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack26 = <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack26, 1, 2);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack29);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", "", $stack30);

        $stack33 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 4, 2);

        $stack34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack33);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", "", $stack34);

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 3, 3);

        $stack38 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack37);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", "", $stack38);

        $i0 = (int) -2;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, $i0, 4);

        $stack42 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack41);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start undershoot, normal end", "abcd", $stack42);

        $stack45 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 33, 4);

        $stack46 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack45);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", "", $stack46);

        $stack49 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 2, 33);

        $stack50 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack49);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("normal start, end overshoot", "cdef", $stack50);

        $i1 = (int) -2;

        $stack53 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, $i1, 12);

        $stack54 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[])>($stack53);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start undershoot, end overshoot", "abcdef", $stack54);

        $stack55 = newarray (java.util.Date)[5];

        $u1 = new java.sql.Date;

        $u0 = new java.util.Date;

        specialinvoke $u0.<java.util.Date: void <init>()>();

        $stack59 = virtualinvoke $u0.<java.util.Date: long getTime()>();

        specialinvoke $u1.<java.sql.Date: void <init>(long)>($stack59);

        $stack55[0] = $u1;

        $u2 = new java.util.Date;

        specialinvoke $u2.<java.util.Date: void <init>()>();

        $stack55[1] = $u2;

        $u3 = new java.util.Date;

        specialinvoke $u3.<java.util.Date: void <init>()>();

        $stack55[2] = $u3;

        $u4 = new java.util.Date;

        specialinvoke $u4.<java.util.Date: void <init>()>();

        $stack55[3] = $u4;

        $u5 = new java.util.Date;

        specialinvoke $u5.<java.util.Date: void <init>()>();

        $stack55[4] = $u5;

        $stack70 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack5, 2, 4);

        $stack71 = virtualinvoke $stack70.<java.lang.Object: java.lang.Class getClass()>();

        $stack72 = virtualinvoke $stack71.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("Object type", class "Ljava/lang/Object;", $stack72);

        $stack75 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack55, 1, 4);

        $stack76 = (java.util.Date[]) $stack75;

        $stack77 = virtualinvoke $stack76.<java.lang.Object: java.lang.Class getClass()>();

        $stack78 = virtualinvoke $stack77.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("java.util.Date type", class "Ljava/util/Date;", $stack78);

        $stack81 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack55, 1, 4);

        $stack82 = (java.util.Date[]) $stack81;

        $stack83 = virtualinvoke $stack82.<java.lang.Object: java.lang.Class getClass()>();

        $stack84 = virtualinvoke $stack83.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>("java.sql.Date type", class "Ljava/sql/Date;", $stack84);

     label1:
        $stack85 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] subarray(java.lang.Object[],int,int)>($stack55, 1, 3);

        $stack86 = (java.sql.Date[]) $stack85;

        dummy = (java.sql.Date[]) $stack86;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Invalid downcast");

     label2:
        goto label4;

     label3:
        $stack87 := @caughtexception;

     label4:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public void testSubarrayLong()
    {
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        long[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        int $stack13, $stack20, $i0, $i1;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (long)[6];

        $stack6[0] = 999910L;

        $stack6[1] = 999911L;

        $stack6[2] = 999912L;

        $stack6[3] = 999913L;

        $stack6[4] = 999914L;

        $stack6[5] = 999915L;

        $stack7 = newarray (long)[4];

        $stack7[0] = 999910L;

        $stack7[1] = 999911L;

        $stack7[2] = 999912L;

        $stack7[3] = 999913L;

        $stack8 = newarray (long)[4];

        $stack8[0] = 999911L;

        $stack8[1] = 999912L;

        $stack8[2] = 999913L;

        $stack8[3] = 999914L;

        $stack9 = newarray (long)[4];

        $stack9[0] = 999912L;

        $stack9[1] = 999913L;

        $stack9[2] = 999914L;

        $stack9[3] = 999915L;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Long: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] subarray(long[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("long type", $stack62, $stack65);

        return;
    }

    public void testSubarrayInt()
    {
        int[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack13, $stack20, $i0, $i1;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (int)[6];

        $stack6[0] = 10;

        $stack6[1] = 11;

        $stack6[2] = 12;

        $stack6[3] = 13;

        $stack6[4] = 14;

        $stack6[5] = 15;

        $stack7 = newarray (int)[4];

        $stack7[0] = 10;

        $stack7[1] = 11;

        $stack7[2] = 12;

        $stack7[3] = 13;

        $stack8 = newarray (int)[4];

        $stack8[0] = 11;

        $stack8[1] = 12;

        $stack8[2] = 13;

        $stack8[3] = 14;

        $stack9 = newarray (int)[4];

        $stack9[0] = 12;

        $stack9[1] = 13;

        $stack9[2] = 14;

        $stack9[3] = 15;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Integer: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] subarray(int[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("int type", $stack62, $stack65);

        return;
    }

    public void testSubarrayShort()
    {
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        int $stack13, $stack20, $i0, $i1;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (short)[6];

        $stack6[0] = 10;

        $stack6[1] = 11;

        $stack6[2] = 12;

        $stack6[3] = 13;

        $stack6[4] = 14;

        $stack6[5] = 15;

        $stack7 = newarray (short)[4];

        $stack7[0] = 10;

        $stack7[1] = 11;

        $stack7[2] = 12;

        $stack7[3] = 13;

        $stack8 = newarray (short)[4];

        $stack8[0] = 11;

        $stack8[1] = 12;

        $stack8[2] = 13;

        $stack8[3] = 14;

        $stack9 = newarray (short)[4];

        $stack9[0] = 12;

        $stack9[1] = 13;

        $stack9[2] = 14;

        $stack9[3] = 15;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Short: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] subarray(short[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("short type", $stack62, $stack65);

        return;
    }

    public void testSubarrChar()
    {
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack13, $stack20, $i0, $i1;
        char[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (char)[6];

        $stack6[0] = 97;

        $stack6[1] = 98;

        $stack6[2] = 99;

        $stack6[3] = 100;

        $stack6[4] = 101;

        $stack6[5] = 102;

        $stack7 = newarray (char)[4];

        $stack7[0] = 97;

        $stack7[1] = 98;

        $stack7[2] = 99;

        $stack7[3] = 100;

        $stack8 = newarray (char)[4];

        $stack8[0] = 98;

        $stack8[1] = 99;

        $stack8[2] = 100;

        $stack8[3] = 101;

        $stack9 = newarray (char)[4];

        $stack9[0] = 99;

        $stack9[1] = 100;

        $stack9[2] = 101;

        $stack9[3] = 102;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Character: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] subarray(char[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("char type", $stack62, $stack65);

        return;
    }

    public void testSubarrayByte()
    {
        byte[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack13, $stack20, $i0, $i1;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (byte)[6];

        $stack6[0] = 10;

        $stack6[1] = 11;

        $stack6[2] = 12;

        $stack6[3] = 13;

        $stack6[4] = 14;

        $stack6[5] = 15;

        $stack7 = newarray (byte)[4];

        $stack7[0] = 10;

        $stack7[1] = 11;

        $stack7[2] = 12;

        $stack7[3] = 13;

        $stack8 = newarray (byte)[4];

        $stack8[0] = 11;

        $stack8[1] = 12;

        $stack8[2] = 13;

        $stack8[3] = 14;

        $stack9 = newarray (byte)[4];

        $stack9[0] = 12;

        $stack9[1] = 13;

        $stack9[2] = 14;

        $stack9[3] = 15;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Byte: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] subarray(byte[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("byte type", $stack62, $stack65);

        return;
    }

    public void testSubarrayDouble()
    {
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        double[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        int $stack13, $stack20, $i0, $i1;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (double)[6];

        $stack6[0] = 10.123;

        $stack6[1] = 11.234;

        $stack6[2] = 12.345;

        $stack6[3] = 13.456;

        $stack6[4] = 14.567;

        $stack6[5] = 15.678;

        $stack7 = newarray (double)[4];

        $stack7[0] = 10.123;

        $stack7[1] = 11.234;

        $stack7[2] = 12.345;

        $stack7[3] = 13.456;

        $stack8 = newarray (double)[4];

        $stack8[0] = 11.234;

        $stack8[1] = 12.345;

        $stack8[2] = 13.456;

        $stack8[3] = 14.567;

        $stack9 = newarray (double)[4];

        $stack9[0] = 12.345;

        $stack9[1] = 13.456;

        $stack9[2] = 14.567;

        $stack9[3] = 15.678;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Double: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] subarray(double[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("double type", $stack62, $stack65);

        return;
    }

    public void testSubarrayFloat()
    {
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        float[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        int $stack13, $stack20, $i0, $i1;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (float)[6];

        $stack6[0] = 10.0F;

        $stack6[1] = 11.0F;

        $stack6[2] = 12.0F;

        $stack6[3] = 13.0F;

        $stack6[4] = 14.0F;

        $stack6[5] = 15.0F;

        $stack7 = newarray (float)[4];

        $stack7[0] = 10.0F;

        $stack7[1] = 11.0F;

        $stack7[2] = 12.0F;

        $stack7[3] = 13.0F;

        $stack8 = newarray (float)[4];

        $stack8[0] = 11.0F;

        $stack8[1] = 12.0F;

        $stack8[2] = 13.0F;

        $stack8[3] = 14.0F;

        $stack9 = newarray (float)[4];

        $stack9[0] = 12.0F;

        $stack9[1] = 13.0F;

        $stack9[2] = 14.0F;

        $stack9[3] = 15.0F;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Float: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] subarray(float[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("float type", $stack62, $stack65);

        return;
    }

    public void testSubarrayBoolean()
    {
        boolean $stack12, $stack16, $stack19, $stack23, $stack38, $stack44, $stack47;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack13, $stack20, $i0, $i1;
        boolean[] $stack6, $stack7, $stack8, $stack9, $stack11, $stack15, $stack18, $stack22, $stack25, $stack26, $stack28, $stack29, $stack31, $stack32, $stack34, $stack35, $stack37, $stack40, $stack41, $stack43, $stack46, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack57, $stack59, $stack60, $stack63;
        java.lang.Class $stack62, $stack64, $stack65;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = newarray (boolean)[6];

        $stack6[0] = 1;

        $stack6[1] = 1;

        $stack6[2] = 0;

        $stack6[3] = 1;

        $stack6[4] = 0;

        $stack6[5] = 1;

        $stack7 = newarray (boolean)[4];

        $stack7[0] = 1;

        $stack7[1] = 1;

        $stack7[2] = 0;

        $stack7[3] = 1;

        $stack8 = newarray (boolean)[4];

        $stack8[0] = 1;

        $stack8[1] = 0;

        $stack8[2] = 1;

        $stack8[3] = 0;

        $stack9 = newarray (boolean)[4];

        $stack9[0] = 0;

        $stack9[1] = 1;

        $stack9[2] = 0;

        $stack9[3] = 1;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 0, 4);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, mid end", $stack12);

        $stack13 = lengthof $stack6;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 0, $stack13);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("0 start, length end", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 1, 5);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack8, $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, mid end", $stack19);

        $stack20 = lengthof $stack6;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 2, $stack20);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("mid start, length end", $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>(null, 0, 3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("null input", $stack25);

        $stack28 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack26 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack26, 1, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("empty array", $stack28, $stack29);

        $stack31 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 4, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start > end", $stack31, $stack32);

        $stack34 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start == end", $stack34, $stack35);

        $i0 = (int) -2;

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, $i0, 4);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack7, $stack37);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, normal end", $stack38);

        $stack40 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 33, 4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end", $stack40, $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 2, 33);

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack9, $stack43);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("normal start, end overshoot", $stack44);

        $i1 = (int) -2;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, $i1, 12);

        $stack47 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEquals(java.lang.Object,java.lang.Object)>($stack6, $stack46);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("start undershoot, end overshoot", $stack47);

        $stack50 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack48 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack48, 1, 2);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("empty array, object test", $stack50, $stack51);

        $stack53 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start > end, object test", $stack53, $stack54);

        $stack56 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 3, 3);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start == end, object test", $stack56, $stack57);

        $stack59 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 8733, 4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("start overshoot, any end, object test", $stack59, $stack60);

        $stack62 = <java.lang.Boolean: java.lang.Class TYPE>;

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] subarray(boolean[],int,int)>($stack6, 2, 4);

        $stack64 = virtualinvoke $stack63.<java.lang.Object: java.lang.Class getClass()>();

        $stack65 = virtualinvoke $stack64.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("boolean type", $stack62, $stack65);

        return;
    }

    public void testSameLength()
    {
        java.lang.Object[] emptyArray, $stack5, $stack6;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (java.lang.Object)[0];

        $stack5 = newarray (java.lang.Object)[1];

        $stack5[0] = "pick";

        $stack6 = newarray (java.lang.Object)[2];

        $stack6[0] = "pick";

        $stack6[1] = "stick";

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthBoolean()
    {
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        boolean[] emptyArray, $stack5, $stack6;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (boolean)[0];

        $stack5 = newarray (boolean)[1];

        $stack5[0] = 1;

        $stack6 = newarray (boolean)[2];

        $stack6[0] = 1;

        $stack6[1] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(boolean[],boolean[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthLong()
    {
        long[] emptyArray, $stack5, $stack6;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (long)[0];

        $stack5 = newarray (long)[1];

        $stack5[0] = 0L;

        $stack6 = newarray (long)[2];

        $stack6[0] = 0L;

        $stack6[1] = 76L;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(long[],long[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthInt()
    {
        int[] emptyArray, $stack5, $stack6;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (int)[0];

        $stack5 = newarray (int)[1];

        $stack5[0] = 4;

        $stack6 = newarray (int)[2];

        $stack6[0] = 5;

        $stack6[1] = 7;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(int[],int[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthShort()
    {
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] emptyArray, $stack5, $stack6;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (short)[0];

        $stack5 = newarray (short)[1];

        $stack5[0] = 4;

        $stack6 = newarray (short)[2];

        $stack6[0] = 6;

        $stack6[1] = 8;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(short[],short[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthChar()
    {
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;
        char[] emptyArray, $stack5, $stack6;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (char)[0];

        $stack5 = newarray (char)[1];

        $stack5[0] = 102;

        $stack6 = newarray (char)[2];

        $stack6[0] = 100;

        $stack6[1] = 116;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(char[],char[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthByte()
    {
        byte[] emptyArray, $stack5, $stack6;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (byte)[0];

        $stack5 = newarray (byte)[1];

        $stack5[0] = 3;

        $stack6 = newarray (byte)[2];

        $stack6[0] = 4;

        $stack6[1] = 6;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(byte[],byte[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthDouble()
    {
        double[] emptyArray, $stack5, $stack6;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (double)[0];

        $stack5 = newarray (double)[1];

        $stack5[0] = 1.3;

        $stack6 = newarray (double)[2];

        $stack6[0] = 4.5;

        $stack6[1] = 6.3;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(double[],double[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameLengthFloat()
    {
        float[] emptyArray, $stack5, $stack6;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (float)[0];

        $stack5 = newarray (float)[1];

        $stack5[0] = 2.5F;

        $stack6 = newarray (float)[2];

        $stack6[0] = 6.4F;

        $stack6[1] = 5.8F;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(null, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(null, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(emptyArray, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(emptyArray, emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(emptyArray, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>(emptyArray, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack5, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack5, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack5, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack5, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack6, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack6, emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(float[],float[])>($stack6, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;
    }

    public void testSameType()
    {
        java.lang.Object[] $stack3, $stack5, $stack7, $stack8, $stack10;
        java.lang.String[] $stack11, $stack17, $stack19;
        boolean $stack9, $stack12, $stack15, $stack18, $stack21;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.IllegalArgumentException $stack22, $stack37, $stack40;
        java.lang.String[][] $stack13, $stack14, $stack16, $stack20;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

     label01:
        staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $stack40 := @caughtexception;

     label04:
        $stack3 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>(null, $stack3);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack37 := @caughtexception;

     label07:
        $stack5 = newarray (java.lang.Object)[0];

        staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>($stack5, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack22 := @caughtexception;

     label10:
        $stack8 = newarray (java.lang.Object)[0];

        $stack7 = newarray (java.lang.Object)[0];

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>($stack8, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack11 = newarray (java.lang.String)[0];

        $stack10 = newarray (java.lang.Object)[0];

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>($stack11, $stack10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack14 = newmultiarray (java.lang.String)[0][0];

        $stack13 = newmultiarray (java.lang.String)[0][0];

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>($stack14, $stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        $stack17 = newarray (java.lang.String)[0];

        $stack16 = newmultiarray (java.lang.String)[0][0];

        $stack18 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>($stack17, $stack16);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack20 = newmultiarray (java.lang.String)[0][0];

        $stack19 = newarray (java.lang.String)[0];

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameType(java.lang.Object,java.lang.Object)>($stack20, $stack19);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }

    public void testReverse()
    {
        java.lang.Object[] $stack8, $stack12;
        java.lang.String[] $stack7;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.StringBuffer $stack6;
        java.lang.Object $stack9, $stack10, $stack11, $stack13, $stack14, $stack15, $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack6 = new java.lang.StringBuffer;

        specialinvoke $stack6.<java.lang.StringBuffer: void <init>(java.lang.String)>("pick");

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = "stick";

        $stack8 = newarray (java.lang.Object)[3];

        $stack8[0] = $stack6;

        $stack8[1] = "a";

        $stack8[2] = $stack7;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(java.lang.Object[])>($stack8);

        $stack9 = $stack8[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack7);

        $stack10 = $stack8[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack10, "a");

        $stack11 = $stack8[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack6);

        $stack12 = newarray (java.lang.Object)[4];

        $stack12[0] = $stack6;

        $stack12[1] = "a";

        $stack12[2] = $stack7;

        $stack12[3] = "up";

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(java.lang.Object[])>($stack12);

        $stack13 = $stack12[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, "up");

        $stack14 = $stack12[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack7);

        $stack15 = $stack12[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack15, "a");

        $stack16 = $stack12[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack6);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(java.lang.Object[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, null);

        return;
    }

    public void testReverseLong()
    {
        long[] $stack2;
        long $stack3, $stack4, $stack5;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (long)[3];

        $stack2[0] = 1L;

        $stack2[1] = 2L;

        $stack2[2] = 3L;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(long[])>($stack2);

        $stack3 = $stack2[0];

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack3, 3L);

        $stack4 = $stack2[1];

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack4, 2L);

        $stack5 = $stack2[2];

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack5, 1L);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(long[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testReverseInt()
    {
        long $stack4, $stack6, $stack8;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int[] $stack2;
        int $stack3, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (int)[3];

        $stack2[0] = 1;

        $stack2[1] = 2;

        $stack2[2] = 3;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(int[])>($stack2);

        $stack3 = $stack2[0];

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack4, 3L);

        $stack5 = $stack2[1];

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack6, 2L);

        $stack7 = $stack2[2];

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, 1L);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(int[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testReverseShort()
    {
        long $stack4, $stack6, $stack8;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short $stack3, $stack5, $stack7;
        short[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (short)[3];

        $stack2[0] = 1;

        $stack2[1] = 2;

        $stack2[2] = 3;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(short[])>($stack2);

        $stack3 = $stack2[0];

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack4, 3L);

        $stack5 = $stack2[1];

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack6, 2L);

        $stack7 = $stack2[2];

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, 1L);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(short[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testReverseChar()
    {
        char $stack3, $stack5, $stack7;
        long $stack4, $stack6, $stack8;
        org.apache.commons.lang3.ArrayUtilsTest this;
        char[] $stack2;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (char)[3];

        $stack2[0] = 97;

        $stack2[1] = 102;

        $stack2[2] = 67;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(char[])>($stack2);

        $stack3 = $stack2[0];

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack4, 67L);

        $stack5 = $stack2[1];

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack6, 102L);

        $stack7 = $stack2[2];

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, 97L);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(char[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testReverseByte()
    {
        byte[] $stack2;
        long $stack4, $stack6, $stack8;
        org.apache.commons.lang3.ArrayUtilsTest this;
        byte $stack3, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (byte)[3];

        $stack2[0] = 2;

        $stack2[1] = 3;

        $stack2[2] = 4;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(byte[])>($stack2);

        $stack3 = $stack2[0];

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack4, 4L);

        $stack5 = $stack2[1];

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack6, 3L);

        $stack7 = $stack2[2];

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, 2L);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testReverseDouble()
    {
        double[] $stack2;
        org.apache.commons.lang3.ArrayUtilsTest this;
        double $stack3, $stack4, $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (double)[3];

        $stack2[0] = 0.3;

        $stack2[1] = 0.4;

        $stack2[2] = 0.5;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(double[])>($stack2);

        $stack3 = $stack2[0];

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($stack3, 0.5, 0.0);

        $stack4 = $stack2[1];

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($stack4, 0.4, 0.0);

        $stack5 = $stack2[2];

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($stack5, 0.3, 0.0);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(double[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testReverseFloat()
    {
        float $stack3, $stack4, $stack5;
        float[] $stack2;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (float)[3];

        $stack2[0] = 0.3F;

        $stack2[1] = 0.4F;

        $stack2[2] = 0.5F;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(float[])>($stack2);

        $stack3 = $stack2[0];

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($stack3, 0.5F, 0.0F);

        $stack4 = $stack2[1];

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($stack4, 0.4F, 0.0F);

        $stack5 = $stack2[2];

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>($stack5, 0.3F, 0.0F);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(float[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testReverseBoolean()
    {
        boolean[] $stack2;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack3, $stack4, $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (boolean)[3];

        $stack2[0] = 0;

        $stack2[1] = 0;

        $stack2[2] = 1;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(boolean[])>($stack2);

        $stack3 = $stack2[0];

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = $stack2[1];

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = $stack2[2];

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(boolean[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, null);

        return;
    }

    public void testIndexOf()
    {
        java.lang.Object[] $stack2, $stack9;
        long $stack5, $stack8, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30;
        int $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.Object)[6];

        $stack2[0] = "0";

        $stack2[1] = "1";

        $stack2[2] = "2";

        $stack2[3] = "3";

        $stack2[4] = null;

        $stack2[5] = "0";

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(null, null);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(null, "0");

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack8);

        $stack9 = newarray (java.lang.Object)[0];

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($stack9, "0");

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($stack2, "0");

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($stack2, "1");

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($stack2, "2");

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack21);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($stack2, "3");

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($stack2, null);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($stack2, "notInArray");

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack30);

        return;
    }

    public void testIndexOfWithStartIndex()
    {
        java.lang.Object[] $stack2, $stack6;
        long $stack5, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack33, $stack36, $stack39;
        int $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack38, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.Object)[6];

        $stack2[0] = "0";

        $stack2[1] = "1";

        $stack2[2] = "2";

        $stack2[3] = "3";

        $stack2[4] = null;

        $stack2[5] = "0";

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(null, null, 2);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack5);

        $stack6 = newarray (java.lang.Object)[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack6, "0", 0);

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>(null, "0", 2);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "0", 2);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "1", 2);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "2", 2);

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack21);

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "3", 2);

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, null, 2);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "notInArray", 2);

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack30);

        $i0 = (int) -1;

        $stack32 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, null, $i0);

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack33);

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, null, 8);

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack36);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "0", 8);

        $stack39 = (long) $stack38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack39);

        return;
    }

    public void testLastIndexOf()
    {
        java.lang.Object[] $stack2;
        long $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.Object)[6];

        $stack2[0] = "0";

        $stack2[1] = "1";

        $stack2[2] = "2";

        $stack2[3] = "3";

        $stack2[4] = null;

        $stack2[5] = "0";

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>(null, null);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>(null, "0");

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>($stack2, "0");

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>($stack2, "1");

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>($stack2, "2");

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>($stack2, "3");

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>($stack2, null);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object)>($stack2, "notInArray");

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testLastIndexOfWithStartIndex()
    {
        java.lang.Object[] $stack2;
        long $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack38;
        int $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack37, $i0, $i1;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.Object)[6];

        $stack2[0] = "0";

        $stack2[1] = "1";

        $stack2[2] = "2";

        $stack2[3] = "3";

        $stack2[4] = null;

        $stack2[5] = "0";

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>(null, null, 2);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>(null, "0", 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "0", 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "1", 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "2", 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "3", 2);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $i0 = (int) -1;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "3", $i0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, null, 5);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, null, 2);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack29);

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "notInArray", 5);

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack32);

        $i1 = (int) -1;

        $stack34 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, null, $i1);

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack35);

        $stack37 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($stack2, "0", 88);

        $stack38 = (long) $stack37;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack38);

        return;
    }

    public void testContains()
    {
        java.lang.Object[] $stack2;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = newarray (java.lang.Object)[6];

        $stack2[0] = "0";

        $stack2[1] = "1";

        $stack2[2] = "2";

        $stack2[3] = "3";

        $stack2[4] = null;

        $stack2[5] = "0";

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(null, null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(null, "1");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($stack2, "0");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($stack2, "1");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($stack2, "2");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($stack2, "3");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($stack2, null);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($stack2, "notInArray");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        return;
    }

    public void testIndexOfLong()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        long[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>(null, 0L);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (long)[5];

        $stack5[0] = 0L;

        $stack5[1] = 1L;

        $stack5[2] = 2L;

        $stack5[3] = 3L;

        $stack5[4] = 0L;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>($stack5, 0L);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>($stack5, 1L);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>($stack5, 2L);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>($stack5, 3L);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long)>($stack5, 99L);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testIndexOfLongWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        long[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>(null, 0L, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (long)[5];

        $stack5[0] = 0L;

        $stack5[1] = 1L;

        $stack5[2] = 2L;

        $stack5[3] = 3L;

        $stack5[4] = 0L;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>($stack5, 0L, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>($stack5, 1L, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>($stack5, 2L, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>($stack5, 3L, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>($stack5, 3L, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>($stack5, 99L, 0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(long[],long,int)>($stack5, 0L, 6);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testLastIndexOfLong()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        long[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long)>(null, 0L);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (long)[5];

        $stack5[0] = 0L;

        $stack5[1] = 1L;

        $stack5[2] = 2L;

        $stack5[3] = 3L;

        $stack5[4] = 0L;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long)>($stack5, 0L);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long)>($stack5, 1L);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long)>($stack5, 2L);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long)>($stack5, 3L);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long)>($stack5, 99L);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testLastIndexOfLongWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        long[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>(null, 0L, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (long)[5];

        $stack5[0] = 0L;

        $stack5[1] = 1L;

        $stack5[2] = 2L;

        $stack5[3] = 3L;

        $stack5[4] = 0L;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>($stack5, 0L, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>($stack5, 1L, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>($stack5, 2L, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>($stack5, 3L, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>($stack5, 3L, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>($stack5, 99L, 4);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(long[],long,int)>($stack5, 0L, 88);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack26);

        return;
    }

    public void testContainsLong()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        long[] $stack3;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(long[],long)>(null, 1L);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (long)[5];

        $stack3[0] = 0L;

        $stack3[1] = 1L;

        $stack3[2] = 2L;

        $stack3[3] = 3L;

        $stack3[4] = 0L;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(long[],long)>($stack3, 0L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(long[],long)>($stack3, 1L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(long[],long)>($stack3, 2L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(long[],long)>($stack3, 3L);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(long[],long)>($stack3, 99L);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testIndexOfInt()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>(null, 0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (int)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>($stack5, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>($stack5, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>($stack5, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>($stack5, 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int)>($stack5, 99);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testIndexOfIntWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>(null, 0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (int)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>($stack5, 0, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>($stack5, 1, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>($stack5, 2, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>($stack5, 3, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>($stack5, 3, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>($stack5, 99, 0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(int[],int,int)>($stack5, 0, 6);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testLastIndexOfInt()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int)>(null, 0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (int)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int)>($stack5, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int)>($stack5, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int)>($stack5, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int)>($stack5, 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int)>($stack5, 99);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testLastIndexOfIntWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int[] $stack5;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>(null, 0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (int)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>($stack5, 0, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>($stack5, 1, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>($stack5, 2, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>($stack5, 3, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>($stack5, 3, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int)>($stack5, 99);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(int[],int,int)>($stack5, 0, 88);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack26);

        return;
    }

    public void testContainsInt()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        int[] $stack3;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(int[],int)>(null, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (int)[5];

        $stack3[0] = 0;

        $stack3[1] = 1;

        $stack3[2] = 2;

        $stack3[3] = 3;

        $stack3[4] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(int[],int)>($stack3, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(int[],int)>($stack3, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(int[],int)>($stack3, 2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(int[],int)>($stack3, 3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(int[],int)>($stack3, 99);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testIndexOfShort()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;
        short[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>(null, 0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (short)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>($stack5, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>($stack5, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>($stack5, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>($stack5, 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short)>($stack5, 99);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testIndexOfShortWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>(null, 0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (short)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>($stack5, 0, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>($stack5, 1, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>($stack5, 2, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>($stack5, 3, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>($stack5, 3, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>($stack5, 99, 0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(short[],short,int)>($stack5, 0, 6);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testLastIndexOfShort()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;
        short[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short)>(null, 0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (short)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short)>($stack5, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short)>($stack5, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short)>($stack5, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short)>($stack5, 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short)>($stack5, 99);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testLastIndexOfShortWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>(null, 0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (short)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>($stack5, 0, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>($stack5, 1, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>($stack5, 2, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>($stack5, 3, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>($stack5, 3, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short)>($stack5, 99);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(short[],short,int)>($stack5, 0, 88);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack26);

        return;
    }

    public void testContainsShort()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] $stack3;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(short[],short)>(null, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (short)[5];

        $stack3[0] = 0;

        $stack3[1] = 1;

        $stack3[2] = 2;

        $stack3[3] = 3;

        $stack3[4] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(short[],short)>($stack3, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(short[],short)>($stack3, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(short[],short)>($stack3, 2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(short[],short)>($stack3, 3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(short[],short)>($stack3, 99);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testIndexOfChar()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;
        char[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>(null, 97);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (char)[5];

        $stack5[0] = 97;

        $stack5[1] = 98;

        $stack5[2] = 99;

        $stack5[3] = 100;

        $stack5[4] = 97;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>($stack5, 97);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>($stack5, 98);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>($stack5, 99);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>($stack5, 100);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char)>($stack5, 101);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testIndexOfCharWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;
        char[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>(null, 97, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (char)[5];

        $stack5[0] = 97;

        $stack5[1] = 98;

        $stack5[2] = 99;

        $stack5[3] = 100;

        $stack5[4] = 97;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>($stack5, 97, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>($stack5, 98, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>($stack5, 99, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>($stack5, 100, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>($stack5, 100, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>($stack5, 101, 0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(char[],char,int)>($stack5, 97, 6);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testLastIndexOfChar()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;
        char[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char)>(null, 97);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (char)[5];

        $stack5[0] = 97;

        $stack5[1] = 98;

        $stack5[2] = 99;

        $stack5[3] = 100;

        $stack5[4] = 97;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char)>($stack5, 97);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char)>($stack5, 98);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char)>($stack5, 99);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char)>($stack5, 100);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char)>($stack5, 101);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testLastIndexOfCharWithStartIndex()
    {
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;
        char[] $stack5;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>(null, 97, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (char)[5];

        $stack5[0] = 97;

        $stack5[1] = 98;

        $stack5[2] = 99;

        $stack5[3] = 100;

        $stack5[4] = 97;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>($stack5, 97, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>($stack5, 98, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>($stack5, 99, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>($stack5, 100, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>($stack5, 100, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char)>($stack5, 101);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(char[],char,int)>($stack5, 97, 88);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack26);

        return;
    }

    public void testContainsChar()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        char[] $stack3;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(char[],char)>(null, 98);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (char)[5];

        $stack3[0] = 97;

        $stack3[1] = 98;

        $stack3[2] = 99;

        $stack3[3] = 100;

        $stack3[4] = 97;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(char[],char)>($stack3, 97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(char[],char)>($stack3, 98);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(char[],char)>($stack3, 99);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(char[],char)>($stack3, 100);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(char[],char)>($stack3, 101);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testIndexOfByte()
    {
        byte[] $stack5;
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>(null, 0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (byte)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>($stack5, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>($stack5, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>($stack5, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>($stack5, 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte)>($stack5, 99);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testIndexOfByteWithStartIndex()
    {
        byte[] $stack5;
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>(null, 0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (byte)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>($stack5, 0, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>($stack5, 1, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>($stack5, 2, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>($stack5, 3, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>($stack5, 3, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>($stack5, 99, 0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(byte[],byte,int)>($stack5, 0, 6);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testLastIndexOfByte()
    {
        byte[] $stack5;
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte)>(null, 0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (byte)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte)>($stack5, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte)>($stack5, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte)>($stack5, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte)>($stack5, 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte)>($stack5, 99);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        return;
    }

    public void testLastIndexOfByteWithStartIndex()
    {
        byte[] $stack5;
        long $stack4, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>(null, 0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        $stack5 = newarray (byte)[5];

        $stack5[0] = 0;

        $stack5[1] = 1;

        $stack5[2] = 2;

        $stack5[3] = 3;

        $stack5[4] = 0;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>($stack5, 0, 2);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>($stack5, 1, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>($stack5, 2, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>($stack5, 3, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>($stack5, 3, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte)>($stack5, 99);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(byte[],byte,int)>($stack5, 0, 88);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack26);

        return;
    }

    public void testContainsByte()
    {
        byte[] $stack3;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(byte[],byte)>(null, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (byte)[5];

        $stack3[0] = 0;

        $stack3[1] = 1;

        $stack3[2] = 2;

        $stack3[3] = 3;

        $stack3[4] = 0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(byte[],byte)>($stack3, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(byte[],byte)>($stack3, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(byte[],byte)>($stack3, 2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(byte[],byte)>($stack3, 3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(byte[],byte)>($stack3, 99);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testIndexOfDouble()
    {
        double[] $stack8, array;
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>(null, 0.0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>(array, 0.0);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[5];

        $stack8[0] = 0.0;

        $stack8[1] = 1.0;

        $stack8[2] = 2.0;

        $stack8[3] = 3.0;

        $stack8[4] = 0.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>($stack8, 0.0);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>($stack8, 1.0);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>($stack8, 2.0);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>($stack8, 3.0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $i0 = (int) -1;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>($stack8, 3.0, $i0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double)>($stack8, 99.0);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testIndexOfDoubleTolerance()
    {
        double[] $stack8, array;
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,double)>(null, 0.0, 0.0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,double)>(array, 0.0, 0.0);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[5];

        $stack8[0] = 0.0;

        $stack8[1] = 1.0;

        $stack8[2] = 2.0;

        $stack8[3] = 3.0;

        $stack8[4] = 0.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,double)>($stack8, 0.0, 0.3);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,double)>($stack8, 2.2, 0.35);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,double)>($stack8, 4.15, 2.0);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,double)>($stack8, 1.00001324, 1.0E-4);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        return;
    }

    public void testIndexOfDoubleWithStartIndex()
    {
        double[] $stack8, array;
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>(null, 0.0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>(array, 0.0, 2);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[5];

        $stack8[0] = 0.0;

        $stack8[1] = 1.0;

        $stack8[2] = 2.0;

        $stack8[3] = 3.0;

        $stack8[4] = 0.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>($stack8, 0.0, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>($stack8, 1.0, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>($stack8, 2.0, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>($stack8, 3.0, 2);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>($stack8, 99.0, 0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int)>($stack8, 0.0, 6);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        return;
    }

    public void testIndexOfDoubleWithStartIndexTolerance()
    {
        double[] $stack8, array;
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $i0, $i1;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>(null, 0.0, 2, 0.0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>(array, 0.0, 2, 0.0);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[5];

        $stack8[0] = 0.0;

        $stack8[1] = 1.0;

        $stack8[2] = 2.0;

        $stack8[3] = 3.0;

        $stack8[4] = 0.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 0.0, 99, 0.3);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 0.0, 0, 0.3);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 0.0, 3, 0.3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 2.2, 0, 0.35);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 4.15, 0, 2.0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 1.00001324, 0, 1.0E-4);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack26);

        $i0 = (int) -1;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 4.15, $i0, 2.0);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack29);

        $i1 = (int) -300;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(double[],double,int,double)>($stack8, 1.00001324, $i1, 1.0E-4);

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack32);

        return;
    }

    public void testLastIndexOfDouble()
    {
        double[] $stack8, array;
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>(null, 0.0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>(array, 0.0);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[5];

        $stack8[0] = 0.0;

        $stack8[1] = 1.0;

        $stack8[2] = 2.0;

        $stack8[3] = 3.0;

        $stack8[4] = 0.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>($stack8, 0.0);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>($stack8, 1.0);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>($stack8, 2.0);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>($stack8, 3.0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>($stack8, 99.0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        return;
    }

    public void testLastIndexOfDoubleTolerance()
    {
        double[] $stack8, array;
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,double)>(null, 0.0, 0.0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,double)>(array, 0.0, 0.0);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[5];

        $stack8[0] = 0.0;

        $stack8[1] = 1.0;

        $stack8[2] = 2.0;

        $stack8[3] = 3.0;

        $stack8[4] = 0.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,double)>($stack8, 0.0, 0.3);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,double)>($stack8, 2.2, 0.35);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,double)>($stack8, 4.15, 2.0);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,double)>($stack8, 1.00001324, 1.0E-4);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        return;
    }

    public void testLastIndexOfDoubleWithStartIndex()
    {
        double[] $stack8, array;
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>(null, 0.0, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>(array, 0.0, 2);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[5];

        $stack8[0] = 0.0;

        $stack8[1] = 1.0;

        $stack8[2] = 2.0;

        $stack8[3] = 3.0;

        $stack8[4] = 0.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>($stack8, 0.0, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>($stack8, 1.0, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>($stack8, 2.0, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>($stack8, 3.0, 2);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $i0 = (int) -1;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>($stack8, 3.0, $i0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double)>($stack8, 99.0);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int)>($stack8, 0.0, 88);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack29);

        return;
    }

    public void testLastIndexOfDoubleWithStartIndexTolerance()
    {
        double[] $stack8, $stack12, array;
        long $stack4, $stack7, $stack11, $stack15, $stack18, $stack21, $stack25, $stack29, $stack32;
        int $stack3, $stack6, $stack10, $stack14, $stack17, $stack20, $stack22, $stack24, $stack26, $stack28, $stack31, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>(null, 0.0, 2, 0.0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>(array, 0.0, 2, 0.0);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (double)[1];

        $stack8[0] = 3.0;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>($stack8, 1.0, 0, 0.0);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack11);

        $stack12 = newarray (double)[5];

        $stack12[0] = 0.0;

        $stack12[1] = 1.0;

        $stack12[2] = 2.0;

        $stack12[3] = 3.0;

        $stack12[4] = 0.0;

        $stack14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>($stack12, 0.0, 99, 0.3);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>($stack12, 0.0, 3, 0.3);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>($stack12, 2.2, 3, 0.35);

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack21);

        $stack22 = lengthof $stack12;

        $stack24 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>($stack12, 4.15, $stack22, 2.0);

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack25);

        $stack26 = lengthof $stack12;

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>($stack12, 1.00001324, $stack26, 1.0E-4);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack29);

        $i0 = (int) -200;

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(double[],double,int,double)>($stack12, 4.15, $i0, 2.0);

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack32);

        return;
    }

    public void testContainsDouble()
    {
        double[] $stack3;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double)>(null, 1.0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (double)[5];

        $stack3[0] = 0.0;

        $stack3[1] = 1.0;

        $stack3[2] = 2.0;

        $stack3[3] = 3.0;

        $stack3[4] = 0.0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double)>($stack3, 0.0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double)>($stack3, 1.0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double)>($stack3, 2.0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double)>($stack3, 3.0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double)>($stack3, 99.0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testContainsDoubleTolerance()
    {
        double[] $stack3;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double,double)>(null, 1.0, 0.0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (double)[5];

        $stack3[0] = 0.0;

        $stack3[1] = 1.0;

        $stack3[2] = 2.0;

        $stack3[3] = 3.0;

        $stack3[4] = 0.0;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double,double)>($stack3, 4.0, 0.33);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double,double)>($stack3, 2.5, 0.49);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double,double)>($stack3, 2.5, 0.5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(double[],double,double)>($stack3, 2.5, 0.51);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        return;
    }

    public void testIndexOfFloat()
    {
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23;
        float[] $stack8, array;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>(null, 0.0F);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (float)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>(array, 0.0F);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (float)[5];

        $stack8[0] = 0.0F;

        $stack8[1] = 1.0F;

        $stack8[2] = 2.0F;

        $stack8[3] = 3.0F;

        $stack8[4] = 0.0F;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>($stack8, 0.0F);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>($stack8, 1.0F);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>($stack8, 2.0F);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>($stack8, 3.0F);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float)>($stack8, 99.0F);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        return;
    }

    public void testIndexOfFloatWithStartIndex()
    {
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29;
        float[] $stack8, array;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>(null, 0.0F, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (float)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>(array, 0.0F, 2);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (float)[5];

        $stack8[0] = 0.0F;

        $stack8[1] = 1.0F;

        $stack8[2] = 2.0F;

        $stack8[3] = 3.0F;

        $stack8[4] = 0.0F;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>($stack8, 0.0F, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>($stack8, 1.0F, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>($stack8, 2.0F, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>($stack8, 3.0F, 2);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $i0 = (int) -1;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>($stack8, 3.0F, $i0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>($stack8, 99.0F, 0);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(float[],float,int)>($stack8, 0.0F, 6);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack29);

        return;
    }

    public void testLastIndexOfFloat()
    {
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23;
        float[] $stack8, array;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>(null, 0.0F);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (float)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>(array, 0.0F);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (float)[5];

        $stack8[0] = 0.0F;

        $stack8[1] = 1.0F;

        $stack8[2] = 2.0F;

        $stack8[3] = 3.0F;

        $stack8[4] = 0.0F;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>($stack8, 0.0F);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>($stack8, 1.0F);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>($stack8, 2.0F);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>($stack8, 3.0F);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>($stack8, 99.0F);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        return;
    }

    public void testLastIndexOfFloatWithStartIndex()
    {
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29;
        float[] $stack8, array;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $i0;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>(null, 0.0F, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (float)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>(array, 0.0F, 2);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (float)[5];

        $stack8[0] = 0.0F;

        $stack8[1] = 1.0F;

        $stack8[2] = 2.0F;

        $stack8[3] = 3.0F;

        $stack8[4] = 0.0F;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>($stack8, 0.0F, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>($stack8, 1.0F, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>($stack8, 2.0F, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>($stack8, 3.0F, 2);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $i0 = (int) -1;

        $stack22 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>($stack8, 3.0F, $i0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float)>($stack8, 99.0F);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(float[],float,int)>($stack8, 0.0F, 88);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack29);

        return;
    }

    public void testContainsFloat()
    {
        float[] $stack3;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack2, $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(float[],float)>(null, 1.0F);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (float)[5];

        $stack3[0] = 0.0F;

        $stack3[1] = 1.0F;

        $stack3[2] = 2.0F;

        $stack3[3] = 3.0F;

        $stack3[4] = 0.0F;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(float[],float)>($stack3, 0.0F);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(float[],float)>($stack3, 1.0F);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(float[],float)>($stack3, 2.0F);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(float[],float)>($stack3, 3.0F);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(float[],float)>($stack3, 99.0F);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testIndexOfBoolean()
    {
        boolean[] $stack8, $stack15, array;
        long $stack4, $stack7, $stack11, $stack14, $stack18;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack6, $stack10, $stack13, $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>(null, 1);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (boolean)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>(array, 1);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (boolean)[3];

        $stack8[0] = 1;

        $stack8[1] = 0;

        $stack8[2] = 1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>($stack8, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>($stack8, 0);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack15 = newarray (boolean)[2];

        $stack15[0] = 1;

        $stack15[1] = 1;

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean)>($stack15, 0);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack18);

        return;
    }

    public void testIndexOfBooleanWithStartIndex()
    {
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack23, $stack26, $i0, $i1;
        boolean[] $stack8, $stack21, array;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>(null, 1, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (boolean)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>(array, 1, 2);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (boolean)[3];

        $stack8[0] = 1;

        $stack8[1] = 0;

        $stack8[2] = 1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>($stack8, 1, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>($stack8, 0, 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>($stack8, 0, 0);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>($stack8, 0, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack21 = newarray (boolean)[2];

        $stack21[0] = 1;

        $stack21[1] = 1;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>($stack21, 0, 0);

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack24);

        $i1 = (int) -1;

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int indexOf(boolean[],boolean,int)>($stack21, 0, $i1);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack27);

        return;
    }

    public void testLastIndexOfBoolean()
    {
        boolean[] $stack8, $stack15, array;
        long $stack4, $stack7, $stack11, $stack14, $stack18;
        org.apache.commons.lang3.ArrayUtilsTest this;
        int $stack3, $stack6, $stack10, $stack13, $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean)>(null, 1);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (boolean)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean)>(array, 1);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (boolean)[3];

        $stack8[0] = 1;

        $stack8[1] = 0;

        $stack8[2] = 1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean)>($stack8, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean)>($stack8, 0);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack15 = newarray (boolean)[2];

        $stack15[0] = 1;

        $stack15[1] = 1;

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean)>($stack15, 0);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack18);

        return;
    }

    public void testLastIndexOfBooleanWithStartIndex()
    {
        long $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack24, $stack27;
        int $stack3, $stack6, $stack10, $stack13, $stack16, $stack19, $stack23, $stack26, $i0, $i1;
        boolean[] $stack8, $stack21, array;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>(null, 1, 2);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack4);

        array = newarray (boolean)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>(array, 1, 2);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack7);

        $stack8 = newarray (boolean)[3];

        $stack8[0] = 1;

        $stack8[1] = 0;

        $stack8[2] = 1;

        $stack10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>($stack8, 1, 2);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>($stack8, 1, 1);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>($stack8, 0, 2);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack17);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>($stack8, 1, $i0);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack21 = newarray (boolean)[2];

        $stack21[0] = 1;

        $stack21[1] = 1;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>($stack21, 0, 2);

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack24);

        $i1 = (int) -1;

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int lastIndexOf(boolean[],boolean,int)>($stack21, 1, $i1);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack27);

        return;
    }

    public void testContainsBoolean()
    {
        boolean[] $stack3, $stack6;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack2, $stack4, $stack5, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(boolean[],boolean)>(null, 1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (boolean)[3];

        $stack3[0] = 1;

        $stack3[1] = 0;

        $stack3[2] = 1;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(boolean[],boolean)>($stack3, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(boolean[],boolean)>($stack3, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = newarray (boolean)[2];

        $stack6[0] = 1;

        $stack6[1] = 1;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(boolean[],boolean)>($stack6, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(boolean[],boolean)>($stack6, 0);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testToPrimitive_boolean()
    {
        boolean[] $stack4, $stack6, $stack7, $stack8, $stack13;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Boolean[] $stack5, $stack9, $stack15;
        java.lang.NullPointerException $stack18;
        java.lang.Boolean $stack10, $stack11, $stack12, $stack16;
        boolean $stack14;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack5 = newarray (java.lang.Boolean)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (boolean)[3];

        $stack8[0] = 1;

        $stack8[1] = 0;

        $stack8[2] = 1;

        $stack9 = newarray (java.lang.Boolean)[3];

        $stack10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack9[0] = $stack10;

        $stack11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack9[1] = $stack11;

        $stack12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack9[2] = $stack12;

        $stack13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[])>($stack9);

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack8, $stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

     label1:
        $stack15 = newarray (java.lang.Boolean)[2];

        $stack16 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack15[0] = $stack16;

        $stack15[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[])>($stack15);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack18 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_boolean_boolean()
    {
        java.lang.Boolean $stack8, $stack9, $stack10, $stack15, $stack16, $stack21, $stack22;
        boolean $stack12, $stack18, $stack24;
        boolean[] $stack2, $stack4, $stack5, $stack6, $stack11, $stack13, $stack17, $stack19, $stack23;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Boolean[] $stack3, $stack7, $stack14, $stack20;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[],boolean)>(null, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = <org.apache.commons.lang3.ArrayUtils: boolean[] EMPTY_BOOLEAN_ARRAY>;

        $stack3 = newarray (java.lang.Boolean)[0];

        $stack5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[],boolean)>($stack3, 0);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = newarray (boolean)[3];

        $stack6[0] = 1;

        $stack6[1] = 0;

        $stack6[2] = 1;

        $stack7 = newarray (java.lang.Boolean)[3];

        $stack8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack7[0] = $stack8;

        $stack9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack7[1] = $stack9;

        $stack10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack7[2] = $stack10;

        $stack11 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[],boolean)>($stack7, 0);

        $stack12 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack6, $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = newarray (boolean)[3];

        $stack13[0] = 1;

        $stack13[1] = 0;

        $stack13[2] = 0;

        $stack14 = newarray (java.lang.Boolean)[3];

        $stack15 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack14[0] = $stack15;

        $stack14[1] = null;

        $stack16 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack14[2] = $stack16;

        $stack17 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[],boolean)>($stack14, 0);

        $stack18 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack13, $stack17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack19 = newarray (boolean)[3];

        $stack19[0] = 1;

        $stack19[1] = 1;

        $stack19[2] = 0;

        $stack20 = newarray (java.lang.Boolean)[3];

        $stack21 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack20[0] = $stack21;

        $stack20[1] = null;

        $stack22 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack20[2] = $stack22;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean[] toPrimitive(java.lang.Boolean[],boolean)>($stack20, 1);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($stack19, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToObject_boolean()
    {
        boolean[] $stack4, $stack11;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Boolean[] $stack3, $stack5, $stack6, $stack7, $stack12;
        java.lang.Boolean $stack8, $stack9, $stack10;
        boolean $stack13;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] toObject(boolean[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY>;

        $stack4 = newarray (boolean)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] toObject(boolean[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Boolean)[3];

        $stack8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack7[0] = $stack8;

        $stack9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $stack7[1] = $stack9;

        $stack10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $stack7[2] = $stack10;

        $stack11 = newarray (boolean)[3];

        $stack11[0] = 1;

        $stack11[1] = 0;

        $stack11[2] = 1;

        $stack12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Boolean[] toObject(boolean[])>($stack11);

        $stack13 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        return;
    }

    public void testToPrimitive_char()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.NullPointerException $stack22;
        java.lang.Character $stack10, $stack12, $stack14, $stack19;
        char[] $stack4, $stack6, $stack7, $stack8, $stack16;
        java.lang.Character[] $stack5, $stack9, $stack18;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack5 = newarray (java.lang.Character)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (char)[3];

        $stack8[0] = 0;

        $stack8[1] = 65535;

        $stack8[2] = 48;

        $stack9 = newarray (java.lang.Character)[3];

        $stack10 = new java.lang.Character;

        specialinvoke $stack10.<java.lang.Character: void <init>(char)>(0);

        $stack9[0] = $stack10;

        $stack12 = new java.lang.Character;

        specialinvoke $stack12.<java.lang.Character: void <init>(char)>(65535);

        $stack9[1] = $stack12;

        $stack14 = new java.lang.Character;

        specialinvoke $stack14.<java.lang.Character: void <init>(char)>(48);

        $stack9[2] = $stack14;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[])>($stack9);

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack8, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

     label1:
        $stack18 = newarray (java.lang.Character)[2];

        $stack19 = new java.lang.Character;

        specialinvoke $stack19.<java.lang.Character: void <init>(char)>(0);

        $stack18[0] = $stack19;

        $stack18[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[])>($stack18);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_char_char()
    {
        java.lang.Character $stack9, $stack11, $stack13, $stack19, $stack21;
        boolean $stack16, $stack24;
        org.apache.commons.lang3.ArrayUtilsTest this;
        char[] $stack3, $stack5, $stack6, $stack7, $stack15, $stack17, $stack23;
        java.lang.Character[] $stack4, $stack8, $stack18;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[],char)>(null, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack4 = newarray (java.lang.Character)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[],char)>($stack4, 0);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (char)[3];

        $stack7[0] = 0;

        $stack7[1] = 65535;

        $stack7[2] = 48;

        $stack8 = newarray (java.lang.Character)[3];

        $stack9 = new java.lang.Character;

        specialinvoke $stack9.<java.lang.Character: void <init>(char)>(0);

        $stack8[0] = $stack9;

        $stack11 = new java.lang.Character;

        specialinvoke $stack11.<java.lang.Character: void <init>(char)>(65535);

        $stack8[1] = $stack11;

        $stack13 = new java.lang.Character;

        specialinvoke $stack13.<java.lang.Character: void <init>(char)>(48);

        $stack8[2] = $stack13;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[],char)>($stack8, 0);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = newarray (char)[3];

        $stack17[0] = 0;

        $stack17[1] = 65535;

        $stack17[2] = 48;

        $stack18 = newarray (java.lang.Character)[3];

        $stack19 = new java.lang.Character;

        specialinvoke $stack19.<java.lang.Character: void <init>(char)>(0);

        $stack18[0] = $stack19;

        $stack18[1] = null;

        $stack21 = new java.lang.Character;

        specialinvoke $stack21.<java.lang.Character: void <init>(char)>(48);

        $stack18[2] = $stack21;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: char[] toPrimitive(java.lang.Character[],char)>($stack18, 65535);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack17, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToObject_char()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Character $stack8, $stack10, $stack12;
        java.lang.Character[] $stack3, $stack5, $stack6, $stack7, $stack15;
        char[] $stack4, $stack14;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] toObject(char[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] EMPTY_CHARACTER_OBJECT_ARRAY>;

        $stack4 = newarray (char)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] toObject(char[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Character)[3];

        $stack8 = new java.lang.Character;

        specialinvoke $stack8.<java.lang.Character: void <init>(char)>(0);

        $stack7[0] = $stack8;

        $stack10 = new java.lang.Character;

        specialinvoke $stack10.<java.lang.Character: void <init>(char)>(65535);

        $stack7[1] = $stack10;

        $stack12 = new java.lang.Character;

        specialinvoke $stack12.<java.lang.Character: void <init>(char)>(48);

        $stack7[2] = $stack12;

        $stack14 = newarray (char)[3];

        $stack14[0] = 0;

        $stack14[1] = 65535;

        $stack14[2] = 48;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Character[] toObject(char[])>($stack14);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testToPrimitive_byte()
    {
        byte[] $stack4, $stack6, $stack7, $stack8, $stack16;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.NullPointerException $stack22;
        java.lang.Byte[] $stack5, $stack9, $stack18;
        java.lang.Byte $stack11, $stack13, $stack15, $stack20;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack5 = newarray (java.lang.Byte)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (byte)[3];

        $stack8[0] = -128;

        $stack8[1] = 127;

        $stack8[2] = 127;

        $stack9 = newarray (java.lang.Byte)[3];

        $stack11 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        $stack9[0] = $stack11;

        $stack13 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $stack9[1] = $stack13;

        $stack15 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $stack9[2] = $stack15;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[])>($stack9);

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack8, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

     label1:
        $stack18 = newarray (java.lang.Byte)[2];

        $stack20 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[])>($stack18);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_byte_byte()
    {
        byte[] $stack3, $stack5, $stack6, $stack7, $stack15, $stack17, $stack23;
        java.lang.Byte $stack10, $stack12, $stack14, $stack20, $stack22;
        boolean $stack16, $stack24;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Byte[] $stack4, $stack8, $stack18;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[],byte)>(null, -128);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;

        $stack4 = newarray (java.lang.Byte)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[],byte)>($stack4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (byte)[3];

        $stack7[0] = -128;

        $stack7[1] = 127;

        $stack7[2] = 127;

        $stack8 = newarray (java.lang.Byte)[3];

        $stack10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        $stack8[0] = $stack10;

        $stack12 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $stack8[1] = $stack12;

        $stack14 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $stack8[2] = $stack14;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[],byte)>($stack8, -128);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = newarray (byte)[3];

        $stack17[0] = -128;

        $stack17[1] = 127;

        $stack17[2] = 127;

        $stack18 = newarray (java.lang.Byte)[3];

        $stack20 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        $stack22 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $stack18[2] = $stack22;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: byte[] toPrimitive(java.lang.Byte[],byte)>($stack18, 127);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($stack17, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToObject_byte()
    {
        byte[] $stack4, $stack14;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Byte[] $stack3, $stack5, $stack6, $stack7, $stack15;
        java.lang.Byte $stack9, $stack11, $stack13;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] toObject(byte[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] EMPTY_BYTE_OBJECT_ARRAY>;

        $stack4 = newarray (byte)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] toObject(byte[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Byte)[3];

        $stack9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $stack7[1] = $stack11;

        $stack13 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $stack7[2] = $stack13;

        $stack14 = newarray (byte)[3];

        $stack14[0] = -128;

        $stack14[1] = 127;

        $stack14[2] = 127;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Byte[] toObject(byte[])>($stack14);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testToPrimitive_short()
    {
        java.lang.Short[] $stack5, $stack9, $stack18;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.NullPointerException $stack22;
        java.lang.Short $stack11, $stack13, $stack15, $stack20;
        short[] $stack4, $stack6, $stack7, $stack8, $stack16;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack5 = newarray (java.lang.Short)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (short)[3];

        $stack8[0] = -32768;

        $stack8[1] = 32767;

        $stack8[2] = -27009;

        $stack9 = newarray (java.lang.Short)[3];

        $stack11 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-32768);

        $stack9[0] = $stack11;

        $stack13 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(32767);

        $stack9[1] = $stack13;

        $stack15 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-27009);

        $stack9[2] = $stack15;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[])>($stack9);

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack8, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

     label1:
        $stack18 = newarray (java.lang.Short)[2];

        $stack20 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-32768);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[])>($stack18);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_short_short()
    {
        java.lang.Short[] $stack4, $stack8, $stack18;
        java.lang.Short $stack10, $stack12, $stack14, $stack20, $stack22;
        boolean $stack16, $stack24;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] $stack3, $stack5, $stack6, $stack7, $stack15, $stack17, $stack23;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[],short)>(null, -32768);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: short[] EMPTY_SHORT_ARRAY>;

        $stack4 = newarray (java.lang.Short)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[],short)>($stack4, -32768);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (short)[3];

        $stack7[0] = -32768;

        $stack7[1] = 32767;

        $stack7[2] = -27009;

        $stack8 = newarray (java.lang.Short)[3];

        $stack10 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-32768);

        $stack8[0] = $stack10;

        $stack12 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(32767);

        $stack8[1] = $stack12;

        $stack14 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-27009);

        $stack8[2] = $stack14;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[],short)>($stack8, -32768);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = newarray (short)[3];

        $stack17[0] = -32768;

        $stack17[1] = 32767;

        $stack17[2] = -27009;

        $stack18 = newarray (java.lang.Short)[3];

        $stack20 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-32768);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        $stack22 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-27009);

        $stack18[2] = $stack22;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: short[] toPrimitive(java.lang.Short[],short)>($stack18, 32767);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($stack17, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToObject_short()
    {
        java.lang.Short[] $stack3, $stack5, $stack6, $stack7, $stack15;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Short $stack9, $stack11, $stack13;
        short[] $stack4, $stack14;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] toObject(short[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] EMPTY_SHORT_OBJECT_ARRAY>;

        $stack4 = newarray (short)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] toObject(short[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Short)[3];

        $stack9 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-32768);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(32767);

        $stack7[1] = $stack11;

        $stack13 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-27009);

        $stack7[2] = $stack13;

        $stack14 = newarray (short)[3];

        $stack14[0] = -32768;

        $stack14[1] = 32767;

        $stack14[2] = -27009;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Short[] toObject(short[])>($stack14);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testToPrimitive_int()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Integer $stack11, $stack13, $stack15, $stack20;
        java.lang.NullPointerException $stack22;
        int[] $stack4, $stack6, $stack7, $stack8, $stack16;
        java.lang.Integer[] $stack5, $stack9, $stack18;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack5 = newarray (java.lang.Integer)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (int)[3];

        $stack8[0] = -2147483648;

        $stack8[1] = 2147483647;

        $stack8[2] = 9999999;

        $stack9 = newarray (java.lang.Integer)[3];

        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        $stack9[0] = $stack11;

        $stack13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $stack9[1] = $stack13;

        $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9999999);

        $stack9[2] = $stack15;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[])>($stack9);

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack8, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

     label1:
        $stack18 = newarray (java.lang.Integer)[2];

        $stack20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[])>($stack18);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_int_int()
    {
        java.lang.Integer $stack10, $stack12, $stack14, $stack20, $stack22;
        long[] $stack3;
        int[] $stack5, $stack6, $stack7, $stack15, $stack17, $stack23;
        boolean $stack16, $stack24;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Integer[] $stack4, $stack8, $stack18;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[],long)>(null, -2147483648L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;

        $stack4 = newarray (java.lang.Integer)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[],int)>($stack4, 1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (int)[3];

        $stack7[0] = -2147483648;

        $stack7[1] = 2147483647;

        $stack7[2] = 9999999;

        $stack8 = newarray (java.lang.Integer)[3];

        $stack10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        $stack8[0] = $stack10;

        $stack12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $stack8[1] = $stack12;

        $stack14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9999999);

        $stack8[2] = $stack14;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[],int)>($stack8, 1);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = newarray (int)[3];

        $stack17[0] = -2147483648;

        $stack17[1] = 2147483647;

        $stack17[2] = 9999999;

        $stack18 = newarray (java.lang.Integer)[3];

        $stack20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9999999);

        $stack18[2] = $stack22;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[],int)>($stack18, 2147483647);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($stack17, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToPrimitive_intNull()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        int[] $stack3;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] toPrimitive(java.lang.Integer[],int)>(null, -2147483648);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        return;
    }

    public void testToObject_int()
    {
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Integer $stack9, $stack11, $stack13;
        int[] $stack4, $stack14;
        java.lang.Integer[] $stack3, $stack5, $stack6, $stack7, $stack15;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] toObject(int[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] EMPTY_INTEGER_OBJECT_ARRAY>;

        $stack4 = newarray (int)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] toObject(int[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Integer)[3];

        $stack9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $stack7[1] = $stack11;

        $stack13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9999999);

        $stack7[2] = $stack13;

        $stack14 = newarray (int)[3];

        $stack14[0] = -2147483648;

        $stack14[1] = 2147483647;

        $stack14[2] = 9999999;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Integer[] toObject(int[])>($stack14);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testToPrimitive_long()
    {
        java.lang.Long[] $stack5, $stack9, $stack18;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.NullPointerException $stack22;
        long[] $stack4, $stack6, $stack7, $stack8, $stack16;
        java.lang.Long $stack11, $stack13, $stack15, $stack20;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack5 = newarray (java.lang.Long)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (long)[3];

        $stack8[0] = -9223372036854775808L;

        $stack8[1] = 9223372036854775807L;

        $stack8[2] = 9999999L;

        $stack9 = newarray (java.lang.Long)[3];

        $stack11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        $stack9[0] = $stack11;

        $stack13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $stack9[1] = $stack13;

        $stack15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9999999L);

        $stack9[2] = $stack15;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[])>($stack9);

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack8, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

     label1:
        $stack18 = newarray (java.lang.Long)[2];

        $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[])>($stack18);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_long_long()
    {
        long[] $stack3, $stack5, $stack6, $stack7, $stack15, $stack17, $stack23;
        java.lang.Long $stack10, $stack12, $stack14, $stack20, $stack22;
        boolean $stack16, $stack24;
        java.lang.Long[] $stack4, $stack8, $stack18;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[],long)>(null, -9223372036854775808L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: long[] EMPTY_LONG_ARRAY>;

        $stack4 = newarray (java.lang.Long)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[],long)>($stack4, 1L);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (long)[3];

        $stack7[0] = -9223372036854775808L;

        $stack7[1] = 9223372036854775807L;

        $stack7[2] = 9999999L;

        $stack8 = newarray (java.lang.Long)[3];

        $stack10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        $stack8[0] = $stack10;

        $stack12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $stack8[1] = $stack12;

        $stack14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9999999L);

        $stack8[2] = $stack14;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[],long)>($stack8, 1L);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = newarray (long)[3];

        $stack17[0] = -9223372036854775808L;

        $stack17[1] = 9223372036854775807L;

        $stack17[2] = 9999999L;

        $stack18 = newarray (java.lang.Long)[3];

        $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        $stack22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9999999L);

        $stack18[2] = $stack22;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: long[] toPrimitive(java.lang.Long[],long)>($stack18, 9223372036854775807L);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($stack17, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToObject_long()
    {
        java.lang.Long[] $stack3, $stack5, $stack6, $stack7, $stack15;
        org.apache.commons.lang3.ArrayUtilsTest this;
        long[] $stack4, $stack14;
        java.lang.Long $stack9, $stack11, $stack13;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] toObject(long[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] EMPTY_LONG_OBJECT_ARRAY>;

        $stack4 = newarray (long)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] toObject(long[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Long)[3];

        $stack9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $stack7[1] = $stack11;

        $stack13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9999999L);

        $stack7[2] = $stack13;

        $stack14 = newarray (long)[3];

        $stack14[0] = -9223372036854775808L;

        $stack14[1] = 9223372036854775807L;

        $stack14[2] = 9999999L;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Long[] toObject(long[])>($stack14);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testToPrimitive_float()
    {
        java.lang.Float $stack11, $stack13, $stack15, $stack20;
        float[] $stack4, $stack6, $stack7, $stack8, $stack16;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.NullPointerException $stack22;
        java.lang.Float[] $stack5, $stack9, $stack18;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack5 = newarray (java.lang.Float)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (float)[3];

        $stack8[0] = 1.4E-45F;

        $stack8[1] = 3.4028235E38F;

        $stack8[2] = 9999999.0F;

        $stack9 = newarray (java.lang.Float)[3];

        $stack11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        $stack9[0] = $stack11;

        $stack13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.4028235E38F);

        $stack9[1] = $stack13;

        $stack15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(9999999.0F);

        $stack9[2] = $stack15;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[])>($stack9);

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack8, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

     label1:
        $stack18 = newarray (java.lang.Float)[2];

        $stack20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[])>($stack18);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_float_float()
    {
        java.lang.Float $stack10, $stack12, $stack14, $stack20, $stack22;
        float[] $stack3, $stack5, $stack6, $stack7, $stack15, $stack17, $stack23;
        boolean $stack16, $stack24;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Float[] $stack4, $stack8, $stack18;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[],float)>(null, 1.4E-45F);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: float[] EMPTY_FLOAT_ARRAY>;

        $stack4 = newarray (java.lang.Float)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[],float)>($stack4, 1.0F);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (float)[3];

        $stack7[0] = 1.4E-45F;

        $stack7[1] = 3.4028235E38F;

        $stack7[2] = 9999999.0F;

        $stack8 = newarray (java.lang.Float)[3];

        $stack10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        $stack8[0] = $stack10;

        $stack12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.4028235E38F);

        $stack8[1] = $stack12;

        $stack14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(9999999.0F);

        $stack8[2] = $stack14;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[],float)>($stack8, 1.0F);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = newarray (float)[3];

        $stack17[0] = 1.4E-45F;

        $stack17[1] = 3.4028235E38F;

        $stack17[2] = 9999999.0F;

        $stack18 = newarray (java.lang.Float)[3];

        $stack20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        $stack22 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(9999999.0F);

        $stack18[2] = $stack22;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[],float)>($stack18, 3.4028235E38F);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($stack17, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToObject_float()
    {
        java.lang.Float $stack9, $stack11, $stack13;
        float[] $stack4, $stack14;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Float[] $stack3, $stack5, $stack6, $stack7, $stack15;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] toObject(float[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] EMPTY_FLOAT_OBJECT_ARRAY>;

        $stack4 = newarray (float)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] toObject(float[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Float)[3];

        $stack9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.4028235E38F);

        $stack7[1] = $stack11;

        $stack13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(9999999.0F);

        $stack7[2] = $stack13;

        $stack14 = newarray (float)[3];

        $stack14[0] = 1.4E-45F;

        $stack14[1] = 3.4028235E38F;

        $stack14[2] = 9999999.0F;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Float[] toObject(float[])>($stack14);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testToPrimitive_double()
    {
        java.lang.Float $stack20;
        java.lang.Double $stack11, $stack13, $stack15;
        double[] $stack4, $stack6, $stack7, $stack8, $stack16;
        java.lang.Double[] $stack5, $stack9;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.NullPointerException $stack22;
        java.lang.Float[] $stack18;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[])>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack6 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack5 = newarray (java.lang.Double)[0];

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[])>($stack5);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = newarray (double)[3];

        $stack8[0] = 4.9E-324;

        $stack8[1] = 1.7976931348623157E308;

        $stack8[2] = 9999999.0;

        $stack9 = newarray (java.lang.Double)[3];

        $stack11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.9E-324);

        $stack9[0] = $stack11;

        $stack13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $stack9[1] = $stack13;

        $stack15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(9999999.0);

        $stack9[2] = $stack15;

        $stack16 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[])>($stack9);

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack8, $stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

     label1:
        $stack18 = newarray (java.lang.Float)[2];

        $stack20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        staticinvoke <org.apache.commons.lang3.ArrayUtils: float[] toPrimitive(java.lang.Float[])>($stack18);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack22 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testToPrimitive_double_double()
    {
        java.lang.Double $stack10, $stack12, $stack14, $stack20, $stack22;
        double[] $stack3, $stack5, $stack6, $stack7, $stack15, $stack17, $stack23;
        boolean $stack16, $stack24;
        java.lang.Double[] $stack4, $stack8, $stack18;
        org.apache.commons.lang3.ArrayUtilsTest this;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[],double)>(null, 4.9E-324);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: double[] EMPTY_DOUBLE_ARRAY>;

        $stack4 = newarray (java.lang.Double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[],double)>($stack4, 1.0);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (double)[3];

        $stack7[0] = 4.9E-324;

        $stack7[1] = 1.7976931348623157E308;

        $stack7[2] = 9999999.0;

        $stack8 = newarray (java.lang.Double)[3];

        $stack10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.9E-324);

        $stack8[0] = $stack10;

        $stack12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $stack8[1] = $stack12;

        $stack14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(9999999.0);

        $stack8[2] = $stack14;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[],double)>($stack8, 1.0);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = newarray (double)[3];

        $stack17[0] = 4.9E-324;

        $stack17[1] = 1.7976931348623157E308;

        $stack17[2] = 9999999.0;

        $stack18 = newarray (java.lang.Double)[3];

        $stack20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.9E-324);

        $stack18[0] = $stack20;

        $stack18[1] = null;

        $stack22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(9999999.0);

        $stack18[2] = $stack22;

        $stack23 = staticinvoke <org.apache.commons.lang3.ArrayUtils: double[] toPrimitive(java.lang.Double[],double)>($stack18, 1.7976931348623157E308);

        $stack24 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($stack17, $stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        return;
    }

    public void testToObject_double()
    {
        java.lang.Double $stack9, $stack11, $stack13;
        java.lang.Double[] $stack3, $stack5, $stack6, $stack7, $stack15;
        double[] $stack4, $stack14;
        org.apache.commons.lang3.ArrayUtilsTest this;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] toObject(double[])>(null);

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(null, $stack3);

        $stack5 = <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] EMPTY_DOUBLE_OBJECT_ARRAY>;

        $stack4 = newarray (double)[0];

        $stack6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] toObject(double[])>($stack4);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = newarray (java.lang.Double)[3];

        $stack9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.9E-324);

        $stack7[0] = $stack9;

        $stack11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $stack7[1] = $stack11;

        $stack13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(9999999.0);

        $stack7[2] = $stack13;

        $stack14 = newarray (double)[3];

        $stack14[0] = 4.9E-324;

        $stack14[1] = 1.7976931348623157E308;

        $stack14[2] = 9999999.0;

        $stack15 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Double[] toObject(double[])>($stack14);

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($stack7, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testIsEmptyObject()
    {
        java.lang.Object[] emptyArray, $stack3, $stack6;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.String $stack4;
        boolean $stack7, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (java.lang.Object)[0];

        $stack3 = newarray (java.lang.Object)[1];

        $stack4 = new java.lang.String;

        specialinvoke $stack4.<java.lang.String: void <init>(java.lang.String)>("Value");

        $stack3[0] = $stack4;

        $stack6 = (java.lang.Object[]) null;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>($stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(emptyArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>($stack3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        return;
    }

    public void testIsEmptyPrimitives()
    {
        byte[] emptyByteArray, $stack37, $stack38;
        int[] emptyIntArray, $stack22, $stack23;
        boolean $stack19, $stack20, $stack21, $stack24, $stack25, $stack26, $stack29, $stack30, $stack31, $stack34, $stack35, $stack36, $stack39, $stack40, $stack41, $stack44, $stack45, $stack46, $stack49, $stack50, $stack51, $stack54, $stack55, $stack56;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] emptyShortArray, $stack27, $stack28;
        double[] emptyDoubleArray, $stack42, $stack43;
        float[] emptyFloatArray, $stack47, $stack48;
        long[] emptyLongArray, $stack17, $stack18;
        boolean[] emptyBooleanArray, $stack52, $stack53;
        char[] emptyCharArray, $stack32, $stack33;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyLongArray = newarray (long)[0];

        $stack17 = newarray (long)[1];

        $stack17[0] = 1L;

        $stack18 = (long[]) null;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>($stack18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>(emptyLongArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(long[])>($stack17);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        emptyIntArray = newarray (int)[0];

        $stack22 = newarray (int)[1];

        $stack22[0] = 1;

        $stack23 = (int[]) null;

        $stack24 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>($stack23);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>(emptyIntArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(int[])>($stack22);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack26);

        emptyShortArray = newarray (short)[0];

        $stack27 = newarray (short)[1];

        $stack27[0] = 1;

        $stack28 = (short[]) null;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>($stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack29);

        $stack30 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>(emptyShortArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(short[])>($stack27);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack31);

        emptyCharArray = newarray (char)[0];

        $stack32 = newarray (char)[1];

        $stack32[0] = 1;

        $stack33 = (char[]) null;

        $stack34 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>($stack33);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(emptyCharArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>($stack32);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack36);

        emptyByteArray = newarray (byte)[0];

        $stack37 = newarray (byte)[1];

        $stack37[0] = 1;

        $stack38 = (byte[]) null;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>($stack38);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack40 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>(emptyByteArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(byte[])>($stack37);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack41);

        emptyDoubleArray = newarray (double)[0];

        $stack42 = newarray (double)[1];

        $stack42[0] = 1.0;

        $stack43 = (double[]) null;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>($stack43);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack44);

        $stack45 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>(emptyDoubleArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack45);

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(double[])>($stack42);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack46);

        emptyFloatArray = newarray (float)[0];

        $stack47 = newarray (float)[1];

        $stack47[0] = 1.0F;

        $stack48 = (float[]) null;

        $stack49 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>($stack48);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack49);

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>(emptyFloatArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(float[])>($stack47);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack51);

        emptyBooleanArray = newarray (boolean)[0];

        $stack52 = newarray (boolean)[1];

        $stack52[0] = 1;

        $stack53 = (boolean[]) null;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>($stack53);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>(emptyBooleanArray);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack56 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(boolean[])>($stack52);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack56);

        return;
    }

    public void testIsNotEmptyObject()
    {
        java.lang.Object[] emptyArray, $stack3, $stack6;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.String $stack4;
        boolean $stack7, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyArray = newarray (java.lang.Object)[0];

        $stack3 = newarray (java.lang.Object)[1];

        $stack4 = new java.lang.String;

        specialinvoke $stack4.<java.lang.String: void <init>(java.lang.String)>("Value");

        $stack3[0] = $stack4;

        $stack6 = (java.lang.Object[]) null;

        $stack7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(emptyArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        return;
    }

    public void testIsNotEmptyPrimitives()
    {
        byte[] emptyByteArray, $stack37, $stack38;
        int[] emptyIntArray, $stack22, $stack23;
        boolean $stack19, $stack20, $stack21, $stack24, $stack25, $stack26, $stack29, $stack30, $stack31, $stack34, $stack35, $stack36, $stack39, $stack40, $stack41, $stack44, $stack45, $stack46, $stack49, $stack50, $stack51, $stack54, $stack55, $stack56;
        org.apache.commons.lang3.ArrayUtilsTest this;
        short[] emptyShortArray, $stack27, $stack28;
        double[] emptyDoubleArray, $stack42, $stack43;
        float[] emptyFloatArray, $stack47, $stack48;
        long[] emptyLongArray, $stack17, $stack18;
        boolean[] emptyBooleanArray, $stack52, $stack53;
        char[] emptyCharArray, $stack32, $stack33;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        emptyLongArray = newarray (long)[0];

        $stack17 = newarray (long)[1];

        $stack17[0] = 1L;

        $stack18 = (long[]) null;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(long[])>($stack18);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(long[])>(emptyLongArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(long[])>($stack17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        emptyIntArray = newarray (int)[0];

        $stack22 = newarray (int)[1];

        $stack22[0] = 1;

        $stack23 = (int[]) null;

        $stack24 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(int[])>($stack23);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack24);

        $stack25 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(int[])>(emptyIntArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack25);

        $stack26 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(int[])>($stack22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        emptyShortArray = newarray (short)[0];

        $stack27 = newarray (short)[1];

        $stack27[0] = 1;

        $stack28 = (short[]) null;

        $stack29 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(short[])>($stack28);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack29);

        $stack30 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(short[])>(emptyShortArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(short[])>($stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        emptyCharArray = newarray (char)[0];

        $stack32 = newarray (char)[1];

        $stack32[0] = 1;

        $stack33 = (char[]) null;

        $stack34 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(char[])>($stack33);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack34);

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(char[])>(emptyCharArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack35);

        $stack36 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(char[])>($stack32);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack36);

        emptyByteArray = newarray (byte)[0];

        $stack37 = newarray (byte)[1];

        $stack37[0] = 1;

        $stack38 = (byte[]) null;

        $stack39 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(byte[])>($stack38);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack39);

        $stack40 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(byte[])>(emptyByteArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack40);

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(byte[])>($stack37);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack41);

        emptyDoubleArray = newarray (double)[0];

        $stack42 = newarray (double)[1];

        $stack42[0] = 1.0;

        $stack43 = (double[]) null;

        $stack44 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(double[])>($stack43);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack44);

        $stack45 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(double[])>(emptyDoubleArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack45);

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(double[])>($stack42);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack46);

        emptyFloatArray = newarray (float)[0];

        $stack47 = newarray (float)[1];

        $stack47[0] = 1.0F;

        $stack48 = (float[]) null;

        $stack49 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(float[])>($stack48);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack49);

        $stack50 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(float[])>(emptyFloatArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack50);

        $stack51 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(float[])>($stack47);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        emptyBooleanArray = newarray (boolean)[0];

        $stack52 = newarray (boolean)[1];

        $stack52[0] = 1;

        $stack53 = (boolean[]) null;

        $stack54 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(boolean[])>($stack53);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack54);

        $stack55 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(boolean[])>(emptyBooleanArray);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack55);

        $stack56 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(boolean[])>($stack52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack56);

        return;
    }

    public void testGetLength()
    {
        byte[] emptyByteArray, $stack65, $stack66;
        org.apache.commons.lang3.ArrayUtilsTest this;
        java.lang.Object[] emptyObjectArray, $stack21, $stack22;
        double[] emptyDoubleArray, $stack76, $stack77;
        long $stack20, $stack25, $stack28, $stack31, $stack36, $stack39, $stack42, $stack47, $stack50, $stack53, $stack58, $stack61, $stack64, $stack69, $stack72, $stack75, $stack80, $stack83, $stack86, $stack91, $stack94, $stack97, $stack102, $stack105, $stack108;
        float[] emptyFloatArray, $stack87, $stack88;
        boolean[] emptyBooleanArray, $stack98, $stack99;
        char[] emptyCharArray, $stack54, $stack55;
        int[] emptyIntArray, $stack32, $stack33;
        short[] emptyShortArray, $stack43, $stack44;
        int $stack19, $stack24, $stack27, $stack30, $stack35, $stack38, $stack41, $stack46, $stack49, $stack52, $stack57, $stack60, $stack63, $stack68, $stack71, $stack74, $stack79, $stack82, $stack85, $stack90, $stack93, $stack96, $stack101, $stack104, $stack107;
        java.lang.IllegalArgumentException $stack110;

        this := @this: org.apache.commons.lang3.ArrayUtilsTest;

        $stack19 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(null);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack20);

        emptyObjectArray = newarray (java.lang.Object)[0];

        $stack21 = newarray (java.lang.Object)[1];

        $stack21[0] = "aValue";

        $stack22 = (java.lang.Object[]) null;

        $stack24 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack22);

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack25);

        $stack27 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyObjectArray);

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack21);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack31);

        emptyIntArray = newarray (int)[0];

        $stack32 = newarray (int)[1];

        $stack32[0] = 1;

        $stack33 = (int[]) null;

        $stack35 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack33);

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack36);

        $stack38 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyIntArray);

        $stack39 = (long) $stack38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack39);

        $stack41 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack32);

        $stack42 = (long) $stack41;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack42);

        emptyShortArray = newarray (short)[0];

        $stack43 = newarray (short)[1];

        $stack43[0] = 1;

        $stack44 = (short[]) null;

        $stack46 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack44);

        $stack47 = (long) $stack46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack47);

        $stack49 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyShortArray);

        $stack50 = (long) $stack49;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack50);

        $stack52 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack43);

        $stack53 = (long) $stack52;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack53);

        emptyCharArray = newarray (char)[0];

        $stack54 = newarray (char)[1];

        $stack54[0] = 1;

        $stack55 = (char[]) null;

        $stack57 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack55);

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack58);

        $stack60 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyCharArray);

        $stack61 = (long) $stack60;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack61);

        $stack63 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack54);

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack64);

        emptyByteArray = newarray (byte)[0];

        $stack65 = newarray (byte)[1];

        $stack65[0] = 1;

        $stack66 = (byte[]) null;

        $stack68 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack66);

        $stack69 = (long) $stack68;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack69);

        $stack71 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyByteArray);

        $stack72 = (long) $stack71;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack72);

        $stack74 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack65);

        $stack75 = (long) $stack74;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack75);

        emptyDoubleArray = newarray (double)[0];

        $stack76 = newarray (double)[1];

        $stack76[0] = 1.0;

        $stack77 = (double[]) null;

        $stack79 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack77);

        $stack80 = (long) $stack79;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack80);

        $stack82 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyDoubleArray);

        $stack83 = (long) $stack82;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack83);

        $stack85 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack76);

        $stack86 = (long) $stack85;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack86);

        emptyFloatArray = newarray (float)[0];

        $stack87 = newarray (float)[1];

        $stack87[0] = 1.0F;

        $stack88 = (float[]) null;

        $stack90 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack88);

        $stack91 = (long) $stack90;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack91);

        $stack93 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyFloatArray);

        $stack94 = (long) $stack93;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack94);

        $stack96 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack87);

        $stack97 = (long) $stack96;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack97);

        emptyBooleanArray = newarray (boolean)[0];

        $stack98 = newarray (boolean)[1];

        $stack98[0] = 1;

        $stack99 = (boolean[]) null;

        $stack101 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack99);

        $stack102 = (long) $stack101;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack102);

        $stack104 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(emptyBooleanArray);

        $stack105 = (long) $stack104;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack105);

        $stack107 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>($stack98);

        $stack108 = (long) $stack107;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack108);

     label1:
        staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>("notAnArray");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IllegalArgumentException should have been thrown");

     label2:
        goto label4;

     label3:
        $stack110 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }
}
