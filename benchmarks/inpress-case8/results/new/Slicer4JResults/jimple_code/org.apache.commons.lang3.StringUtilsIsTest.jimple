public class org.apache.commons.lang3.StringUtilsIsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.StringUtilsIsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testIsAlpha()
    {
        org.apache.commons.lang3.StringUtilsIsTest this;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("A");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("ham kso");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("1");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("_");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlpha(java.lang.CharSequence)>("hkHKHik*khbkuh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        return;
    }

    public void testIsAlphanumeric()
    {
        org.apache.commons.lang3.StringUtilsIsTest this;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("A");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("ham kso");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("1");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("_");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumeric(java.lang.CharSequence)>("hkHKHik*khbkuh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        return;
    }

    public void testIsWhitespace()
    {
        org.apache.commons.lang3.StringUtilsIsTest this;
        java.lang.String $stack11, $stack13;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack12, $stack14;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>("\t \n \t");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>("\t aa\n \t");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>(" a ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>("a  ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>("  a");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>("aba");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String WHITESPACE>;

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = <org.apache.commons.lang3.StringUtilsTest: java.lang.String NON_WHITESPACE>;

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isWhitespace(java.lang.CharSequence)>($stack13);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        return;
    }

    public void testIsAlphaspace()
    {
        org.apache.commons.lang3.StringUtilsIsTest this;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("A");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("ham kso");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("1");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("_");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphaSpace(java.lang.CharSequence)>("hkHKHik*khbkuh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        return;
    }

    public void testIsAlphanumericSpace()
    {
        org.apache.commons.lang3.StringUtilsIsTest this;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("A");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("ham kso");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("1");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("_");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAlphanumericSpace(java.lang.CharSequence)>("hkHKHik*khbkuh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        return;
    }

    public void testIsAsciiPrintable_String()
    {
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;
        org.apache.commons.lang3.StringUtilsIsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("A");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("1");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("Ceki");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("!ab2c~");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("1000");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("10 00");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("10\t00");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("10.00");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("10,00");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("!ab-c~");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("!");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("~");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("\u007f");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("G?lc?");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("=?iso-8859-1?Q?G=FClc=FC?=");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAsciiPrintable(java.lang.CharSequence)>("G\u00fclc\u00fc");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        return;
    }

    public void testIsNumeric()
    {
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16;
        org.apache.commons.lang3.StringUtilsIsTest this;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("a");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("A");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("ham kso");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("1");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("1000");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("2.3");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("10 00");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("_");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("hkHKHik*khbkuh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("+123");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumeric(java.lang.CharSequence)>("-123");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        return;
    }

    public void testIsNumericSpace()
    {
        org.apache.commons.lang3.StringUtilsIsTest this;
        boolean $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;

        this := @this: org.apache.commons.lang3.StringUtilsIsTest;

        $stack1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack1);

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>(" ");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("a");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("A");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("ham kso");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("1");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("1000");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("2.3");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("10 00");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("_");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNumericSpace(java.lang.CharSequence)>("hkHKHik*khbkuh");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        return;
    }
}
