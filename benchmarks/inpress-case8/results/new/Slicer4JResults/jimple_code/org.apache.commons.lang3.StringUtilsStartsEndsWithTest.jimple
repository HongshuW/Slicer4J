public class org.apache.commons.lang3.StringUtilsStartsEndsWithTest extends java.lang.Object
{
    private static final java.lang.String foo;
    private static final java.lang.String bar;
    private static final java.lang.String foobar;
    private static final java.lang.String FOO;
    private static final java.lang.String BAR;
    private static final java.lang.String FOOBAR;

    public void <init>()
    {
        org.apache.commons.lang3.StringUtilsStartsEndsWithTest this;

        this := @this: org.apache.commons.lang3.StringUtilsStartsEndsWithTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testStartsWith()
    {
        org.apache.commons.lang3.StringUtilsStartsEndsWithTest this;
        boolean $stack3, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30;

        this := @this: org.apache.commons.lang3.StringUtilsStartsEndsWithTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWith(null, null)", $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(FOOBAR, null)", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>(null, "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(null, FOO)", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWith(FOOBAR, \"\")", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "foo");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWith(foobar, foo)", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "FOO");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWith(FOOBAR, FOO)", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(foobar, FOO)", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "foo");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(FOOBAR, foo)", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("foo", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(foo, foobar)", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("bar", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(foo, foobar)", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "bar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(foobar, bar)", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "BAR");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(FOOBAR, BAR)", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "BAR");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(foobar, BAR)", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "bar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWith(FOOBAR, bar)", $stack30);

        return;
    }

    public void testStartsWithIgnoreCase()
    {
        org.apache.commons.lang3.StringUtilsStartsEndsWithTest this;
        boolean $stack3, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30;

        this := @this: org.apache.commons.lang3.StringUtilsStartsEndsWithTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWithIgnoreCase(null, null)", $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(FOOBAR, null)", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(null, "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(null, FOO)", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWithIgnoreCase(FOOBAR, \"\")", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "foo");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWithIgnoreCase(foobar, foo)", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "FOO");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWithIgnoreCase(FOOBAR, FOO)", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "FOO");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWithIgnoreCase(foobar, FOO)", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "foo");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("startsWithIgnoreCase(FOOBAR, foo)", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foo", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(foo, foobar)", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("bar", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(foo, foobar)", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "bar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(foobar, bar)", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "BAR");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(FOOBAR, BAR)", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "BAR");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(foobar, BAR)", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "bar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("startsWithIgnoreCase(FOOBAR, bar)", $stack30);

        return;
    }

    public void testStartsWithAny()
    {
        java.lang.String[] $stack1, $stack5;
        java.lang.CharSequence[] $stack3, $stack7, $stack9, $stack11, $stack13, $stack15, $stack25;
        java.lang.StringBuffer $stack20, $stack28;
        org.apache.commons.lang3.StringUtilsStartsEndsWithTest this;
        boolean $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack22, $stack30;
        java.lang.StringBuilder $stack16, $stack26;
        org.apache.commons.lang3.text.StrBuilder $stack23;

        this := @this: org.apache.commons.lang3.StringUtilsStartsEndsWithTest;

        $stack1 = (java.lang.String[]) null;

        $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>(null, $stack1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = newarray (java.lang.CharSequence)[1];

        $stack3[0] = "abc";

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>(null, $stack3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = (java.lang.String[]) null;

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = newarray (java.lang.CharSequence)[0];

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = newarray (java.lang.CharSequence)[1];

        $stack9[0] = "abc";

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = newarray (java.lang.CharSequence)[3];

        $stack11[0] = null;

        $stack11[1] = "xyz";

        $stack11[2] = "abc";

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = newarray (java.lang.CharSequence)[3];

        $stack13[0] = null;

        $stack13[1] = "xyz";

        $stack13[2] = "abcd";

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack13);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = newarray (java.lang.CharSequence)[2];

        $stack16 = new java.lang.StringBuilder;

        specialinvoke $stack16.<java.lang.StringBuilder: void <init>(java.lang.String)>("xyz");

        $stack15[0] = $stack16;

        $stack20 = new java.lang.StringBuffer;

        specialinvoke $stack20.<java.lang.StringBuffer: void <init>(java.lang.String)>("abc");

        $stack15[1] = $stack20;

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", $stack22);

        $stack23 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack23.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcxyz");

        $stack25 = newarray (java.lang.CharSequence)[2];

        $stack26 = new java.lang.StringBuilder;

        specialinvoke $stack26.<java.lang.StringBuilder: void <init>(java.lang.String)>("xyz");

        $stack25[0] = $stack26;

        $stack28 = new java.lang.StringBuffer;

        specialinvoke $stack28.<java.lang.StringBuffer: void <init>(java.lang.String)>("abc");

        $stack25[1] = $stack28;

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>($stack23, $stack25);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", $stack30);

        return;
    }

    public void testEndsWith()
    {
        org.apache.commons.lang3.StringUtilsStartsEndsWithTest this;
        boolean $stack3, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30;

        this := @this: org.apache.commons.lang3.StringUtilsStartsEndsWithTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWith(null, null)", $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(FOOBAR, null)", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>(null, "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(null, FOO)", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWith(FOOBAR, \"\")", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "foo");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(foobar, foo)", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(FOOBAR, FOO)", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(foobar, FOO)", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "foo");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(FOOBAR, foo)", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("foo", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(foo, foobar)", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("bar", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(foo, foobar)", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "bar");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWith(foobar, bar)", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "BAR");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWith(FOOBAR, BAR)", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "BAR");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(foobar, BAR)", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "bar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWith(FOOBAR, bar)", $stack30);

        return;
    }

    public void testEndsWithIgnoreCase()
    {
        org.apache.commons.lang3.StringUtilsStartsEndsWithTest this;
        boolean $stack3, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack31, $stack32, $stack33;

        this := @this: org.apache.commons.lang3.StringUtilsStartsEndsWithTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(null, null);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWithIgnoreCase(null, null)", $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(FOOBAR, null)", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(null, "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(null, FOO)", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWithIgnoreCase(FOOBAR, \"\")", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "foo");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(foobar, foo)", $stack12);

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(FOOBAR, FOO)", $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "FOO");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(foobar, FOO)", $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "foo");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(FOOBAR, foo)", $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foo", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(foo, foobar)", $stack20);

        $stack22 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("bar", "foobar");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("endsWithIgnoreCase(foo, foobar)", $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "bar");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWithIgnoreCase(foobar, bar)", $stack24);

        $stack26 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "BAR");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWithIgnoreCase(FOOBAR, BAR)", $stack26);

        $stack28 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("foobar", "BAR");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWithIgnoreCase(foobar, BAR)", $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("FOOBAR", "bar");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("endsWithIgnoreCase(FOOBAR, bar)", $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("abcdef", "def");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack31);

        $stack32 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("ABCDEF", "def");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack33 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>("ABCDEF", "cde");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack33);

        return;
    }

    public void testEndsWithAny()
    {
        java.lang.String[] $stack5, $stack12, $stack15, $stack18, $stack21;
        java.lang.CharSequence[] $stack1, $stack8, $stack24, $stack34;
        java.lang.StringBuffer $stack29, $stack37;
        org.apache.commons.lang3.StringUtilsStartsEndsWithTest this;
        boolean $stack4, $stack7, $stack11, $stack14, $stack17, $stack20, $stack23, $stack31, $stack39;
        java.lang.StringBuilder $stack25, $stack35;
        org.apache.commons.lang3.text.StrBuilder $stack32;

        this := @this: org.apache.commons.lang3.StringUtilsStartsEndsWithTest;

        $stack1 = newarray (java.lang.CharSequence)[1];

        $stack1[0] = null;

        $stack4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>(null, $stack1);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("StringUtils.endsWithAny(null, null)", $stack4);

        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "abc";

        $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>(null, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("StringUtils.endsWithAny(null, new String[] {abc})", $stack7);

        $stack8 = newarray (java.lang.CharSequence)[1];

        $stack8[0] = null;

        $stack11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack8);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("StringUtils.endsWithAny(abcxyz, null)", $stack11);

        $stack12 = newarray (java.lang.String)[1];

        $stack12[0] = "";

        $stack14 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", $stack14);

        $stack15 = newarray (java.lang.String)[1];

        $stack15[0] = "xyz";

        $stack17 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", $stack17);

        $stack18 = newarray (java.lang.String)[3];

        $stack18[0] = null;

        $stack18[1] = "xyz";

        $stack18[2] = "abc";

        $stack20 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", $stack20);

        $stack21 = newarray (java.lang.String)[3];

        $stack21[0] = null;

        $stack21[1] = "xyz";

        $stack21[2] = "abc";

        $stack23 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("defg", $stack21);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", $stack23);

        $stack24 = newarray (java.lang.CharSequence)[2];

        $stack25 = new java.lang.StringBuilder;

        specialinvoke $stack25.<java.lang.StringBuilder: void <init>(java.lang.String)>("abc");

        $stack24[0] = $stack25;

        $stack29 = new java.lang.StringBuffer;

        specialinvoke $stack29.<java.lang.StringBuffer: void <init>(java.lang.String)>("xyz");

        $stack24[1] = $stack29;

        $stack31 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>("abcxyz", $stack24);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", $stack31);

        $stack32 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack32.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcxyz");

        $stack34 = newarray (java.lang.CharSequence)[2];

        $stack35 = new java.lang.StringBuilder;

        specialinvoke $stack35.<java.lang.StringBuilder: void <init>(java.lang.String)>("abc");

        $stack34[0] = $stack35;

        $stack37 = new java.lang.StringBuffer;

        specialinvoke $stack37.<java.lang.StringBuffer: void <init>(java.lang.String)>("xyz");

        $stack34[1] = $stack37;

        $stack39 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithAny(java.lang.CharSequence,java.lang.CharSequence[])>($stack32, $stack34);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", $stack39);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang3.StringUtilsStartsEndsWithTest: java.lang.String FOOBAR> = "FOOBAR";

        <org.apache.commons.lang3.StringUtilsStartsEndsWithTest: java.lang.String BAR> = "BAR";

        <org.apache.commons.lang3.StringUtilsStartsEndsWithTest: java.lang.String FOO> = "FOO";

        <org.apache.commons.lang3.StringUtilsStartsEndsWithTest: java.lang.String foobar> = "foobar";

        <org.apache.commons.lang3.StringUtilsStartsEndsWithTest: java.lang.String bar> = "bar";

        <org.apache.commons.lang3.StringUtilsStartsEndsWithTest: java.lang.String foo> = "foo";

        return;
    }
}
