public class org.apache.commons.lang3.CharRangeTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.CharRangeTest this;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testClass()
    {
        org.apache.commons.lang3.CharRangeTest this;
        int $stack2, $stack5;
        java.lang.Class $stack1, $stack4;
        boolean $stack3, $stack6;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack1 = class "Lorg/apache/commons/lang3/CharRange;";

        $stack2 = virtualinvoke $stack1.<java.lang.Class: int getModifiers()>();

        $stack3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = class "Lorg/apache/commons/lang3/CharRange;";

        $stack5 = virtualinvoke $stack4.<java.lang.Class: int getModifiers()>();

        $stack6 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        return;
    }

    public void testConstructorAccessors_is()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack11);

        return;
    }

    public void testConstructorAccessors_isNot()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNot(char)>(97);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("^a", $stack11);

        return;
    }

    public void testConstructorAccessors_isIn_Same()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 97);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack11);

        return;
    }

    public void testConstructorAccessors_isIn_Normal()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 101);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(101L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a-e", $stack11);

        return;
    }

    public void testConstructorAccessors_isIn_Reversed()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(101, 97);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(101L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a-e", $stack11);

        return;
    }

    public void testConstructorAccessors_isNotIn_Same()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(97, 97);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("^a", $stack11);

        return;
    }

    public void testConstructorAccessors_isNotIn_Normal()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(97, 101);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(101L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("^a-e", $stack11);

        return;
    }

    public void testConstructorAccessors_isNotIn_Reversed()
    {
        org.apache.commons.lang3.CharRange $stack2;
        org.apache.commons.lang3.CharRangeTest this;
        char $stack4, $stack7;
        long $stack5, $stack8;
        java.lang.String $stack11;
        boolean $stack9;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(101, 97);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getStart()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(97L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: char getEnd()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(101L, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("^a-e", $stack11);

        return;
    }

    public void testEquals_Object()
    {
        org.apache.commons.lang3.CharRange $stack4, $stack5, $stack6, $stack9, $stack12, $stack15;
        org.apache.commons.lang3.CharRangeTest this;
        boolean $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 101);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(98, 102);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        $stack8 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack10 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 101);

        $stack13 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        $stack14 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(98, 102);

        $stack16 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

        $stack18 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack18);

        $stack19 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        $stack22 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack22);

        return;
    }

    public void testHashCode()
    {
        org.apache.commons.lang3.CharRange $stack4, $stack5, $stack6, $stack10, $stack15, $stack20;
        boolean $stack67, $stack64, $stack60, $stack57, $stack53, $stack50, $stack47, $stack44, $stack41, $stack38, $stack35, $stack34;
        org.apache.commons.lang3.CharRangeTest this;
        int $stack7, $stack8, $stack9, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17, $stack18, $stack19, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 101);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(98, 102);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack8 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack7 != $stack8 goto label01;

        $stack67 = 1;

        goto label02;

     label01:
        $stack67 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack67);

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack10 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack11 = virtualinvoke $stack10.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack9 != $stack11 goto label03;

        $stack64 = 1;

        goto label04;

     label03:
        $stack64 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack64);

        $stack12 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack13 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack12 != $stack13 goto label05;

        $stack60 = 1;

        goto label06;

     label05:
        $stack60 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack60);

        $stack14 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack15 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 101);

        $stack16 = virtualinvoke $stack15.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack14 != $stack16 goto label07;

        $stack57 = 1;

        goto label08;

     label07:
        $stack57 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack57);

        $stack17 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack18 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack17 != $stack18 goto label09;

        $stack53 = 1;

        goto label10;

     label09:
        $stack53 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack53);

        $stack19 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack20 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(98, 102);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack19 != $stack21 goto label11;

        $stack50 = 1;

        goto label12;

     label11:
        $stack50 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        $stack22 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack23 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack22 != $stack23 goto label13;

        $stack47 = 1;

        goto label14;

     label13:
        $stack47 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack47);

        $stack24 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack25 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack24 != $stack25 goto label15;

        $stack44 = 1;

        goto label16;

     label15:
        $stack44 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack44);

        $stack26 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack27 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack26 != $stack27 goto label17;

        $stack41 = 1;

        goto label18;

     label17:
        $stack41 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack41);

        $stack28 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack29 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack28 != $stack29 goto label19;

        $stack38 = 1;

        goto label20;

     label19:
        $stack38 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack38);

        $stack30 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack31 = virtualinvoke $stack4.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack30 != $stack31 goto label21;

        $stack35 = 1;

        goto label22;

     label21:
        $stack35 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack35);

        $stack32 = virtualinvoke $stack6.<org.apache.commons.lang3.CharRange: int hashCode()>();

        $stack33 = virtualinvoke $stack5.<org.apache.commons.lang3.CharRange: int hashCode()>();

        if $stack32 != $stack33 goto label23;

        $stack34 = 1;

        goto label24;

     label23:
        $stack34 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack34);

        return;
    }

    public void testContains_Char()
    {
        org.apache.commons.lang3.CharRange $stack2, $stack7, $stack12, $stack17;
        org.apache.commons.lang3.CharRangeTest this;
        boolean $stack3, $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack11, $stack13, $stack14, $stack15, $stack16, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(99);

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean contains(char)>(98);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean contains(char)>(99);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean contains(char)>(100);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.CharRange: boolean contains(char)>(101);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(99, 100);

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.CharRange: boolean contains(char)>(98);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.CharRange: boolean contains(char)>(99);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack7.<org.apache.commons.lang3.CharRange: boolean contains(char)>(100);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack7.<org.apache.commons.lang3.CharRange: boolean contains(char)>(101);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(100, 99);

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.CharRange: boolean contains(char)>(98);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = virtualinvoke $stack12.<org.apache.commons.lang3.CharRange: boolean contains(char)>(99);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = virtualinvoke $stack12.<org.apache.commons.lang3.CharRange: boolean contains(char)>(100);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        $stack16 = virtualinvoke $stack12.<org.apache.commons.lang3.CharRange: boolean contains(char)>(101);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(99, 100);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.CharRange: boolean contains(char)>(98);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.CharRange: boolean contains(char)>(99);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack19);

        $stack20 = virtualinvoke $stack17.<org.apache.commons.lang3.CharRange: boolean contains(char)>(100);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = virtualinvoke $stack17.<org.apache.commons.lang3.CharRange: boolean contains(char)>(101);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.CharRange: boolean contains(char)>(0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = virtualinvoke $stack17.<org.apache.commons.lang3.CharRange: boolean contains(char)>(65535);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        return;
    }

    public void testContains_Charrange()
    {
        org.apache.commons.lang3.CharRangeTest this;
        org.apache.commons.lang3.CharRange $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack57, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67;
        boolean $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $stack82, $stack83, $stack84, $stack85, $stack86, $stack87, $stack88, $stack89, $stack90, $stack91, $stack92, $stack93, $stack94, $stack95, $stack96, $stack97, $stack98, $stack99, $stack100, $stack101, $stack102, $stack103, $stack104, $stack105, $stack106, $stack107, $stack108, $stack109, $stack110, $stack111, $stack112, $stack113, $stack114, $stack115, $stack116, $stack117;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack25 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack26 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(98);

        $stack27 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(99);

        $stack28 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(99);

        $stack29 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(100);

        $stack30 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(101);

        $stack31 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(99, 100);

        $stack32 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(98, 100);

        $stack33 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(98, 99);

        $stack34 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 98);

        $stack35 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(100, 101);

        $stack36 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(101, 102);

        $stack37 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 101);

        $stack38 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack26);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack38);

        $stack39 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack39);

        $stack40 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack41 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack29);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack41);

        $stack42 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack31);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack42);

        $stack43 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack32);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack43);

        $stack44 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack33);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack44);

        $stack45 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack34);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack45);

        $stack46 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack35);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack46);

        $stack47 = virtualinvoke $stack31.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack47);

        $stack48 = virtualinvoke $stack32.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack48);

        $stack49 = virtualinvoke $stack33.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack49);

        $stack50 = virtualinvoke $stack34.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack50);

        $stack51 = virtualinvoke $stack35.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack51);

        $stack52 = virtualinvoke $stack37.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack52);

        $stack53 = virtualinvoke $stack37.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack34);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack53);

        $stack54 = virtualinvoke $stack37.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack33);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack54);

        $stack55 = virtualinvoke $stack37.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack31);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack55);

        $stack56 = virtualinvoke $stack37.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack35);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack56);

        $stack57 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNot(char)>(98);

        $stack58 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNot(char)>(99);

        $stack59 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNot(char)>(100);

        $stack60 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(97, 98);

        $stack61 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(98, 99);

        $stack62 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(98, 100);

        $stack63 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(99, 100);

        $stack64 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(100, 101);

        $stack65 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(97, 101);

        $stack66 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(0, 65535);

        $stack67 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(1, 65535);

        $stack68 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack58);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack68);

        $stack69 = virtualinvoke $stack27.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack62);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack69);

        $stack70 = virtualinvoke $stack66.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack70);

        $stack71 = virtualinvoke $stack66.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack62);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack71);

        $stack72 = virtualinvoke $stack67.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack58);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack72);

        $stack73 = virtualinvoke $stack67.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack62);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack73);

        $stack74 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack25);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack74);

        $stack75 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack75);

        $stack76 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack76);

        $stack77 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack29);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack77);

        $stack78 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack78);

        $stack79 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack34);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack79);

        $stack80 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack33);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack80);

        $stack81 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack32);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack81);

        $stack82 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack31);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack82);

        $stack83 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack35);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack83);

        $stack84 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack37);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack84);

        $stack85 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack66);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack85);

        $stack86 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack67);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack86);

        $stack87 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack25);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack87);

        $stack88 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack26);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack88);

        $stack89 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack27);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack89);

        $stack90 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack29);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack90);

        $stack91 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack30);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack91);

        $stack92 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack34);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack92);

        $stack93 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack33);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack93);

        $stack94 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack32);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack94);

        $stack95 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack31);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack95);

        $stack96 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack35);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack96);

        $stack97 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack37);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack97);

        $stack98 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack36);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack98);

        $stack99 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack66);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack99);

        $stack100 = virtualinvoke $stack63.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack67);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack100);

        $stack101 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack57);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack101);

        $stack102 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack58);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack102);

        $stack103 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack59);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack103);

        $stack104 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack60);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack104);

        $stack105 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack61);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack105);

        $stack106 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack62);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack106);

        $stack107 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack63);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack107);

        $stack108 = virtualinvoke $stack58.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack64);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack108);

        $stack109 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack57);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack109);

        $stack110 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack58);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack110);

        $stack111 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack59);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack111);

        $stack112 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack60);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack112);

        $stack113 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack61);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack113);

        $stack114 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack62);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack114);

        $stack115 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack63);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack115);

        $stack116 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack64);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack116);

        $stack117 = virtualinvoke $stack62.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>($stack65);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack117);

        return;
    }

    public void testContainsNullArg()
    {
        org.apache.commons.lang3.CharRange $stack3;
        org.apache.commons.lang3.CharRangeTest this;
        java.lang.String $stack7;
        java.lang.IllegalArgumentException $stack5;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

     label1:
        virtualinvoke $stack3.<org.apache.commons.lang3.CharRange: boolean contains(org.apache.commons.lang3.CharRange)>(null);

     label2:
        goto label4;

     label3:
        $stack5 := @caughtexception;

        $stack7 = virtualinvoke $stack5.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("The Range must not be null", $stack7);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIterator()
    {
        org.apache.commons.lang3.CharRange $stack14, $stack15, $stack16, $stack17, $stack18, $stack19;
        java.lang.Character $stack22, $stack27, $stack29, $stack31, $stack33, $stack44, $stack50, c;
        boolean $stack21, $stack24, $stack26, $stack35, $stack37, $stack38, $stack40, $stack43, $stack46, $stack49, $stack52, $stack58;
        org.apache.commons.lang3.CharRangeTest this;
        int $i0;
        java.util.NoSuchElementException $stack59, $stack60, $stack69;
        java.util.Iterator $stack20, $stack25, $stack36, $stack39, $stack42, $stack48;
        char $stack56;
        java.lang.Object $stack23, $stack28, $stack30, $stack32, $stack34, $stack45, $stack51, $stack54;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack15 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 100);

        $stack16 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNot(char)>(97);

        $stack17 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(0, 65535);

        $stack18 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(1, 65535);

        $stack19 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(0, 65534);

        $stack20 = virtualinvoke $stack14.<org.apache.commons.lang3.CharRange: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack20);

        $stack21 = interfaceinvoke $stack20.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack21);

        $stack22 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(97);

        $stack23 = interfaceinvoke $stack20.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack22, $stack23);

        $stack24 = interfaceinvoke $stack20.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack24);

        $stack25 = virtualinvoke $stack15.<org.apache.commons.lang3.CharRange: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack25);

        $stack26 = interfaceinvoke $stack25.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack27 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(97);

        $stack28 = interfaceinvoke $stack25.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack27, $stack28);

        $stack29 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(98);

        $stack30 = interfaceinvoke $stack25.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack29, $stack30);

        $stack31 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(99);

        $stack32 = interfaceinvoke $stack25.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack31, $stack32);

        $stack33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(100);

        $stack34 = interfaceinvoke $stack25.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack33, $stack34);

        $stack35 = interfaceinvoke $stack25.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack35);

        $stack36 = virtualinvoke $stack16.<org.apache.commons.lang3.CharRange: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack36);

        $stack37 = interfaceinvoke $stack36.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack37);

     label01:
        $stack38 = interfaceinvoke $stack36.<java.util.Iterator: boolean hasNext()>();

        if $stack38 == 0 goto label04;

        $stack54 = interfaceinvoke $stack36.<java.util.Iterator: java.lang.Object next()>();

        c = (java.lang.Character) $stack54;

        $stack56 = virtualinvoke c.<java.lang.Character: char charValue()>();

        $i0 = (int) $stack56;

        if 97 != $i0 goto label02;

        $stack58 = 1;

        goto label03;

     label02:
        $stack58 = 0;

     label03:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack58);

        goto label01;

     label04:
        $stack39 = virtualinvoke $stack17.<org.apache.commons.lang3.CharRange: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack39);

        $stack40 = interfaceinvoke $stack39.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack40);

     label05:
        interfaceinvoke $stack39.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw NoSuchElementException");

     label06:
        goto label08;

     label07:
        $stack69 := @caughtexception;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>(1);

     label08:
        $stack42 = virtualinvoke $stack18.<org.apache.commons.lang3.CharRange: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack42);

        $stack43 = interfaceinvoke $stack42.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack44 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        $stack45 = interfaceinvoke $stack42.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack44, $stack45);

        $stack46 = interfaceinvoke $stack42.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack46);

     label09:
        interfaceinvoke $stack42.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw NoSuchElementException");

     label10:
        goto label12;

     label11:
        $stack60 := @caughtexception;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>(1);

     label12:
        $stack48 = virtualinvoke $stack19.<org.apache.commons.lang3.CharRange: java.util.Iterator iterator()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack48);

        $stack49 = interfaceinvoke $stack48.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack49);

        $stack50 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65535);

        $stack51 = interfaceinvoke $stack48.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack50, $stack51);

        $stack52 = interfaceinvoke $stack48.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack52);

     label13:
        interfaceinvoke $stack48.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should throw NoSuchElementException");

     label14:
        goto label16;

     label15:
        $stack59 := @caughtexception;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>(1);

     label16:
        return;

        catch java.util.NoSuchElementException from label05 to label06 with label07;
        catch java.util.NoSuchElementException from label09 to label10 with label11;
        catch java.util.NoSuchElementException from label13 to label14 with label15;
    }

    public void testSerialization()
    {
        org.apache.commons.lang3.CharRange $stack2, $stack4, $stack6;
        org.apache.commons.lang3.CharRangeTest this;
        java.io.Serializable $stack3, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.CharRangeTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange is(char)>(97);

        $stack3 = staticinvoke <org.apache.commons.lang3.SerializationUtils: java.io.Serializable clone(java.io.Serializable)>($stack2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack2, $stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isIn(char,char)>(97, 101);

        $stack5 = staticinvoke <org.apache.commons.lang3.SerializationUtils: java.io.Serializable clone(java.io.Serializable)>($stack4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharRange: org.apache.commons.lang3.CharRange isNotIn(char,char)>(97, 101);

        $stack7 = staticinvoke <org.apache.commons.lang3.SerializationUtils: java.io.Serializable clone(java.io.Serializable)>($stack6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        return;
    }
}
