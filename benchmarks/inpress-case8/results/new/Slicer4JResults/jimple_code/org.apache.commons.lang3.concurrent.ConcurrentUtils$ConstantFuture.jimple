final class org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture extends java.lang.Object implements java.util.concurrent.Future
{
    private final java.lang.Object value;

    void <init>(java.lang.Object)
    {
        java.lang.Object value;
        org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture this;

        this := @this: org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture;

        value := @parameter0: java.lang.Object;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture: java.lang.Object value> = value;

        return;
    }

    public boolean isDone()
    {
        org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture this;

        this := @this: org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture;

        return 1;
    }

    public java.lang.Object get()
    {
        java.lang.Object $stack1;
        org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture this;

        this := @this: org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture;

        $stack1 = this.<org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture: java.lang.Object value>;

        return $stack1;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit unit;
        java.lang.Object $stack4;
        long timeout;
        org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture this;

        this := @this: org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture;

        timeout := @parameter0: long;

        unit := @parameter1: java.util.concurrent.TimeUnit;

        $stack4 = this.<org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture: java.lang.Object value>;

        return $stack4;
    }

    public boolean isCancelled()
    {
        org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture this;

        this := @this: org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture;

        return 0;
    }

    public boolean cancel(boolean)
    {
        org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture this;
        boolean mayInterruptIfRunning;

        this := @this: org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture;

        mayInterruptIfRunning := @parameter0: boolean;

        return 0;
    }
}
