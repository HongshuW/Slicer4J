public class org.apache.commons.lang3.event.EventUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.event.EventUtilsTest this;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructor()
    {
        org.apache.commons.lang3.event.EventUtilsTest this;
        long $stack6;
        java.lang.reflect.Constructor $stack7;
        java.lang.reflect.Constructor[] $stack4;
        org.apache.commons.lang3.event.EventUtils $stack2;
        int $stack5, $stack8, $stack11, $stack14;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack2 = new org.apache.commons.lang3.event.EventUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.event.EventUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/event/EventUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/event/EventUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/event/EventUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testAddEventListener()
    {
        org.apache.commons.lang3.event.EventUtilsTest this;
        long $stack9, $stack12, $stack15;
        org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource $stack4;
        org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler $stack5;
        java.beans.PropertyChangeListener listener;
        int $stack8, $stack11, $stack14;
        java.lang.Object $stack6;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack4 = new org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource;

        specialinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void <init>()>();

        $stack5 = new org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler;

        specialinvoke $stack5.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: void <init>(org.apache.commons.lang3.event.EventUtilsTest$1)>(null);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: java.lang.Object createListener(java.lang.Class)>(class "Ljava/beans/PropertyChangeListener;");

        listener = (java.beans.PropertyChangeListener) $stack6;

        $stack8 = virtualinvoke $stack5.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: int getEventCount(java.lang.String)>("propertyChange");

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        staticinvoke <org.apache.commons.lang3.event.EventUtils: void addEventListener(java.lang.Object,java.lang.Class,java.lang.Object)>($stack4, class "Ljava/beans/PropertyChangeListener;", listener);

        $stack11 = virtualinvoke $stack5.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: int getEventCount(java.lang.String)>("propertyChange");

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack12);

        virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void setProperty(java.lang.String)>("newValue");

        $stack14 = virtualinvoke $stack5.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: int getEventCount(java.lang.String)>("propertyChange");

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack15);

        return;
    }

    public void testAddEventListenerWithNoAddMethod()
    {
        org.apache.commons.lang3.event.EventUtilsTest this;
        javax.naming.event.ObjectChangeListener listener;
        java.lang.String $stack12, $stack16, $stack20, $stack23, $stack24;
        java.lang.IllegalArgumentException $stack8;
        org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource $stack5;
        org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler $stack6;
        java.lang.Object $stack7;
        java.lang.StringBuilder $stack9, $stack10, $stack13, $stack14, $stack17, $stack18, $stack21, $stack22;
        java.lang.Class $stack11, $stack15, $stack19;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack5 = new org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource;

        specialinvoke $stack5.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void <init>()>();

        $stack6 = new org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler;

        specialinvoke $stack6.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: void <init>(org.apache.commons.lang3.event.EventUtilsTest$1)>(null);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: java.lang.Object createListener(java.lang.Class)>(class "Ljavax/naming/event/ObjectChangeListener;");

        listener = (javax.naming.event.ObjectChangeListener) $stack7;

     label1:
        staticinvoke <org.apache.commons.lang3.event.EventUtils: void addEventListener(java.lang.Object,java.lang.Class,java.lang.Object)>($stack5, class "Ljavax/naming/event/ObjectChangeListener;", listener);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should not be allowed to add a listener to an object that doesn\'t support it.");

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $stack11 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.String getName()>();

        $stack13 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a public add");

        $stack15 = class "Ljavax/naming/event/ObjectChangeListener;";

        $stack16 = virtualinvoke $stack15.<java.lang.Class: java.lang.String getSimpleName()>();

        $stack17 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" method which takes a parameter of type ");

        $stack19 = class "Ljavax/naming/event/ObjectChangeListener;";

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.String getName()>();

        $stack21 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = virtualinvoke $stack8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack24);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testAddEventListenerThrowsException()
    {
        org.apache.commons.lang3.event.EventUtilsTest$1 $stack4;
        org.apache.commons.lang3.event.EventUtilsTest this;
        org.apache.commons.lang3.event.EventUtilsTest$ExceptionEventSource $stack3;
        java.lang.RuntimeException $stack6;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack3 = new org.apache.commons.lang3.event.EventUtilsTest$ExceptionEventSource;

        specialinvoke $stack3.<org.apache.commons.lang3.event.EventUtilsTest$ExceptionEventSource: void <init>()>();

     label1:
        $stack4 = new org.apache.commons.lang3.event.EventUtilsTest$1;

        specialinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$1: void <init>(org.apache.commons.lang3.event.EventUtilsTest)>(this);

        staticinvoke <org.apache.commons.lang3.event.EventUtils: void addEventListener(java.lang.Object,java.lang.Class,java.lang.Object)>($stack3, class "Ljava/beans/PropertyChangeListener;", $stack4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Add method should have thrown an exception, so method should fail.");

     label2:
        goto label4;

     label3:
        $stack6 := @caughtexception;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void testAddEventListenerWithPrivateAddMethod()
    {
        org.apache.commons.lang3.event.EventUtilsTest this;
        java.beans.VetoableChangeListener listener;
        java.lang.String $stack12, $stack16, $stack20, $stack23, $stack24;
        java.lang.IllegalArgumentException $stack8;
        org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource $stack5;
        org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler $stack6;
        java.lang.Object $stack7;
        java.lang.StringBuilder $stack9, $stack10, $stack13, $stack14, $stack17, $stack18, $stack21, $stack22;
        java.lang.Class $stack11, $stack15, $stack19;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack5 = new org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource;

        specialinvoke $stack5.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void <init>()>();

        $stack6 = new org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler;

        specialinvoke $stack6.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: void <init>(org.apache.commons.lang3.event.EventUtilsTest$1)>(null);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.event.EventUtilsTest$EventCountingInvociationHandler: java.lang.Object createListener(java.lang.Class)>(class "Ljava/beans/VetoableChangeListener;");

        listener = (java.beans.VetoableChangeListener) $stack7;

     label1:
        staticinvoke <org.apache.commons.lang3.event.EventUtils: void addEventListener(java.lang.Object,java.lang.Class,java.lang.Object)>($stack5, class "Ljava/beans/VetoableChangeListener;", listener);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should not be allowed to add a listener to an object that doesn\'t support it.");

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $stack11 = virtualinvoke $stack5.<java.lang.Object: java.lang.Class getClass()>();

        $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.String getName()>();

        $stack13 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack12);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a public add");

        $stack15 = class "Ljava/beans/VetoableChangeListener;";

        $stack16 = virtualinvoke $stack15.<java.lang.Class: java.lang.String getSimpleName()>();

        $stack17 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" method which takes a parameter of type ");

        $stack19 = class "Ljava/beans/VetoableChangeListener;";

        $stack20 = virtualinvoke $stack19.<java.lang.Class: java.lang.String getName()>();

        $stack21 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.String toString()>();

        $stack24 = virtualinvoke $stack8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack23, $stack24);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testBindEventsToMethod()
    {
        org.apache.commons.lang3.event.EventUtilsTest$EventCounter $stack4;
        org.apache.commons.lang3.event.EventUtilsTest this;
        java.lang.String[] $stack5;
        long $stack8, $stack11;
        org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource $stack3;
        int $stack7, $stack10;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack3 = new org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource;

        specialinvoke $stack3.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void <init>()>();

        $stack4 = new org.apache.commons.lang3.event.EventUtilsTest$EventCounter;

        specialinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounter: void <init>()>();

        $stack5 = newarray (java.lang.String)[0];

        staticinvoke <org.apache.commons.lang3.event.EventUtils: void bindEventsToMethod(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class,java.lang.String[])>($stack4, "eventOccurred", $stack3, class "Ljava/beans/PropertyChangeListener;", $stack5);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounter: int getCount()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        virtualinvoke $stack3.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void setProperty(java.lang.String)>("newValue");

        $stack10 = virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounter: int getCount()>();

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        return;
    }

    public void testBindEventsToMethodWithEvent()
    {
        org.apache.commons.lang3.event.EventUtilsTest this;
        org.apache.commons.lang3.event.EventUtilsTest$EventCounterWithEvent $stack4;
        java.lang.String[] $stack5;
        long $stack8, $stack11;
        org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource $stack3;
        int $stack7, $stack10;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack3 = new org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource;

        specialinvoke $stack3.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void <init>()>();

        $stack4 = new org.apache.commons.lang3.event.EventUtilsTest$EventCounterWithEvent;

        specialinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounterWithEvent: void <init>()>();

        $stack5 = newarray (java.lang.String)[0];

        staticinvoke <org.apache.commons.lang3.event.EventUtils: void bindEventsToMethod(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class,java.lang.String[])>($stack4, "eventOccurred", $stack3, class "Ljava/beans/PropertyChangeListener;", $stack5);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounterWithEvent: int getCount()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        virtualinvoke $stack3.<org.apache.commons.lang3.event.EventUtilsTest$PropertyChangeSource: void setProperty(java.lang.String)>("newValue");

        $stack10 = virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounterWithEvent: int getCount()>();

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack11);

        return;
    }

    public void testBindFilteredEventsToMethod()
    {
        org.apache.commons.lang3.event.EventUtilsTest$EventCounter $stack4;
        java.util.Date $stack12, $stack23;
        org.apache.commons.lang3.event.EventUtilsTest this;
        org.apache.commons.lang3.event.EventUtilsTest$MultipleEventSource $stack3;
        java.lang.String[] $stack5;
        long $stack8, $stack19, $stack30;
        java.lang.Integer $stack15, $stack16, $stack26, $stack27;
        int $stack7, $stack18, $stack29;
        java.beans.PropertyChangeEvent $stack11, $stack22;
        org.apache.commons.lang3.event.EventListenerSupport $stack9, $stack20;
        org.apache.commons.lang3.event.EventUtilsTest$MultipleEventListener $stack13, $stack24;
        java.lang.Object $stack10, $stack21;

        this := @this: org.apache.commons.lang3.event.EventUtilsTest;

        $stack3 = new org.apache.commons.lang3.event.EventUtilsTest$MultipleEventSource;

        specialinvoke $stack3.<org.apache.commons.lang3.event.EventUtilsTest$MultipleEventSource: void <init>()>();

        $stack4 = new org.apache.commons.lang3.event.EventUtilsTest$EventCounter;

        specialinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounter: void <init>()>();

        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "event1";

        staticinvoke <org.apache.commons.lang3.event.EventUtils: void bindEventsToMethod(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class,java.lang.String[])>($stack4, "eventOccurred", $stack3, class "Lorg/apache/commons/lang3/event/EventUtilsTest$MultipleEventListener;", $stack5);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounter: int getCount()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.event.EventUtilsTest$MultipleEventSource: org.apache.commons.lang3.event.EventListenerSupport access$100(org.apache.commons.lang3.event.EventUtilsTest$MultipleEventSource)>($stack3);

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.event.EventListenerSupport: java.lang.Object fire()>();

        $stack13 = (org.apache.commons.lang3.event.EventUtilsTest$MultipleEventListener) $stack10;

        $stack11 = new java.beans.PropertyChangeEvent;

        $stack12 = new java.util.Date;

        specialinvoke $stack12.<java.util.Date: void <init>()>();

        $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $stack16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $stack11.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($stack12, "Day", $stack15, $stack16);

        interfaceinvoke $stack13.<org.apache.commons.lang3.event.EventUtilsTest$MultipleEventListener: void event1(java.beans.PropertyChangeEvent)>($stack11);

        $stack18 = virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounter: int getCount()>();

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack19);

        $stack20 = staticinvoke <org.apache.commons.lang3.event.EventUtilsTest$MultipleEventSource: org.apache.commons.lang3.event.EventListenerSupport access$100(org.apache.commons.lang3.event.EventUtilsTest$MultipleEventSource)>($stack3);

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.event.EventListenerSupport: java.lang.Object fire()>();

        $stack24 = (org.apache.commons.lang3.event.EventUtilsTest$MultipleEventListener) $stack21;

        $stack22 = new java.beans.PropertyChangeEvent;

        $stack23 = new java.util.Date;

        specialinvoke $stack23.<java.util.Date: void <init>()>();

        $stack26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $stack22.<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>($stack23, "Day", $stack26, $stack27);

        interfaceinvoke $stack24.<org.apache.commons.lang3.event.EventUtilsTest$MultipleEventListener: void event2(java.beans.PropertyChangeEvent)>($stack22);

        $stack29 = virtualinvoke $stack4.<org.apache.commons.lang3.event.EventUtilsTest$EventCounter: int getCount()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack30);

        return;
    }
}
