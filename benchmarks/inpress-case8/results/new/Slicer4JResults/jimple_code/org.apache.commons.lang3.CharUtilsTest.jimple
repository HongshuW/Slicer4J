public class org.apache.commons.lang3.CharUtilsTest extends java.lang.Object
{
    private static final java.lang.Character CHARACTER_A;
    private static final java.lang.Character CHARACTER_B;
    private static final char CHAR_COPY;

    public void <init>()
    {
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructor()
    {
        long $stack6;
        org.apache.commons.lang3.CharUtilsTest this;
        java.lang.reflect.Constructor $stack7;
        org.apache.commons.lang3.CharUtils $stack2;
        java.lang.reflect.Constructor[] $stack4;
        int $stack5, $stack8, $stack11, $stack14;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = new org.apache.commons.lang3.CharUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.CharUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/CharUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/BooleanUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/BooleanUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testToCharacterObject_char()
    {
        long $stack14, $stack16, $stack17, $stack19, $stack31, $stack33;
        java.lang.Character $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack11, $stack13, $stack28, $stack30;
        int i;
        boolean $stack22;
        char $stack10, $stack12, $stack15, $stack18, $stack27, $stack29, $stack32;
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack4 = new java.lang.Character;

        specialinvoke $stack4.<java.lang.Character: void <init>(char)>(97);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>(97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>(97);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>(97);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        i = 0;

     label1:
        if i >= 128 goto label2;

        $stack27 = (char) i;

        $stack28 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>($stack27);

        $stack29 = (char) i;

        $stack30 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>($stack29);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack28, $stack30);

        $stack31 = (long) i;

        $stack32 = virtualinvoke $stack28.<java.lang.Character: char charValue()>();

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack31, $stack33);

        i = i + 1;

        goto label1;

     label2:
        i = 128;

     label3:
        if i >= 196 goto label6;

        $stack10 = (char) i;

        $stack11 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>($stack10);

        $stack12 = (char) i;

        $stack13 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>($stack12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack13);

        if $stack11 == $stack13 goto label4;

        $stack22 = 1;

        goto label5;

     label4:
        $stack22 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack14 = (long) i;

        $stack15 = virtualinvoke $stack11.<java.lang.Character: char charValue()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack14, $stack16);

        $stack17 = (long) i;

        $stack18 = virtualinvoke $stack13.<java.lang.Character: char charValue()>();

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack17, $stack19);

        i = i + 1;

        goto label3;

     label6:
        $stack8 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(java.lang.String)>("a");

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(char)>(97);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack8, $stack9);

        return;
    }

    public void testToCharacterObject_String()
    {
        org.apache.commons.lang3.CharUtilsTest this;
        java.lang.Character $stack2, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        $stack5 = new java.lang.Character;

        specialinvoke $stack5.<java.lang.Character: void <init>(char)>(97);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        $stack7 = new java.lang.Character;

        specialinvoke $stack7.<java.lang.Character: void <init>(char)>(97);

        $stack8 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(java.lang.String)>("abc");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(java.lang.String)>("a");

        $stack10 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.Character toCharacterObject(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack9, $stack10);

        return;
    }

    public void testToChar_Character()
    {
        char $stack4, $stack8;
        long $stack5, $stack9;
        java.lang.IllegalArgumentException $stack12;
        org.apache.commons.lang3.CharUtilsTest this;
        java.lang.Character $stack2, $stack6;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A>;

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.Character)>($stack2);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $stack5);

        $stack6 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_B>;

        $stack8 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.Character)>($stack6);

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $stack9);

     label1:
        staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.Character)>(null);

     label2:
        goto label4;

     label3:
        $stack12 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testToChar_Character_char()
    {
        char $stack3, $stack7, $stack11;
        long $stack4, $stack8, $stack12;
        org.apache.commons.lang3.CharUtilsTest this;
        java.lang.Character $stack1, $stack5;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack1 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A>;

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.Character,char)>($stack1, 88);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $stack4);

        $stack5 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_B>;

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.Character,char)>($stack5, 88);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $stack8);

        $stack11 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.Character,char)>(null, 88);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(88L, $stack12);

        return;
    }

    public void testToChar_String()
    {
        char $stack3, $stack6;
        long $stack4, $stack7;
        java.lang.IllegalArgumentException $stack11, $stack12;
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String)>("A");

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String)>("BA");

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $stack7);

     label1:
        staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String)>(null);

     label2:
        goto label4;

     label3:
        $stack12 := @caughtexception;

     label4:
        staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String)>("");

     label5:
        goto label7;

     label6:
        $stack11 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testToChar_String_char()
    {
        char $stack2, $stack5, $stack8, $stack12;
        long $stack3, $stack6, $stack9, $stack13;
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String,char)>("A", 88);

        $stack3 = (long) $stack2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(65L, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String,char)>("BA", 88);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(66L, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String,char)>("", 88);

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(88L, $stack9);

        $stack12 = staticinvoke <org.apache.commons.lang3.CharUtils: char toChar(java.lang.String,char)>(null, 88);

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(88L, $stack13);

        return;
    }

    public void testToIntValue_char()
    {
        long $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31;
        int $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30;
        java.lang.IllegalArgumentException $stack33;
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(48);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(49);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(50);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(51);

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack13);

        $stack15 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(52);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack16);

        $stack18 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(53);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(54);

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack22);

        $stack24 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(55);

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack25);

        $stack27 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(56);

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack28);

        $stack30 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(57);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack31);

     label1:
        staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(97);

     label2:
        goto label4;

     label3:
        $stack33 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testToIntValue_char_int()
    {
        long $stack3, $stack6, $stack9;
        org.apache.commons.lang3.CharUtilsTest this;
        int $stack2, $stack5, $stack8, $i0, $i1, $i2;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $i0 = (int) -1;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char,int)>(48, $i0);

        $stack3 = (long) $stack2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack3);

        $i1 = (int) -1;

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char,int)>(51, $i1);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack6);

        $i2 = (int) -1;

        $stack8 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char,int)>(97, $i2);

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack9);

        return;
    }

    public void testToIntValue_Character()
    {
        long $stack5, $stack9;
        java.lang.IllegalArgumentException $stack13, $stack14;
        org.apache.commons.lang3.CharUtilsTest this;
        java.lang.Character $stack2, $stack6, $stack11;
        int $stack4, $stack8;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = new java.lang.Character;

        specialinvoke $stack2.<java.lang.Character: void <init>(char)>(48);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character)>($stack2);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack6 = new java.lang.Character;

        specialinvoke $stack6.<java.lang.Character: void <init>(char)>(51);

        $stack8 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character)>($stack6);

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack9);

     label1:
        staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character)>(null);

     label2:
        goto label4;

     label3:
        $stack14 := @caughtexception;

     label4:
        $stack11 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A>;

        staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character)>($stack11);

     label5:
        goto label7;

     label6:
        $stack13 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testToIntValue_Character_int()
    {
        long $stack4, $stack8, $stack12, $stack15;
        java.lang.Character $u0, $u1, $u2;
        int $stack3, $stack7, $stack11, $stack14, $i0, $i1, $i2, $i3;
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $u0 = new java.lang.Character;

        specialinvoke $u0.<java.lang.Character: void <init>(char)>(48);

        $i0 = (int) -1;

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character,int)>($u0, $i0);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $u1 = new java.lang.Character;

        specialinvoke $u1.<java.lang.Character: void <init>(char)>(51);

        $i1 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character,int)>($u1, $i1);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack8);

        $u2 = new java.lang.Character;

        specialinvoke $u2.<java.lang.Character: void <init>(char)>(65);

        $i2 = (int) -1;

        $stack11 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character,int)>($u2, $i2);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack12);

        $i3 = (int) -1;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(java.lang.Character,int)>(null, $i3);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack15);

        return;
    }

    public void testToString_char()
    {
        long $stack14, $stack15, $stack17, $stack20, $stack21, $stack23, $stack41, $stack42, $stack44;
        int $stack13, $stack19, $stack40, i;
        java.lang.String $stack5, $stack6, $stack7, $stack9, $stack11, $stack36, $stack38;
        boolean $stack26;
        char $stack8, $stack10, $stack16, $stack22, $stack35, $stack37, $stack43;
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>(97);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>(97);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>(97);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        i = 0;

     label1:
        if i >= 128 goto label2;

        $stack35 = (char) i;

        $stack36 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>($stack35);

        $stack37 = (char) i;

        $stack38 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>($stack37);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack36, $stack38);

        $stack40 = virtualinvoke $stack36.<java.lang.String: int length()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack41);

        $stack42 = (long) i;

        $stack43 = virtualinvoke $stack36.<java.lang.String: char charAt(int)>(0);

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack42, $stack44);

        i = i + 1;

        goto label1;

     label2:
        i = 128;

     label3:
        if i >= 196 goto label6;

        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>($stack8);

        $stack10 = (char) i;

        $stack11 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>($stack10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack11);

        if $stack9 == $stack11 goto label4;

        $stack26 = 1;

        goto label5;

     label4:
        $stack26 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack13 = virtualinvoke $stack9.<java.lang.String: int length()>();

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack14);

        $stack15 = (long) i;

        $stack16 = virtualinvoke $stack9.<java.lang.String: char charAt(int)>(0);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack15, $stack17);

        $stack19 = virtualinvoke $stack11.<java.lang.String: int length()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack21 = (long) i;

        $stack22 = virtualinvoke $stack11.<java.lang.String: char charAt(int)>(0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack21, $stack23);

        i = i + 1;

        goto label3;

     label6:
        return;
    }

    public void testToString_Character()
    {
        org.apache.commons.lang3.CharUtilsTest this;
        java.lang.Character $stack3, $stack6, $stack8;
        java.lang.String $stack2, $stack5, $stack7, $stack9;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(java.lang.Character)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack3 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A>;

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(java.lang.Character)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("A", $stack5);

        $stack6 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A>;

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(java.lang.Character)>($stack6);

        $stack8 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A>;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(java.lang.Character)>($stack8);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack7, $stack9);

        return;
    }

    public void testToUnicodeEscaped_char()
    {
        char $stack10;
        long $stack14, $stack17, $stack18;
        org.apache.commons.lang3.CharUtilsTest this;
        int $stack13, $stack16, i;
        java.lang.String $stack5, $stack7, $stack9, $stack11, $stack15;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(char)>(65);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\\u0041", $stack5);

        i = 0;

     label1:
        if i >= 196 goto label2;

        $stack10 = (char) i;

        $stack11 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(char)>($stack10);

        $stack13 = virtualinvoke $stack11.<java.lang.String: int length()>();

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack14);

        $stack15 = virtualinvoke $stack11.<java.lang.String: java.lang.String substring(int)>(2);

        $stack16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($stack15, 16);

        $stack18 = (long) i;

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack18, $stack17);

        i = i + 1;

        goto label1;

     label2:
        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(char)>(2457);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\\u0999", $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(char)>(4097);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\\u1001", $stack9);

        return;
    }

    public void testToUnicodeEscaped_Character()
    {
        java.lang.Character $stack3;
        java.lang.String $stack2, $stack5;
        org.apache.commons.lang3.CharUtilsTest this;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(java.lang.Character)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack2);

        $stack3 = <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A>;

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(java.lang.Character)>($stack3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\\u0041", $stack5);

        return;
    }

    public void testIsAscii_char()
    {
        char $stack8, $stack12;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack13;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>(97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>(65);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>(51);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>(45);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>(10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 128 goto label4;

        if i >= 128 goto label2;

        $stack12 = (char) i;

        $stack13 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>($stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        goto label3;

     label2:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label3:
        i = i + 1;

        goto label1;

     label4:
        return;
    }

    public void testIsAsciiPrintable_char()
    {
        char $stack8, $stack13;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack14;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>(97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>(65);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>(51);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>(45);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>(10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAscii(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 196 goto label4;

        if i < 32 goto label2;

        if i > 126 goto label2;

        $stack13 = (char) i;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>($stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        goto label3;

     label2:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label3:
        i = i + 1;

        goto label1;

     label4:
        return;
    }

    public void testIsAsciiControl_char()
    {
        char $stack8, $stack12;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack13;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>(97);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>(65);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>(51);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>(45);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>(10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 196 goto label5;

        if i < 32 goto label2;

        if i != 127 goto label3;

     label2:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        goto label4;

     label3:
        $stack12 = (char) i;

        $stack13 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiControl(char)>($stack12);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

     label4:
        i = i + 1;

        goto label1;

     label5:
        return;
    }

    public void testIsAsciiAlpha_char()
    {
        char $stack8, $stack13;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack14;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(65);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(51);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(45);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 196 goto label6;

        if i < 65 goto label2;

        if i <= 90 goto label3;

     label2:
        if i < 97 goto label4;

        if i > 122 goto label4;

     label3:
        $stack13 = (char) i;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>($stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        goto label5;

     label4:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label5:
        i = i + 1;

        goto label1;

     label6:
        return;
    }

    public void testIsAsciiAlphaUpper_char()
    {
        char $stack8, $stack13;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack14;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(97);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(65);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(51);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(45);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 196 goto label4;

        if i < 65 goto label2;

        if i > 90 goto label2;

        $stack13 = (char) i;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>($stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        goto label3;

     label2:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label3:
        i = i + 1;

        goto label1;

     label4:
        return;
    }

    public void testIsAsciiAlphaLower_char()
    {
        char $stack8, $stack13;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack14;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(65);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(51);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(45);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 196 goto label4;

        if i < 97 goto label2;

        if i > 122 goto label2;

        $stack13 = (char) i;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>($stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        goto label3;

     label2:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label3:
        i = i + 1;

        goto label1;

     label4:
        return;
    }

    public void testIsAsciiNumeric_char()
    {
        char $stack8, $stack13;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack14;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(97);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(65);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(51);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(45);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 196 goto label4;

        if i < 48 goto label2;

        if i > 57 goto label2;

        $stack13 = (char) i;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>($stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        goto label3;

     label2:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label3:
        i = i + 1;

        goto label1;

     label4:
        return;
    }

    public void testIsAsciiAlphanumeric_char()
    {
        char $stack8, $stack13;
        org.apache.commons.lang3.CharUtilsTest this;
        int i;
        boolean $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack9, $stack14;

        this := @this: org.apache.commons.lang3.CharUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>(97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>(65);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>(51);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>(45);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>(10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>(169);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        i = 0;

     label1:
        if i >= 196 goto label7;

        if i < 65 goto label2;

        if i <= 90 goto label4;

     label2:
        if i < 97 goto label3;

        if i <= 122 goto label4;

     label3:
        if i < 48 goto label5;

        if i > 57 goto label5;

     label4:
        $stack13 = (char) i;

        $stack14 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>($stack13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        goto label6;

     label5:
        $stack8 = (char) i;

        $stack9 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphanumeric(char)>($stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label6:
        i = i + 1;

        goto label1;

     label7:
        return;
    }

    static void <clinit>()
    {
        java.lang.Character $stack0, $stack1;

        <org.apache.commons.lang3.CharUtilsTest: char CHAR_COPY> = 169;

        $stack0 = new java.lang.Character;

        specialinvoke $stack0.<java.lang.Character: void <init>(char)>(65);

        <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_A> = $stack0;

        $stack1 = new java.lang.Character;

        specialinvoke $stack1.<java.lang.Character: void <init>(char)>(66);

        <org.apache.commons.lang3.CharUtilsTest: java.lang.Character CHARACTER_B> = $stack1;

        return;
    }
}
