public class org.apache.commons.lang3.reflect.FieldUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.reflect.FieldUtils this;

        this := @this: org.apache.commons.lang3.reflect.FieldUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String)
    {
        java.lang.Class 'cls';
        java.lang.String fieldName;
        java.lang.reflect.Field $stack3;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        $stack3 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, 0);

        staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: void setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>($stack3);

        return $stack3;
    }

    public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String, boolean)
    {
        java.lang.NoSuchFieldException $stack29, $stack30;
        int $stack22;
        java.lang.String fieldName, $stack20;
        boolean $stack9, $stack23, forceAccess;
        java.util.Iterator $stack8;
        java.lang.IllegalArgumentException $stack13, $stack27, $stack28;
        java.lang.reflect.Field $stack21, acls#4;
        java.util.List $stack7;
        java.lang.Class 'cls', class1, acls;
        java.lang.Object $stack10;
        java.lang.StringBuilder $stack14, $stack15, $stack16, $stack17, $stack18, $stack19;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        forceAccess := @parameter2: boolean;

        if 'cls' != null goto label01;

        $stack28 = new java.lang.IllegalArgumentException;

        specialinvoke $stack28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The class must not be null");

        throw $stack28;

     label01:
        if fieldName != null goto label02;

        $stack27 = new java.lang.IllegalArgumentException;

        specialinvoke $stack27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field name must not be null");

        throw $stack27;

     label02:
        acls = 'cls';

     label03:
        if acls == null goto label09;

     label04:
        $stack21 = virtualinvoke acls.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(fieldName);

        $stack22 = virtualinvoke $stack21.<java.lang.reflect.Field: int getModifiers()>();

        $stack23 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack22);

        if $stack23 != 0 goto label06;

        if forceAccess == 0 goto label05;

        virtualinvoke $stack21.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        goto label06;

     label05:
        goto label08;

     label06:
        return $stack21;

     label07:
        $stack30 := @caughtexception;

     label08:
        acls = virtualinvoke acls.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label03;

     label09:
        acls#4 = null;

        $stack7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>('cls');

        $stack8 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $stack9 = interfaceinvoke $stack8.<java.util.Iterator: boolean hasNext()>();

        if $stack9 == 0 goto label16;

        $stack10 = interfaceinvoke $stack8.<java.util.Iterator: java.lang.Object next()>();

        class1 = (java.lang.Class) $stack10;

     label11:
        if acls#4 == null goto label12;

        $stack13 = new java.lang.IllegalArgumentException;

        $stack14 = new java.lang.StringBuilder;

        specialinvoke $stack14.<java.lang.StringBuilder: void <init>()>();

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reference to field ");

        $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack17 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ambiguous relative to ");

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>('cls');

        $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; a matching field exists on two or more implemented interfaces.");

        $stack20 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack20);

        throw $stack13;

     label12:
        acls#4 = virtualinvoke class1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(fieldName);

     label13:
        goto label15;

     label14:
        $stack29 := @caughtexception;

     label15:
        goto label10;

     label16:
        return acls#4;

        catch java.lang.NoSuchFieldException from label04 to label05 with label07;
        catch java.lang.NoSuchFieldException from label11 to label13 with label14;
    }

    public static java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String)
    {
        java.lang.Class 'cls';
        java.lang.String fieldName;
        java.lang.reflect.Field $stack2;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, 0);

        return $stack2;
    }

    public static java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String, boolean)
    {
        java.lang.reflect.Field $stack4;
        java.lang.IllegalArgumentException $stack7, $stack8;
        java.lang.NoSuchFieldException $stack9;
        java.lang.Class 'cls';
        java.lang.String fieldName;
        boolean $stack5, forceAccess;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        forceAccess := @parameter2: boolean;

        if 'cls' != null goto label1;

        $stack8 = new java.lang.IllegalArgumentException;

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The class must not be null");

        throw $stack8;

     label1:
        if fieldName != null goto label2;

        $stack7 = new java.lang.IllegalArgumentException;

        specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field name must not be null");

        throw $stack7;

     label2:
        $stack4 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(fieldName);

        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean isAccessible(java.lang.reflect.Member)>($stack4);

        if $stack5 != 0 goto label4;

        if forceAccess == 0 goto label3;

        virtualinvoke $stack4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        goto label4;

     label3:
        return null;

     label4:
        return $stack4;

     label5:
        $stack9 := @caughtexception;

        return null;

        catch java.lang.NoSuchFieldException from label2 to label3 with label5;
    }

    public static java.lang.Object readStaticField(java.lang.reflect.Field) throws java.lang.IllegalAccessException
    {
        java.lang.Object $stack1;
        java.lang.reflect.Field field;

        field := @parameter0: java.lang.reflect.Field;

        $stack1 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.reflect.Field,boolean)>(field, 0);

        return $stack1;
    }

    public static java.lang.Object readStaticField(java.lang.reflect.Field, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field field;
        java.lang.IllegalArgumentException $stack6, $stack13;
        int $stack2;
        java.lang.Object $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack10, $stack11;
        java.lang.String $stack9, $stack12;
        boolean $stack3, forceAccess;

        field := @parameter0: java.lang.reflect.Field;

        forceAccess := @parameter1: boolean;

        if field != null goto label1;

        $stack13 = new java.lang.IllegalArgumentException;

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field must not be null");

        throw $stack13;

     label1:
        $stack2 = virtualinvoke field.<java.lang.reflect.Field: int getModifiers()>();

        $stack3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($stack2);

        if $stack3 != 0 goto label2;

        $stack6 = new java.lang.IllegalArgumentException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The field \'");

        $stack9 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not static");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12);

        throw $stack6;

     label2:
        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(field, null, forceAccess);

        return $stack5;
    }

    public static java.lang.Object readStaticField(java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException
    {
        java.lang.Class 'cls';
        java.lang.Object $stack2;
        java.lang.String fieldName;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, 0);

        return $stack2;
    }

    public static java.lang.Object readStaticField(java.lang.Class, java.lang.String, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack4;
        java.lang.IllegalArgumentException $stack6;
        java.lang.Class 'cls';
        java.lang.Object $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack10, $stack11;
        java.lang.String fieldName, $stack12;
        boolean forceAccess;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        forceAccess := @parameter2: boolean;

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, forceAccess);

        if $stack4 != null goto label1;

        $stack6 = new java.lang.IllegalArgumentException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate field ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>('cls');

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12);

        throw $stack6;

     label1:
        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.reflect.Field,boolean)>($stack4, 0);

        return $stack5;
    }

    public static java.lang.Object readDeclaredStaticField(java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException
    {
        java.lang.Class 'cls';
        java.lang.Object $stack2;
        java.lang.String fieldName;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readDeclaredStaticField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, 0);

        return $stack2;
    }

    public static java.lang.Object readDeclaredStaticField(java.lang.Class, java.lang.String, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack4;
        java.lang.IllegalArgumentException $stack6;
        java.lang.Class 'cls';
        java.lang.Object $stack5;
        java.lang.StringBuilder $stack7, $stack8, $stack10, $stack11, $stack12;
        java.lang.String fieldName, $stack9, $stack13;
        boolean forceAccess;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        forceAccess := @parameter2: boolean;

        $stack4 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, forceAccess);

        if $stack4 != null goto label1;

        $stack6 = new java.lang.IllegalArgumentException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate declared field ");

        $stack9 = virtualinvoke 'cls'.<java.lang.Class: java.lang.String getName()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack13);

        throw $stack6;

     label1:
        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.reflect.Field,boolean)>($stack4, 0);

        return $stack5;
    }

    public static java.lang.Object readField(java.lang.reflect.Field, java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, $stack2;
        java.lang.reflect.Field field;

        field := @parameter0: java.lang.reflect.Field;

        target := @parameter1: java.lang.Object;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(field, target, 0);

        return $stack2;
    }

    public static java.lang.Object readField(java.lang.reflect.Field, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, $stack3;
        java.lang.reflect.Field field;
        java.lang.IllegalArgumentException $stack8;
        boolean forceAccess, $stack4;

        field := @parameter0: java.lang.reflect.Field;

        target := @parameter1: java.lang.Object;

        forceAccess := @parameter2: boolean;

        if field != null goto label1;

        $stack8 = new java.lang.IllegalArgumentException;

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field must not be null");

        throw $stack8;

     label1:
        if forceAccess == 0 goto label2;

        $stack4 = virtualinvoke field.<java.lang.reflect.Field: boolean isAccessible()>();

        if $stack4 != 0 goto label2;

        virtualinvoke field.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        goto label3;

     label2:
        staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: void setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(field);

     label3:
        $stack3 = virtualinvoke field.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(target);

        return $stack3;
    }

    public static java.lang.Object readField(java.lang.Object, java.lang.String) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, $stack2;
        java.lang.String fieldName;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.Object,java.lang.String,boolean)>(target, fieldName, 0);

        return $stack2;
    }

    public static java.lang.Object readField(java.lang.Object, java.lang.String, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack6;
        java.lang.IllegalArgumentException $stack8, $stack15;
        java.lang.Object target, $stack7;
        java.lang.Class $stack5;
        java.lang.StringBuilder $stack9, $stack10, $stack11, $stack12, $stack13;
        java.lang.String fieldName, $stack14;
        boolean forceAccess;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        forceAccess := @parameter2: boolean;

        if target != null goto label1;

        $stack15 = new java.lang.IllegalArgumentException;

        specialinvoke $stack15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("target object must not be null");

        throw $stack15;

     label1:
        $stack5 = virtualinvoke target.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>($stack5, fieldName, forceAccess);

        if $stack6 != null goto label2;

        $stack8 = new java.lang.IllegalArgumentException;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate field ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack5);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack14);

        throw $stack8;

     label2:
        $stack7 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object)>($stack6, target);

        return $stack7;
    }

    public static java.lang.Object readDeclaredField(java.lang.Object, java.lang.String) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, $stack2;
        java.lang.String fieldName;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        $stack2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readDeclaredField(java.lang.Object,java.lang.String,boolean)>(target, fieldName, 0);

        return $stack2;
    }

    public static java.lang.Object readDeclaredField(java.lang.Object, java.lang.String, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack6;
        java.lang.IllegalArgumentException $stack8, $stack16;
        java.lang.Object target, $stack7;
        java.lang.Class $stack5;
        java.lang.StringBuilder $stack9, $stack10, $stack12, $stack13, $stack14;
        java.lang.String fieldName, $stack11, $stack15;
        boolean forceAccess;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        forceAccess := @parameter2: boolean;

        if target != null goto label1;

        $stack16 = new java.lang.IllegalArgumentException;

        specialinvoke $stack16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("target object must not be null");

        throw $stack16;

     label1:
        $stack5 = virtualinvoke target.<java.lang.Object: java.lang.Class getClass()>();

        $stack6 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>($stack5, fieldName, forceAccess);

        if $stack6 != null goto label2;

        $stack8 = new java.lang.IllegalArgumentException;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate declared field ");

        $stack11 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack15);

        throw $stack8;

     label2:
        $stack7 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object)>($stack6, target);

        return $stack7;
    }

    public static void writeStaticField(java.lang.reflect.Field, java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.Object value;
        java.lang.reflect.Field field;

        field := @parameter0: java.lang.reflect.Field;

        value := @parameter1: java.lang.Object;

        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeStaticField(java.lang.reflect.Field,java.lang.Object,boolean)>(field, value, 0);

        return;
    }

    public static void writeStaticField(java.lang.reflect.Field, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field field;
        java.lang.IllegalArgumentException $stack6, $stack13;
        int $stack3;
        java.lang.Object value;
        java.lang.StringBuilder $stack7, $stack8, $stack10, $stack11;
        java.lang.String $stack9, $stack12;
        boolean $stack4, forceAccess;

        field := @parameter0: java.lang.reflect.Field;

        value := @parameter1: java.lang.Object;

        forceAccess := @parameter2: boolean;

        if field != null goto label1;

        $stack13 = new java.lang.IllegalArgumentException;

        specialinvoke $stack13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field must not be null");

        throw $stack13;

     label1:
        $stack3 = virtualinvoke field.<java.lang.reflect.Field: int getModifiers()>();

        $stack4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($stack3);

        if $stack4 != 0 goto label2;

        $stack6 = new java.lang.IllegalArgumentException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The field \'");

        $stack9 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();

        $stack10 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack9);

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not static");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12);

        throw $stack6;

     label2:
        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)>(field, null, value, forceAccess);

        return;
    }

    public static void writeStaticField(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.Class 'cls';
        java.lang.Object value;
        java.lang.String fieldName;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)>('cls', fieldName, value, 0);

        return;
    }

    public static void writeStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack5;
        java.lang.IllegalArgumentException $stack6;
        java.lang.Class 'cls';
        java.lang.Object value;
        java.lang.StringBuilder $stack7, $stack8, $stack9, $stack10, $stack11;
        java.lang.String fieldName, $stack12;
        boolean forceAccess;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        forceAccess := @parameter3: boolean;

        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, forceAccess);

        if $stack5 != null goto label1;

        $stack6 = new java.lang.IllegalArgumentException;

        $stack7 = new java.lang.StringBuilder;

        specialinvoke $stack7.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate field ");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>('cls');

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack12);

        throw $stack6;

     label1:
        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeStaticField(java.lang.reflect.Field,java.lang.Object)>($stack5, value);

        return;
    }

    public static void writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.Class 'cls';
        java.lang.Object value;
        java.lang.String fieldName;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeDeclaredStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)>('cls', fieldName, value, 0);

        return;
    }

    public static void writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack5;
        java.lang.IllegalArgumentException $stack7;
        java.lang.Class 'cls';
        java.lang.Object value;
        java.lang.StringBuilder $stack8, $stack9, $stack11, $stack12, $stack13;
        java.lang.String fieldName, $stack10, $stack14;
        boolean forceAccess;

        'cls' := @parameter0: java.lang.Class;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        forceAccess := @parameter3: boolean;

        $stack5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>('cls', fieldName, forceAccess);

        if $stack5 != null goto label1;

        $stack7 = new java.lang.IllegalArgumentException;

        $stack8 = new java.lang.StringBuilder;

        specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>();

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate declared field ");

        $stack10 = virtualinvoke 'cls'.<java.lang.Class: java.lang.String getName()>();

        $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack14);

        throw $stack7;

     label1:
        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>($stack5, null, value);

        return;
    }

    public static void writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, value;
        java.lang.reflect.Field field;

        field := @parameter0: java.lang.reflect.Field;

        target := @parameter1: java.lang.Object;

        value := @parameter2: java.lang.Object;

        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)>(field, target, value, 0);

        return;
    }

    public static void writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, value;
        java.lang.reflect.Field field;
        java.lang.IllegalArgumentException $stack9;
        boolean forceAccess, $stack4;

        field := @parameter0: java.lang.reflect.Field;

        target := @parameter1: java.lang.Object;

        value := @parameter2: java.lang.Object;

        forceAccess := @parameter3: boolean;

        if field != null goto label1;

        $stack9 = new java.lang.IllegalArgumentException;

        specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field must not be null");

        throw $stack9;

     label1:
        if forceAccess == 0 goto label2;

        $stack4 = virtualinvoke field.<java.lang.reflect.Field: boolean isAccessible()>();

        if $stack4 != 0 goto label2;

        virtualinvoke field.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        goto label3;

     label2:
        staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: void setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(field);

     label3:
        virtualinvoke field.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(target, value);

        return;
    }

    public static void writeField(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, value;
        java.lang.String fieldName;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)>(target, fieldName, value, 0);

        return;
    }

    public static void writeField(java.lang.Object, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack7;
        java.lang.IllegalArgumentException $stack8, $stack16;
        java.lang.Object target, value;
        java.lang.Class $stack6;
        java.lang.StringBuilder $stack9, $stack10, $stack12, $stack13, $stack14;
        java.lang.String fieldName, $stack11, $stack15;
        boolean forceAccess;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        forceAccess := @parameter3: boolean;

        if target != null goto label1;

        $stack16 = new java.lang.IllegalArgumentException;

        specialinvoke $stack16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("target object must not be null");

        throw $stack16;

     label1:
        $stack6 = virtualinvoke target.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>($stack6, fieldName, forceAccess);

        if $stack7 != null goto label2;

        $stack8 = new java.lang.IllegalArgumentException;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate declared field ");

        $stack11 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack15);

        throw $stack8;

     label2:
        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>($stack7, target, value);

        return;
    }

    public static void writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
    {
        java.lang.Object target, value;
        java.lang.String fieldName;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeDeclaredField(java.lang.Object,java.lang.String,java.lang.Object,boolean)>(target, fieldName, value, 0);

        return;
    }

    public static void writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field $stack7;
        java.lang.IllegalArgumentException $stack8, $stack16;
        java.lang.Object target, value;
        java.lang.Class $stack6;
        java.lang.StringBuilder $stack9, $stack10, $stack12, $stack13, $stack14;
        java.lang.String fieldName, $stack11, $stack15;
        boolean forceAccess;

        target := @parameter0: java.lang.Object;

        fieldName := @parameter1: java.lang.String;

        value := @parameter2: java.lang.Object;

        forceAccess := @parameter3: boolean;

        if target != null goto label1;

        $stack16 = new java.lang.IllegalArgumentException;

        specialinvoke $stack16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("target object must not be null");

        throw $stack16;

     label1:
        $stack6 = virtualinvoke target.<java.lang.Object: java.lang.Class getClass()>();

        $stack7 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>($stack6, fieldName, forceAccess);

        if $stack7 != null goto label2;

        $stack8 = new java.lang.IllegalArgumentException;

        $stack9 = new java.lang.StringBuilder;

        specialinvoke $stack9.<java.lang.StringBuilder: void <init>()>();

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot locate declared field ");

        $stack11 = virtualinvoke $stack6.<java.lang.Class: java.lang.String getName()>();

        $stack12 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack11);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $stack8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack15);

        throw $stack8;

     label2:
        staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>($stack7, target, value);

        return;
    }
}
