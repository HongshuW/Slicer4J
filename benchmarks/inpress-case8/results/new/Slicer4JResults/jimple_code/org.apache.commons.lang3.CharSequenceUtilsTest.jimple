public class org.apache.commons.lang3.CharSequenceUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.CharSequenceUtilsTest this;

        this := @this: org.apache.commons.lang3.CharSequenceUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructor()
    {
        org.apache.commons.lang3.CharSequenceUtilsTest this;
        long $stack6;
        java.lang.reflect.Constructor $stack7;
        org.apache.commons.lang3.CharSequenceUtils $stack2;
        java.lang.reflect.Constructor[] $stack4;
        int $stack5, $stack8, $stack11, $stack14;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.CharSequenceUtilsTest;

        $stack2 = new org.apache.commons.lang3.CharSequenceUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.CharSequenceUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/CharSequenceUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/CharSequenceUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/CharSequenceUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testSubSequence()
    {
        org.apache.commons.lang3.CharSequenceUtilsTest this;
        java.lang.IndexOutOfBoundsException $stack34, $stack35;
        int $i0, $i1;
        java.lang.String $stack23, $stack25, $stack31, $stack33;
        java.lang.CharSequence $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack27;
        java.lang.StringBuilder $stack21, $stack24, $stack29, $stack32, $u0, $u1;
        java.lang.Class $stack22, $stack30;

        this := @this: org.apache.commons.lang3.CharSequenceUtilsTest;

        $i0 = (int) -1;

        $stack3 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>(null, $i0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack3);

        $stack5 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>(null, 0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>(null, 1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack7);

        $stack9 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>("", 0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>("012", 0);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("012", $stack11);

        $stack13 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>("012", 1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("12", $stack13);

        $stack15 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>("012", 2);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("2", $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>("012", 3);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack17);

     label1:
        $i1 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>("", $i1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack19);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack21 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $stack22 = class "Ljava/lang/IndexOutOfBoundsException;";

        $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getName()>();

        $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23);

        $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($stack25);

     label2:
        goto label4;

     label3:
        $stack35 := @caughtexception;

     label4:
        $stack27 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: java.lang.CharSequence subSequence(java.lang.CharSequence,int)>("", 1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack27);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack29 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $stack30 = class "Ljava/lang/IndexOutOfBoundsException;";

        $stack31 = virtualinvoke $stack30.<java.lang.Class: java.lang.String getName()>();

        $stack32 = virtualinvoke $stack29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack31);

        $stack33 = virtualinvoke $stack32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($stack33);

     label5:
        goto label7;

     label6:
        $stack34 := @caughtexception;

     label7:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }
}
