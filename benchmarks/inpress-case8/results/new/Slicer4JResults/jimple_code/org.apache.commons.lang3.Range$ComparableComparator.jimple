final enum class org.apache.commons.lang3.Range$ComparableComparator extends java.lang.Enum implements java.util.Comparator
{
    public static final enum org.apache.commons.lang3.Range$ComparableComparator INSTANCE;
    private static final org.apache.commons.lang3.Range$ComparableComparator[] $VALUES;

    public static org.apache.commons.lang3.Range$ComparableComparator[] values()
    {
        org.apache.commons.lang3.Range$ComparableComparator[] $stack0, $stack2;
        java.lang.Object $stack1;

        $stack0 = <org.apache.commons.lang3.Range$ComparableComparator: org.apache.commons.lang3.Range$ComparableComparator[] $VALUES>;

        $stack1 = virtualinvoke $stack0.<java.lang.Object: java.lang.Object clone()>();

        $stack2 = (org.apache.commons.lang3.Range$ComparableComparator[]) $stack1;

        return $stack2;
    }

    public static org.apache.commons.lang3.Range$ComparableComparator valueOf(java.lang.String)
    {
        org.apache.commons.lang3.Range$ComparableComparator $stack2;
        java.lang.String name;
        java.lang.Enum $stack1;

        name := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/commons/lang3/Range$ComparableComparator;", name);

        $stack2 = (org.apache.commons.lang3.Range$ComparableComparator) $stack1;

        return $stack2;
    }

    private void <init>(java.lang.String, int)
    {
        int l2;
        org.apache.commons.lang3.Range$ComparableComparator this;
        java.lang.String l1;

        this := @this: org.apache.commons.lang3.Range$ComparableComparator;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        int $stack4;
        java.lang.Object obj1, obj2;
        java.lang.Comparable $stack3;
        org.apache.commons.lang3.Range$ComparableComparator this;

        this := @this: org.apache.commons.lang3.Range$ComparableComparator;

        obj1 := @parameter0: java.lang.Object;

        obj2 := @parameter1: java.lang.Object;

        $stack3 = (java.lang.Comparable) obj1;

        $stack4 = interfaceinvoke $stack3.<java.lang.Comparable: int compareTo(java.lang.Object)>(obj2);

        return $stack4;
    }

    static void <clinit>()
    {
        org.apache.commons.lang3.Range$ComparableComparator[] $stack1;
        org.apache.commons.lang3.Range$ComparableComparator $stack0, $stack2;

        $stack0 = new org.apache.commons.lang3.Range$ComparableComparator;

        specialinvoke $stack0.<org.apache.commons.lang3.Range$ComparableComparator: void <init>(java.lang.String,int)>("INSTANCE", 0);

        <org.apache.commons.lang3.Range$ComparableComparator: org.apache.commons.lang3.Range$ComparableComparator INSTANCE> = $stack0;

        $stack1 = newarray (org.apache.commons.lang3.Range$ComparableComparator)[1];

        $stack2 = <org.apache.commons.lang3.Range$ComparableComparator: org.apache.commons.lang3.Range$ComparableComparator INSTANCE>;

        $stack1[0] = $stack2;

        <org.apache.commons.lang3.Range$ComparableComparator: org.apache.commons.lang3.Range$ComparableComparator[] $VALUES> = $stack1;

        return;
    }
}
