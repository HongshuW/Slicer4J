public class org.apache.commons.lang3.math.FractionTest extends java.lang.Object
{
    private static final int SKIP;

    public void <init>()
    {
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstants()
    {
        org.apache.commons.lang3.math.Fraction $stack1, $stack5, $stack9, $stack13, $stack17, $stack21, $stack25, $stack29, $stack33, $stack37, $stack41, $stack45, $stack49, $stack53, $stack57, $stack61, $stack65, $stack69, $stack73, $stack77, $stack81, $stack85, $stack89, $stack93;
        long $stack4, $stack8, $stack12, $stack16, $stack20, $stack24, $stack28, $stack32, $stack36, $stack40, $stack44, $stack48, $stack52, $stack56, $stack60, $stack64, $stack68, $stack72, $stack76, $stack80, $stack84, $stack88, $stack92, $stack96;
        int $stack3, $stack7, $stack11, $stack15, $stack19, $stack23, $stack27, $stack31, $stack35, $stack39, $stack43, $stack47, $stack51, $stack55, $stack59, $stack63, $stack67, $stack71, $stack75, $stack79, $stack83, $stack87, $stack91, $stack95;
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack1 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack4);

        $stack5 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

        $stack7 = virtualinvoke $stack5.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack8);

        $stack9 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack11 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack12);

        $stack13 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack15 = virtualinvoke $stack13.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack16);

        $stack17 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_HALF>;

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack21 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_HALF>;

        $stack23 = virtualinvoke $stack21.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack24);

        $stack25 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_THIRD>;

        $stack27 = virtualinvoke $stack25.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack28);

        $stack29 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_THIRD>;

        $stack31 = virtualinvoke $stack29.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack32);

        $stack33 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_THIRDS>;

        $stack35 = virtualinvoke $stack33.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack36);

        $stack37 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_THIRDS>;

        $stack39 = virtualinvoke $stack37.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack40);

        $stack41 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_QUARTER>;

        $stack43 = virtualinvoke $stack41.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack44);

        $stack45 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_QUARTER>;

        $stack47 = virtualinvoke $stack45.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack48);

        $stack49 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_QUARTERS>;

        $stack51 = virtualinvoke $stack49.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack52 = (long) $stack51;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack52);

        $stack53 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_QUARTERS>;

        $stack55 = virtualinvoke $stack53.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack56 = (long) $stack55;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack56);

        $stack57 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction THREE_QUARTERS>;

        $stack59 = virtualinvoke $stack57.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack60 = (long) $stack59;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack60);

        $stack61 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction THREE_QUARTERS>;

        $stack63 = virtualinvoke $stack61.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack64);

        $stack65 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_FIFTH>;

        $stack67 = virtualinvoke $stack65.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack68 = (long) $stack67;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack68);

        $stack69 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_FIFTH>;

        $stack71 = virtualinvoke $stack69.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack72 = (long) $stack71;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack72);

        $stack73 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_FIFTHS>;

        $stack75 = virtualinvoke $stack73.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack76 = (long) $stack75;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack76);

        $stack77 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction TWO_FIFTHS>;

        $stack79 = virtualinvoke $stack77.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack80 = (long) $stack79;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack80);

        $stack81 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction THREE_FIFTHS>;

        $stack83 = virtualinvoke $stack81.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack84 = (long) $stack83;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack84);

        $stack85 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction THREE_FIFTHS>;

        $stack87 = virtualinvoke $stack85.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack88 = (long) $stack87;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack88);

        $stack89 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction FOUR_FIFTHS>;

        $stack91 = virtualinvoke $stack89.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack92 = (long) $stack91;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack92);

        $stack93 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction FOUR_FIFTHS>;

        $stack95 = virtualinvoke $stack93.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack96 = (long) $stack95;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack96);

        return;
    }

    public void testFactory_int_int()
    {
        java.lang.ArithmeticException $stack71, $stack72, $stack76, $stack80, $stack84;
        org.apache.commons.lang3.math.Fraction $stack3, $stack10, $stack17, $stack24, $stack31, $stack38, $stack45, $stack52, $stack59;
        long $stack6, $stack9, $stack13, $stack16, $stack20, $stack23, $stack27, $stack30, $stack34, $stack37, $stack41, $stack44, $stack48, $stack51, $stack55, $stack58, $stack62, $stack65;
        int $stack5, $stack8, $stack12, $stack15, $stack19, $stack22, $stack26, $stack29, $stack33, $stack36, $stack40, $stack43, $stack47, $stack50, $stack54, $stack57, $stack61, $stack64, $i0, $i1, $i2, $i3, $i4;
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 1);

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 2);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 1);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 1);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(23, 345);

        $stack33 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $stack34);

        $stack36 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(345L, $stack37);

        $stack38 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(22, 7);

        $stack40 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(22L, $stack41);

        $stack43 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack44);

        $i0 = (int) -6;

        $stack45 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 10);

        $stack47 = virtualinvoke $stack45.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-6L, $stack48);

        $stack50 = virtualinvoke $stack45.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack51 = (long) $stack50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack51);

        $i1 = (int) -10;

        $stack52 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, $i1);

        $stack54 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-6L, $stack55);

        $stack57 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack58);

        $i2 = (int) -6;

        $i3 = (int) -10;

        $stack59 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i2, $i3);

        $stack61 = virtualinvoke $stack59.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack62 = (long) $stack61;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack62);

        $stack64 = virtualinvoke $stack59.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack65 = (long) $stack64;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack65);

     label01:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label02:
        goto label04;

     label03:
        $stack84 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label05:
        goto label07;

     label06:
        $stack80 := @caughtexception;

     label07:
        $i4 = (int) -3;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i4, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label08:
        goto label10;

     label09:
        $stack76 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(4, -2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label11:
        goto label13;

     label12:
        $stack72 := @caughtexception;

     label13:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, -2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label14:
        goto label16;

     label15:
        $stack71 := @caughtexception;

     label16:
        return;

        catch java.lang.ArithmeticException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label04 to label05 with label06;
        catch java.lang.ArithmeticException from label07 to label08 with label09;
        catch java.lang.ArithmeticException from label10 to label11 with label12;
        catch java.lang.ArithmeticException from label13 to label14 with label15;
    }

    public void testFactory_int_int_int()
    {
        java.lang.ArithmeticException $stack59, $stack60, $stack65, $stack70, $stack80, $stack85, $stack90, $stack95, $stack100, $stack105, $stack110, $stack115, $stack125, $stack130;
        org.apache.commons.lang3.math.Fraction $stack3, $stack10, $stack17, $stack24, $stack34, $stack49;
        long $stack6, $stack9, $stack13, $stack16, $stack20, $stack23, $stack27, $stack30, $stack37, $stack40, $stack52, $stack55;
        int $stack5, $stack8, $stack12, $stack15, $stack19, $stack22, $stack26, $stack29, $stack36, $stack39, $stack51, $stack54, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(0, 0, 2);

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(2, 0, 2);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(0, 1, 2);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(1, 1, 2);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack30);

     label01:
        $i0 = (int) -6;

        $i1 = (int) -10;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(1, $i0, $i1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label02:
        goto label04;

     label03:
        $stack130 := @caughtexception;

     label04:
        $i2 = (int) -6;

        $i3 = (int) -10;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(1, $i2, $i3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label05:
        goto label07;

     label06:
        $stack125 := @caughtexception;

     label07:
        $i4 = (int) -6;

        $i5 = (int) -10;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(1, $i4, $i5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label08:
        goto label10;

     label09:
        $stack115 := @caughtexception;

     label10:
        $i6 = (int) -1;

        $stack34 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i6, 6, 10);

        $stack36 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-16L, $stack37);

        $stack39 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack40);

     label11:
        $i7 = (int) -1;

        $i8 = (int) -6;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i7, $i8, 10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label12:
        goto label14;

     label13:
        $stack110 := @caughtexception;

     label14:
        $i9 = (int) -1;

        $i10 = (int) -10;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i9, 6, $i10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label15:
        goto label17;

     label16:
        $stack105 := @caughtexception;

     label17:
        $i11 = (int) -1;

        $i12 = (int) -6;

        $i13 = (int) -10;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i11, $i12, $i13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label18:
        goto label20;

     label19:
        $stack100 := @caughtexception;

     label20:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(0, 1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label21:
        goto label23;

     label22:
        $stack95 := @caughtexception;

     label23:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(1, 2, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label24:
        goto label26;

     label25:
        $stack90 := @caughtexception;

     label26:
        $i14 = (int) -1;

        $i15 = (int) -3;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i14, $i15, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label27:
        goto label29;

     label28:
        $stack85 := @caughtexception;

     label29:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(2147483647, 1, 2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label30:
        goto label32;

     label31:
        $stack80 := @caughtexception;

     label32:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(-2147483647, 1, 2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label33:
        goto label35;

     label34:
        $stack70 := @caughtexception;

     label35:
        $i16 = (int) -1;

        $stack49 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i16, 0, 2147483647);

        $stack51 = virtualinvoke $stack49.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack52 = (long) $stack51;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483647L, $stack52);

        $stack54 = virtualinvoke $stack49.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $stack55);

     label36:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(0, 4, -2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label37:
        goto label39;

     label38:
        $stack65 := @caughtexception;

     label39:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(1, 1, 2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label40:
        goto label42;

     label41:
        $stack60 := @caughtexception;

     label42:
        $i17 = (int) -1;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i17, 2, 2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label43:
        goto label45;

     label44:
        $stack59 := @caughtexception;

     label45:
        return;

        catch java.lang.ArithmeticException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label04 to label05 with label06;
        catch java.lang.ArithmeticException from label07 to label08 with label09;
        catch java.lang.ArithmeticException from label11 to label12 with label13;
        catch java.lang.ArithmeticException from label14 to label15 with label16;
        catch java.lang.ArithmeticException from label17 to label18 with label19;
        catch java.lang.ArithmeticException from label20 to label21 with label22;
        catch java.lang.ArithmeticException from label23 to label24 with label25;
        catch java.lang.ArithmeticException from label26 to label27 with label28;
        catch java.lang.ArithmeticException from label29 to label30 with label31;
        catch java.lang.ArithmeticException from label32 to label33 with label34;
        catch java.lang.ArithmeticException from label36 to label37 with label38;
        catch java.lang.ArithmeticException from label39 to label40 with label41;
        catch java.lang.ArithmeticException from label42 to label43 with label44;
    }

    public void testReducedFactory_int_int()
    {
        java.lang.ArithmeticException $stack105, $stack110, $stack138, $stack142;
        org.apache.commons.lang3.math.Fraction $stack3, $stack10, $stack17, $stack24, $stack31, $stack38, $stack45, $stack55, $stack62, $stack69, $stack76, $stack83, $stack90, $stack98;
        long $stack6, $stack9, $stack13, $stack16, $stack20, $stack23, $stack27, $stack30, $stack34, $stack37, $stack41, $stack44, $stack48, $stack51, $stack58, $stack61, $stack65, $stack68, $stack72, $stack75, $stack79, $stack82, $stack86, $stack89, $stack93, $stack96, $stack101, $stack104;
        int $stack5, $stack8, $stack12, $stack15, $stack19, $stack22, $stack26, $stack29, $stack33, $stack36, $stack40, $stack43, $stack47, $stack50, $stack57, $stack60, $stack64, $stack67, $stack71, $stack74, $stack78, $stack81, $stack85, $stack88, $stack92, $stack95, $stack100, $stack103, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(0, 1);

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(1, 1);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(2, 1);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack20);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(22, 7);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(22L, $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack30);

        $i0 = (int) -6;

        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>($i0, 10);

        $stack33 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-3L, $stack34);

        $stack36 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack37);

        $i1 = (int) -10;

        $stack38 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(6, $i1);

        $stack40 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-3L, $stack41);

        $stack43 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack44);

        $i2 = (int) -6;

        $i3 = (int) -10;

        $stack45 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>($i2, $i3);

        $stack47 = virtualinvoke $stack45.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack48);

        $stack50 = virtualinvoke $stack45.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack51 = (long) $stack50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack51);

     label01:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label02:
        goto label04;

     label03:
        $stack142 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(2, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label05:
        goto label07;

     label06:
        $stack138 := @caughtexception;

     label07:
        $i4 = (int) -3;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>($i4, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label08:
        goto label10;

     label09:
        $stack110 := @caughtexception;

     label10:
        $stack55 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(0, 2);

        $stack57 = virtualinvoke $stack55.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack58);

        $stack60 = virtualinvoke $stack55.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack61 = (long) $stack60;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack61);

        $stack62 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(2, 2);

        $stack64 = virtualinvoke $stack62.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack65 = (long) $stack64;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack65);

        $stack67 = virtualinvoke $stack62.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack68 = (long) $stack67;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack68);

        $stack69 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(2, 4);

        $stack71 = virtualinvoke $stack69.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack72 = (long) $stack71;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack72);

        $stack74 = virtualinvoke $stack69.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack75 = (long) $stack74;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack75);

        $stack76 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(15, 10);

        $stack78 = virtualinvoke $stack76.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack79 = (long) $stack78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack79);

        $stack81 = virtualinvoke $stack76.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack82 = (long) $stack81;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack82);

        $stack83 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(121, 22);

        $stack85 = virtualinvoke $stack83.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack86 = (long) $stack85;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $stack86);

        $stack88 = virtualinvoke $stack83.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack89 = (long) $stack88;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack89);

        $i5 = (int) -2;

        $stack90 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>($i5, -2147483648);

        $stack92 = virtualinvoke $stack90.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack93 = (long) $stack92;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack93);

        $stack95 = virtualinvoke $stack90.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack96 = (long) $stack95;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1073741824L, $stack96);

     label11:
        $i6 = (int) -7;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>($i6, -2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting ArithmeticException");

     label12:
        goto label14;

     label13:
        $stack105 := @caughtexception;

     label14:
        $stack98 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(-2147483648, 2);

        $stack100 = virtualinvoke $stack98.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack101 = (long) $stack100;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1073741824L, $stack101);

        $stack103 = virtualinvoke $stack98.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack104 = (long) $stack103;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack104);

        return;

        catch java.lang.ArithmeticException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label04 to label05 with label06;
        catch java.lang.ArithmeticException from label07 to label08 with label09;
        catch java.lang.ArithmeticException from label11 to label12 with label13;
    }

    public void testFactory_double()
    {
        java.lang.ArithmeticException $stack93, $stack100, $stack107, $stack131, $stack134, $stack137;
        java.lang.StringBuilder $stack94, $stack96, $stack97, $stack98, $stack101, $stack103, $stack104, $stack105;
        org.apache.commons.lang3.math.Fraction $stack10, $stack17, $stack24, $stack31, $stack38, $stack45, $stack52, $stack64, $stack65, $stack81, $stack82;
        long $stack13, $stack16, $stack20, $stack23, $stack27, $stack30, $stack34, $stack37, $stack41, $stack44, $stack48, $stack51, $stack55, $stack58, $stack67, $stack69, $stack71, $stack73, $stack84, $stack86, $stack88, $stack90;
        java.lang.String $stack99, $stack106;
        int $stack12, $stack15, $stack19, $stack22, $stack26, $stack29, $stack33, $stack36, $stack40, $stack43, $stack47, $stack50, $stack54, $stack57, $stack66, $stack68, $stack70, $stack72, $stack83, $stack85, $stack87, $stack89, i, j;
        double $stack61, $stack62, $stack63, $stack78, $stack79, $stack80;
        java.io.PrintStream $stack95, $stack102;
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

     label01:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(#NaN);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label02:
        goto label04;

     label03:
        $stack137 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(#Infinity);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label05:
        goto label07;

     label06:
        $stack134 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(#-Infinity);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label08:
        goto label10;

     label09:
        $stack131 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(2.147483648E9);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label11:
        goto label13;

     label12:
        $stack107 := @caughtexception;

     label13:
        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(0.0);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(1.0);

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(0.5);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(-0.875);

        $stack33 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-7L, $stack34);

        $stack36 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $stack37);

        $stack38 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(1.25);

        $stack40 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack41);

        $stack43 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack44);

        $stack45 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(0.66666);

        $stack47 = virtualinvoke $stack45.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack48);

        $stack50 = virtualinvoke $stack45.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack51 = (long) $stack50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack51);

        $stack52 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(9.999000099990002E-5);

        $stack54 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack55);

        $stack57 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack58);

        i = 1;

     label14:
        if i > 100 goto label21;

        j = 1;

     label15:
        if j > i goto label20;

     label16:
        $stack79 = (double) j;

        $stack78 = (double) i;

        $stack80 = $stack79 / $stack78;

        $stack81 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>($stack80);

     label17:
        goto label19;

     label18:
        $stack100 := @caughtexception;

        $stack102 = <java.lang.System: java.io.PrintStream err>;

        $stack101 = new java.lang.StringBuilder;

        specialinvoke $stack101.<java.lang.StringBuilder: void <init>()>();

        $stack103 = virtualinvoke $stack101.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(j);

        $stack104 = virtualinvoke $stack103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack105 = virtualinvoke $stack104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack106 = virtualinvoke $stack105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack102.<java.io.PrintStream: void println(java.lang.String)>($stack106);

        throw $stack100;

     label19:
        $stack82 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(j, i);

        $stack83 = virtualinvoke $stack82.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack84 = (long) $stack83;

        $stack85 = virtualinvoke $stack81.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack86 = (long) $stack85;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack84, $stack86);

        $stack87 = virtualinvoke $stack82.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack88 = (long) $stack87;

        $stack89 = virtualinvoke $stack81.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack90 = (long) $stack89;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack88, $stack90);

        j = j + 1;

        goto label15;

     label20:
        i = i + 1;

        goto label14;

     label21:
        i = 1001;

     label22:
        if i > 10000 goto label29;

        j = 1;

     label23:
        if j > i goto label28;

     label24:
        $stack62 = (double) j;

        $stack61 = (double) i;

        $stack63 = $stack62 / $stack61;

        $stack64 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>($stack63);

     label25:
        goto label27;

     label26:
        $stack93 := @caughtexception;

        $stack95 = <java.lang.System: java.io.PrintStream err>;

        $stack94 = new java.lang.StringBuilder;

        specialinvoke $stack94.<java.lang.StringBuilder: void <init>()>();

        $stack96 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(j);

        $stack97 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $stack98 = virtualinvoke $stack97.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i);

        $stack99 = virtualinvoke $stack98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack95.<java.io.PrintStream: void println(java.lang.String)>($stack99);

        throw $stack93;

     label27:
        $stack65 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getReducedFraction(int,int)>(j, i);

        $stack66 = virtualinvoke $stack65.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack67 = (long) $stack66;

        $stack68 = virtualinvoke $stack64.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack69 = (long) $stack68;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack67, $stack69);

        $stack70 = virtualinvoke $stack65.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack71 = (long) $stack70;

        $stack72 = virtualinvoke $stack64.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack73 = (long) $stack72;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack71, $stack73);

        j = j + 1;

        goto label23;

     label28:
        i = i + 500;

        goto label22;

     label29:
        return;

        catch java.lang.ArithmeticException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label04 to label05 with label06;
        catch java.lang.ArithmeticException from label07 to label08 with label09;
        catch java.lang.ArithmeticException from label10 to label11 with label12;
        catch java.lang.ArithmeticException from label16 to label17 with label18;
        catch java.lang.ArithmeticException from label24 to label25 with label26;
    }

    public void testFactory_String()
    {
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>(null);

        return;
    }

    public void testFactory_String_double()
    {
        long $stack6, $stack9, $stack13, $stack16, $stack20, $stack23, $stack27, $stack30;
        int $stack5, $stack8, $stack12, $stack15, $stack19, $stack22, $stack26, $stack29;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.NumberFormatException $stack34, $stack35, $stack38;
        org.apache.commons.lang3.math.Fraction $stack3, $stack10, $stack17, $stack24;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("0.0");

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("0.2");

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("0.5");

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("0.66666");

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack30);

     label01:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2.3R");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NumberFormatException");

     label02:
        goto label04;

     label03:
        $stack38 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2147483648");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NumberFormatException");

     label05:
        goto label07;

     label06:
        $stack35 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>(".");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting NumberFormatException");

     label08:
        goto label10;

     label09:
        $stack34 := @caughtexception;

     label10:
        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
    }

    public void testFactory_String_proper()
    {
        org.apache.commons.lang3.math.Fraction $stack3, $stack10, $stack17, $stack24, $stack31, $stack38;
        long $stack6, $stack9, $stack13, $stack16, $stack20, $stack23, $stack27, $stack30, $stack34, $stack37, $stack41, $stack44;
        int $stack5, $stack8, $stack12, $stack15, $stack19, $stack22, $stack26, $stack29, $stack33, $stack36, $stack40, $stack43;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.NumberFormatException $stack51, $stack52, $stack55, $stack58, $stack61, $stack64;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("0 0/1");

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("1 1/5");

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("7 1/2");

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(15L, $stack20);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("1 2/4");

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("-7 1/2");

        $stack33 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-15L, $stack34);

        $stack36 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack37);

        $stack38 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("-1 2/4");

        $stack40 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-6L, $stack41);

        $stack43 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack44);

     label01:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2 3");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label02:
        goto label04;

     label03:
        $stack64 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("a 3");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label05:
        goto label07;

     label06:
        $stack61 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2 b/4");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label08:
        goto label10;

     label09:
        $stack58 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2 ");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label11:
        goto label13;

     label12:
        $stack55 := @caughtexception;

     label13:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>(" 3");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label14:
        goto label16;

     label15:
        $stack52 := @caughtexception;

     label16:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>(" ");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label17:
        goto label19;

     label18:
        $stack51 := @caughtexception;

     label19:
        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.NumberFormatException from label10 to label11 with label12;
        catch java.lang.NumberFormatException from label13 to label14 with label15;
        catch java.lang.NumberFormatException from label16 to label17 with label18;
    }

    public void testFactory_String_improper()
    {
        org.apache.commons.lang3.math.Fraction $stack3, $stack10, $stack17, $stack24, $stack31, $stack38;
        long $stack6, $stack9, $stack13, $stack16, $stack20, $stack23, $stack27, $stack30, $stack34, $stack37, $stack41, $stack44;
        int $stack5, $stack8, $stack12, $stack15, $stack19, $stack22, $stack26, $stack29, $stack33, $stack36, $stack40, $stack43;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.NumberFormatException $stack49, $stack50, $stack53, $stack56;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("0/1");

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("1/5");

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("1/2");

        $stack19 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack20);

        $stack22 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2/3");

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack27);

        $stack29 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("7/3");

        $stack33 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack34);

        $stack36 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack37);

        $stack38 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2/4");

        $stack40 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack41);

        $stack43 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack44);

     label01:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2/d");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label02:
        goto label04;

     label03:
        $stack56 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2e/3");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label05:
        goto label07;

     label06:
        $stack53 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("2/");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label08:
        goto label10;

     label09:
        $stack50 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(java.lang.String)>("/");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NumberFormatException");

     label11:
        goto label13;

     label12:
        $stack49 := @caughtexception;

     label13:
        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.NumberFormatException from label10 to label11 with label12;
    }

    public void testGets()
    {
        long $stack5, $stack8, $stack11, $stack14, $stack18, $stack21, $stack24, $stack27, $stack31, $stack34, $stack37, $stack40;
        int $stack4, $stack7, $stack10, $stack13, $stack17, $stack20, $stack23, $stack26, $stack30, $stack33, $stack36, $stack39, $i0;
        org.apache.commons.lang3.math.FractionTest this;
        org.apache.commons.lang3.math.Fraction $stack2, $stack15, $stack28;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(3, 5, 6);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: int getProperWhole()>();

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack8);

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: int getProperNumerator()>();

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack11);

        $stack13 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack14);

        $i0 = (int) -3;

        $stack15 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i0, 5, 6);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-23L, $stack18);

        $stack20 = virtualinvoke $stack15.<org.apache.commons.lang3.math.Fraction: int getProperWhole()>();

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-3L, $stack21);

        $stack23 = virtualinvoke $stack15.<org.apache.commons.lang3.math.Fraction: int getProperNumerator()>();

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack24);

        $stack26 = virtualinvoke $stack15.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack27);

        $stack28 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(-2147483648, 0, 1);

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483648L, $stack31);

        $stack33 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getProperWhole()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483648L, $stack34);

        $stack36 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getProperNumerator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack37);

        $stack39 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack40);

        return;
    }

    public void testConversions()
    {
        org.apache.commons.lang3.math.FractionTest this;
        int $stack4;
        float $stack9;
        long $stack5, $stack7;
        org.apache.commons.lang3.math.Fraction $stack2;
        double $stack11;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(3, 7, 8);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: int intValue()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack7);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: float floatValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(3.875F, $stack9, 1.0E-5F);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.math.Fraction: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(3.875, $stack11, 1.0E-5);

        return;
    }

    public void testReduce()
    {
        org.apache.commons.lang3.math.Fraction $stack3, $stack4, $stack11, $stack12, $stack19, $stack20, $stack27, $stack28, $stack35, $stack36, $stack43, $stack44, $stack51, $stack52, $stack59, $stack60, $stack61;
        long $stack7, $stack10, $stack15, $stack18, $stack23, $stack26, $stack31, $stack34, $stack39, $stack42, $stack47, $stack50, $stack55, $stack58, $stack64, $stack67;
        int $stack6, $stack9, $stack14, $stack17, $stack22, $stack25, $stack30, $stack33, $stack38, $stack41, $stack46, $stack49, $stack54, $stack57, $stack63, $stack66, $i0, $i1, $i2, $i3;
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(50, 75);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack7);

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack10);

        $i0 = (int) -2;

        $i1 = (int) -3;

        $stack11 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, $i1);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack14 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack15);

        $stack17 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack18);

        $i2 = (int) -3;

        $stack19 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, $i2);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack22 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2L, $stack23);

        $stack25 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack26);

        $i3 = (int) -2;

        $stack27 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i3, 3);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2L, $stack31);

        $stack33 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack34);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack27, $stack28);

        $stack35 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 3);

        $stack36 = virtualinvoke $stack35.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack38 = virtualinvoke $stack36.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack39 = (long) $stack38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack39);

        $stack41 = virtualinvoke $stack36.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack42 = (long) $stack41;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack42);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack35, $stack36);

        $stack43 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 1);

        $stack44 = virtualinvoke $stack43.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack46 = virtualinvoke $stack44.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack47 = (long) $stack46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack47);

        $stack49 = virtualinvoke $stack44.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack50 = (long) $stack49;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack50);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack43, $stack44);

        $stack51 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 100);

        $stack52 = virtualinvoke $stack51.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack54 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack55);

        $stack57 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack58);

        $stack59 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack52, $stack59);

        $stack60 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 2);

        $stack61 = virtualinvoke $stack60.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction reduce()>();

        $stack63 = virtualinvoke $stack61.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1073741824L, $stack64);

        $stack66 = virtualinvoke $stack61.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack67 = (long) $stack66;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack67);

        return;
    }

    public void testInvert()
    {
        long $stack7, $stack10, $stack15, $stack18, $stack23, $stack26, $stack35, $stack38;
        int $stack6, $stack9, $stack14, $stack17, $stack22, $stack25, $stack34, $stack37, $i0;
        java.lang.ArithmeticException $stack39, $stack45;
        org.apache.commons.lang3.math.FractionTest this;
        org.apache.commons.lang3.math.Fraction $stack3, $stack4, $stack11, $stack12, $stack19, $stack20, $stack27, $stack29, $stack31, $stack32;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(50, 75);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(75L, $stack7);

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(50L, $stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(4, 3);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        $stack14 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack15);

        $stack17 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack18);

        $i0 = (int) -15;

        $stack19 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 47);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        $stack22 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-47L, $stack23);

        $stack25 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(15L, $stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 3);

     label1:
        virtualinvoke $stack27.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label2:
        goto label4;

     label3:
        $stack45 := @caughtexception;

     label4:
        $stack29 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 1);

     label5:
        virtualinvoke $stack29.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label6:
        goto label8;

     label7:
        $stack39 := @caughtexception;

     label8:
        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483647, 1);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        $stack34 = virtualinvoke $stack32.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack35);

        $stack37 = virtualinvoke $stack32.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack38 = (long) $stack37;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $stack38);

        return;

        catch java.lang.ArithmeticException from label1 to label2 with label3;
        catch java.lang.ArithmeticException from label5 to label6 with label7;
    }

    public void testNegate()
    {
        long $stack7, $stack10, $stack15, $stack18, $stack23, $stack26;
        int $stack6, $stack9, $stack14, $stack17, $stack22, $stack25, $i0;
        java.lang.ArithmeticException $stack29;
        org.apache.commons.lang3.math.FractionTest this;
        org.apache.commons.lang3.math.Fraction $stack3, $stack4, $stack11, $stack12, $stack19, $stack20, $stack27;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(50, 75);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-50L, $stack7);

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(75L, $stack10);

        $i0 = (int) -50;

        $stack11 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 75);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();

        $stack14 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(50L, $stack15);

        $stack17 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(75L, $stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483646, 2147483647);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();

        $stack22 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483646L, $stack23);

        $stack25 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 1);

     label1:
        virtualinvoke $stack27.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label2:
        goto label4;

     label3:
        $stack29 := @caughtexception;

     label4:
        return;

        catch java.lang.ArithmeticException from label1 to label2 with label3;
    }

    public void testAbs()
    {
        long $stack7, $stack10, $stack15, $stack18, $stack23, $stack26, $stack31, $stack34;
        int $stack6, $stack9, $stack14, $stack17, $stack22, $stack25, $stack30, $stack33, $i0, $i1;
        java.lang.ArithmeticException $stack37;
        org.apache.commons.lang3.math.FractionTest this;
        org.apache.commons.lang3.math.Fraction $stack3, $stack4, $stack11, $stack12, $stack19, $stack20, $stack27, $stack28, $stack35;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(50, 75);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction abs()>();

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(50L, $stack7);

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(75L, $stack10);

        $i0 = (int) -50;

        $stack11 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 75);

        $stack12 = virtualinvoke $stack11.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction abs()>();

        $stack14 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(50L, $stack15);

        $stack17 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(75L, $stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483647, 1);

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction abs()>();

        $stack22 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $stack23);

        $stack25 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack26);

        $i1 = (int) -1;

        $stack27 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483647, $i1);

        $stack28 = virtualinvoke $stack27.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction abs()>();

        $stack30 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $stack31);

        $stack33 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack34);

        $stack35 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 1);

     label1:
        virtualinvoke $stack35.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction abs()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label2:
        goto label4;

     label3:
        $stack37 := @caughtexception;

     label4:
        return;

        catch java.lang.ArithmeticException from label1 to label2 with label3;
    }

    public void testPow()
    {
        java.lang.ArithmeticException $stack133, $stack134, $stack140, $stack146, $stack169;
        org.apache.commons.lang3.math.Fraction $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack17, $stack18, $stack25, $stack26, $stack33, $stack34, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack49, $stack50, $stack57, $stack58, $stack65, $stack66, $stack73, $stack74, $stack81, $stack82, $stack83, $stack92, $stack93, $stack104, $stack105, $stack106, $stack107, $stack108, $stack109, $stack110, $stack111, $stack112, $stack113, $stack114, $stack115, $stack117, $stack119, f;
        long $stack13, $stack16, $stack21, $stack24, $stack29, $stack32, $stack37, $stack40, $stack53, $stack56, $stack61, $stack64, $stack69, $stack72, $stack77, $stack80, $stack88, $stack91, $stack98, $stack101;
        boolean $stack48, $stack127, $stack121;
        int $stack12, $stack15, $stack20, $stack23, $stack28, $stack31, $stack36, $stack39, $stack52, $stack55, $stack60, $stack63, $stack68, $stack71, $stack76, $stack79, $stack85, $stack87, $stack90, $stack95, $stack97, $stack100, $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.lang3.math.FractionTest this;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack4 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack6, $stack7);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(2);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack13);

        $stack15 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack18 = virtualinvoke $stack17.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(3);

        $stack20 = virtualinvoke $stack18.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(27L, $stack21);

        $stack23 = virtualinvoke $stack18.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(125L, $stack24);

        $stack25 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $i0 = (int) -1;

        $stack26 = virtualinvoke $stack25.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>($i0);

        $stack28 = virtualinvoke $stack26.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack29);

        $stack31 = virtualinvoke $stack26.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack32);

        $stack33 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $i1 = (int) -2;

        $stack34 = virtualinvoke $stack33.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>($i1);

        $stack36 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack37);

        $stack39 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack40);

        $stack41 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack42 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack43 = virtualinvoke $stack41.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack42, $stack43);

        $stack44 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack45 = virtualinvoke $stack44.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack44, $stack45);

        $stack46 = virtualinvoke $stack44.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(1);

        $stack47 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack48 = virtualinvoke $stack46.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack47);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack48);

        $stack49 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack50 = virtualinvoke $stack49.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(2);

        $stack52 = virtualinvoke $stack50.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack53 = (long) $stack52;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack53);

        $stack55 = virtualinvoke $stack50.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack56 = (long) $stack55;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack56);

        $stack57 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack58 = virtualinvoke $stack57.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(3);

        $stack60 = virtualinvoke $stack58.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack61 = (long) $stack60;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(27L, $stack61);

        $stack63 = virtualinvoke $stack58.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(125L, $stack64);

        $stack65 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $i2 = (int) -1;

        $stack66 = virtualinvoke $stack65.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>($i2);

        $stack68 = virtualinvoke $stack66.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack69 = (long) $stack68;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack69);

        $stack71 = virtualinvoke $stack66.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack72 = (long) $stack71;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack72);

        $stack73 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $i3 = (int) -2;

        $stack74 = virtualinvoke $stack73.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>($i3);

        $stack76 = virtualinvoke $stack74.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack77 = (long) $stack76;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack77);

        $stack79 = virtualinvoke $stack74.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack80 = (long) $stack79;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack80);

        $stack81 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 1231);

        $stack82 = virtualinvoke $stack81.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(1);

        $stack83 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

        $stack85 = virtualinvoke $stack82.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack83);

        if 0 != $stack85 goto label01;

        $stack127 = 1;

        goto label02;

     label01:
        $stack127 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack127);

        $stack87 = virtualinvoke $stack82.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack88 = (long) $stack87;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack88);

        $stack90 = virtualinvoke $stack82.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack91 = (long) $stack90;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1231L, $stack91);

        $stack92 = virtualinvoke $stack82.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(2);

        f = $stack92;

        $stack93 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

        $stack95 = virtualinvoke $stack92.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack93);

        if 0 != $stack95 goto label03;

        $stack121 = 1;

        goto label04;

     label03:
        $stack121 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack121);

        $stack97 = virtualinvoke $stack92.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack98 = (long) $stack97;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack98);

        $stack100 = virtualinvoke $stack92.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack101 = (long) $stack100;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack101);

     label05:
        $i4 = (int) -1;

        f = virtualinvoke $stack92.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>($i4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label06:
        goto label08;

     label07:
        $stack169 := @caughtexception;

     label08:
        virtualinvoke f.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label09:
        goto label11;

     label10:
        $stack146 := @caughtexception;

     label11:
        $stack104 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 1);

        $stack105 = virtualinvoke $stack104.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(0);

        $stack106 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack105, $stack106);

        $stack107 = virtualinvoke $stack105.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(1);

        $stack108 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack107, $stack108);

        $i5 = (int) -1;

        $stack109 = virtualinvoke $stack107.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>($i5);

        $stack110 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack109, $stack110);

        $stack111 = virtualinvoke $stack109.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(2147483647);

        $stack112 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack111, $stack112);

        $stack113 = virtualinvoke $stack111.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(-2147483648);

        $stack114 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack113, $stack114);

        $stack115 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483647, 1);

     label12:
        virtualinvoke $stack115.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label13:
        goto label15;

     label14:
        $stack140 := @caughtexception;

     label15:
        $stack117 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 1);

     label16:
        virtualinvoke $stack117.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label17:
        goto label19;

     label18:
        $stack134 := @caughtexception;

     label19:
        $stack119 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(65536, 1);

     label20:
        virtualinvoke $stack119.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction pow(int)>(2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label21:
        goto label23;

     label22:
        $stack133 := @caughtexception;

     label23:
        return;

        catch java.lang.ArithmeticException from label05 to label06 with label07;
        catch java.lang.ArithmeticException from label08 to label09 with label10;
        catch java.lang.ArithmeticException from label12 to label13 with label14;
        catch java.lang.ArithmeticException from label16 to label17 with label18;
        catch java.lang.ArithmeticException from label20 to label21 with label22;
    }

    public void testAdd()
    {
        java.lang.ArithmeticException $stack133, $stack134, $stack143, $stack149, $stack155;
        java.lang.StringBuilder $stack109, $stack111, $stack117, $stack119, $stack129, $stack131, $u0, $u1, $u2;
        org.apache.commons.lang3.math.Fraction $stack5, $stack6, $stack7, $stack14, $stack15, $stack16, $stack23, $stack24, $stack25, $stack32, $stack33, $stack34, $stack41, $stack42, $stack49, $stack50, $stack51, $stack58, $stack59, $stack60, $stack67, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, $stack81, $stack82, $stack83, $stack90, $stack91, $stack98, $stack99, $stack106, $stack107, $stack113, $stack114, $stack115, $stack121, $stack123, $stack125, $stack126, $stack127, $stack175, $stack182, f2;
        long $stack10, $stack13, $stack19, $stack22, $stack28, $stack31, $stack37, $stack40, $stack45, $stack48, $stack54, $stack57, $stack63, $stack66, $stack76, $stack79, $stack86, $stack89, $stack94, $stack97, $stack102, $stack105;
        java.lang.String $stack110, $stack112, $stack118, $stack120, $stack130, $stack132;
        int $stack9, $stack12, $stack18, $stack21, $stack27, $stack30, $stack36, $stack39, $stack44, $stack47, $stack53, $stack56, $stack62, $stack65, $stack75, $stack78, $stack85, $stack88, $stack93, $stack96, $stack101, $stack104, $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.IllegalArgumentException $stack164;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 5);

        $stack7 = virtualinvoke $stack5.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack6);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack10);

        $stack12 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 5);

        $stack16 = virtualinvoke $stack14.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack15);

        $stack18 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack19);

        $stack21 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack22);

        $stack23 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack25 = virtualinvoke $stack23.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack24);

        $stack27 = virtualinvoke $stack25.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack28);

        $stack30 = virtualinvoke $stack25.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack31);

        $stack32 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $i0 = (int) -4;

        $stack33 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 5);

        $stack34 = virtualinvoke $stack32.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack33);

        $stack36 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack37);

        $stack39 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack40);

        $stack41 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483646, 1);

        f2 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack42 = virtualinvoke $stack41.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>(f2);

        $stack44 = virtualinvoke $stack42.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack45 = (long) $stack44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $stack45);

        $stack47 = virtualinvoke $stack42.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack48);

        $stack49 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack50 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2);

        $stack51 = virtualinvoke $stack49.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack50);

        $stack53 = virtualinvoke $stack51.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack54 = (long) $stack53;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $stack54);

        $stack56 = virtualinvoke $stack51.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack57 = (long) $stack56;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack57);

        $stack58 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 8);

        $stack59 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 6);

        $stack60 = virtualinvoke $stack58.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack59);

        $stack62 = virtualinvoke $stack60.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack63 = (long) $stack62;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(13L, $stack63);

        $stack65 = virtualinvoke $stack60.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack66 = (long) $stack65;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(24L, $stack66);

        $stack67 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 5);

        $stack68 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 5);

        $stack69 = virtualinvoke $stack67.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack68);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack68, $stack69);

        $stack70 = virtualinvoke $stack68.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack67);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack68, $stack70);

        $i1 = (int) -1;

        $stack71 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i1, 676);

        $i2 = (int) -2;

        $stack72 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i2, 442);

        $stack73 = virtualinvoke $stack71.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack72);

        $stack75 = virtualinvoke $stack73.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack76 = (long) $stack75;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11492L, $stack76);

        $stack78 = virtualinvoke $stack73.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack79 = (long) $stack78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-69L, $stack79);

     label01:
        virtualinvoke $stack73.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label02:
        goto label04;

     label03:
        $stack164 := @caughtexception;

     label04:
        $stack81 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 98304);

        $i3 = (int) 59049;

        $stack82 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, $i3);

        $stack83 = virtualinvoke $stack81.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack82);

        $stack85 = virtualinvoke $stack83.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack86 = (long) $stack85;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(52451L, $stack86);

        $stack88 = virtualinvoke $stack83.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack89 = (long) $stack88;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1934917632L, $stack89);

        $stack90 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 3);

        $stack175 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_THIRD>;

        $stack91 = virtualinvoke $stack90.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack175);

        $stack93 = virtualinvoke $stack91.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack94 = (long) $stack93;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483647L, $stack94);

        $stack96 = virtualinvoke $stack91.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack97 = (long) $stack96;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack97);

        $stack98 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483646, 1);

        $stack182 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack99 = virtualinvoke $stack98.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack182);

        $stack101 = virtualinvoke $stack99.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack102 = (long) $stack101;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $stack102);

        $stack104 = virtualinvoke $stack99.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack105 = (long) $stack104;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack105);

     label05:
        $stack106 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack107 = virtualinvoke $stack99.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack106);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack109 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expecting ArithmeticException but got: ");

        $stack110 = virtualinvoke $stack107.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        $stack111 = virtualinvoke $stack109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack110);

        $stack112 = virtualinvoke $stack111.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack112);

     label06:
        goto label08;

     label07:
        $stack155 := @caughtexception;

     label08:
        $stack113 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 5);

        $i4 = (int) -1;

        $stack114 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i4, 5);

     label09:
        $stack115 = virtualinvoke $stack113.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack114);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack117 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expecting ArithmeticException but got: ");

        $stack118 = virtualinvoke $stack115.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        $stack119 = virtualinvoke $stack117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack118);

        $stack120 = virtualinvoke $stack119.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack120);

     label10:
        goto label12;

     label11:
        $stack149 := @caughtexception;

     label12:
        $stack121 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483647, 1);

        virtualinvoke $stack121.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack121);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label13:
        goto label15;

     label14:
        $stack143 := @caughtexception;

     label15:
        $stack123 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483647, 1);

        virtualinvoke $stack123.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack123);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label16:
        goto label18;

     label17:
        $stack134 := @caughtexception;

     label18:
        $stack125 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 327680);

        $i5 = (int) 59049;

        $stack126 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, $i5);

     label19:
        $stack127 = virtualinvoke $stack125.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction add(org.apache.commons.lang3.math.Fraction)>($stack126);

        $u2 = new java.lang.StringBuilder;

        specialinvoke $u2.<java.lang.StringBuilder: void <init>()>();

        $stack129 = virtualinvoke $u2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expecting ArithmeticException but got: ");

        $stack130 = virtualinvoke $stack127.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        $stack131 = virtualinvoke $stack129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack130);

        $stack132 = virtualinvoke $stack131.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack132);

     label20:
        goto label22;

     label21:
        $stack133 := @caughtexception;

     label22:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label05 to label06 with label07;
        catch java.lang.ArithmeticException from label09 to label10 with label11;
        catch java.lang.ArithmeticException from label12 to label13 with label14;
        catch java.lang.ArithmeticException from label15 to label16 with label17;
        catch java.lang.ArithmeticException from label19 to label20 with label21;
    }

    public void testSubtract()
    {
        java.lang.ArithmeticException $stack125, $stack126, $stack135, $stack140, $stack145;
        java.lang.StringBuilder $stack106, $stack108, $stack121, $stack123, $u0, $u1;
        org.apache.commons.lang3.math.Fraction $stack5, $stack6, $stack7, $stack14, $stack15, $stack16, $stack23, $stack24, $stack25, $stack32, $stack33, $stack34, $stack41, $stack42, $stack43, $stack50, $stack51, $stack52, $stack59, $stack60, $stack61, $stack68, $stack69, $stack70, $stack72, $stack73, $stack74, $stack81, $stack82, $stack83, $stack84, $stack91, $stack92, $stack99, $stack100, $stack102, $stack103, $stack104, $stack110, $stack111, $stack113, $stack114, $stack115, $stack117, $stack118, $stack119, $stack171;
        long $stack10, $stack13, $stack19, $stack22, $stack28, $stack31, $stack37, $stack40, $stack46, $stack49, $stack55, $stack58, $stack64, $stack67, $stack77, $stack80, $stack87, $stack90, $stack95, $stack98;
        java.lang.String $stack107, $stack109, $stack122, $stack124;
        int $stack9, $stack12, $stack18, $stack21, $stack27, $stack30, $stack36, $stack39, $stack45, $stack48, $stack54, $stack57, $stack63, $stack66, $stack76, $stack79, $stack86, $stack89, $stack94, $stack97, $i0, $i1, $i2, $i3;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.IllegalArgumentException $stack154;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 5);

        $stack7 = virtualinvoke $stack5.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack6);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack10);

        $stack12 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(7, 5);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 5);

        $stack16 = virtualinvoke $stack14.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack15);

        $stack18 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack19);

        $stack21 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack22);

        $stack23 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack25 = virtualinvoke $stack23.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack24);

        $stack27 = virtualinvoke $stack25.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack28);

        $stack30 = virtualinvoke $stack25.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack31);

        $stack32 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $i0 = (int) -4;

        $stack33 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 5);

        $stack34 = virtualinvoke $stack32.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack33);

        $stack36 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack37);

        $stack39 = virtualinvoke $stack34.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack40);

        $stack41 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 5);

        $stack42 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(4, 5);

        $stack43 = virtualinvoke $stack41.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack42);

        $stack45 = virtualinvoke $stack43.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack46 = (long) $stack45;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-4L, $stack46);

        $stack48 = virtualinvoke $stack43.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack49 = (long) $stack48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack49);

        $stack50 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 5);

        $i1 = (int) -4;

        $stack51 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i1, 5);

        $stack52 = virtualinvoke $stack50.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack51);

        $stack54 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack55);

        $stack57 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack58);

        $stack59 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack60 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2);

        $stack61 = virtualinvoke $stack59.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack60);

        $stack63 = virtualinvoke $stack61.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack64);

        $stack66 = virtualinvoke $stack61.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack67 = (long) $stack66;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack67);

        $stack68 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 5);

        $stack69 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 5);

        $stack70 = virtualinvoke $stack69.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack68);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack69, $stack70);

     label01:
        virtualinvoke $stack70.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label02:
        goto label04;

     label03:
        $stack154 := @caughtexception;

     label04:
        $stack72 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 98304);

        $i2 = (int) 59049;

        $stack73 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, $i2);

        $stack74 = virtualinvoke $stack72.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack73);

        $stack76 = virtualinvoke $stack74.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack77 = (long) $stack76;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-13085L, $stack77);

        $stack79 = virtualinvoke $stack74.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack80 = (long) $stack79;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1934917632L, $stack80);

        $stack81 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 3);

        $stack82 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE_THIRD>;

        $stack83 = virtualinvoke $stack82.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();

        $stack84 = virtualinvoke $stack81.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack83);

        $stack86 = virtualinvoke $stack84.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack87 = (long) $stack86;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483647L, $stack87);

        $stack89 = virtualinvoke $stack84.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack90 = (long) $stack89;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack90);

        $stack91 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483647, 1);

        $stack171 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack92 = virtualinvoke $stack91.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack171);

        $stack94 = virtualinvoke $stack92.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack95 = (long) $stack94;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483646L, $stack95);

        $stack97 = virtualinvoke $stack92.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack98 = (long) $stack97;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack98);

     label05:
        $stack99 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2147483647);

        $stack100 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2147483646);

        virtualinvoke $stack99.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack100);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label06:
        goto label08;

     label07:
        $stack145 := @caughtexception;

     label08:
        $stack102 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 5);

        $stack103 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 5);

     label09:
        $stack104 = virtualinvoke $stack102.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack103);

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack106 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expecting ArithmeticException but got: ");

        $stack107 = virtualinvoke $stack104.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        $stack108 = virtualinvoke $stack106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack107);

        $stack109 = virtualinvoke $stack108.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack109);

     label10:
        goto label12;

     label11:
        $stack140 := @caughtexception;

     label12:
        $stack110 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 1);

        $stack111 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        virtualinvoke $stack110.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack111);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label13:
        goto label15;

     label14:
        $stack135 := @caughtexception;

     label15:
        $stack113 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483647, 1);

        $stack114 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack115 = virtualinvoke $stack114.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction negate()>();

        virtualinvoke $stack113.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack115);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label16:
        goto label18;

     label17:
        $stack126 := @caughtexception;

     label18:
        $stack117 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 327680);

        $i3 = (int) 59049;

        $stack118 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, $i3);

     label19:
        $stack119 = virtualinvoke $stack117.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction subtract(org.apache.commons.lang3.math.Fraction)>($stack118);

        $u1 = new java.lang.StringBuilder;

        specialinvoke $u1.<java.lang.StringBuilder: void <init>()>();

        $stack121 = virtualinvoke $u1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expecting ArithmeticException but got: ");

        $stack122 = virtualinvoke $stack119.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        $stack123 = virtualinvoke $stack121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack122);

        $stack124 = virtualinvoke $stack123.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack124);

     label20:
        goto label22;

     label21:
        $stack125 := @caughtexception;

     label22:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label05 to label06 with label07;
        catch java.lang.ArithmeticException from label09 to label10 with label11;
        catch java.lang.ArithmeticException from label12 to label13 with label14;
        catch java.lang.ArithmeticException from label15 to label16 with label17;
        catch java.lang.ArithmeticException from label19 to label20 with label21;
    }

    public void testMultiply()
    {
        java.lang.ArithmeticException $stack74, $stack75;
        org.apache.commons.lang3.math.Fraction $stack5, $stack6, $stack7, $stack14, $stack15, $stack16, $stack23, $stack30, $stack31, $stack32, $stack39, $stack40, $stack41, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack60, $stack61, $stack62, $stack70, $stack72, f2;
        long $stack10, $stack13, $stack19, $stack22, $stack26, $stack29, $stack35, $stack38, $stack44, $stack47, $stack56, $stack59, $stack65, $stack68;
        int $stack9, $stack12, $stack18, $stack21, $stack25, $stack28, $stack34, $stack37, $stack43, $stack46, $stack55, $stack58, $stack64, $stack67, $i0, $i1, $i2;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.IllegalArgumentException $stack81;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 5);

        $stack7 = virtualinvoke $stack5.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack6);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack10);

        $stack12 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack16 = virtualinvoke $stack14.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack15);

        $stack18 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack19);

        $stack21 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack22);

        $stack23 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack15);

        $stack25 = virtualinvoke $stack23.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(27L, $stack26);

        $stack28 = virtualinvoke $stack23.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(125L, $stack29);

        $stack30 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $i0 = (int) -2;

        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 5);

        $stack32 = virtualinvoke $stack30.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack31);

        $stack34 = virtualinvoke $stack32.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-6L, $stack35);

        $stack37 = virtualinvoke $stack32.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack38 = (long) $stack37;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack38);

        $i1 = (int) -3;

        $stack39 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i1, 5);

        $i2 = (int) -2;

        $stack40 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i2, 5);

        $stack41 = virtualinvoke $stack39.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack40);

        $stack43 = virtualinvoke $stack41.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack44);

        $stack46 = virtualinvoke $stack41.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack47 = (long) $stack46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(25L, $stack47);

        $stack48 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 5);

        $stack49 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 7);

        $stack50 = virtualinvoke $stack48.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack49);

        $stack51 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack51, $stack50);

        $stack52 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 7);

        f2 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack53 = virtualinvoke $stack52.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>(f2);

        $stack55 = virtualinvoke $stack53.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack56 = (long) $stack55;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack56);

        $stack58 = virtualinvoke $stack53.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack59 = (long) $stack58;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack59);

        $stack60 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2147483647, 1);

        $stack61 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 2147483647);

        $stack62 = virtualinvoke $stack60.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack61);

        $stack64 = virtualinvoke $stack62.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack65 = (long) $stack64;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483648L, $stack65);

        $stack67 = virtualinvoke $stack62.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack68 = (long) $stack67;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack68);

     label01:
        virtualinvoke $stack62.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting IllegalArgumentException");

     label02:
        goto label04;

     label03:
        $stack81 := @caughtexception;

     label04:
        $stack70 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2147483647);

        virtualinvoke $stack70.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack70);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label05:
        goto label07;

     label06:
        $stack75 := @caughtexception;

     label07:
        $stack72 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, -2147483647);

        virtualinvoke $stack72.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction multiplyBy(org.apache.commons.lang3.math.Fraction)>($stack72);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label08:
        goto label10;

     label09:
        $stack74 := @caughtexception;

     label10:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label04 to label05 with label06;
        catch java.lang.ArithmeticException from label07 to label08 with label09;
    }

    public void testDivide()
    {
        java.lang.ArithmeticException $stack52, $stack53, $stack65;
        org.apache.commons.lang3.math.Fraction $stack5, $stack6, $stack7, $stack14, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack28, $stack29, $stack36, $stack37, $stack38, $stack46, $stack47, $stack49, $stack50, $stack75, f2;
        long $stack10, $stack13, $stack24, $stack27, $stack32, $stack35, $stack41, $stack44;
        int $stack9, $stack12, $stack23, $stack26, $stack31, $stack34, $stack40, $stack43;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.IllegalArgumentException $stack59;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 5);

        $stack7 = virtualinvoke $stack5.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>($stack6);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack10);

        $stack12 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        f2 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

     label01:
        virtualinvoke $stack14.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>(f2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label02:
        goto label04;

     label03:
        $stack65 := @caughtexception;

     label04:
        $stack16 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 5);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 7);

        $stack18 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>($stack17);

        $stack19 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ZERO>;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack19, $stack18);

        $stack20 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 7);

        $stack75 = <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction ONE>;

        $stack21 = virtualinvoke $stack20.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>($stack75);

        $stack23 = virtualinvoke $stack21.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack24);

        $stack26 = virtualinvoke $stack21.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $stack27);

        $stack28 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2147483647);

        $stack29 = virtualinvoke $stack28.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>($stack28);

        $stack31 = virtualinvoke $stack29.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack32);

        $stack34 = virtualinvoke $stack29.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack35);

        $stack36 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(-2147483648, 2147483647);

        $stack37 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2147483647);

        $stack38 = virtualinvoke $stack36.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>($stack37);

        $stack40 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getNumerator()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-2147483648L, $stack41);

        $stack43 = virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: int getDenominator()>();

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack44);

     label05:
        virtualinvoke $stack38.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IllegalArgumentException");

     label06:
        goto label08;

     label07:
        $stack59 := @caughtexception;

     label08:
        $stack46 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, 2147483647);

        $stack47 = virtualinvoke $stack46.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        virtualinvoke $stack46.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>($stack47);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label09:
        goto label11;

     label10:
        $stack53 := @caughtexception;

     label11:
        $stack49 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(1, -2147483647);

        $stack50 = virtualinvoke $stack49.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction invert()>();

        virtualinvoke $stack49.<org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction divideBy(org.apache.commons.lang3.math.Fraction)>($stack50);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting ArithmeticException");

     label12:
        goto label14;

     label13:
        $stack52 := @caughtexception;

     label14:
        return;

        catch java.lang.ArithmeticException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.ArithmeticException from label08 to label09 with label10;
        catch java.lang.ArithmeticException from label11 to label12 with label13;
    }

    public void testEquals()
    {
        java.lang.Integer $stack7;
        boolean $stack4, $stack6, $stack8, $stack11, $stack12, $stack13, $stack15, $stack17;
        org.apache.commons.lang3.math.FractionTest this;
        java.lang.Object $stack5;
        org.apache.commons.lang3.math.Fraction $stack3, $stack9, $stack10, $stack14, $stack16;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = new java.lang.Object;

        specialinvoke $stack5.<java.lang.Object: void <init>()>();

        $stack6 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 5);

        $stack11 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack15 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack17 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: boolean equals(java.lang.Object)>($stack16);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

        return;
    }

    public void testHashCode()
    {
        org.apache.commons.lang3.math.FractionTest this;
        int $stack5, $stack6, $stack8, $stack9, $stack11, $stack12;
        org.apache.commons.lang3.math.Fraction $stack3, $stack4, $stack7, $stack10;
        boolean $stack19, $stack14, $stack13;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int hashCode()>();

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int hashCode()>();

        if $stack5 != $stack6 goto label1;

        $stack19 = 1;

        goto label2;

     label1:
        $stack19 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        $stack7 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 5);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int hashCode()>();

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int hashCode()>();

        if $stack8 == $stack9 goto label3;

        $stack14 = 1;

        goto label4;

     label3:
        $stack14 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack11 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: int hashCode()>();

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int hashCode()>();

        if $stack11 == $stack12 goto label5;

        $stack13 = 1;

        goto label6;

     label5:
        $stack13 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        return;
    }

    public void testCompareTo()
    {
        java.lang.NullPointerException $stack63;
        int $stack5, $stack8, $stack9, $stack11, $stack12, $stack14, $stack15, $stack17, $stack18, $stack20, $stack21, $i0;
        boolean $stack59, $stack56, $stack51, $stack48, $stack43, $stack40, $stack35, $stack32, $stack26, $stack23, $stack22;
        org.apache.commons.lang3.math.FractionTest this;
        org.apache.commons.lang3.math.Fraction $stack4, $stack7, $stack10, $stack13, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack4);

        if $stack5 != 0 goto label01;

        $stack59 = 1;

        goto label02;

     label01:
        $stack59 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack59);

     label03:
        virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expecting NullPointerException");

     label04:
        goto label06;

     label05:
        $stack63 := @caughtexception;

     label06:
        $stack7 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 5);

        $stack8 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack7);

        if $stack8 <= 0 goto label07;

        $stack56 = 1;

        goto label08;

     label07:
        $stack56 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack56);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack7);

        if $stack9 != 0 goto label09;

        $stack51 = 1;

        goto label10;

     label09:
        $stack51 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(4, 5);

        $stack11 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack10);

        if $stack11 >= 0 goto label11;

        $stack48 = 1;

        goto label12;

     label11:
        $stack48 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack48);

        $stack12 = virtualinvoke $stack10.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack10);

        if $stack12 != 0 goto label13;

        $stack43 = 1;

        goto label14;

     label13:
        $stack43 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack43);

        $stack13 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack14 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack13);

        if $stack14 != 0 goto label15;

        $stack40 = 1;

        goto label16;

     label15:
        $stack40 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack40);

        $stack15 = virtualinvoke $stack13.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack13);

        if $stack15 != 0 goto label17;

        $stack35 = 1;

        goto label18;

     label17:
        $stack35 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack35);

        $stack16 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(6, 10);

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack16);

        if $stack17 != 0 goto label19;

        $stack32 = 1;

        goto label20;

     label19:
        $stack32 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack18 = virtualinvoke $stack16.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack16);

        if $stack18 != 0 goto label21;

        $stack26 = 1;

        goto label22;

     label21:
        $stack26 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $i0 = (int) -1;

        $stack19 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i0, 1, 2147483647);

        $stack20 = virtualinvoke $stack4.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack19);

        if $stack20 <= 0 goto label23;

        $stack23 = 1;

        goto label24;

     label23:
        $stack23 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack21 = virtualinvoke $stack19.<org.apache.commons.lang3.math.Fraction: int compareTo(org.apache.commons.lang3.math.Fraction)>($stack19);

        if $stack21 != 0 goto label25;

        $stack22 = 1;

        goto label26;

     label25:
        $stack22 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        return;

        catch java.lang.NullPointerException from label03 to label04 with label05;
    }

    public void testToString()
    {
        int $i0;
        java.lang.String $stack4, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23;
        org.apache.commons.lang3.math.FractionTest this;
        org.apache.commons.lang3.math.Fraction $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("3/5", $stack4);

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(7, 5);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("7/5", $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(4, 2);

        $stack11 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("4/2", $stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 2);

        $stack14 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("0/2", $stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 2);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("2/2", $stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(-2147483648, 0, 1);

        $stack20 = virtualinvoke $stack18.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-2147483648/1", $stack20);

        $i0 = (int) -1;

        $stack21 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i0, 1, 2147483647);

        $stack23 = virtualinvoke $stack21.<org.apache.commons.lang3.math.Fraction: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-2147483648/2147483647", $stack23);

        return;
    }

    public void testToProperString()
    {
        int $i0, $i1;
        java.lang.String $stack4, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32;
        org.apache.commons.lang3.math.FractionTest this;
        org.apache.commons.lang3.math.Fraction $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack31;

        this := @this: org.apache.commons.lang3.math.FractionTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(3, 5);

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("3/5", $stack4);

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(7, 5);

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1 2/5", $stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(14, 10);

        $stack11 = virtualinvoke $stack9.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1 4/10", $stack11);

        $stack12 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(4, 2);

        $stack14 = virtualinvoke $stack12.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("2", $stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(0, 2);

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("0", $stack17);

        $stack18 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>(2, 2);

        $stack20 = virtualinvoke $stack18.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1", $stack20);

        $i0 = (int) -7;

        $stack21 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int)>($i0, 5);

        $stack23 = virtualinvoke $stack21.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-1 2/5", $stack23);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>(-2147483648, 0, 1);

        $stack26 = virtualinvoke $stack24.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-2147483648", $stack26);

        $i1 = (int) -1;

        $stack27 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(int,int,int)>($i1, 1, 2147483647);

        $stack29 = virtualinvoke $stack27.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-1 1/2147483647", $stack29);

        $stack31 = staticinvoke <org.apache.commons.lang3.math.Fraction: org.apache.commons.lang3.math.Fraction getFraction(double)>(-1.0);

        $stack32 = virtualinvoke $stack31.<org.apache.commons.lang3.math.Fraction: java.lang.String toProperString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-1", $stack32);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang3.math.FractionTest: int SKIP> = 500;

        return;
    }
}
