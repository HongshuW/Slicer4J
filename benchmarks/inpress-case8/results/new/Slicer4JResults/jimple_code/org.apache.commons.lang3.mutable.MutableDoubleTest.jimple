public class org.apache.commons.lang3.mutable.MutableDoubleTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructors()
    {
        java.lang.Double $stack9;
        org.apache.commons.lang3.mutable.MutableDouble $stack1, $stack4, $stack7, $stack11, $stack12, $stack15;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        double $stack3, $stack6, $stack10, $stack14, $stack17;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack1 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack1.<org.apache.commons.lang3.mutable.MutableDouble: void <init>()>();

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.0, $stack3, 1.0E-4);

        $stack4 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.0, $stack6, 1.0E-4);

        $stack7 = new org.apache.commons.lang3.mutable.MutableDouble;

        $stack9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(java.lang.Number)>($stack9);

        $stack10 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $stack10, 1.0E-4);

        $stack11 = new org.apache.commons.lang3.mutable.MutableDouble;

        $stack12 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack12.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(3.0);

        specialinvoke $stack11.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(java.lang.Number)>($stack12);

        $stack14 = virtualinvoke $stack11.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(3.0, $stack14, 1.0E-4);

        $stack15 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack15.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(java.lang.String)>("2.0");

        $stack17 = virtualinvoke $stack15.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $stack17, 1.0E-4);

        return;
    }

    public void testConstructorNull()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack1;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack1 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack1.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(java.lang.Number)>(null);

        return;
    }

    public void testGetSet()
    {
        java.lang.Double $stack6, $stack8, $stack11, $stack12, $stack13, $stack16, $stack17, $stack21, $stack22;
        org.apache.commons.lang3.mutable.MutableDouble $stack2, $stack3, $stack7, $stack18;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        double $stack5, $stack10, $stack15, $stack20;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack3 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack3.<org.apache.commons.lang3.mutable.MutableDouble: void <init>()>();

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.0, $stack5, 1.0E-4);

        $stack6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $stack7 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableDouble: void <init>()>();

        $stack8 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.Double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack6, $stack8);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void setValue(double)>(1.0);

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.0, $stack10, 1.0E-4);

        $stack11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.Double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack12);

        $stack13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void setValue(java.lang.Number)>($stack13);

        $stack15 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.0, $stack15, 1.0E-4);

        $stack16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.Double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack16, $stack17);

        $stack18 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack18.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(3.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void setValue(java.lang.Number)>($stack18);

        $stack20 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(3.0, $stack20, 1.0E-4);

        $stack21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.0);

        $stack22 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.Double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack21, $stack22);

        return;
    }

    public void testSetNull()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void setValue(java.lang.Number)>(null);

        return;
    }

    public void testNanInfinite()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2, $stack4, $stack6;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        boolean $stack3, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(#NaN);

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: boolean isNaN()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(#Infinity);

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: boolean isInfinite()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(#-Infinity);

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableDouble: boolean isInfinite()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        return;
    }

    public void testEquals()
    {
        java.lang.Double $stack15;
        org.apache.commons.lang3.mutable.MutableDouble $stack4, $stack5, $stack6;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        boolean $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack16, $stack17;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack4 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack5 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack6 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        $stack14 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $stack16 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>($stack15);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack16);

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: boolean equals(java.lang.Object)>("0");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

        return;
    }

    public void testHashCode()
    {
        java.lang.Double $stack14;
        org.apache.commons.lang3.mutable.MutableDouble $stack4, $stack5, $stack6;
        int $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack15;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        boolean $stack23, $stack20, $stack17, $stack16;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack4 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack5 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack6 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack6.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: int hashCode()>();

        $stack8 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: int hashCode()>();

        if $stack7 != $stack8 goto label1;

        $stack23 = 1;

        goto label2;

     label1:
        $stack23 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack23);

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: int hashCode()>();

        $stack10 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: int hashCode()>();

        if $stack9 != $stack10 goto label3;

        $stack20 = 1;

        goto label4;

     label3:
        $stack20 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack11 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: int hashCode()>();

        $stack12 = virtualinvoke $stack6.<org.apache.commons.lang3.mutable.MutableDouble: int hashCode()>();

        if $stack11 != $stack12 goto label5;

        $stack17 = 1;

        goto label6;

     label5:
        $stack17 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

        $stack13 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: int hashCode()>();

        $stack14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $stack15 = virtualinvoke $stack14.<java.lang.Double: int hashCode()>();

        if $stack13 != $stack15 goto label7;

        $stack16 = 1;

        goto label8;

     label7:
        $stack16 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        return;
    }

    public void testCompareTo()
    {
        long $stack6, $stack10, $stack14;
        org.apache.commons.lang3.mutable.MutableDouble $stack2, $stack3, $stack7, $stack11;
        int $stack5, $stack9, $stack13;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack3 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack3.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: int compareTo(org.apache.commons.lang3.mutable.MutableDouble)>($stack3);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        $stack7 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(-1.0);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: int compareTo(org.apache.commons.lang3.mutable.MutableDouble)>($stack7);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack10);

        $stack11 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack11.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        $stack13 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: int compareTo(org.apache.commons.lang3.mutable.MutableDouble)>($stack11);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack14);

        return;
    }

    public void testCompareToNull()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: int compareTo(org.apache.commons.lang3.mutable.MutableDouble)>(null);

        return;
    }

    public void testPrimitiveValues()
    {
        long $stack9, $stack12, $stack15, $stack17;
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        short $stack11;
        byte $stack8;
        int $stack14;
        float $stack4;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        double $stack6;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.7);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: float floatValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(1.7F, $stack4, 0.0F);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.7, $stack6, 0.0);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: byte byteValue()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack9);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: short shortValue()>();

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack12);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: int intValue()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack15);

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack17);

        return;
    }

    public void testToDouble()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2, $stack5;
        java.lang.Double $stack1, $stack3, $stack4, $stack6;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.Double toDouble()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack1, $stack3);

        $stack4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(12.3);

        $stack5 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(12.3);

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.Double toDouble()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        return;
    }

    public void testIncrement()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        int $stack4;
        long $stack5, $stack7;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void increment()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: int intValue()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack7);

        return;
    }

    public void testDecrement()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        int $stack4;
        long $stack5, $stack7;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void decrement()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: int intValue()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: long longValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack7);

        return;
    }

    public void testAddValuePrimitive()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        double $stack4;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void add(double)>(1.1);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.1, $stack4, 0.01);

        return;
    }

    public void testAddValueObject()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        java.lang.Double $stack3;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        double $stack5;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        $stack3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.1);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void add(java.lang.Number)>($stack3);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(2.1, $stack5, 0.01);

        return;
    }

    public void testSubtractValuePrimitive()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        double $stack4;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void subtract(double)>(0.9);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.1, $stack4, 0.01);

        return;
    }

    public void testSubtractValueObject()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack2;
        java.lang.Double $stack3;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        double $stack5;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack2 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(1.0);

        $stack3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.9);

        virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: void subtract(java.lang.Number)>($stack3);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.mutable.MutableDouble: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.1, $stack5, 0.01);

        return;
    }

    public void testToString()
    {
        org.apache.commons.lang3.mutable.MutableDouble $stack1, $stack4, $stack7;
        org.apache.commons.lang3.mutable.MutableDoubleTest this;
        java.lang.String $stack3, $stack6, $stack9;

        this := @this: org.apache.commons.lang3.mutable.MutableDoubleTest;

        $stack1 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack1.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(0.0);

        $stack3 = virtualinvoke $stack1.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("0.0", $stack3);

        $stack4 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(10.0);

        $stack6 = virtualinvoke $stack4.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("10.0", $stack6);

        $stack7 = new org.apache.commons.lang3.mutable.MutableDouble;

        specialinvoke $stack7.<org.apache.commons.lang3.mutable.MutableDouble: void <init>(double)>(-123.0);

        $stack9 = virtualinvoke $stack7.<org.apache.commons.lang3.mutable.MutableDouble: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-123.0", $stack9);

        return;
    }
}
