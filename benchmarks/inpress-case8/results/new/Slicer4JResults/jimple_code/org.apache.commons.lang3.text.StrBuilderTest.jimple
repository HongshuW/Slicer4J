public class org.apache.commons.lang3.text.StrBuilderTest extends java.lang.Object
{
    static final org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER;

    public void <init>()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructors()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1, $u2, $u3, $u4, $u5, $u6, $u7;
        long $stack12, $stack15, $stack18, $stack22, $stack25, $stack28, $stack32, $stack35, $stack38, $stack42, $stack45, $stack48, $stack52, $stack55, $stack58, $stack63, $stack66, $stack69, $stack73, $stack76, $stack79, $stack83, $stack86, $stack89;
        int $stack11, $stack14, $stack17, $stack21, $stack24, $stack27, $stack31, $stack34, $stack37, $stack41, $stack44, $stack47, $stack51, $stack54, $stack57, $stack62, $stack65, $stack68, $stack72, $stack75, $stack78, $stack82, $stack85, $stack88, $i0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack11 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack12);

        $stack14 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack17 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack18);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(int)>(32);

        $stack21 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack22);

        $stack24 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack25);

        $stack27 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack28);

        $u2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: void <init>(int)>(0);

        $stack31 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack32);

        $stack34 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack35);

        $stack37 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack38 = (long) $stack37;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack38);

        $u3 = new org.apache.commons.lang3.text.StrBuilder;

        $i0 = (int) -1;

        specialinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: void <init>(int)>($i0);

        $stack41 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack42 = (long) $stack41;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack42);

        $stack44 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack45 = (long) $stack44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack45);

        $stack47 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack48);

        $u4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: void <init>(int)>(1);

        $stack51 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack52 = (long) $stack51;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack52);

        $stack54 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack55);

        $stack57 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack58 = (long) $stack57;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack58);

        $u5 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>(null);

        $stack62 = virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack63 = (long) $stack62;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack63);

        $stack65 = virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack66 = (long) $stack65;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack66);

        $stack68 = virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack69 = (long) $stack68;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack69);

        $u6 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("");

        $stack72 = virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack73 = (long) $stack72;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack73);

        $stack75 = virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack76 = (long) $stack75;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack76);

        $stack78 = virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack79 = (long) $stack78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack79);

        $u7 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("foo");

        $stack82 = virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack83 = (long) $stack82;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(35L, $stack83);

        $stack85 = virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack86 = (long) $stack85;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack86);

        $stack88 = virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack89 = (long) $stack88;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack89);

        return;
    }

    public void testChaining()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNewLineText(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack4);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(1);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack5);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)>(0, 97);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack6);

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)>(0);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack7);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder minimizeCapacity()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack9);

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder reverse()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack10);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder trim()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($stack2, $stack11);

        return;
    }

    public void testGetSetNewLineText()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack4, $stack7, $stack10, $stack14;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNewLineText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNewLineText(java.lang.String)>("#");

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNewLineText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("#", $stack7);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNewLineText(java.lang.String)>("");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNewLineText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNewLineText(java.lang.String)>(null);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNewLineText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack14);

        return;
    }

    public void testGetSetNullText()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack4, $stack7, $stack10, $stack13, $stack17;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNullText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack4);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String)>("null");

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNullText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("null", $stack7);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String)>("");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNullText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack10);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String)>("NULL");

        $stack13 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNullText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("NULL", $stack13);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setNullText(java.lang.String)>(null);

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String getNullText()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $stack17);

        return;
    }

    public void testCapacityAndLength()
    {
        java.lang.IndexOutOfBoundsException $stack200;
        org.apache.commons.lang3.text.StrBuilderTest this;
        long $stack6, $stack9, $stack12, $stack17, $stack20, $stack23, $stack29, $stack32, $stack38, $stack41, $stack47, $stack50, $stack56, $stack59, $stack65, $stack68, $stack73, $stack76, $stack79, $stack85, $stack88, $stack91, $stack97, $stack100, $stack108, $stack111, $stack119, $stack122;
        java.lang.String $stack102, $stack113;
        boolean $stack13, $stack24, $stack33, $stack42, $stack51, $stack60, $stack69, $stack80, $stack92, $stack103, $stack114, $stack123, $stack192, $stack188, $stack184, $stack176, $stack172, $stack167, $stack163, $stack157, $stack153, $stack148, $stack143, $stack138, $stack133, $stack128, $stack124;
        org.apache.commons.lang3.text.StrBuilder $u0;
        int $stack5, $stack8, $stack11, $stack16, $stack19, $stack22, $stack26, $stack28, $stack31, $stack35, $stack37, $stack40, $stack44, $stack46, $stack49, $stack53, $stack55, $stack58, $stack62, $stack64, $stack67, $stack72, $stack75, $stack78, $stack84, $stack87, $stack90, $stack94, $stack96, $stack99, $stack105, $stack107, $stack110, $stack116, $stack118, $stack121, $i0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack6);

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        $stack11 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack12);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack13);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder minimizeCapacity()>();

        $stack16 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack17);

        $stack19 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack20);

        $stack22 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack23);

        $stack24 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)>(32);

        $stack26 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack26 < 32 goto label01;

        $stack192 = 1;

        goto label02;

     label01:
        $stack192 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack192);

        $stack28 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack29);

        $stack31 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack32);

        $stack33 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack33);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("foo");

        $stack35 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack35 < 32 goto label03;

        $stack188 = 1;

        goto label04;

     label03:
        $stack188 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack188);

        $stack37 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack38 = (long) $stack37;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack38);

        $stack40 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack41);

        $stack42 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        if $stack42 != 0 goto label05;

        $stack184 = 1;

        goto label06;

     label05:
        $stack184 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack184);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        $stack44 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack44 < 32 goto label07;

        $stack176 = 1;

        goto label08;

     label07:
        $stack176 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack176);

        $stack46 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack47 = (long) $stack46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack47);

        $stack49 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack50 = (long) $stack49;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack50);

        $stack51 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("123456789012345678901234567890123");

        $stack53 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack53 <= 32 goto label09;

        $stack172 = 1;

        goto label10;

     label09:
        $stack172 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack172);

        $stack55 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack56 = (long) $stack55;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack56);

        $stack58 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack59 = (long) $stack58;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack59);

        $stack60 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        if $stack60 != 0 goto label11;

        $stack167 = 1;

        goto label12;

     label11:
        $stack167 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack167);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)>(16);

        $stack62 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack62 <= 16 goto label13;

        $stack163 = 1;

        goto label14;

     label13:
        $stack163 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack163);

        $stack64 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack65 = (long) $stack64;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack65);

        $stack67 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack68 = (long) $stack67;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack68);

        $stack69 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        if $stack69 != 0 goto label15;

        $stack157 = 1;

        goto label16;

     label15:
        $stack157 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack157);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder minimizeCapacity()>();

        $stack72 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack73 = (long) $stack72;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack73);

        $stack75 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack76 = (long) $stack75;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack76);

        $stack78 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack79 = (long) $stack78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack79);

        $stack80 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        if $stack80 != 0 goto label17;

        $stack153 = 1;

        goto label18;

     label17:
        $stack153 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack153);

     label19:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>($i0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("setLength(-1) expected StringIndexOutOfBoundsException");

     label20:
        goto label22;

     label21:
        $stack200 := @caughtexception;

     label22:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(33);

        $stack84 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack85 = (long) $stack84;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack85);

        $stack87 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack88 = (long) $stack87;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack88);

        $stack90 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack91 = (long) $stack90;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $stack91);

        $stack92 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        if $stack92 != 0 goto label23;

        $stack148 = 1;

        goto label24;

     label23:
        $stack148 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack148);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(16);

        $stack94 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack94 < 16 goto label25;

        $stack143 = 1;

        goto label26;

     label25:
        $stack143 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack143);

        $stack96 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack97 = (long) $stack96;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $stack97);

        $stack99 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack100 = (long) $stack99;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(16L, $stack100);

        $stack102 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1234567890123456", $stack102);

        $stack103 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        if $stack103 != 0 goto label27;

        $stack138 = 1;

        goto label28;

     label27:
        $stack138 = 0;

     label28:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack138);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(32);

        $stack105 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack105 < 32 goto label29;

        $stack133 = 1;

        goto label30;

     label29:
        $stack133 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack133);

        $stack107 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack108 = (long) $stack107;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack108);

        $stack110 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack111 = (long) $stack110;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack111);

        $stack113 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("1234567890123456\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", $stack113);

        $stack114 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        if $stack114 != 0 goto label31;

        $stack128 = 1;

        goto label32;

     label31:
        $stack128 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack128);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(0);

        $stack116 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack116 < 32 goto label33;

        $stack124 = 1;

        goto label34;

     label33:
        $stack124 = 0;

     label34:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack124);

        $stack118 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack119 = (long) $stack118;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack119);

        $stack121 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack122 = (long) $stack121;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack122);

        $stack123 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack123);

        return;

        catch java.lang.IndexOutOfBoundsException from label19 to label20 with label21;
    }

    public void testLength()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack4, $stack8;
        long $stack5, $stack9;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("Hello");

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack9);

        return;
    }

    public void testSetLength()
    {
        java.lang.IndexOutOfBoundsException $stack15;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack7, $stack10, $stack13;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("Hello");

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(2);

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("He", $stack7);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(2);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("He", $stack10);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(3);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("He\u0000", $stack13);

     label1:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>($i0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("setLength(-1) expected StringIndexOutOfBoundsException");

     label2:
        goto label4;

     label3:
        $stack15 := @caughtexception;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void testCapacity()
    {
        long $stack5, $stack7, $stack11, $stack13;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack4, $stack6, $stack10, $stack12;
        char[] $stack3, $stack9;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack3 = $stack2.<org.apache.commons.lang3.text.StrBuilder: char[] buffer>;

        $stack4 = lengthof $stack3;

        $stack5 = (long) $stack4;

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack5, $stack7);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("HelloWorldHelloWorldHelloWorldHelloWorld");

        $stack9 = $stack2.<org.apache.commons.lang3.text.StrBuilder: char[] buffer>;

        $stack10 = lengthof $stack9;

        $stack11 = (long) $stack10;

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack11, $stack13);

        return;
    }

    public void testEnsureCapacity()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack4, $stack6, $stack9, $i0;
        org.apache.commons.lang3.text.StrBuilder $u0;
        boolean $stack18, $stack11, $stack10;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)>(2);

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack4 < 2 goto label1;

        $stack18 = 1;

        goto label2;

     label1:
        $stack18 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)>($i0);

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack6 < 0 goto label3;

        $stack11 = 1;

        goto label4;

     label3:
        $stack11 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("HelloWorld");

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)>(40);

        $stack9 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        if $stack9 < 40 goto label5;

        $stack10 = 1;

        goto label6;

     label5:
        $stack10 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        return;
    }

    public void testMinimizeCapacity()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack5, $stack10;
        long $stack6, $stack11;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder minimizeCapacity()>();

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("HelloWorld");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder minimizeCapacity()>();

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int capacity()>();

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack11);

        return;
    }

    public void testSize()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack4, $stack8;
        long $stack5, $stack9;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("Hello");

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int size()>();

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack9);

        return;
    }

    public void testIsEmpty()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        boolean $stack3, $stack5, $stack7;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("Hello");

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        return;
    }

    public void testClear()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack6, $stack9;
        char[] $stack8;
        long $stack7;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        boolean $stack10;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("Hello");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack7);

        $stack8 = $stack2.<org.apache.commons.lang3.text.StrBuilder: char[] buffer>;

        $stack9 = lengthof $stack8;

        if $stack9 < 5 goto label1;

        $stack10 = 1;

        goto label2;

     label1:
        $stack10 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        return;
    }

    public void testCharAt()
    {
        java.lang.IndexOutOfBoundsException $stack18, $stack19, $stack23, $stack35;
        char $stack8, $stack11, $stack14;
        long $stack9, $stack12, $stack15;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0, $i1;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

     label01:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char charAt(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("charAt(0) expected IndexOutOfBoundsException");

     label02:
        goto label04;

     label03:
        $stack35 := @caughtexception;

     label04:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char charAt(int)>($i0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("charAt(-1) expected IndexOutOfBoundsException");

     label05:
        goto label07;

     label06:
        $stack23 := @caughtexception;

     label07:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("foo");

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char charAt(int)>(0);

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(102L, $stack9);

        $stack11 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char charAt(int)>(1);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $stack12);

        $stack14 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char charAt(int)>(2);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $stack15);

     label08:
        $i1 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char charAt(int)>($i1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("charAt(-1) expected IndexOutOfBoundsException");

     label09:
        goto label11;

     label10:
        $stack19 := @caughtexception;

     label11:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char charAt(int)>(3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("charAt(3) expected IndexOutOfBoundsException");

     label12:
        goto label14;

     label13:
        $stack18 := @caughtexception;

     label14:
        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
    }

    public void testSetCharAt()
    {
        java.lang.IndexOutOfBoundsException $stack13, $stack15, $stack31;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack12;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

     label01:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)>(0, 102);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("setCharAt(0,) expected IndexOutOfBoundsException");

     label02:
        goto label04;

     label03:
        $stack31 := @caughtexception;

     label04:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)>($i0, 102);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("setCharAt(-1,) expected IndexOutOfBoundsException");

     label05:
        goto label07;

     label06:
        $stack15 := @caughtexception;

     label07:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("foo");

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)>(0, 98);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)>(1, 97);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)>(2, 114);

     label08:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setCharAt(int,char)>(3, 33);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("setCharAt(3,) expected IndexOutOfBoundsException");

     label09:
        goto label11;

     label10:
        $stack13 := @caughtexception;

     label11:
        $stack12 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bar", $stack12);

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
    }

    public void testDeleteCharAt()
    {
        java.lang.IndexOutOfBoundsException $stack8;
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6;
        org.apache.commons.lang3.text.StrBuilder $stack3;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abc");

        virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteCharAt(int)>(0);

        $stack6 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bc", $stack6);

     label1:
        virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteCharAt(int)>(1000);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IndexOutOfBoundsException");

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void testToCharArray()
    {
        long $stack8, $stack12;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack7, $stack11;
        char[] $stack4, $stack5, $stack6, $stack10, $stack15;
        java.lang.String $stack13;
        org.apache.commons.lang3.text.StrBuilder $stack3;
        boolean $stack16;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack5);

        $stack6 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("toCharArray() result is null", $stack6);

        $stack7 = lengthof $stack6;

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("toCharArray() result is too large", 0L, $stack8);

        virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("junit");

        $stack10 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray()>();

        $stack11 = lengthof $stack10;

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("toCharArray() result incorrect length", 5L, $stack12);

        $stack13 = "junit";

        $stack15 = virtualinvoke $stack13.<java.lang.String: char[] toCharArray()>();

        $stack16 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack15, $stack10);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toCharArray() result does not match", $stack16);

        return;
    }

    public void testToCharArrayIntInt()
    {
        java.lang.IndexOutOfBoundsException $stack32, $stack33;
        long $stack10, $stack17, $stack24;
        int $stack9, $stack16, $stack23, $i0;
        java.lang.String $stack11, $stack18, $stack25;
        boolean $stack14, $stack21, $stack28;
        org.apache.commons.lang3.text.StrBuilderTest this;
        char[] $stack5, $stack6, $stack8, $stack13, $stack15, $stack20, $stack22, $stack27, $stack29;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = <org.apache.commons.lang3.ArrayUtils: char[] EMPTY_CHAR_ARRAY>;

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray(int,int)>(0, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack5, $stack6);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("junit");

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray(int,int)>(0, 20);

        $stack9 = lengthof $stack8;

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("toCharArray(int,int) result incorrect length", 5L, $stack10);

        $stack11 = "junit";

        $stack13 = virtualinvoke $stack11.<java.lang.String: char[] toCharArray()>();

        $stack14 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack13, $stack8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toCharArray(int,int) result does not match", $stack14);

        $stack15 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray(int,int)>(0, 4);

        $stack16 = lengthof $stack15;

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("toCharArray(int,int) result incorrect length", 4L, $stack17);

        $stack18 = "juni";

        $stack20 = virtualinvoke $stack18.<java.lang.String: char[] toCharArray()>();

        $stack21 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack20, $stack15);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toCharArray(int,int) result does not match", $stack21);

        $stack22 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray(int,int)>(0, 4);

        $stack23 = lengthof $stack22;

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("toCharArray(int,int) result incorrect length", 4L, $stack24);

        $stack25 = "juni";

        $stack27 = virtualinvoke $stack25.<java.lang.String: char[] toCharArray()>();

        $stack28 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack27, $stack22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toCharArray(int,int) result does not match", $stack28);

        $stack29 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray(int,int)>(0, 1);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("toCharArray(int,int) result is null", $stack29);

     label1:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray(int,int)>($i0, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("no string index out of bound on -1");

     label2:
        goto label4;

     label3:
        $stack33 := @caughtexception;

     label4:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: char[] toCharArray(int,int)>(6, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("no string index out of bound on -1");

     label5:
        goto label7;

     label6:
        $stack32 := @caughtexception;

     label7:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }

    public void testGetChars()
    {
        long $stack14;
        int $stack13;
        java.lang.String $stack15;
        boolean $stack7, $stack11, $stack17;
        org.apache.commons.lang3.text.StrBuilderTest this;
        char[] $stack5, $stack6, $stack9, $stack10, $stack12, $stack16, $stack18, $stack19, input;
        org.apache.commons.lang3.text.StrBuilder $stack4;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        input = newarray (char)[10];

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: char[] getChars(char[])>(input);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(input, $stack5);

        $stack6 = newarray (char)[10];

        $stack7 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack6, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("junit");

        $stack9 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: char[] getChars(char[])>(input);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(input, $stack9);

        $stack10 = newarray (char)[10];

        $stack10[0] = 106;

        $stack10[1] = 117;

        $stack10[2] = 110;

        $stack10[3] = 105;

        $stack10[4] = 116;

        $stack10[5] = 0;

        $stack10[6] = 0;

        $stack10[7] = 0;

        $stack10[8] = 0;

        $stack10[9] = 0;

        $stack11 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack10, $stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: char[] getChars(char[])>(null);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(input, $stack12);

        $stack13 = lengthof $stack12;

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $stack14);

        $stack15 = "junit";

        $stack16 = virtualinvoke $stack15.<java.lang.String: char[] toCharArray()>();

        $stack17 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack16, $stack12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        input = newarray (char)[5];

        $stack18 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: char[] getChars(char[])>(input);

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>(input, $stack18);

        input = newarray (char)[4];

        $stack19 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: char[] getChars(char[])>(input);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(input, $stack19);

        return;
    }

    public void testGetCharsIntIntCharArrayInt()
    {
        java.lang.IndexOutOfBoundsException $stack10, $stack11, $stack18, $stack25;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0, $i1;
        char[] $stack6, $stack8, a;
        org.apache.commons.lang3.text.StrBuilder $u0;
        boolean $stack7, $stack9;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("junit");

        a = newarray (char)[5];

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void getChars(int,int,char[],int)>(0, 5, a, 0);

        $stack6 = newarray (char)[5];

        $stack6[0] = 106;

        $stack6[1] = 117;

        $stack6[2] = 110;

        $stack6[3] = 105;

        $stack6[4] = 116;

        $stack7 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack6, a);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        a = newarray (char)[5];

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void getChars(int,int,char[],int)>(0, 2, a, 3);

        $stack8 = newarray (char)[5];

        $stack8[0] = 0;

        $stack8[1] = 0;

        $stack8[2] = 0;

        $stack8[3] = 106;

        $stack8[4] = 117;

        $stack9 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($stack8, a);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

     label01:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void getChars(int,int,char[],int)>($i0, 0, a, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("no exception");

     label02:
        goto label04;

     label03:
        $stack25 := @caughtexception;

     label04:
        $i1 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void getChars(int,int,char[],int)>(0, $i1, a, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("no exception");

     label05:
        goto label07;

     label06:
        $stack18 := @caughtexception;

     label07:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void getChars(int,int,char[],int)>(0, 20, a, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("no exception");

     label08:
        goto label10;

     label09:
        $stack11 := @caughtexception;

     label10:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void getChars(int,int,char[],int)>(4, 2, a, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("no exception");

     label11:
        goto label13;

     label12:
        $stack10 := @caughtexception;

     label13:
        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
    }

    public void testDeleteIntInt()
    {
        java.lang.IndexOutOfBoundsException $stack20, $stack21, $stack27;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack6, $stack9, $stack12, $stack15;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abc");

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder delete(int,int)>(0, 1);

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bc", $stack6);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder delete(int,int)>(1, 2);

        $stack9 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack9);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder delete(int,int)>(0, 1);

        $stack12 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder delete(int,int)>(0, 1000);

        $stack15 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack15);

     label01:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder delete(int,int)>(1, 2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IndexOutOfBoundsException");

     label02:
        goto label04;

     label03:
        $stack27 := @caughtexception;

     label04:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder delete(int,int)>($i0, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IndexOutOfBoundsException");

     label05:
        goto label07;

     label06:
        $stack21 := @caughtexception;

     label07:
        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("anything");

     label08:
        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder delete(int,int)>(2, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IndexOutOfBoundsException");

     label09:
        goto label11;

     label10:
        $stack20 := @caughtexception;

     label11:
        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
    }

    public void testDeleteAll_char()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack5, $stack8, $stack11, $stack14, $stack18;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack15;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(char)>(88);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(char)>(97);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcbccb", $stack8);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(char)>(99);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bbb", $stack11);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(char)>(98);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack14);

        $stack15 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("");

        virtualinvoke $stack15.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(char)>(98);

        $stack18 = virtualinvoke $stack15.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        return;
    }

    public void testDeleteFirst_char()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack5, $stack8, $stack11, $stack14, $stack18;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack15;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(char)>(88);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcba", $stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(char)>(97);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcba", $stack8);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(char)>(99);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bba", $stack11);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(char)>(98);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ba", $stack14);

        $stack15 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack15.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("");

        virtualinvoke $stack15.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(char)>(98);

        $stack18 = virtualinvoke $stack15.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack18);

        return;
    }

    public void testDeleteAll_String()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack25, $stack29;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack22, $stack26;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>(null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("");

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack9);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("X");

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack12);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("a");

        $stack15 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcbccb", $stack15);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("c");

        $stack18 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bbb", $stack18);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("b");

        $stack21 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack21);

        $stack22 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack22.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("bc");

        $stack25 = virtualinvoke $stack22.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("acba", $stack25);

        $stack26 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack26.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("");

        virtualinvoke $stack26.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("bc");

        $stack29 = virtualinvoke $stack26.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack29);

        return;
    }

    public void testDeleteFirst_String()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack25, $stack29;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack22, $stack26;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>(null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("");

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack9);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("X");

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack12);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("a");

        $stack15 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcbccba", $stack15);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("c");

        $stack18 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bbccba", $stack18);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("b");

        $stack21 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bccba", $stack21);

        $stack22 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack22.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack22.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("bc");

        $stack25 = virtualinvoke $stack22.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abccba", $stack25);

        $stack26 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack26.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("");

        virtualinvoke $stack26.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("bc");

        $stack29 = virtualinvoke $stack26.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack29);

        return;
    }

    public void testDeleteAll_StrMatcher()
    {
        org.apache.commons.lang3.text.StrMatcher $stack7, $stack12, $stack17;
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6, $stack10, $stack15, $stack20;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack11, $stack16;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("A0xA1A2yA3");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(org.apache.commons.lang3.text.StrMatcher)>(null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("A0xA1A2yA3", $stack6);

        $stack7 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(org.apache.commons.lang3.text.StrMatcher)>($stack7);

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xy", $stack10);

        $stack11 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack11.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("Ax1");

        $stack12 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack11.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(org.apache.commons.lang3.text.StrMatcher)>($stack12);

        $stack15 = virtualinvoke $stack11.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ax1", $stack15);

        $stack16 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("");

        $stack17 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack16.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(org.apache.commons.lang3.text.StrMatcher)>($stack17);

        $stack20 = virtualinvoke $stack16.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack20);

        return;
    }

    public void testDeleteFirst_StrMatcher()
    {
        org.apache.commons.lang3.text.StrMatcher $stack7, $stack12, $stack17;
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6, $stack10, $stack15, $stack20;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack11, $stack16;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("A0xA1A2yA3");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(org.apache.commons.lang3.text.StrMatcher)>(null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("A0xA1A2yA3", $stack6);

        $stack7 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(org.apache.commons.lang3.text.StrMatcher)>($stack7);

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xA1A2yA3", $stack10);

        $stack11 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack11.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("Ax1");

        $stack12 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack11.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(org.apache.commons.lang3.text.StrMatcher)>($stack12);

        $stack15 = virtualinvoke $stack11.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Ax1", $stack15);

        $stack16 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack16.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("");

        $stack17 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack16.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(org.apache.commons.lang3.text.StrMatcher)>($stack17);

        $stack20 = virtualinvoke $stack16.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack20);

        return;
    }

    public void testReplace_int_int_String()
    {
        java.lang.IndexOutOfBoundsException $stack31, $stack32, $stack38;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack6, $stack9, $stack12, $stack16, $stack19, $stack22, $stack26;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1, $u2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abc");

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(0, 1, "d");

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dbc", $stack6);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(0, 1, "aaa");

        $stack9 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaabc", $stack9);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(0, 3, "");

        $stack12 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bc", $stack12);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(1, 2, null);

        $stack16 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack16);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(1, 1000, "text");

        $stack19 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("btext", $stack19);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(0, 1000, "text");

        $stack22 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("text", $stack22);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("atext");

        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(1, 1, "ny");

        $stack26 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("anytext", $stack26);

     label01:
        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(2, 1, "anything");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IndexOutOfBoundsException");

     label02:
        goto label04;

     label03:
        $stack38 := @caughtexception;

     label04:
        $u2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

     label05:
        virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>(1, 2, "anything");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IndexOutOfBoundsException");

     label06:
        goto label08;

     label07:
        $stack32 := @caughtexception;

     label08:
        $i0 = (int) -1;

        virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(int,int,java.lang.String)>($i0, 1, "anything");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected IndexOutOfBoundsException");

     label09:
        goto label11;

     label10:
        $stack31 := @caughtexception;

     label11:
        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
    }

    public void testReplaceAll_char_char()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack5, $stack8, $stack11, $stack14, $stack17;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(char,char)>(120, 121);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(char,char)>(97, 100);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dbcbccbd", $stack8);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(char,char)>(98, 101);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dececced", $stack11);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(char,char)>(99, 102);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("defeffed", $stack14);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(char,char)>(100, 100);

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("defeffed", $stack17);

        return;
    }

    public void testReplaceFirst_char_char()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack5, $stack8, $stack11, $stack14, $stack17;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char)>(120, 121);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char)>(97, 100);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dbcbccba", $stack8);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char)>(98, 101);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("decbccba", $stack11);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char)>(99, 102);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("defbccba", $stack14);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(char,char)>(100, 100);

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("defbccba", $stack17);

        return;
    }

    public void testReplaceAll_String_String()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack32, $stack36;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack29, $stack33;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>(null, null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>(null, "anything");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack10);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("", null);

        $stack13 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack13);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("", "anything");

        $stack16 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack16);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("x", "y");

        $stack19 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack19);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("a", "d");

        $stack22 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dbcbccbd", $stack22);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("d", null);

        $stack25 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcbccb", $stack25);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("cb", "-");

        $stack28 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b-c-", $stack28);

        $stack29 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack29.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcba");

        virtualinvoke $stack29.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("b", "xbx");

        $stack32 = virtualinvoke $stack29.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("axbxcxbxa", $stack32);

        $stack33 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack33.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("bb");

        virtualinvoke $stack33.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(java.lang.String,java.lang.String)>("b", "xbx");

        $stack36 = virtualinvoke $stack33.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xbxxbx", $stack36);

        return;
    }

    public void testReplaceFirst_String_String()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack32, $stack36;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack29, $stack33;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>(null, null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>(null, "anything");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack10);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("", null);

        $stack13 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack13);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("", "anything");

        $stack16 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack16);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("x", "y");

        $stack19 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack19);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("a", "d");

        $stack22 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dbcbccba", $stack22);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("d", null);

        $stack25 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcbccba", $stack25);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("cb", "-");

        $stack28 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b-ccba", $stack28);

        $stack29 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack29.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcba");

        virtualinvoke $stack29.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("b", "xbx");

        $stack32 = virtualinvoke $stack29.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("axbxcba", $stack32);

        $stack33 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack33.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("bb");

        virtualinvoke $stack33.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(java.lang.String,java.lang.String)>("b", "xbx");

        $stack36 = virtualinvoke $stack33.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xbxb", $stack36);

        return;
    }

    public void testReplaceAll_StrMatcher_String()
    {
        org.apache.commons.lang3.text.StrMatcher $stack11, $stack15, $stack19, $stack23, $stack27, $stack31, $stack36, $stack41, $stack46;
        java.lang.String $stack6, $stack10, $stack14, $stack18, $stack22, $stack26, $stack30, $stack34, $stack39, $stack44, $stack49;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack35, $stack40, $stack45;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>(null, null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>(null, "anything");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack11, null);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack15, "anything");

        $stack18 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(120);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack19, "y");

        $stack22 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack22);

        $stack23 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack23, "d");

        $stack26 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dbcbccbd", $stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(100);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack27, null);

        $stack30 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcbccb", $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack31, "-");

        $stack34 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b-c-", $stack34);

        $stack35 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack35.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcba");

        $stack36 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        virtualinvoke $stack35.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack36, "xbx");

        $stack39 = virtualinvoke $stack35.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("axbxcxbxa", $stack39);

        $stack40 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack40.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("bb");

        $stack41 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        virtualinvoke $stack40.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack41, "xbx");

        $stack44 = virtualinvoke $stack40.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xbxxbx", $stack44);

        $stack45 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack45.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("A1-A2A3-A4");

        $stack46 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack45.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceAll(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack46, "***");

        $stack49 = virtualinvoke $stack45.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("***-******-***", $stack49);

        return;
    }

    public void testReplaceFirst_StrMatcher_String()
    {
        org.apache.commons.lang3.text.StrMatcher $stack11, $stack15, $stack19, $stack23, $stack27, $stack31, $stack36, $stack41, $stack46;
        java.lang.String $stack6, $stack10, $stack14, $stack18, $stack22, $stack26, $stack30, $stack34, $stack39, $stack44, $stack49;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack35, $stack40, $stack45;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>(null, null);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>(null, "anything");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack11, null);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack14);

        $stack15 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack15, "anything");

        $stack18 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack18);

        $stack19 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(120);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack19, "y");

        $stack22 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack22);

        $stack23 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack23, "d");

        $stack26 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dbcbccba", $stack26);

        $stack27 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(100);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack27, null);

        $stack30 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("bcbccba", $stack30);

        $stack31 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack31, "-");

        $stack34 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b-ccba", $stack34);

        $stack35 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack35.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcba");

        $stack36 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        virtualinvoke $stack35.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack36, "xbx");

        $stack39 = virtualinvoke $stack35.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("axbxcba", $stack39);

        $stack40 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack40.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("bb");

        $stack41 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        virtualinvoke $stack40.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack41, "xbx");

        $stack44 = virtualinvoke $stack40.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xbxb", $stack44);

        $stack45 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack45.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("A1-A2A3-A4");

        $stack46 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        virtualinvoke $stack45.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replaceFirst(org.apache.commons.lang3.text.StrMatcher,java.lang.String)>($stack46, "***");

        $stack49 = virtualinvoke $stack45.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("***-A2A3-A4", $stack49);

        return;
    }

    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher()
    {
        org.apache.commons.lang3.text.StrMatcher $stack10, $stack17, $stack25, $stack33;
        int $stack6, $stack13, $stack20, $stack28, $stack36, $i0, $i1, $i2, $i3, $i4;
        java.lang.String $stack9, $stack16, $stack23, $stack31, $stack39;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1, $u2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>(null, "x", 0, $stack6, $i0);

        $stack9 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack9);

        $stack10 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i1 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack10, "x", 0, $stack13, $i1);

        $stack16 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xbcbccbx", $stack16);

        $stack17 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        $stack20 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i2 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack17, "x", 0, $stack20, $i2);

        $stack23 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("xbxcxx", $stack23);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("A1-A2A3-A4");

        $stack25 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack28 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i3 = (int) -1;

        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack25, "***", 0, $stack28, $i3);

        $stack31 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("***-******-***", $stack31);

        $u2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack33 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack36 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i4 = (int) -1;

        virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack33, "***", 0, $stack36, $i4);

        $stack39 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack39);

        return;
    }

    public void testReplace_StrMatcher_String_int_int_int_VaryReplace()
    {
        org.apache.commons.lang3.text.StrMatcher $stack3, $stack11, $stack19, $stack27, $stack35;
        int $stack6, $stack14, $stack22, $stack30, $stack38, $i0, $i1, $i2, $i3, $i4;
        java.lang.String $stack9, $stack17, $stack25, $stack33, $stack41;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1, $u2, $u3, $u4;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        $stack3 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack3, "cb", 0, $stack6, $i0);

        $stack9 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcbccba", $stack9);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        $stack11 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        $stack14 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i1 = (int) -1;

        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack11, "-", 0, $stack14, $i1);

        $stack17 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab-c-a", $stack17);

        $u2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        $stack19 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        $stack22 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i2 = (int) -1;

        virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack19, "+++", 0, $stack22, $i2);

        $stack25 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab+++c+++a", $stack25);

        $u3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        $stack27 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        $stack30 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i3 = (int) -1;

        virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack27, "", 0, $stack30, $i3);

        $stack33 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abca", $stack33);

        $u4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcbccba");

        $stack35 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("cb");

        $stack38 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i4 = (int) -1;

        virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack35, null, 0, $stack38, $i4);

        $stack41 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abca", $stack41);

        return;
    }

    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex()
    {
        java.lang.IndexOutOfBoundsException $stack107, $stack109;
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack10, $stack18, $stack26, $stack34, $stack42, $stack50, $stack58, $stack66, $stack74, $stack82, $stack90, $stack98, $stack106;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1, $u2, $u3, $u4, $u5, $u6, $u7, $u8, $u9, $u10, $u11, $u12;
        org.apache.commons.lang3.text.StrMatcher $stack4, $stack12, $stack20, $stack28, $stack36, $stack44, $stack52, $stack60, $stack68, $stack76, $stack84, $stack92, $stack100;
        int $stack7, $stack15, $stack23, $stack31, $stack39, $stack47, $stack55, $stack63, $stack71, $stack79, $stack87, $stack95, $stack103, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack4 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack4, "-", 0, $stack7, $i0);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--y-", $stack10);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack12 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack15 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i1 = (int) -1;

        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack12, "-", 1, $stack15, $i1);

        $stack18 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aax--y-", $stack18);

        $u2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack20 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack23 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i2 = (int) -1;

        virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack20, "-", 2, $stack23, $i2);

        $stack26 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aax--y-", $stack26);

        $u3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack28 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack31 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i3 = (int) -1;

        virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack28, "-", 3, $stack31, $i3);

        $stack34 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aax--y-", $stack34);

        $u4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack36 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack39 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i4 = (int) -1;

        virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack36, "-", 4, $stack39, $i4);

        $stack42 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxa-ay-", $stack42);

        $u5 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack44 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack47 = virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i5 = (int) -1;

        virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack44, "-", 5, $stack47, $i5);

        $stack50 = virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaa-y-", $stack50);

        $u6 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack52 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack55 = virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i6 = (int) -1;

        virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack52, "-", 6, $stack55, $i6);

        $stack58 = virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaay-", $stack58);

        $u7 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack60 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack63 = virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i7 = (int) -1;

        virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack60, "-", 7, $stack63, $i7);

        $stack66 = virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaay-", $stack66);

        $u8 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u8.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack68 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack71 = virtualinvoke $u8.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i8 = (int) -1;

        virtualinvoke $u8.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack68, "-", 8, $stack71, $i8);

        $stack74 = virtualinvoke $u8.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaay-", $stack74);

        $u9 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u9.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack76 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack79 = virtualinvoke $u9.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i9 = (int) -1;

        virtualinvoke $u9.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack76, "-", 9, $stack79, $i9);

        $stack82 = virtualinvoke $u9.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaayaa", $stack82);

        $u10 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u10.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack84 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack87 = virtualinvoke $u10.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i10 = (int) -1;

        virtualinvoke $u10.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack84, "-", 10, $stack87, $i10);

        $stack90 = virtualinvoke $u10.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaayaa", $stack90);

        $u11 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u11.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

     label1:
        $stack92 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack95 = virtualinvoke $u11.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i11 = (int) -1;

        virtualinvoke $u11.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack92, "-", 11, $stack95, $i11);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack109 := @caughtexception;

     label4:
        $stack98 = virtualinvoke $u11.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaayaa", $stack98);

        $u12 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u12.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

     label5:
        $stack100 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $stack103 = virtualinvoke $u12.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $i12 = (int) -1;

        $i13 = (int) -1;

        virtualinvoke $u12.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack100, "-", $i12, $stack103, $i13);

        staticinvoke <org.junit.Assert: void fail()>();

     label6:
        goto label8;

     label7:
        $stack107 := @caughtexception;

     label8:
        $stack106 = virtualinvoke $u12.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaayaa", $stack106);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label5 to label6 with label7;
    }

    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex()
    {
        java.lang.IndexOutOfBoundsException $stack63;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1, $u2, $u3, $u4, $u5, $u6, $u7, $u8, $u9, $u10, $u11;
        org.apache.commons.lang3.text.StrMatcher $stack4, $stack9, $stack14, $stack19, $stack24, $stack29, $stack34, $stack39, $stack44, $stack49, $stack54, $stack59;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $stack7, $stack12, $stack17, $stack22, $stack27, $stack32, $stack37, $stack42, $stack47, $stack52, $stack57, $stack62;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack4 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack4, "-", 0, 0, $i0);

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaayaa", $stack7);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack9 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i1 = (int) -1;

        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack9, "-", 0, 2, $i1);

        $stack12 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-xaaaayaa", $stack12);

        $u2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack14 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i2 = (int) -1;

        virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack14, "-", 0, 3, $i2);

        $stack17 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-xaaaayaa", $stack17);

        $u3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack19 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i3 = (int) -1;

        virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack19, "-", 0, 4, $i3);

        $stack22 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-xaaaayaa", $stack22);

        $u4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack24 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i4 = (int) -1;

        virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack24, "-", 0, 5, $i4);

        $stack27 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x-aayaa", $stack27);

        $u5 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack29 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i5 = (int) -1;

        virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack29, "-", 0, 6, $i5);

        $stack32 = virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x-aayaa", $stack32);

        $u6 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack34 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i6 = (int) -1;

        virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack34, "-", 0, 7, $i6);

        $stack37 = virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--yaa", $stack37);

        $u7 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack39 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i7 = (int) -1;

        virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack39, "-", 0, 8, $i7);

        $stack42 = virtualinvoke $u7.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--yaa", $stack42);

        $u8 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u8.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack44 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i8 = (int) -1;

        virtualinvoke $u8.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack44, "-", 0, 9, $i8);

        $stack47 = virtualinvoke $u8.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--yaa", $stack47);

        $u9 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u9.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack49 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i9 = (int) -1;

        virtualinvoke $u9.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack49, "-", 0, 10, $i9);

        $stack52 = virtualinvoke $u9.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--y-", $stack52);

        $u10 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u10.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack54 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i10 = (int) -1;

        virtualinvoke $u10.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack54, "-", 0, 1000, $i10);

        $stack57 = virtualinvoke $u10.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--y-", $stack57);

        $u11 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u11.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

     label1:
        $stack59 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i11 = (int) -1;

        virtualinvoke $u11.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack59, "-", 2, 1, $i11);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack63 := @caughtexception;

     label4:
        $stack62 = virtualinvoke $u11.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaayaa", $stack62);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void testReplace_StrMatcher_String_int_int_int_VaryCount()
    {
        org.apache.commons.lang3.text.StrMatcher $stack3, $stack8, $stack13, $stack18, $stack23, $stack28, $stack33;
        int $i0;
        java.lang.String $stack6, $stack11, $stack16, $stack21, $stack26, $stack31, $stack36;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1, $u2, $u3, $u4, $u5, $u6;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack3 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack3, "-", 0, 10, $i0);

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--y-", $stack6);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack8 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack8, "-", 0, 10, 0);

        $stack11 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("aaxaaaayaa", $stack11);

        $u2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack13 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack13, "-", 0, 10, 1);

        $stack16 = virtualinvoke $u2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-xaaaayaa", $stack16);

        $u3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack18 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack18, "-", 0, 10, 2);

        $stack21 = virtualinvoke $u3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x-aayaa", $stack21);

        $u4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack23 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack23, "-", 0, 10, 3);

        $stack26 = virtualinvoke $u4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--yaa", $stack26);

        $u5 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack28 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack28, "-", 0, 10, 4);

        $stack31 = virtualinvoke $u5.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--y-", $stack31);

        $u6 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("aaxaaaayaa");

        $stack33 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("aa");

        virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder replace(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)>($stack33, "-", 0, 10, 5);

        $stack36 = virtualinvoke $u6.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("-x--y-", $stack36);

        return;
    }

    public void testReverse()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack5, $stack10, $stack13;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack4, $stack6, $stack9, $stack12;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder reverse()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack5);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(boolean)>(1);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder reverse()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("eurt", $stack10);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder reverse()>();

        $stack13 = virtualinvoke $stack12.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("true", $stack13);

        return;
    }

    public void testTrim()
    {
        java.lang.String $stack5, $stack10, $stack15, $stack20, $stack25, $stack30;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack4, $stack6, $stack9, $stack11, $stack14, $stack16, $stack19, $stack21, $stack24, $stack26, $stack29;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder reverse()>();

        $stack5 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack5);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(" \u0000 ");

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder trim()>();

        $stack10 = virtualinvoke $stack9.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack11.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(" \u0000 a b c");

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder trim()>();

        $stack15 = virtualinvoke $stack14.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c", $stack15);

        $stack16 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack16.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("a b c \u0000 ");

        $stack19 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder trim()>();

        $stack20 = virtualinvoke $stack19.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c", $stack20);

        $stack21 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack21.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(" \u0000 a b c \u0000 ");

        $stack24 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder trim()>();

        $stack25 = virtualinvoke $stack24.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c", $stack25);

        $stack26 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack26.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("a b c");

        $stack29 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder trim()>();

        $stack30 = virtualinvoke $stack29.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c", $stack30);

        return;
    }

    public void testStartsWith()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        boolean $stack3, $stack4, $stack5, $stack7, $stack8, $stack9, $stack10;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean startsWith(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean startsWith(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean startsWith(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("abc");

        $stack7 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean startsWith(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean startsWith(java.lang.String)>("ab");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean startsWith(java.lang.String)>("abc");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean startsWith(java.lang.String)>("cba");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        return;
    }

    public void testEndsWith()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        boolean $stack3, $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("c");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack4);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("abc");

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("c");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("bc");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("abc");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("cba");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("abcd");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>(" abc");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean endsWith(java.lang.String)>("abc ");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        return;
    }

    public void testSubSequenceIntInt()
    {
        java.lang.IndexOutOfBoundsException $stack21, $stack38, $stack42, $stack46;
        int $stack7, $stack8, $i0, $i1;
        java.lang.String $stack13, $stack18;
        java.lang.CharSequence $stack12, $stack14, $stack15, $stack17, $stack19, $stack20;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("hello goodbye");

     label01:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>($i0, 5);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $stack46 := @caughtexception;

     label04:
        $i1 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>(2, $i1);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack42 := @caughtexception;

     label07:
        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack8 = $stack7 + 1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>(2, $stack8);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack38 := @caughtexception;

     label10:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>(3, 2);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $stack21 := @caughtexception;

     label13:
        $stack12 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>(0, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello", $stack12);

        $stack13 = "hello goodbye";

        $stack14 = virtualinvoke $stack13.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(0, 6);

        $stack15 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>(0, 6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack14, $stack15);

        $stack17 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>(6, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("goodbye", $stack17);

        $stack18 = "hello goodbye";

        $stack19 = virtualinvoke $stack18.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(6, 13);

        $stack20 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.CharSequence subSequence(int,int)>(6, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack19, $stack20);

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
    }

    public void testSubstringInt()
    {
        java.lang.IndexOutOfBoundsException $stack16, $stack17;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack5, $stack6, $stack7, $stack8, $stack10, $stack11, $stack12, $stack13;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("hello goodbye");

        $stack5 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int)>(6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("goodbye", $stack5);

        $stack6 = "hello goodbye";

        $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int)>(6);

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int)>(6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello goodbye", $stack10);

        $stack11 = "hello goodbye";

        $stack12 = virtualinvoke $stack11.<java.lang.String: java.lang.String substring(int)>(0);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

     label1:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int)>($i0);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack17 := @caughtexception;

     label4:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int)>(15);

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $stack16 := @caughtexception;

     label7:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }

    public void testSubstringIntInt()
    {
        java.lang.IndexOutOfBoundsException $stack18, $stack19;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack5, $stack6, $stack7, $stack8, $stack10, $stack11, $stack12, $stack13, $stack15;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("hello goodbye");

        $stack5 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(0, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello", $stack5);

        $stack6 = "hello goodbye";

        $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>(0, 6);

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(0, 6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack7, $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(6, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("goodbye", $stack10);

        $stack11 = "hello goodbye";

        $stack12 = virtualinvoke $stack11.<java.lang.String: java.lang.String substring(int,int)>(6, 13);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(6, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack12, $stack13);

        $stack15 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(6, 20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("goodbye", $stack15);

     label1:
        $i0 = (int) -1;

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>($i0, 5);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack19 := @caughtexception;

     label4:
        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String substring(int,int)>(15, 20);

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $stack18 := @caughtexception;

     label7:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }

    public void testMidString()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0, $i1;
        java.lang.String $stack4, $stack6, $stack8, $stack10, $stack12, $stack14;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("hello goodbye hello");

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String midString(int,int)>(6, 7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("goodbye", $stack4);

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String midString(int,int)>(0, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello", $stack6);

        $i0 = (int) -5;

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String midString(int,int)>($i0, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello", $stack8);

        $i1 = (int) -1;

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String midString(int,int)>(0, $i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack10);

        $stack12 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String midString(int,int)>(20, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack12);

        $stack14 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String midString(int,int)>(14, 22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hello", $stack14);

        return;
    }

    public void testRightString()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack4, $stack6, $stack8, $stack10;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("left right");

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String rightString(int)>(5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("right", $stack4);

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String rightString(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $i0 = (int) -5;

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String rightString(int)>($i0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String rightString(int)>(15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("left right", $stack10);

        return;
    }

    public void testLeftString()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $i0;
        java.lang.String $stack4, $stack6, $stack8, $stack10;
        org.apache.commons.lang3.text.StrBuilder $u0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("left right");

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String leftString(int)>(4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("left", $stack4);

        $stack6 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String leftString(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack6);

        $i0 = (int) -5;

        $stack8 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String leftString(int)>($i0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.lang.String leftString(int)>(15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("left right", $stack10);

        return;
    }

    public void testContains_char()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        boolean $stack3, $stack4, $stack5, $stack6;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcdefghijklmnopqrstuvwxyz");

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(char)>(97);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(char)>(111);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(char)>(122);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(char)>(49);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        return;
    }

    public void testContains_String()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        boolean $stack3, $stack4, $stack5, $stack6, $stack8;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcdefghijklmnopqrstuvwxyz");

        $stack3 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack3);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(java.lang.String)>("pq");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(java.lang.String)>("z");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(java.lang.String)>("zyx");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack6);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        return;
    }

    public void testContains_StrMatcher()
    {
        org.apache.commons.lang3.text.StrMatcher $stack3, $stack5, $stack7, $stack9, $stack14, $stack17;
        boolean $stack4, $stack6, $stack8, $stack10, $stack12, $stack15, $stack18;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2, $stack13;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abcdefghijklmnopqrstuvwxyz");

        $stack3 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(org.apache.commons.lang3.text.StrMatcher)>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("pq");

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(org.apache.commons.lang3.text.StrMatcher)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(122);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(org.apache.commons.lang3.text.StrMatcher)>($stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher stringMatcher(java.lang.String)>("zy");

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(org.apache.commons.lang3.text.StrMatcher)>($stack9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(org.apache.commons.lang3.text.StrMatcher)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack12);

        $stack13 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack13.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack14 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack15 = virtualinvoke $stack13.<org.apache.commons.lang3.text.StrBuilder: boolean contains(org.apache.commons.lang3.text.StrMatcher)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        virtualinvoke $stack13.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("B A1 C");

        $stack17 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack18 = virtualinvoke $stack13.<org.apache.commons.lang3.text.StrBuilder: boolean contains(org.apache.commons.lang3.text.StrMatcher)>($stack17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        return;
    }

    public void testIndexOf_char()
    {
        long $stack5, $stack8, $stack10, $stack13, $stack16, $stack18, $stack21;
        int $stack4, $stack7, $stack9, $stack12, $stack15, $stack17, $stack20;
        java.lang.String $stack6, $stack14;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char)>(97);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack6 = "abab";

        $stack7 = virtualinvoke $stack6.<java.lang.String: int indexOf(int)>(97);

        $stack8 = (long) $stack7;

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char)>(97);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, $stack10);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char)>(98);

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack13);

        $stack14 = "abab";

        $stack15 = virtualinvoke $stack14.<java.lang.String: int indexOf(int)>(98);

        $stack16 = (long) $stack15;

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char)>(98);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack16, $stack18);

        $stack20 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char)>(122);

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack21);

        return;
    }

    public void testIndexOf_char_int()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1;
        long $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack22, $stack25, $stack28, $stack30, $stack33, $stack37, $stack40;
        int $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack21, $stack24, $stack27, $stack29, $stack32, $stack36, $stack39, $i0;
        java.lang.String $stack18, $stack26;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $i0 = (int) -1;

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(97, $i0);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(97, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(97, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack11);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(97, 4);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack14);

        $stack16 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(97, 5);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack17);

        $stack18 = "abab";

        $stack19 = virtualinvoke $stack18.<java.lang.String: int indexOf(int,int)>(97, 1);

        $stack20 = (long) $stack19;

        $stack21 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(97, 1);

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack20, $stack22);

        $stack24 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(98, 2);

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack25);

        $stack26 = "abab";

        $stack27 = virtualinvoke $stack26.<java.lang.String: int indexOf(int,int)>(98, 2);

        $stack28 = (long) $stack27;

        $stack29 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(98, 2);

        $stack30 = (long) $stack29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack28, $stack30);

        $stack32 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(122, 2);

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack33);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("xyzabc");

        $stack36 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(122, 0);

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack37);

        $stack39 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char,int)>(122, 3);

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack40);

        return;
    }

    public void testLastIndexOf_char()
    {
        long $stack5, $stack8, $stack10, $stack13, $stack16, $stack18, $stack21;
        int $stack4, $stack7, $stack9, $stack12, $stack15, $stack17, $stack20;
        java.lang.String $stack6, $stack14;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char)>(97);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack5);

        $stack6 = "abab";

        $stack7 = virtualinvoke $stack6.<java.lang.String: int lastIndexOf(int)>(97);

        $stack8 = (long) $stack7;

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char)>(97);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, $stack10);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char)>(98);

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack13);

        $stack14 = "abab";

        $stack15 = virtualinvoke $stack14.<java.lang.String: int lastIndexOf(int)>(98);

        $stack16 = (long) $stack15;

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char)>(98);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack16, $stack18);

        $stack20 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char)>(122);

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack21);

        return;
    }

    public void testLastIndexOf_char_int()
    {
        long $stack5, $stack8, $stack11, $stack14, $stack16, $stack19, $stack22, $stack24, $stack27, $stack33, $stack36;
        int $stack4, $stack7, $stack10, $stack13, $stack15, $stack18, $stack21, $stack23, $stack26, $stack31, $stack32, $stack35, $i0;
        java.lang.String $stack12, $stack20;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $i0 = (int) -1;

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(97, $i0);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack5);

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(97, 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(97, 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack12 = "abab";

        $stack13 = virtualinvoke $stack12.<java.lang.String: int lastIndexOf(int,int)>(97, 1);

        $stack14 = (long) $stack13;

        $stack15 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(97, 1);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack14, $stack16);

        $stack18 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(98, 2);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack19);

        $stack20 = "abab";

        $stack21 = virtualinvoke $stack20.<java.lang.String: int lastIndexOf(int,int)>(98, 2);

        $stack22 = (long) $stack21;

        $stack23 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(98, 2);

        $stack24 = (long) $stack23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack22, $stack24);

        $stack26 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(122, 2);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack27);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("xyzabc");

        $stack31 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack32 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(122, $stack31);

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack33);

        $stack35 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(char,int)>(122, 1);

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack36);

        return;
    }

    public void testIndexOf_String()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        long $stack5, $stack8, $stack10, $stack13, $stack16, $stack18, $stack21, $stack24, $stack26, $stack29, $stack32, $stack34, $stack37, $stack41;
        int $stack4, $stack7, $stack9, $stack12, $stack15, $stack17, $stack20, $stack23, $stack25, $stack28, $stack31, $stack33, $stack36, $stack40;
        java.lang.String $stack6, $stack14, $stack22, $stack30;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("a");

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack6 = "abab";

        $stack7 = virtualinvoke $stack6.<java.lang.String: int indexOf(java.lang.String)>("a");

        $stack8 = (long) $stack7;

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("a");

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, $stack10);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("ab");

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack13);

        $stack14 = "abab";

        $stack15 = virtualinvoke $stack14.<java.lang.String: int indexOf(java.lang.String)>("ab");

        $stack16 = (long) $stack15;

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("ab");

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack16, $stack18);

        $stack20 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("b");

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack21);

        $stack22 = "abab";

        $stack23 = virtualinvoke $stack22.<java.lang.String: int indexOf(java.lang.String)>("b");

        $stack24 = (long) $stack23;

        $stack25 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("b");

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack24, $stack26);

        $stack28 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("ba");

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack29);

        $stack30 = "abab";

        $stack31 = virtualinvoke $stack30.<java.lang.String: int indexOf(java.lang.String)>("ba");

        $stack32 = (long) $stack31;

        $stack33 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("ba");

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack32, $stack34);

        $stack36 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("z");

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack37);

        $stack40 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>(null);

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack41);

        return;
    }

    public void testIndexOf_String_int()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1;
        long $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack32, $stack35, $stack37, $stack40, $stack43, $stack45, $stack48, $stack51, $stack53, $stack56, $stack59, $stack61, $stack64, $stack68, $stack71, $stack75;
        int $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack31, $stack34, $stack36, $stack39, $stack42, $stack44, $stack47, $stack50, $stack52, $stack55, $stack58, $stack60, $stack63, $stack67, $stack70, $stack74, $i0;
        java.lang.String $stack33, $stack41, $stack49, $stack57;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $i0 = (int) -1;

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", $i0);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack5);

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack11);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack17);

        $stack19 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", 4);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack20);

        $stack22 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", 5);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("abcdef", 0);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        $stack28 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("", 0);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack29);

        $stack31 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("", 1);

        $stack32 = (long) $stack31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack32);

        $stack33 = "abab";

        $stack34 = virtualinvoke $stack33.<java.lang.String: int indexOf(java.lang.String,int)>("a", 1);

        $stack35 = (long) $stack34;

        $stack36 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("a", 1);

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack35, $stack37);

        $stack39 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("ab", 1);

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack40);

        $stack41 = "abab";

        $stack42 = virtualinvoke $stack41.<java.lang.String: int indexOf(java.lang.String,int)>("ab", 1);

        $stack43 = (long) $stack42;

        $stack44 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("ab", 1);

        $stack45 = (long) $stack44;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack43, $stack45);

        $stack47 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("b", 2);

        $stack48 = (long) $stack47;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack48);

        $stack49 = "abab";

        $stack50 = virtualinvoke $stack49.<java.lang.String: int indexOf(java.lang.String,int)>("b", 2);

        $stack51 = (long) $stack50;

        $stack52 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("b", 2);

        $stack53 = (long) $stack52;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack51, $stack53);

        $stack55 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("ba", 1);

        $stack56 = (long) $stack55;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack56);

        $stack57 = "abab";

        $stack58 = virtualinvoke $stack57.<java.lang.String: int indexOf(java.lang.String,int)>("ba", 2);

        $stack59 = (long) $stack58;

        $stack60 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("ba", 2);

        $stack61 = (long) $stack60;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack59, $stack61);

        $stack63 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("z", 2);

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack64);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("xyzabc");

        $stack67 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("za", 0);

        $stack68 = (long) $stack67;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack68);

        $stack70 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>("za", 3);

        $stack71 = (long) $stack70;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack71);

        $stack74 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String,int)>(null, 2);

        $stack75 = (long) $stack74;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack75);

        return;
    }

    public void testLastIndexOf_String()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        long $stack5, $stack8, $stack10, $stack13, $stack16, $stack18, $stack21, $stack24, $stack26, $stack29, $stack32, $stack34, $stack37, $stack41;
        int $stack4, $stack7, $stack9, $stack12, $stack15, $stack17, $stack20, $stack23, $stack25, $stack28, $stack31, $stack33, $stack36, $stack40;
        java.lang.String $stack6, $stack14, $stack22, $stack30;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("a");

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack5);

        $stack6 = "abab";

        $stack7 = virtualinvoke $stack6.<java.lang.String: int lastIndexOf(java.lang.String)>("a");

        $stack8 = (long) $stack7;

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("a");

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack8, $stack10);

        $stack12 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("ab");

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack13);

        $stack14 = "abab";

        $stack15 = virtualinvoke $stack14.<java.lang.String: int lastIndexOf(java.lang.String)>("ab");

        $stack16 = (long) $stack15;

        $stack17 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("ab");

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack16, $stack18);

        $stack20 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("b");

        $stack21 = (long) $stack20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack21);

        $stack22 = "abab";

        $stack23 = virtualinvoke $stack22.<java.lang.String: int lastIndexOf(java.lang.String)>("b");

        $stack24 = (long) $stack23;

        $stack25 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("b");

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack24, $stack26);

        $stack28 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("ba");

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack29);

        $stack30 = "abab";

        $stack31 = virtualinvoke $stack30.<java.lang.String: int lastIndexOf(java.lang.String)>("ba");

        $stack32 = (long) $stack31;

        $stack33 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("ba");

        $stack34 = (long) $stack33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack32, $stack34);

        $stack36 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>("z");

        $stack37 = (long) $stack36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack37);

        $stack40 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String)>(null);

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack41);

        return;
    }

    public void testLastIndexOf_String_int()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        long $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23, $stack26, $stack29, $stack31, $stack34, $stack36, $stack39, $stack41, $stack44, $stack47, $stack49, $stack52, $stack55, $stack57, $stack60, $stack63, $stack65, $stack68, $stack74, $stack77, $stack81;
        java.lang.String $stack27, $stack32, $stack37, $stack45, $stack53, $stack61;
        org.apache.commons.lang3.text.StrBuilder $u0, $u1;
        int $stack4, $stack7, $stack10, $stack13, $stack16, $stack19, $stack22, $stack25, $stack28, $stack30, $stack33, $stack35, $stack38, $stack40, $stack43, $stack46, $stack48, $stack51, $stack54, $stack56, $stack59, $stack62, $stack64, $stack67, $stack72, $stack73, $stack76, $stack80, $i0;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abab");

        $i0 = (int) -1;

        $stack4 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", $i0);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack5);

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", 0);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack8);

        $stack10 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", 1);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack11);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", 2);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack14);

        $stack16 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", 3);

        $stack17 = (long) $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack17);

        $stack19 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", 4);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack20);

        $stack22 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", 5);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack23);

        $stack25 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("abcdef", 3);

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack26);

        $stack27 = "abab";

        $stack28 = virtualinvoke $stack27.<java.lang.String: int lastIndexOf(java.lang.String,int)>("", 3);

        $stack29 = (long) $stack28;

        $stack30 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("", 3);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack29, $stack31);

        $stack32 = "abab";

        $stack33 = virtualinvoke $stack32.<java.lang.String: int lastIndexOf(java.lang.String,int)>("", 1);

        $stack34 = (long) $stack33;

        $stack35 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("", 1);

        $stack36 = (long) $stack35;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack34, $stack36);

        $stack37 = "abab";

        $stack38 = virtualinvoke $stack37.<java.lang.String: int lastIndexOf(java.lang.String,int)>("a", 1);

        $stack39 = (long) $stack38;

        $stack40 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("a", 1);

        $stack41 = (long) $stack40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack39, $stack41);

        $stack43 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("ab", 1);

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack44);

        $stack45 = "abab";

        $stack46 = virtualinvoke $stack45.<java.lang.String: int lastIndexOf(java.lang.String,int)>("ab", 1);

        $stack47 = (long) $stack46;

        $stack48 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("ab", 1);

        $stack49 = (long) $stack48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack47, $stack49);

        $stack51 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("b", 2);

        $stack52 = (long) $stack51;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack52);

        $stack53 = "abab";

        $stack54 = virtualinvoke $stack53.<java.lang.String: int lastIndexOf(java.lang.String,int)>("b", 2);

        $stack55 = (long) $stack54;

        $stack56 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("b", 2);

        $stack57 = (long) $stack56;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack55, $stack57);

        $stack59 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("ba", 2);

        $stack60 = (long) $stack59;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack60);

        $stack61 = "abab";

        $stack62 = virtualinvoke $stack61.<java.lang.String: int lastIndexOf(java.lang.String,int)>("ba", 2);

        $stack63 = (long) $stack62;

        $stack64 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("ba", 2);

        $stack65 = (long) $stack64;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack63, $stack65);

        $stack67 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("z", 2);

        $stack68 = (long) $stack67;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack68);

        $u1 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("xyzabc");

        $stack72 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int length()>();

        $stack73 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("za", $stack72);

        $stack74 = (long) $stack73;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack74);

        $stack76 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>("za", 1);

        $stack77 = (long) $stack76;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack77);

        $stack80 = virtualinvoke $u1.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(java.lang.String,int)>(null, 2);

        $stack81 = (long) $stack80;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack81);

        return;
    }

    public void testIndexOf_StrMatcher()
    {
        long $stack6, $stack10, $stack15, $stack19, $stack23, $stack27, $stack31, $stack35, $stack40;
        org.apache.commons.lang3.text.StrMatcher $stack8, $stack13, $stack17, $stack21, $stack25, $stack29, $stack37;
        int $stack5, $stack9, $stack14, $stack18, $stack22, $stack26, $stack30, $stack34, $stack39;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>(null);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>($stack8);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack10);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("ab bd");

        $stack13 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>($stack13);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack18 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>($stack17);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack22 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>($stack21);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(100);

        $stack26 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>($stack25);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        $stack30 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>($stack29);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack31);

        $stack34 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>(null);

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack35);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(" A1 junction");

        $stack37 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack39 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher)>($stack37);

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack40);

        return;
    }

    public void testIndexOf_StrMatcher_int()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        long $stack6, $stack10, $stack14, $stack19, $stack23, $stack27, $stack31, $stack35, $stack39, $stack43, $stack47, $stack51, $stack55, $stack59, $stack63, $stack67, $stack71, $stack75, $stack79, $stack83, $stack87, $stack91, $stack96, $stack100, $stack104, $stack108, $stack112, $stack116;
        org.apache.commons.lang3.text.StrBuilder $u0;
        org.apache.commons.lang3.text.StrMatcher $stack8, $stack12, $stack17, $stack21, $stack25, $stack29, $stack33, $stack37, $stack41, $stack45, $stack49, $stack53, $stack57, $stack61, $stack65, $stack69, $stack73, $stack77, $stack81, $stack85, $stack93, $stack97, $stack101, $stack105, $stack109, $stack113;
        int $stack5, $stack9, $stack13, $stack18, $stack22, $stack26, $stack30, $stack34, $stack38, $stack42, $stack46, $stack50, $stack54, $stack58, $stack62, $stack66, $stack70, $stack74, $stack78, $stack82, $stack86, $stack90, $stack95, $stack99, $stack103, $stack107, $stack111, $stack115, $i0, $i1, $i2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>(null, 2);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack9 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack8, 2);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack12, 0);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack14);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("ab bd");

        $stack17 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $i0 = (int) -2;

        $stack18 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack17, $i0);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack22 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack21, 0);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack26 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack25, 2);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack30 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack29, 20);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack31);

        $stack33 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $i1 = (int) -1;

        $stack34 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack33, $i1);

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack35);

        $stack37 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack38 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack37, 0);

        $stack39 = (long) $stack38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack39);

        $stack41 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack42 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack41, 1);

        $stack43 = (long) $stack42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack43);

        $stack45 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack46 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack45, 2);

        $stack47 = (long) $stack46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack47);

        $stack49 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack50 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack49, 3);

        $stack51 = (long) $stack50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack51);

        $stack53 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack54 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack53, 4);

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack55);

        $stack57 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack58 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack57, 5);

        $stack59 = (long) $stack58;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack59);

        $stack61 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack62 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack61, 6);

        $stack63 = (long) $stack62;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack63);

        $stack65 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $i2 = (int) -2;

        $stack66 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack65, $i2);

        $stack67 = (long) $stack66;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack67);

        $stack69 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack70 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack69, 0);

        $stack71 = (long) $stack70;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack71);

        $stack73 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack74 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack73, 2);

        $stack75 = (long) $stack74;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack75);

        $stack77 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack78 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack77, 4);

        $stack79 = (long) $stack78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack79);

        $stack81 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack82 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack81, 20);

        $stack83 = (long) $stack82;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack83);

        $stack85 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        $stack86 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack85, 0);

        $stack87 = (long) $stack86;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack87);

        $stack90 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>(null, 0);

        $stack91 = (long) $stack90;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack91);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(" A1 junction with A2");

        $stack93 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack95 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack93, 5);

        $stack96 = (long) $stack95;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack96);

        $stack97 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack99 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack97, 6);

        $stack100 = (long) $stack99;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack100);

        $stack101 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack103 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack101, 7);

        $stack104 = (long) $stack103;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $stack104);

        $stack105 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack107 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack105, 22);

        $stack108 = (long) $stack107;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $stack108);

        $stack109 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack111 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack109, 23);

        $stack112 = (long) $stack111;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $stack112);

        $stack113 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack115 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int indexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack113, 24);

        $stack116 = (long) $stack115;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack116);

        return;
    }

    public void testLastIndexOf_StrMatcher()
    {
        long $stack6, $stack10, $stack15, $stack19, $stack23, $stack27, $stack31, $stack35, $stack40;
        org.apache.commons.lang3.text.StrMatcher $stack8, $stack13, $stack17, $stack21, $stack25, $stack29, $stack37;
        int $stack5, $stack9, $stack14, $stack18, $stack22, $stack26, $stack30, $stack34, $stack39;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>(null);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack9 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>($stack8);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack10);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("ab bd");

        $stack13 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack14 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>($stack13);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack15);

        $stack17 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack18 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>($stack17);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack19);

        $stack21 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack22 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>($stack21);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(100);

        $stack26 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>($stack25);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        $stack30 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>($stack29);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack31);

        $stack34 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>(null);

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack35);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(" A1 junction");

        $stack37 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack39 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher)>($stack37);

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack40);

        return;
    }

    public void testLastIndexOf_StrMatcher_int()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        long $stack6, $stack10, $stack14, $stack18, $stack23, $stack27, $stack31, $stack35, $stack39, $stack43, $stack47, $stack51, $stack55, $stack59, $stack63, $stack67, $stack71, $stack75, $stack79, $stack83, $stack87, $stack91, $stack95, $stack100, $stack104, $stack108, $stack112, $stack116, $stack120;
        org.apache.commons.lang3.text.StrBuilder $u0;
        org.apache.commons.lang3.text.StrMatcher $stack8, $stack12, $stack16, $stack21, $stack25, $stack29, $stack33, $stack37, $stack41, $stack45, $stack49, $stack53, $stack57, $stack61, $stack65, $stack69, $stack73, $stack77, $stack81, $stack85, $stack89, $stack97, $stack101, $stack105, $stack109, $stack113, $stack117;
        int $stack5, $stack9, $stack13, $stack17, $stack22, $stack26, $stack30, $stack34, $stack38, $stack42, $stack46, $stack50, $stack54, $stack58, $stack62, $stack66, $stack70, $stack74, $stack78, $stack82, $stack86, $stack90, $stack94, $stack99, $stack103, $stack107, $stack111, $stack115, $stack119, $i0, $i1, $i2, $i3;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>(null, 2);

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack9 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack8, 2);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack13 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack12, 0);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack14);

        $stack16 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $i0 = (int) -1;

        $stack17 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack16, $i0);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack18);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("ab bd");

        $stack21 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $i1 = (int) -2;

        $stack22 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack21, $i1);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack23);

        $stack25 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack26 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack25, 0);

        $stack27 = (long) $stack26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack27);

        $stack29 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack30 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack29, 2);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack31);

        $stack33 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(97);

        $stack34 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack33, 20);

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack35);

        $stack37 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $i2 = (int) -1;

        $stack38 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack37, $i2);

        $stack39 = (long) $stack38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack39);

        $stack41 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack42 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack41, 0);

        $stack43 = (long) $stack42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack43);

        $stack45 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack46 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack45, 1);

        $stack47 = (long) $stack46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack47);

        $stack49 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack50 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack49, 2);

        $stack51 = (long) $stack50;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack51);

        $stack53 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack54 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack53, 3);

        $stack55 = (long) $stack54;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack55);

        $stack57 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack58 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack57, 4);

        $stack59 = (long) $stack58;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack59);

        $stack61 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack62 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack61, 5);

        $stack63 = (long) $stack62;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack63);

        $stack65 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher charMatcher(char)>(98);

        $stack66 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack65, 6);

        $stack67 = (long) $stack66;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack67);

        $stack69 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $i3 = (int) -2;

        $stack70 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack69, $i3);

        $stack71 = (long) $stack70;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack71);

        $stack73 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack74 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack73, 0);

        $stack75 = (long) $stack74;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack75);

        $stack77 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack78 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack77, 2);

        $stack79 = (long) $stack78;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack79);

        $stack81 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack82 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack81, 4);

        $stack83 = (long) $stack82;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack83);

        $stack85 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher spaceMatcher()>();

        $stack86 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack85, 20);

        $stack87 = (long) $stack86;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack87);

        $stack89 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher noneMatcher()>();

        $stack90 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack89, 0);

        $stack91 = (long) $stack90;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack91);

        $stack94 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>(null, 0);

        $stack95 = (long) $stack94;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack95);

        virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(" A1 junction with A2");

        $stack97 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack99 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack97, 5);

        $stack100 = (long) $stack99;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack100);

        $stack101 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack103 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack101, 6);

        $stack104 = (long) $stack103;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack104);

        $stack105 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack107 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack105, 7);

        $stack108 = (long) $stack107;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack108);

        $stack109 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack111 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack109, 22);

        $stack112 = (long) $stack111;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack112);

        $stack113 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack115 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack113, 23);

        $stack116 = (long) $stack115;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $stack116);

        $stack117 = <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER>;

        $stack119 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: int lastIndexOf(org.apache.commons.lang3.text.StrMatcher,int)>($stack117, 24);

        $stack120 = (long) $stack119;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $stack120);

        return;
    }

    public void testAsTokenizer() throws java.lang.Exception
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack6;
        org.apache.commons.lang3.text.StrTokenizer $stack8;
        java.lang.String[] $stack9, $stack18, $stack31;
        long $stack11, $stack16, $stack20, $stack25, $stack33, $stack40;
        int $stack10, $stack15, $stack19, $stack24, $stack32, $stack39;
        java.lang.String $stack12, $stack13, $stack21, $stack22, $stack27, $stack29, $stack34, $stack35, $stack36, $stack37, $stack42, $stack44, $stack46, $stack48, $stack50;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack6 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("a b ");

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrTokenizer asTokenizer()>();

        $stack9 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] getTokenArray()>();

        $stack10 = lengthof $stack9;

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack11);

        $stack12 = $stack9[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack12);

        $stack13 = $stack9[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack13);

        $stack15 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: int size()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack16);

        virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("c d ");

        $stack18 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] getTokenArray()>();

        $stack19 = lengthof $stack18;

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack20);

        $stack21 = $stack18[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack21);

        $stack22 = $stack18[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack22);

        $stack24 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: int size()>();

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack25);

        $stack27 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack27);

        $stack29 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack29);

        virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: org.apache.commons.lang3.text.StrTokenizer reset()>();

        $stack31 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String[] getTokenArray()>();

        $stack32 = lengthof $stack31;

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack33);

        $stack34 = $stack31[0];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack34);

        $stack35 = $stack31[1];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack35);

        $stack36 = $stack31[2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack36);

        $stack37 = $stack31[3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack37);

        $stack39 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: int size()>();

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $stack40);

        $stack42 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a", $stack42);

        $stack44 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("b", $stack44);

        $stack46 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("c", $stack46);

        $stack48 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("d", $stack48);

        $stack50 = virtualinvoke $stack8.<org.apache.commons.lang3.text.StrTokenizer: java.lang.String getContent()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("a b c d ", $stack50);

        return;
    }

    public void testAsReader() throws java.lang.Exception
    {
        java.lang.IndexOutOfBoundsException $stack74, $stack101, $stack106, $stack111, $stack116;
        boolean $stack8, $stack17, $stack22, $stack50, $stack51;
        java.io.Reader $stack7, $stack23, $stack52;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $u0;
        long $stack11, $stack16, $stack19, $stack21, $stack26, $stack29, $stack31, $stack33, $stack35, $stack38, $stack40, $stack42, $stack44, $stack46, $stack49, $stack60, $stack62, $stack64, $stack66, $stack70, $stack73;
        int $stack10, $stack15, $stack25, $stack28, $stack37, $stack48, $stack59, $stack69, $stack72, $i0, $i1, $i2;
        java.lang.String $u1;
        char $stack30, $stack32, $stack34, $stack39, $stack41, $stack43, $stack61, $stack63, $stack65;
        char[] buf, $stack96, array;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $u0 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("some text");

        $stack7 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.io.Reader asReader()>();

        $stack8 = virtualinvoke $stack7.<java.io.Reader: boolean ready()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        buf = newarray (char)[40];

        $stack10 = virtualinvoke $stack7.<java.io.Reader: int read(char[])>(buf);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack11);

        $u1 = new java.lang.String;

        specialinvoke $u1.<java.lang.String: void <init>(char[],int,int)>(buf, 0, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("some text", $u1);

        $stack15 = virtualinvoke $stack7.<java.io.Reader: int read()>();

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack16);

        $stack17 = virtualinvoke $stack7.<java.io.Reader: boolean ready()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

        $stack19 = virtualinvoke $stack7.<java.io.Reader: long skip(long)>(2L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack19);

        $stack21 = virtualinvoke $stack7.<java.io.Reader: long skip(long)>(-1L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack21);

        $stack22 = virtualinvoke $stack7.<java.io.Reader: boolean markSupported()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.io.Reader asReader()>();

        $stack25 = virtualinvoke $stack23.<java.io.Reader: int read()>();

        $stack26 = (long) $stack25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(115L, $stack26);

        $i0 = (int) -1;

        virtualinvoke $stack23.<java.io.Reader: void mark(int)>($i0);

        array = newarray (char)[3];

        $stack28 = virtualinvoke $stack23.<java.io.Reader: int read(char[],int,int)>(array, 0, 3);

        $stack29 = (long) $stack28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $stack29);

        $stack30 = array[0];

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $stack31);

        $stack32 = array[1];

        $stack33 = (long) $stack32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(109L, $stack33);

        $stack34 = array[2];

        $stack35 = (long) $stack34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(101L, $stack35);

        virtualinvoke $stack23.<java.io.Reader: void reset()>();

        $stack37 = virtualinvoke $stack23.<java.io.Reader: int read(char[],int,int)>(array, 1, 1);

        $stack38 = (long) $stack37;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack38);

        $stack39 = array[0];

        $stack40 = (long) $stack39;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $stack40);

        $stack41 = array[1];

        $stack42 = (long) $stack41;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $stack42);

        $stack43 = array[2];

        $stack44 = (long) $stack43;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(101L, $stack44);

        $stack46 = virtualinvoke $stack23.<java.io.Reader: long skip(long)>(2L);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $stack46);

        $stack48 = virtualinvoke $stack23.<java.io.Reader: int read()>();

        $stack49 = (long) $stack48;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $stack49);

        $stack50 = virtualinvoke $stack23.<java.io.Reader: boolean ready()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack50);

        virtualinvoke $stack23.<java.io.Reader: void close()>();

        $stack51 = virtualinvoke $stack23.<java.io.Reader: boolean ready()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack51);

        $stack52 = virtualinvoke $u0.<org.apache.commons.lang3.text.StrBuilder: java.io.Reader asReader()>();

        array = newarray (char)[3];

     label01:
        $i1 = (int) -1;

        virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>(array, $i1, 0);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $stack116 := @caughtexception;

     label04:
        $i2 = (int) -1;

        virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>(array, 0, $i2);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack111 := @caughtexception;

     label07:
        virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>(array, 100, 1);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack106 := @caughtexception;

     label10:
        virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>(array, 0, 100);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $stack101 := @caughtexception;

     label13:
        virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>(array, 2147483647, 2147483647);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $stack74 := @caughtexception;

     label16:
        $stack59 = virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>(array, 0, 0);

        $stack60 = (long) $stack59;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack60);

        $stack61 = array[0];

        $stack62 = (long) $stack61;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack62);

        $stack63 = array[1];

        $stack64 = (long) $stack63;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack64);

        $stack65 = array[2];

        $stack66 = (long) $stack65;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack66);

        virtualinvoke $stack52.<java.io.Reader: long skip(long)>(9L);

        $stack69 = virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>(array, 0, 1);

        $stack70 = (long) $stack69;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack70);

        virtualinvoke $stack52.<java.io.Reader: void reset()>();

        $stack96 = newarray (char)[30];

        $stack72 = virtualinvoke $stack52.<java.io.Reader: int read(char[],int,int)>($stack96, 0, 30);

        $stack73 = (long) $stack72;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $stack73);

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label12;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label15;
    }

    public void testAsWriter() throws java.lang.Exception
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.io.Writer $stack4;
        char[] $stack7, $stack10;
        java.lang.String $stack6, $stack9, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack25;
        org.apache.commons.lang3.text.StrBuilder $stack3;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("base");

        $stack4 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.io.Writer asWriter()>();

        virtualinvoke $stack4.<java.io.Writer: void write(int)>(108);

        $stack6 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("basel", $stack6);

        $stack7 = newarray (char)[2];

        $stack7[0] = 105;

        $stack7[1] = 110;

        virtualinvoke $stack4.<java.io.Writer: void write(char[])>($stack7);

        $stack9 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("baselin", $stack9);

        $stack10 = newarray (char)[3];

        $stack10[0] = 110;

        $stack10[1] = 101;

        $stack10[2] = 114;

        virtualinvoke $stack4.<java.io.Writer: void write(char[],int,int)>($stack10, 1, 2);

        $stack12 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("baseliner", $stack12);

        virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>(" rout");

        $stack14 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("baseliner rout", $stack14);

        virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String,int,int)>("ping that server", 1, 3);

        $stack16 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("baseliner routing", $stack16);

        virtualinvoke $stack4.<java.io.Writer: void flush()>();

        $stack18 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("baseliner routing", $stack18);

        virtualinvoke $stack4.<java.io.Writer: void close()>();

        $stack20 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("baseliner routing", $stack20);

        virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>(" hi");

        $stack22 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("baseliner routing hi", $stack22);

        virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder setLength(int)>(4);

        virtualinvoke $stack4.<java.io.Writer: void write(int)>(100);

        $stack25 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("based", $stack25);

        return;
    }

    public void testEqualsIgnoreCase()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack3, $stack4, $stack12, $stack17;
        boolean $stack5, $stack6, $stack7, $stack9, $stack11, $stack14, $stack15, $stack16, $stack19;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("abc");

        $stack9 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

        virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("ABC");

        $stack11 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack11);

        $stack12 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack12.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("abc");

        $stack14 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        $stack16 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack17.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("aBc");

        $stack19 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack19);

        return;
    }

    public void testEquals()
    {
        java.lang.Integer $stack19;
        boolean $stack5, $stack6, $stack7, $stack8, $stack10, $stack11, $stack13, $stack14, $stack17, $stack18, $stack20, $stack21;
        org.apache.commons.lang3.text.StrBuilderTest this;
        org.apache.commons.lang3.text.StrBuilder $stack3, $stack4, $stack15;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack3 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack4 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack5);

        $stack6 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(org.apache.commons.lang3.text.StrBuilder)>($stack3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: boolean equals(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack7);

        $stack8 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("abc");

        $stack10 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack10);

        $stack11 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("ABC");

        $stack13 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack13);

        $stack14 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack14);

        $stack15 = virtualinvoke $stack4.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder clear()>();

        virtualinvoke $stack15.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("abc");

        $stack17 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(org.apache.commons.lang3.text.StrBuilder)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(java.lang.Object)>($stack4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $stack20 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(java.lang.Object)>($stack19);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack20);

        $stack21 = virtualinvoke $stack3.<org.apache.commons.lang3.text.StrBuilder: boolean equals(java.lang.Object)>("abc");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack21);

        return;
    }

    public void testHashCode()
    {
        long $stack9, $stack10, $stack11, $stack15, $stack16;
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack7, $stack8, $stack13, $stack14;
        org.apache.commons.lang3.text.StrBuilder $stack6;
        boolean $stack17;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack6 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack7 = virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: int hashCode()>();

        $stack8 = virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: int hashCode()>();

        $stack9 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack9);

        $stack11 = (long) $stack7;

        $stack10 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack11, $stack10);

        virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("abc");

        $stack13 = virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: int hashCode()>();

        $stack14 = virtualinvoke $stack6.<org.apache.commons.lang3.text.StrBuilder: int hashCode()>();

        if $stack13 == 0 goto label1;

        $stack17 = 1;

        goto label2;

     label1:
        $stack17 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack16 = (long) $stack13;

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack16, $stack15);

        return;
    }

    public void testToString()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack4;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("abc");

        $stack4 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $stack4);

        return;
    }

    public void testToStringBuffer()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.StringBuffer $stack3, $stack5, $stack8, $stack10;
        java.lang.String $stack4, $stack6, $stack9, $stack11;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        $stack3 = new java.lang.StringBuffer;

        specialinvoke $stack3.<java.lang.StringBuffer: void <init>()>();

        $stack4 = virtualinvoke $stack3.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.StringBuffer toStringBuffer()>();

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>("junit");

        $stack8 = new java.lang.StringBuffer;

        specialinvoke $stack8.<java.lang.StringBuffer: void <init>(java.lang.String)>("junit");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuffer: java.lang.String toString()>();

        $stack10 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.StringBuffer toStringBuffer()>();

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack11);

        return;
    }

    public void testLang294()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack5;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteAll(java.lang.String)>("\n%BLAH%");

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\nDo more stuff\neven more stuff\n", $stack5);

        return;
    }

    public void testIndexOfLang294()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack5;
        long $stack6;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("onetwothree");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("three");

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(java.lang.String)>("three");

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $stack6);

        return;
    }

    public void testLang295()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        int $stack8;
        long $stack9;
        org.apache.commons.lang3.text.StrBuilder $stack2;
        boolean $stack5;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>(java.lang.String)>("onetwothree");

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder deleteFirst(java.lang.String)>("three");

        $stack5 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: boolean contains(char)>(104);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("The contains(char) method is looking beyond the end of the string", $stack5);

        $stack8 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: int indexOf(char)>(104);

        $stack9 = (long) $stack8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The indexOf(char) method is looking beyond the end of the string", -1L, $stack9);

        return;
    }

    public void testLang412Right()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadRight(java.lang.Object,int,char)>(null, 10, 42);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to invoke appendFixedWidthPadRight correctly", "**********", $stack6);

        return;
    }

    public void testLang412Left()
    {
        org.apache.commons.lang3.text.StrBuilderTest this;
        java.lang.String $stack6;
        org.apache.commons.lang3.text.StrBuilder $stack2;

        this := @this: org.apache.commons.lang3.text.StrBuilderTest;

        $stack2 = new org.apache.commons.lang3.text.StrBuilder;

        specialinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: void <init>()>();

        virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder appendFixedWidthPadLeft(java.lang.Object,int,char)>(null, 10, 42);

        $stack6 = virtualinvoke $stack2.<org.apache.commons.lang3.text.StrBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to invoke appendFixedWidthPadLeft correctly", "**********", $stack6);

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.lang3.text.StrBuilderTest$1 $stack0;

        $stack0 = new org.apache.commons.lang3.text.StrBuilderTest$1;

        specialinvoke $stack0.<org.apache.commons.lang3.text.StrBuilderTest$1: void <init>()>();

        <org.apache.commons.lang3.text.StrBuilderTest: org.apache.commons.lang3.text.StrMatcher A_NUMBER_MATCHER> = $stack0;

        return;
    }
}
