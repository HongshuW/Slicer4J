public class org.apache.commons.lang3.time.DateUtilsTest extends java.lang.Object
{
    private static final long MILLIS_TEST;
    java.text.DateFormat dateParser;
    java.text.DateFormat dateTimeParser;
    java.text.DateFormat timeZoneDateParser;
    java.util.Date dateAmPm1;
    java.util.Date dateAmPm2;
    java.util.Date dateAmPm3;
    java.util.Date dateAmPm4;
    java.util.Date date0;
    java.util.Date date1;
    java.util.Date date2;
    java.util.Date date3;
    java.util.Date date4;
    java.util.Date date5;
    java.util.Date date6;
    java.util.Date date7;
    java.util.Date date8;
    java.util.Calendar calAmPm1;
    java.util.Calendar calAmPm2;
    java.util.Calendar calAmPm3;
    java.util.Calendar calAmPm4;
    java.util.Calendar cal1;
    java.util.Calendar cal2;
    java.util.Calendar cal3;
    java.util.Calendar cal4;
    java.util.Calendar cal5;
    java.util.Calendar cal6;
    java.util.Calendar cal7;
    java.util.Calendar cal8;
    java.util.TimeZone zone;
    java.util.TimeZone defaultZone;

    public void <init>()
    {
        org.apache.commons.lang3.time.DateUtilsTest this;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat timeZoneDateParser> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date0> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date3> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date4> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date5> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date6> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date7> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date8> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm1> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm2> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm3> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm4> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal1> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal2> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal3> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal4> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal5> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal6> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal7> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal8> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone> = null;

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone> = null;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        java.text.SimpleDateFormat $stack1, $stack3;
        java.util.Calendar $stack39, $stack41, $stack42, $stack44, $stack45, $stack47, $stack48, $stack50, $stack51, $stack53, $stack54, $stack56, $stack58, $stack60, $stack61, $stack63, $stack64, $stack66, $stack67, $stack69, $stack70, $stack72, $stack73, $stack75;
        java.util.Date $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack25, $stack27, $stack29, $stack31, $stack33, $stack35, $stack40, $stack43, $stack46, $stack49, $stack52, $stack55, $stack59, $stack62, $stack65, $stack68, $stack71, $stack74;
        java.util.Locale $stack2, $stack4;
        java.text.DateFormat $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack23, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34, $stack37;
        java.util.TimeZone $stack19, $stack20, $stack21, $stack22, $stack36, $stack38, $stack57, $stack76;
        org.apache.commons.lang3.time.DateUtilsTest this;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack1 = new java.text.SimpleDateFormat;

        $stack2 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $stack1.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("MMM dd, yyyy", $stack2);

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser> = $stack1;

        $stack3 = new java.text.SimpleDateFormat;

        $stack4 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $stack3.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("MMM dd, yyyy H:mm:ss.SSS", $stack4);

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser> = $stack3;

        $stack5 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack6 = virtualinvoke $stack5.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 01:10:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1> = $stack6;

        $stack7 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack8 = virtualinvoke $stack7.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 11:10:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2> = $stack8;

        $stack9 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack10 = virtualinvoke $stack9.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 13:10:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3> = $stack10;

        $stack11 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack12 = virtualinvoke $stack11.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 19:10:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4> = $stack12;

        $stack13 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack14 = virtualinvoke $stack13.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:34:56.789");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date0> = $stack14;

        $stack15 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack16 = virtualinvoke $stack15.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:56.789");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1> = $stack16;

        $stack17 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack18 = virtualinvoke $stack17.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:11.321");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2> = $stack18;

        $stack19 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone> = $stack19;

        $stack20 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("MET");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone> = $stack20;

        $stack21 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack21);

        $stack23 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack22 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        virtualinvoke $stack23.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack22);

        $stack24 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack25 = virtualinvoke $stack24.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 05:30:45.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date3> = $stack25;

        $stack26 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack27 = virtualinvoke $stack26.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 01:10:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date4> = $stack27;

        $stack28 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack29 = virtualinvoke $stack28.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 01:40:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date5> = $stack29;

        $stack30 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack31 = virtualinvoke $stack30.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 02:10:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date6> = $stack31;

        $stack32 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack33 = virtualinvoke $stack32.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 02:40:00.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date7> = $stack33;

        $stack34 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack35 = virtualinvoke $stack34.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("October 26, 2003 05:30:45.000");

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date8> = $stack35;

        $stack37 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack36 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        virtualinvoke $stack37.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack36);

        $stack38 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack38);

        $stack39 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm1> = $stack39;

        $stack41 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm1>;

        $stack40 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1>;

        virtualinvoke $stack41.<java.util.Calendar: void setTime(java.util.Date)>($stack40);

        $stack42 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm2> = $stack42;

        $stack44 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm2>;

        $stack43 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2>;

        virtualinvoke $stack44.<java.util.Calendar: void setTime(java.util.Date)>($stack43);

        $stack45 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm3> = $stack45;

        $stack47 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm3>;

        $stack46 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3>;

        virtualinvoke $stack47.<java.util.Calendar: void setTime(java.util.Date)>($stack46);

        $stack48 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm4> = $stack48;

        $stack50 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm4>;

        $stack49 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4>;

        virtualinvoke $stack50.<java.util.Calendar: void setTime(java.util.Date)>($stack49);

        $stack51 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal1> = $stack51;

        $stack53 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal1>;

        $stack52 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        virtualinvoke $stack53.<java.util.Calendar: void setTime(java.util.Date)>($stack52);

        $stack54 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal2> = $stack54;

        $stack56 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal2>;

        $stack55 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        virtualinvoke $stack56.<java.util.Calendar: void setTime(java.util.Date)>($stack55);

        $stack57 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack57);

        $stack58 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal3> = $stack58;

        $stack60 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal3>;

        $stack59 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date3>;

        virtualinvoke $stack60.<java.util.Calendar: void setTime(java.util.Date)>($stack59);

        $stack61 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal4> = $stack61;

        $stack63 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal4>;

        $stack62 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date4>;

        virtualinvoke $stack63.<java.util.Calendar: void setTime(java.util.Date)>($stack62);

        $stack64 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal5> = $stack64;

        $stack66 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal5>;

        $stack65 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date5>;

        virtualinvoke $stack66.<java.util.Calendar: void setTime(java.util.Date)>($stack65);

        $stack67 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal6> = $stack67;

        $stack69 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal6>;

        $stack68 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date6>;

        virtualinvoke $stack69.<java.util.Calendar: void setTime(java.util.Date)>($stack68);

        $stack70 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal7> = $stack70;

        $stack72 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal7>;

        $stack71 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date7>;

        virtualinvoke $stack72.<java.util.Calendar: void setTime(java.util.Date)>($stack71);

        $stack73 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal8> = $stack73;

        $stack75 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal8>;

        $stack74 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date8>;

        virtualinvoke $stack75.<java.util.Calendar: void setTime(java.util.Date)>($stack74);

        $stack76 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack76);

        return;
    }

    public void testConstructor()
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        long $stack6;
        java.lang.reflect.Constructor $stack7;
        org.apache.commons.lang3.time.DateUtils $stack2;
        java.lang.reflect.Constructor[] $stack4;
        int $stack5, $stack8, $stack11, $stack14;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack2 = new org.apache.commons.lang3.time.DateUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.time.DateUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/time/DateUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/time/DateUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/time/DateUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testIsSameDay_Date()
    {
        java.util.Date $stack5, $stack7, $stack10, $stack13, $stack16;
        boolean $stack8, $stack11, $stack14, $stack17;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack4, $stack6, $stack9, $stack12, $stack15;
        java.lang.IllegalArgumentException $stack21;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.GregorianCalendar;

        specialinvoke $stack4.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 9, 13, 45);

        $stack5 = virtualinvoke $stack4.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack6 = new java.util.GregorianCalendar;

        specialinvoke $stack6.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 9, 13, 45);

        $stack7 = virtualinvoke $stack6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Date,java.util.Date)>($stack5, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = new java.util.GregorianCalendar;

        specialinvoke $stack9.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 10, 13, 45);

        $stack10 = virtualinvoke $stack9.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Date,java.util.Date)>($stack5, $stack10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = new java.util.GregorianCalendar;

        specialinvoke $stack12.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 10, 13, 45);

        $stack13 = virtualinvoke $stack12.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack14 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Date,java.util.Date)>($stack13, $stack10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = new java.util.GregorianCalendar;

        specialinvoke $stack15.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2005, 6, 10, 13, 45);

        $stack16 = virtualinvoke $stack15.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack17 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Date,java.util.Date)>($stack13, $stack16);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Date,java.util.Date)>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack21 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIsSameDay_Cal()
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack4, $stack5;
        java.lang.IllegalArgumentException $stack13;
        boolean $stack6, $stack7, $stack8, $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.GregorianCalendar;

        specialinvoke $stack4.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 9, 13, 45);

        $stack5 = new java.util.GregorianCalendar;

        specialinvoke $stack5.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 9, 13, 45);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Calendar,java.util.Calendar)>($stack4, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        virtualinvoke $stack5.<java.util.GregorianCalendar: void add(int,int)>(6, 1);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Calendar,java.util.Calendar)>($stack4, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack7);

        virtualinvoke $stack4.<java.util.GregorianCalendar: void add(int,int)>(6, 1);

        $stack8 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Calendar,java.util.Calendar)>($stack4, $stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        virtualinvoke $stack5.<java.util.GregorianCalendar: void add(int,int)>(1, 1);

        $stack9 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Calendar,java.util.Calendar)>($stack4, $stack5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack9);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Calendar,java.util.Calendar)>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack13 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIsSameInstant_Date()
    {
        java.util.Date $stack5, $stack7, $stack10, $stack13, $stack16;
        boolean $stack8, $stack11, $stack14, $stack17;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack4, $stack6, $stack9, $stack12, $stack15;
        java.lang.IllegalArgumentException $stack21;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.GregorianCalendar;

        specialinvoke $stack4.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 9, 13, 45);

        $stack5 = virtualinvoke $stack4.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack6 = new java.util.GregorianCalendar;

        specialinvoke $stack6.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 9, 13, 45);

        $stack7 = virtualinvoke $stack6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack8 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Date,java.util.Date)>($stack5, $stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = new java.util.GregorianCalendar;

        specialinvoke $stack9.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 10, 13, 45);

        $stack10 = virtualinvoke $stack9.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack11 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Date,java.util.Date)>($stack5, $stack10);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack11);

        $stack12 = new java.util.GregorianCalendar;

        specialinvoke $stack12.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2004, 6, 10, 13, 45);

        $stack13 = virtualinvoke $stack12.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack14 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Date,java.util.Date)>($stack13, $stack10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = new java.util.GregorianCalendar;

        specialinvoke $stack15.<java.util.GregorianCalendar: void <init>(int,int,int,int,int)>(2005, 6, 10, 13, 45);

        $stack16 = virtualinvoke $stack15.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack17 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Date,java.util.Date)>($stack13, $stack16);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack17);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Date,java.util.Date)>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack21 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIsSameInstant_Cal()
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack4, $stack6;
        java.util.TimeZone $stack5, $stack7;
        java.lang.IllegalArgumentException $stack13;
        boolean $stack8, $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.GregorianCalendar;

        $stack5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+1");

        specialinvoke $stack4.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($stack5);

        $stack6 = new java.util.GregorianCalendar;

        $stack7 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT-1");

        specialinvoke $stack6.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($stack7);

        virtualinvoke $stack4.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 13, 45, 0);

        virtualinvoke $stack4.<java.util.GregorianCalendar: void set(int,int)>(14, 0);

        virtualinvoke $stack6.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 13, 45, 0);

        virtualinvoke $stack6.<java.util.GregorianCalendar: void set(int,int)>(14, 0);

        $stack8 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Calendar,java.util.Calendar)>($stack4, $stack6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack8);

        virtualinvoke $stack6.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 11, 45, 0);

        $stack9 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Calendar,java.util.Calendar)>($stack4, $stack6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameInstant(java.util.Calendar,java.util.Calendar)>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack13 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testIsSameLocalTime_Cal()
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack6, $stack8;
        java.util.TimeZone $stack7, $stack9;
        java.lang.IllegalArgumentException $stack19;
        java.util.Calendar $stack11, $stack12;
        boolean $stack10, $stack14, $stack15;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack6 = new java.util.GregorianCalendar;

        $stack7 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT+1");

        specialinvoke $stack6.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($stack7);

        $stack8 = new java.util.GregorianCalendar;

        $stack9 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT-1");

        specialinvoke $stack8.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($stack9);

        virtualinvoke $stack6.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 13, 45, 0);

        virtualinvoke $stack6.<java.util.GregorianCalendar: void set(int,int)>(14, 0);

        virtualinvoke $stack8.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 13, 45, 0);

        virtualinvoke $stack8.<java.util.GregorianCalendar: void set(int,int)>(14, 0);

        $stack10 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameLocalTime(java.util.Calendar,java.util.Calendar)>($stack6, $stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $stack12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $stack11.<java.util.Calendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 4, 0, 0);

        virtualinvoke $stack12.<java.util.Calendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 16, 0, 0);

        virtualinvoke $stack11.<java.util.Calendar: void set(int,int)>(14, 0);

        virtualinvoke $stack12.<java.util.Calendar: void set(int,int)>(14, 0);

        $stack14 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameLocalTime(java.util.Calendar,java.util.Calendar)>($stack11, $stack12);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("LANG-677", $stack14);

        virtualinvoke $stack8.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(2004, 6, 9, 11, 45, 0);

        $stack15 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameLocalTime(java.util.Calendar,java.util.Calendar)>($stack6, $stack8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameLocalTime(java.util.Calendar,java.util.Calendar)>(null, null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack19 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testParseDate() throws java.lang.Exception
    {
        java.util.Date $stack8, $stack9, $stack10, $stack11, $stack12, $stack13;
        java.lang.String[] $stack7, $stack17, $stack19;
        java.text.ParseException $stack21, $stack28, $stack31;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack6;
        java.lang.IllegalArgumentException $stack22, $stack25;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack6 = new java.util.GregorianCalendar;

        specialinvoke $stack6.<java.util.GregorianCalendar: void <init>(int,int,int)>(1972, 11, 3);

        $stack7 = newarray (java.lang.String)[3];

        $stack7[0] = "yyyy\'-\'DDD";

        $stack7[1] = "yyyy\'-\'MM\'-\'dd";

        $stack7[2] = "yyyyMMdd";

        $stack8 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("1972-12-03", $stack7);

        $stack9 = virtualinvoke $stack6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("1972-338", $stack7);

        $stack11 = virtualinvoke $stack6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack11, $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("19721203", $stack7);

        $stack13 = virtualinvoke $stack6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack13, $stack12);

     label01:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("PURPLE", $stack7);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $stack31 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("197212AB", $stack7);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack28 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>(null, $stack7);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack25 := @caughtexception;

     label10:
        $stack17 = (java.lang.String[]) null;

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("19721203", $stack17);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $stack22 := @caughtexception;

     label13:
        $stack19 = newarray (java.lang.String)[0];

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("19721203", $stack19);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $stack21 := @caughtexception;

     label16:
        return;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.text.ParseException from label13 to label14 with label15;
    }

    public void testParseDateWithLeniency() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack6;
        java.util.Date $stack8, $stack9;
        java.lang.String[] $stack7;
        java.text.ParseException $stack11;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack6 = new java.util.GregorianCalendar;

        specialinvoke $stack6.<java.util.GregorianCalendar: void <init>(int,int,int)>(1998, 6, 30);

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = "MM DDD, yyyy";

        $stack8 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("02 942, 1996", $stack7);

        $stack9 = virtualinvoke $stack6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($stack9, $stack8);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDateStrictly(java.lang.String,java.lang.String[])>("02 942, 1996", $stack7);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $stack11 := @caughtexception;

     label4:
        return;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public void testAddYears() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addYears(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addYears(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2001, 6, 5, 4, 3, 2, 1);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addYears(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 1999, 6, 5, 4, 3, 2, 1);

        return;
    }

    public void testAddMonths() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMonths(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMonths(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 7, 5, 4, 3, 2, 1);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMonths(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 5, 5, 4, 3, 2, 1);

        return;
    }

    public void testAddWeeks() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addWeeks(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addWeeks(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 12, 4, 3, 2, 1);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addWeeks(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 5, 28, 4, 3, 2, 1);

        return;
    }

    public void testAddDays() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addDays(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addDays(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 6, 4, 3, 2, 1);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addDays(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 4, 4, 3, 2, 1);

        return;
    }

    public void testAddHours() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addHours(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addHours(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 5, 3, 2, 1);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addHours(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 3, 3, 2, 1);

        return;
    }

    public void testAddMinutes() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMinutes(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMinutes(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 4, 4, 2, 1);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMinutes(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 4, 2, 2, 1);

        return;
    }

    public void testAddSeconds() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addSeconds(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addSeconds(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 4, 3, 3, 1);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addSeconds(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 4, 3, 1, 1);

        return;
    }

    public void testAddMilliseconds() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack5, $stack6, $stack7, $u0;
        int $i0;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $u0 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $u0.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMilliseconds(java.util.Date,int)>($u0, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMilliseconds(java.util.Date,int)>($u0, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 4, 3, 2, 2);

        $i0 = (int) -1;

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date addMilliseconds(java.util.Date,int)>($u0, $i0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($u0, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($u0, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 4, 3, 2, 0);

        return;
    }

    public void testSetYears() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack3, $stack5, $stack6, $stack7;
        long $stack4;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack3 = new java.util.Date;

        $stack4 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $stack3.<java.util.Date: void <init>(long)>($stack4);

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setYears(java.util.Date,int)>($stack3, 2000);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack5);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack3, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack5, 2000, 6, 5, 4, 3, 2, 1);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setYears(java.util.Date,int)>($stack3, 2008);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack3, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2008, 6, 5, 4, 3, 2, 1);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setYears(java.util.Date,int)>($stack3, 2005);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack3, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack3, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2005, 6, 5, 4, 3, 2, 1);

        return;
    }

    public void testSetMonths() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack4, $stack6, $stack7;
        long $stack5;
        java.lang.IllegalArgumentException $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.Date;

        $stack5 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $stack4.<java.util.Date: void <init>(long)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMonths(java.util.Date,int)>($stack4, 5);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 5, 5, 4, 3, 2, 1);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMonths(java.util.Date,int)>($stack4, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 1, 5, 4, 3, 2, 1);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMonths(java.util.Date,int)>($stack4, 12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DateUtils.setMonths did not throw an expected IllegalArguementException.");

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testSetDays() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack4, $stack6, $stack7;
        long $stack5;
        java.lang.IllegalArgumentException $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.Date;

        $stack5 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $stack4.<java.util.Date: void <init>(long)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setDays(java.util.Date,int)>($stack4, 1);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 1, 4, 3, 2, 1);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setDays(java.util.Date,int)>($stack4, 29);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 29, 4, 3, 2, 1);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setDays(java.util.Date,int)>($stack4, 32);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DateUtils.setDays did not throw an expected IllegalArguementException.");

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testSetHours() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack4, $stack6, $stack7;
        long $stack5;
        java.lang.IllegalArgumentException $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.Date;

        $stack5 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $stack4.<java.util.Date: void <init>(long)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setHours(java.util.Date,int)>($stack4, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 0, 3, 2, 1);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setHours(java.util.Date,int)>($stack4, 23);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 23, 3, 2, 1);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setHours(java.util.Date,int)>($stack4, 24);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DateUtils.setHours did not throw an expected IllegalArguementException.");

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testSetMinutes() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack4, $stack6, $stack7;
        long $stack5;
        java.lang.IllegalArgumentException $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.Date;

        $stack5 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $stack4.<java.util.Date: void <init>(long)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMinutes(java.util.Date,int)>($stack4, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 4, 0, 2, 1);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMinutes(java.util.Date,int)>($stack4, 59);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 4, 59, 2, 1);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMinutes(java.util.Date,int)>($stack4, 60);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DateUtils.setMinutes did not throw an expected IllegalArguementException.");

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testSetSeconds() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack4, $stack6, $stack7;
        long $stack5;
        java.lang.IllegalArgumentException $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.Date;

        $stack5 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $stack4.<java.util.Date: void <init>(long)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setSeconds(java.util.Date,int)>($stack4, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 4, 3, 0, 1);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setSeconds(java.util.Date,int)>($stack4, 59);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 4, 3, 59, 1);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setSeconds(java.util.Date,int)>($stack4, 60);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DateUtils.setSeconds did not throw an expected IllegalArguementException.");

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testSetMilliseconds() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack4, $stack6, $stack7;
        long $stack5;
        java.lang.IllegalArgumentException $stack9;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.Date;

        $stack5 = <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST>;

        specialinvoke $stack4.<java.util.Date: void <init>(long)>($stack5);

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMilliseconds(java.util.Date,int)>($stack4, 0);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack6);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack6, 2000, 6, 5, 4, 3, 2, 0);

        $stack7 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMilliseconds(java.util.Date,int)>($stack4, 999);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>($stack4, $stack7);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack4, 2000, 6, 5, 4, 3, 2, 1);

        specialinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void assertDate(java.util.Date,int,int,int,int,int,int,int)>($stack7, 2000, 6, 5, 4, 3, 2, 999);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date setMilliseconds(java.util.Date,int)>($stack4, 1000);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("DateUtils.setMilliseconds did not throw an expected IllegalArguementException.");

     label2:
        goto label4;

     label3:
        $stack9 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private void assertDate(java.util.Date, int, int, int, int, int, int, int) throws java.lang.Exception
    {
        java.util.Date date;
        long $stack11, $stack13, $stack14, $stack16, $stack17, $stack19, $stack20, $stack22, $stack23, $stack25, $stack26, $stack28, $stack29, $stack31;
        int year, $stack12, month, $stack15, day, $stack18, hour, $stack21, min, $stack24, sec, $stack27, mil, $stack30;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.GregorianCalendar $stack10;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        date := @parameter0: java.util.Date;

        year := @parameter1: int;

        month := @parameter2: int;

        day := @parameter3: int;

        hour := @parameter4: int;

        min := @parameter5: int;

        sec := @parameter6: int;

        mil := @parameter7: int;

        $stack10 = new java.util.GregorianCalendar;

        specialinvoke $stack10.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $stack10.<java.util.GregorianCalendar: void setTime(java.util.Date)>(date);

        $stack11 = (long) year;

        $stack12 = virtualinvoke $stack10.<java.util.GregorianCalendar: int get(int)>(1);

        $stack13 = (long) $stack12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack11, $stack13);

        $stack14 = (long) month;

        $stack15 = virtualinvoke $stack10.<java.util.GregorianCalendar: int get(int)>(2);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack14, $stack16);

        $stack17 = (long) day;

        $stack18 = virtualinvoke $stack10.<java.util.GregorianCalendar: int get(int)>(5);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack17, $stack19);

        $stack20 = (long) hour;

        $stack21 = virtualinvoke $stack10.<java.util.GregorianCalendar: int get(int)>(11);

        $stack22 = (long) $stack21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack20, $stack22);

        $stack23 = (long) min;

        $stack24 = virtualinvoke $stack10.<java.util.GregorianCalendar: int get(int)>(12);

        $stack25 = (long) $stack24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack23, $stack25);

        $stack26 = (long) sec;

        $stack27 = virtualinvoke $stack10.<java.util.GregorianCalendar: int get(int)>(13);

        $stack28 = (long) $stack27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack26, $stack28);

        $stack29 = (long) mil;

        $stack30 = virtualinvoke $stack10.<java.util.GregorianCalendar: int get(int)>(14);

        $stack31 = (long) $stack30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($stack29, $stack31);

        return;
    }

    public void testToCalendar()
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Calendar $stack5;
        java.util.Date $stack2, $stack4, $stack6;
        java.lang.NullPointerException $stack8;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack2 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar toCalendar(java.util.Date)>($stack2);

        $stack6 = virtualinvoke $stack5.<java.util.Calendar: java.util.Date getTime()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to convert to a Calendar and back", $stack4, $stack6);

     label1:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar toCalendar(java.util.Date)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected NullPointerException to be thrown");

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public void testRound() throws java.lang.Exception
    {
        org.apache.commons.lang3.JavaVersion $stack279;
        java.lang.ClassCastException $stack382;
        java.util.Calendar $stack170, $stack175, $stack209, $stack214, $stack219, $stack224, $stack237, $stack247, $stack257, $stack267, $stack277, $stack297, $stack307, $stack317;
        int $i0;
        java.lang.String $stack283, $stack285;
        java.text.DateFormat $stack2, $stack7, $stack12, $stack17, $stack22, $stack27, $stack32, $stack37, $stack42, $stack47, $stack52, $stack57, $stack62, $stack67, $stack72, $stack77, $stack82, $stack87, $stack92, $stack97, $stack102, $stack107, $stack112, $stack117, $stack122, $stack127, $stack132, $stack137, $stack142, $stack147, $stack152, $stack157, $stack162, $stack167, $stack172, $stack177, $stack182, $stack187, $stack192, $stack206, $stack211, $stack216, $stack221, $stack228, $stack229, $stack234, $stack239, $stack244, $stack249, $stack254, $stack259, $stack264, $stack269, $stack274, $stack288, $stack289, $stack294, $stack299, $stack304, $stack309, $stack314;
        boolean $stack280;
        java.lang.StringBuilder $stack282, $stack284, $u0;
        java.util.Date $stack4, $stack5, $stack6, $stack9, $stack10, $stack11, $stack14, $stack15, $stack16, $stack19, $stack20, $stack21, $stack24, $stack25, $stack26, $stack29, $stack30, $stack31, $stack34, $stack35, $stack36, $stack39, $stack40, $stack41, $stack44, $stack45, $stack46, $stack49, $stack50, $stack51, $stack54, $stack55, $stack56, $stack59, $stack60, $stack61, $stack64, $stack65, $stack66, $stack69, $stack70, $stack71, $stack74, $stack75, $stack76, $stack79, $stack80, $stack81, $stack84, $stack85, $stack86, $stack89, $stack90, $stack91, $stack94, $stack95, $stack96, $stack99, $stack100, $stack101, $stack104, $stack105, $stack106, $stack109, $stack110, $stack111, $stack114, $stack115, $stack116, $stack119, $stack120, $stack121, $stack124, $stack125, $stack126, $stack129, $stack130, $stack131, $stack134, $stack135, $stack136, $stack139, $stack140, $stack141, $stack144, $stack145, $stack146, $stack149, $stack150, $stack151, $stack154, $stack155, $stack156, $stack159, $stack160, $stack161, $stack164, $stack165, $stack166, $stack169, $stack171, $stack174, $stack176, $stack179, $stack180, $stack181, $stack184, $stack185, $stack186, $stack189, $stack190, $stack191, $stack194, $stack195, $stack196, $stack204, $stack208, $stack210, $stack213, $stack215, $stack218, $stack220, $stack223, $stack225, $stack231, $stack232, $stack233, $stack236, $stack238, $stack241, $stack242, $stack243, $stack246, $stack248, $stack251, $stack252, $stack253, $stack256, $stack258, $stack261, $stack262, $stack263, $stack266, $stack268, $stack271, $stack272, $stack273, $stack276, $stack278, $stack291, $stack292, $stack293, $stack296, $stack298, $stack301, $stack302, $stack303, $stack306, $stack308, $stack311, $stack312, $stack313, $stack316, $stack318;
        java.util.TimeZone $stack226, $stack227, $stack286, $stack287;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.lang.IllegalArgumentException $stack322, $stack385, $stack388, $stack391;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack2 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack4 = virtualinvoke $stack2.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack5 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack5, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round year-1 failed", $stack4, $stack6);

        $stack7 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack9 = virtualinvoke $stack7.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack10 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack11 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack10, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round year-2 failed", $stack9, $stack11);

        $stack12 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack14 = virtualinvoke $stack12.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 1, 2002");

        $stack15 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack16 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack15, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round month-1 failed", $stack14, $stack16);

        $stack17 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack19 = virtualinvoke $stack17.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 1, 2001");

        $stack20 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack21 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack20, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round month-2 failed", $stack19, $stack21);

        $stack22 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack24 = virtualinvoke $stack22.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 1, 2002");

        $stack25 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date0>;

        $stack26 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack25, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round semimonth-0 failed", $stack24, $stack26);

        $stack27 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack29 = virtualinvoke $stack27.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 16, 2002");

        $stack30 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack31 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack30, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round semimonth-1 failed", $stack29, $stack31);

        $stack32 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack34 = virtualinvoke $stack32.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 16, 2001");

        $stack35 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack36 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack35, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round semimonth-2 failed", $stack34, $stack36);

        $stack37 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack39 = virtualinvoke $stack37.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 13, 2002");

        $stack40 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack41 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack40, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round date-1 failed", $stack39, $stack41);

        $stack42 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack44 = virtualinvoke $stack42.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001");

        $stack45 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack46 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack45, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round date-2 failed", $stack44, $stack46);

        $stack47 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack49 = virtualinvoke $stack47.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 13:00:00.000");

        $stack50 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack51 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack50, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round hour-1 failed", $stack49, $stack51);

        $stack52 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack54 = virtualinvoke $stack52.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:00:00.000");

        $stack55 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack56 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack55, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round hour-2 failed", $stack54, $stack56);

        $stack57 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack59 = virtualinvoke $stack57.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:35:00.000");

        $stack60 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack61 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack60, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round minute-1 failed", $stack59, $stack61);

        $stack62 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack64 = virtualinvoke $stack62.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:00.000");

        $stack65 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack66 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack65, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round minute-2 failed", $stack64, $stack66);

        $stack67 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack69 = virtualinvoke $stack67.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:57.000");

        $stack70 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack71 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack70, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round second-1 failed", $stack69, $stack71);

        $stack72 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack74 = virtualinvoke $stack72.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:11.000");

        $stack75 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack76 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack75, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round second-2 failed", $stack74, $stack76);

        $stack77 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack79 = virtualinvoke $stack77.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack80 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1>;

        $stack81 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack80, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-1 failed", $stack79, $stack81);

        $stack82 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack84 = virtualinvoke $stack82.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack85 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2>;

        $stack86 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack85, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-2 failed", $stack84, $stack86);

        $stack87 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack89 = virtualinvoke $stack87.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack90 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3>;

        $stack91 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack90, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-3 failed", $stack89, $stack91);

        $stack92 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack94 = virtualinvoke $stack92.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack95 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4>;

        $stack96 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack95, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-4 failed", $stack94, $stack96);

        $stack97 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack99 = virtualinvoke $stack97.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack100 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack101 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack100, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round year-1 failed", $stack99, $stack101);

        $stack102 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack104 = virtualinvoke $stack102.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack105 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack106 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack105, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round year-2 failed", $stack104, $stack106);

        $stack107 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack109 = virtualinvoke $stack107.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 1, 2002");

        $stack110 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack111 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack110, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round month-1 failed", $stack109, $stack111);

        $stack112 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack114 = virtualinvoke $stack112.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 1, 2001");

        $stack115 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack116 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack115, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round month-2 failed", $stack114, $stack116);

        $stack117 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack119 = virtualinvoke $stack117.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 16, 2002");

        $stack120 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack121 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack120, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round semimonth-1 failed", $stack119, $stack121);

        $stack122 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack124 = virtualinvoke $stack122.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 16, 2001");

        $stack125 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack126 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack125, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round semimonth-2 failed", $stack124, $stack126);

        $stack127 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack129 = virtualinvoke $stack127.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 13, 2002");

        $stack130 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack131 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack130, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round date-1 failed", $stack129, $stack131);

        $stack132 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack134 = virtualinvoke $stack132.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001");

        $stack135 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack136 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack135, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round date-2 failed", $stack134, $stack136);

        $stack137 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack139 = virtualinvoke $stack137.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 13:00:00.000");

        $stack140 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack141 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack140, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round hour-1 failed", $stack139, $stack141);

        $stack142 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack144 = virtualinvoke $stack142.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:00:00.000");

        $stack145 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack146 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack145, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round hour-2 failed", $stack144, $stack146);

        $stack147 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack149 = virtualinvoke $stack147.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:35:00.000");

        $stack150 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack151 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack150, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round minute-1 failed", $stack149, $stack151);

        $stack152 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack154 = virtualinvoke $stack152.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:00.000");

        $stack155 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack156 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack155, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round minute-2 failed", $stack154, $stack156);

        $stack157 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack159 = virtualinvoke $stack157.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:57.000");

        $stack160 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack161 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack160, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round second-1 failed", $stack159, $stack161);

        $stack162 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack164 = virtualinvoke $stack162.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:11.000");

        $stack165 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack166 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack165, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round second-2 failed", $stack164, $stack166);

        $stack167 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack169 = virtualinvoke $stack167.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:57.000");

        $stack170 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal1>;

        $stack171 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack170, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round calendar second-1 failed", $stack169, $stack171);

        $stack172 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack174 = virtualinvoke $stack172.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:11.000");

        $stack175 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal2>;

        $stack176 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack175, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round calendar second-2 failed", $stack174, $stack176);

        $stack177 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack179 = virtualinvoke $stack177.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack180 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1>;

        $stack181 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack180, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-1 failed", $stack179, $stack181);

        $stack182 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack184 = virtualinvoke $stack182.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack185 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2>;

        $stack186 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack185, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-2 failed", $stack184, $stack186);

        $stack187 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack189 = virtualinvoke $stack187.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack190 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3>;

        $stack191 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack190, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-3 failed", $stack189, $stack191);

        $stack192 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack194 = virtualinvoke $stack192.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack195 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4>;

        $stack196 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack195, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-4 failed", $stack194, $stack196);

     label01:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $stack391 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar round(java.util.Calendar,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack388 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack385 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>("", 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $stack382 := @caughtexception;

     label13:
        $stack204 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $i0 = (int) -9999;

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack204, $i0);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $stack322 := @caughtexception;

     label16:
        $stack206 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack208 = virtualinvoke $stack206.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack209 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm1>;

        $stack210 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack209, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-1 failed", $stack208, $stack210);

        $stack211 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack213 = virtualinvoke $stack211.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack214 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm2>;

        $stack215 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack214, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-2 failed", $stack213, $stack215);

        $stack216 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack218 = virtualinvoke $stack216.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack219 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm3>;

        $stack220 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack219, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-3 failed", $stack218, $stack220);

        $stack221 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack223 = virtualinvoke $stack221.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack224 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm4>;

        $stack225 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack224, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round ampm-4 failed", $stack223, $stack225);

        $stack226 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack226);

        $stack228 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack227 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        virtualinvoke $stack228.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack227);

        $stack229 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack231 = virtualinvoke $stack229.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack232 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date4>;

        $stack233 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack232, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack231, $stack233);

        $stack234 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack236 = virtualinvoke $stack234.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack237 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal4>;

        $stack238 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack237, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack236, $stack238);

        $stack239 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack241 = virtualinvoke $stack239.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack242 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date5>;

        $stack243 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack242, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack241, $stack243);

        $stack244 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack246 = virtualinvoke $stack244.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack247 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal5>;

        $stack248 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack247, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack246, $stack248);

        $stack249 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack251 = virtualinvoke $stack249.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack252 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date6>;

        $stack253 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack252, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack251, $stack253);

        $stack254 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack256 = virtualinvoke $stack254.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack257 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal6>;

        $stack258 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack257, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack256, $stack258);

        $stack259 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack261 = virtualinvoke $stack259.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack262 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date7>;

        $stack263 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack262, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack261, $stack263);

        $stack264 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack266 = virtualinvoke $stack264.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack267 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal7>;

        $stack268 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack267, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack266, $stack268);

        $stack269 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack271 = virtualinvoke $stack269.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 01:00:00.000");

        $stack272 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date4>;

        $stack273 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack272, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack271, $stack273);

        $stack274 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack276 = virtualinvoke $stack274.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 01:00:00.000");

        $stack277 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal4>;

        $stack278 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack277, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack276, $stack278);

        $stack279 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_4>;

        $stack280 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($stack279);

        if $stack280 == 0 goto label17;

        $stack289 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack291 = virtualinvoke $stack289.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack292 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date5>;

        $stack293 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack292, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack291, $stack293);

        $stack294 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack296 = virtualinvoke $stack294.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack297 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal5>;

        $stack298 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack297, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack296, $stack298);

        $stack299 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack301 = virtualinvoke $stack299.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack302 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date6>;

        $stack303 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack302, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack301, $stack303);

        $stack304 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack306 = virtualinvoke $stack304.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack307 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal6>;

        $stack308 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack307, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack306, $stack308);

        $stack309 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack311 = virtualinvoke $stack309.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 04:00:00.000");

        $stack312 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date7>;

        $stack313 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack312, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack311, $stack313);

        $stack314 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack316 = virtualinvoke $stack314.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 04:00:00.000");

        $stack317 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal7>;

        $stack318 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.lang.Object,int)>($stack317, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("round MET date across DST change-over", $stack316, $stack318);

        goto label18;

     label17:
        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack282 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Some date rounding tests not run since the current version is ");

        $stack283 = <org.apache.commons.lang3.SystemUtils: java.lang.String JAVA_SPECIFICATION_VERSION>;

        $stack284 = virtualinvoke $stack282.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack283);

        $stack285 = virtualinvoke $stack284.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void warn(java.lang.String)>($stack285);

     label18:
        $stack286 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack286);

        $stack288 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack287 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        virtualinvoke $stack288.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack287);

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.ClassCastException from label10 to label11 with label12;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
    }

    public void testRoundLang346() throws java.lang.Exception
    {
        java.util.Date $stack7, $stack10, $stack11, $stack12, $stack15, $stack16, $stack17, $stack20, $stack21, $stack22, $stack25, $stack26, $stack27, $stack30, $stack31, $stack32, $stack35, $stack36, $stack37, $stack40, $stack41, $stack42, $stack45, $stack46;
        java.text.DateFormat $stack5, $stack8, $stack13, $stack18, $stack23, $stack28, $stack33, $stack38, $stack43;
        java.util.TimeZone $stack3, $stack4;
        java.util.Calendar $stack6;
        org.apache.commons.lang3.time.DateUtilsTest this;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack3 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack3);

        $stack5 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack4 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        virtualinvoke $stack5.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack4);

        $stack6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 8, 50);

        $stack7 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack8 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack10 = virtualinvoke $stack8.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 08:09:00.000");

        $stack11 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack7, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Minute Round Up Failed", $stack10, $stack11);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 8, 20);

        $stack12 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack13 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack15 = virtualinvoke $stack13.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 08:08:00.000");

        $stack16 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack12, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Minute No Round Failed", $stack15, $stack16);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 8, 50);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int)>(14, 600);

        $stack17 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack18 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack20 = virtualinvoke $stack18.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 08:08:51.000");

        $stack21 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack17, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Second Round Up with 600 Milli Seconds Failed", $stack20, $stack21);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 8, 50);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int)>(14, 200);

        $stack22 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack23 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack25 = virtualinvoke $stack23.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 08:08:50.000");

        $stack26 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack22, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Second Round Down with 200 Milli Seconds Failed", $stack25, $stack26);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 8, 20);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int)>(14, 600);

        $stack27 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack28 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack30 = virtualinvoke $stack28.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 08:08:21.000");

        $stack31 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack27, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Second Round Up with 200 Milli Seconds Failed", $stack30, $stack31);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 8, 20);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int)>(14, 200);

        $stack32 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack33 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack35 = virtualinvoke $stack33.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 08:08:20.000");

        $stack36 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack32, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Second Round Down with 200 Milli Seconds Failed", $stack35, $stack36);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 8, 50);

        $stack37 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack38 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack40 = virtualinvoke $stack38.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 08:00:00.000");

        $stack41 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack37, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Hour Round Down Failed", $stack40, $stack41);

        virtualinvoke $stack6.<java.util.Calendar: void set(int,int,int,int,int,int)>(2007, 6, 2, 8, 31, 50);

        $stack42 = virtualinvoke $stack6.<java.util.Calendar: java.util.Date getTime()>();

        $stack43 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack45 = virtualinvoke $stack43.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("July 2, 2007 09:00:00.000");

        $stack46 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack42, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Hour Round Up Failed", $stack45, $stack46);

        return;
    }

    public void testTruncate() throws java.lang.Exception
    {
        java.lang.ArithmeticException $stack255, $stack263;
        java.util.GregorianCalendar $stack248;
        long $stack254;
        java.lang.ClassCastException $stack269;
        java.util.Calendar $stack187, $stack192, $stack197, $stack202, $stack207, $stack212, $stack232, $stack242, $stack251;
        java.util.Date $stack6, $stack7, $stack8, $stack11, $stack12, $stack13, $stack16, $stack17, $stack18, $stack21, $stack22, $stack23, $stack26, $stack27, $stack28, $stack31, $stack32, $stack33, $stack36, $stack37, $stack38, $stack41, $stack42, $stack43, $stack46, $stack47, $stack48, $stack51, $stack52, $stack53, $stack56, $stack57, $stack58, $stack61, $stack62, $stack63, $stack66, $stack67, $stack68, $stack71, $stack72, $stack73, $stack76, $stack77, $stack78, $stack81, $stack82, $stack83, $stack86, $stack87, $stack88, $stack91, $stack92, $stack93, $stack96, $stack97, $stack98, $stack101, $stack102, $stack103, $stack106, $stack107, $stack108, $stack111, $stack112, $stack113, $stack116, $stack117, $stack118, $stack121, $stack122, $stack123, $stack126, $stack127, $stack128, $stack131, $stack132, $stack133, $stack136, $stack137, $stack138, $stack141, $stack142, $stack143, $stack146, $stack147, $stack148, $stack151, $stack152, $stack153, $stack156, $stack157, $stack158, $stack161, $stack162, $stack163, $stack166, $stack167, $stack168, $stack171, $stack172, $stack173, $stack176, $stack177, $stack178, $stack181, $stack182, $stack183, $stack186, $stack188, $stack191, $stack193, $stack196, $stack198, $stack201, $stack203, $stack206, $stack208, $stack211, $stack213, $stack226, $stack227, $stack228, $stack231, $stack233, $stack236, $stack237, $stack238, $stack241, $stack243, $stack247;
        java.util.TimeZone $stack221, $stack222, $stack244, $stack245;
        int $stack253;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.text.DateFormat $stack4, $stack9, $stack14, $stack19, $stack24, $stack29, $stack34, $stack39, $stack44, $stack49, $stack54, $stack59, $stack64, $stack69, $stack74, $stack79, $stack84, $stack89, $stack94, $stack99, $stack104, $stack109, $stack114, $stack119, $stack124, $stack129, $stack134, $stack139, $stack144, $stack149, $stack154, $stack159, $stack164, $stack169, $stack174, $stack179, $stack184, $stack189, $stack194, $stack199, $stack204, $stack209, $stack223, $stack224, $stack229, $stack234, $stack239, $stack246;
        java.lang.IllegalArgumentException $stack297, $stack300, $stack303;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack6 = virtualinvoke $stack4.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack7 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack8 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack7, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate year-1 failed", $stack6, $stack8);

        $stack9 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack11 = virtualinvoke $stack9.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2001");

        $stack12 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack13 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack12, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate year-2 failed", $stack11, $stack13);

        $stack14 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack16 = virtualinvoke $stack14.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 1, 2002");

        $stack17 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack18 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack17, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate month-1 failed", $stack16, $stack18);

        $stack19 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack21 = virtualinvoke $stack19.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 1, 2001");

        $stack22 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack23 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack22, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate month-2 failed", $stack21, $stack23);

        $stack24 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack26 = virtualinvoke $stack24.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 1, 2002");

        $stack27 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack28 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack27, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate semimonth-1 failed", $stack26, $stack28);

        $stack29 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack31 = virtualinvoke $stack29.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 16, 2001");

        $stack32 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack33 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack32, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate semimonth-2 failed", $stack31, $stack33);

        $stack34 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack36 = virtualinvoke $stack34.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002");

        $stack37 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack38 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack37, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate date-1 failed", $stack36, $stack38);

        $stack39 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack41 = virtualinvoke $stack39.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001");

        $stack42 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack43 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack42, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate date-2 failed", $stack41, $stack43);

        $stack44 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack46 = virtualinvoke $stack44.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:00:00.000");

        $stack47 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack48 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack47, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate hour-1 failed", $stack46, $stack48);

        $stack49 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack51 = virtualinvoke $stack49.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:00:00.000");

        $stack52 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack53 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack52, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate hour-2 failed", $stack51, $stack53);

        $stack54 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack56 = virtualinvoke $stack54.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:00.000");

        $stack57 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack58 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack57, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate minute-1 failed", $stack56, $stack58);

        $stack59 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack61 = virtualinvoke $stack59.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:00.000");

        $stack62 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack63 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack62, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate minute-2 failed", $stack61, $stack63);

        $stack64 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack66 = virtualinvoke $stack64.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:56.000");

        $stack67 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack68 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack67, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate second-1 failed", $stack66, $stack68);

        $stack69 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack71 = virtualinvoke $stack69.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:11.000");

        $stack72 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack73 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack72, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate second-2 failed", $stack71, $stack73);

        $stack74 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack76 = virtualinvoke $stack74.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack77 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1>;

        $stack78 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack77, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-1 failed", $stack76, $stack78);

        $stack79 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack81 = virtualinvoke $stack79.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack82 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2>;

        $stack83 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack82, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-2 failed", $stack81, $stack83);

        $stack84 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack86 = virtualinvoke $stack84.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack87 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3>;

        $stack88 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack87, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-3 failed", $stack86, $stack88);

        $stack89 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack91 = virtualinvoke $stack89.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack92 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4>;

        $stack93 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack92, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-4 failed", $stack91, $stack93);

        $stack94 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack96 = virtualinvoke $stack94.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack97 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack98 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack97, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate year-1 failed", $stack96, $stack98);

        $stack99 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack101 = virtualinvoke $stack99.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2001");

        $stack102 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack103 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack102, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate year-2 failed", $stack101, $stack103);

        $stack104 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack106 = virtualinvoke $stack104.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 1, 2002");

        $stack107 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack108 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack107, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate month-1 failed", $stack106, $stack108);

        $stack109 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack111 = virtualinvoke $stack109.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 1, 2001");

        $stack112 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack113 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack112, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate month-2 failed", $stack111, $stack113);

        $stack114 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack116 = virtualinvoke $stack114.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 1, 2002");

        $stack117 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack118 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack117, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate semimonth-1 failed", $stack116, $stack118);

        $stack119 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack121 = virtualinvoke $stack119.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 16, 2001");

        $stack122 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack123 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack122, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate semimonth-2 failed", $stack121, $stack123);

        $stack124 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack126 = virtualinvoke $stack124.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002");

        $stack127 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack128 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack127, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate date-1 failed", $stack126, $stack128);

        $stack129 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack131 = virtualinvoke $stack129.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001");

        $stack132 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack133 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack132, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate date-2 failed", $stack131, $stack133);

        $stack134 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack136 = virtualinvoke $stack134.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:00:00.000");

        $stack137 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack138 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack137, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate hour-1 failed", $stack136, $stack138);

        $stack139 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack141 = virtualinvoke $stack139.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:00:00.000");

        $stack142 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack143 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack142, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate hour-2 failed", $stack141, $stack143);

        $stack144 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack146 = virtualinvoke $stack144.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:00.000");

        $stack147 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack148 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack147, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate minute-1 failed", $stack146, $stack148);

        $stack149 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack151 = virtualinvoke $stack149.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:00.000");

        $stack152 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack153 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack152, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate minute-2 failed", $stack151, $stack153);

        $stack154 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack156 = virtualinvoke $stack154.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:56.000");

        $stack157 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack158 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack157, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate second-1 failed", $stack156, $stack158);

        $stack159 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack161 = virtualinvoke $stack159.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:11.000");

        $stack162 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack163 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack162, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate second-2 failed", $stack161, $stack163);

        $stack164 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack166 = virtualinvoke $stack164.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack167 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1>;

        $stack168 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack167, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-1 failed", $stack166, $stack168);

        $stack169 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack171 = virtualinvoke $stack169.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack172 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2>;

        $stack173 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack172, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-2 failed", $stack171, $stack173);

        $stack174 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack176 = virtualinvoke $stack174.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack177 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3>;

        $stack178 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack177, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-3 failed", $stack176, $stack178);

        $stack179 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack181 = virtualinvoke $stack179.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack182 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4>;

        $stack183 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack182, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-4 failed", $stack181, $stack183);

        $stack184 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack186 = virtualinvoke $stack184.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:56.000");

        $stack187 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal1>;

        $stack188 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack187, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate calendar second-1 failed", $stack186, $stack188);

        $stack189 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack191 = virtualinvoke $stack189.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:11.000");

        $stack192 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal2>;

        $stack193 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack192, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate calendar second-2 failed", $stack191, $stack193);

        $stack194 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack196 = virtualinvoke $stack194.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack197 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm1>;

        $stack198 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack197, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-1 failed", $stack196, $stack198);

        $stack199 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack201 = virtualinvoke $stack199.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 00:00:00.000");

        $stack202 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm2>;

        $stack203 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack202, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-2 failed", $stack201, $stack203);

        $stack204 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack206 = virtualinvoke $stack204.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack207 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm3>;

        $stack208 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack207, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-3 failed", $stack206, $stack208);

        $stack209 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack211 = virtualinvoke $stack209.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack212 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm4>;

        $stack213 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack212, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate ampm-4 failed", $stack211, $stack213);

     label01:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $stack303 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack300 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack297 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>("", 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $stack269 := @caughtexception;

     label13:
        $stack221 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack221);

        $stack223 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack222 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        virtualinvoke $stack223.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack222);

        $stack224 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack226 = virtualinvoke $stack224.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack227 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date3>;

        $stack228 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack227, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate MET date across DST change-over", $stack226, $stack228);

        $stack229 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack231 = virtualinvoke $stack229.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 00:00:00.000");

        $stack232 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal3>;

        $stack233 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack232, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate MET date across DST change-over", $stack231, $stack233);

        $stack234 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack236 = virtualinvoke $stack234.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("October 26, 2003 00:00:00.000");

        $stack237 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date8>;

        $stack238 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack237, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate MET date across DST change-over", $stack236, $stack238);

        $stack239 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack241 = virtualinvoke $stack239.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("October 26, 2003 00:00:00.000");

        $stack242 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal8>;

        $stack243 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.lang.Object,int)>($stack242, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("truncate MET date across DST change-over", $stack241, $stack243);

        $stack244 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack244);

        $stack246 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack245 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        virtualinvoke $stack246.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack245);

        $stack247 = new java.util.Date;

        specialinvoke $stack247.<java.util.Date: void <init>(long)>(9223372036854775807L);

        $stack248 = new java.util.GregorianCalendar;

        specialinvoke $stack248.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $stack248.<java.util.GregorianCalendar: void setTime(java.util.Date)>($stack247);

     label14:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($stack248, 5);

        staticinvoke <org.junit.Assert: void fail()>();

     label15:
        goto label17;

     label16:
        $stack263 := @caughtexception;

     label17:
        virtualinvoke $stack248.<java.util.GregorianCalendar: void set(int,int)>(1, 280000001);

     label18:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($stack248, 5);

        staticinvoke <org.junit.Assert: void fail()>();

     label19:
        goto label21;

     label20:
        $stack255 := @caughtexception;

     label21:
        virtualinvoke $stack248.<java.util.GregorianCalendar: void set(int,int)>(1, 280000000);

        $stack251 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($stack248, 5);

        $stack253 = virtualinvoke $stack251.<java.util.Calendar: int get(int)>(10);

        $stack254 = (long) $stack253;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack254);

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.ClassCastException from label10 to label11 with label12;
        catch java.lang.ArithmeticException from label14 to label15 with label16;
        catch java.lang.ArithmeticException from label18 to label19 with label20;
    }

    public void testTruncateLang59() throws java.lang.Exception
    {
        java.util.Date $stack13, $stack14, $stack17, $stack20, $stack23, $stack42, $stack47, $stack52, $stack54, $stack56, $stack58, $stack60, $stack62, $stack64, $stack66, $stack68, $stack70, $stack72, $stack74;
        boolean $stack10;
        java.util.TimeZone $stack11, $stack75;
        org.apache.commons.lang3.JavaVersion $stack9;
        java.lang.StringBuilder $stack76, $stack77, $stack79;
        java.text.SimpleDateFormat $stack12;
        long $stack15, $stack16, $stack18, $stack19, $stack21, $stack22, $stack24, $stack25, $stack43, $stack48, $stack49, $stack50;
        java.util.Calendar $stack41;
        int $stack45;
        java.lang.String $stack28, $stack31, $stack34, $stack37, $stack40, $stack78, $stack80;
        org.apache.commons.lang3.time.DateUtilsTest this;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack9 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_4>;

        $stack10 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($stack9);

        if $stack10 != 0 goto label1;

        $stack76 = new java.lang.StringBuilder;

        specialinvoke $stack76.<java.lang.StringBuilder: void <init>()>();

        $stack77 = virtualinvoke $stack76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Test for LANG-59 not run since the current version is ");

        $stack78 = <org.apache.commons.lang3.SystemUtils: java.lang.String JAVA_SPECIFICATION_VERSION>;

        $stack79 = virtualinvoke $stack77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack78);

        $stack80 = virtualinvoke $stack79.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void warn(java.lang.String)>($stack80);

        return;

     label1:
        $stack11 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("MST7MDT");

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack11);

        $stack12 = new java.text.SimpleDateFormat;

        specialinvoke $stack12.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss.SSS z");

        virtualinvoke $stack12.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack11);

        $stack13 = new java.util.Date;

        specialinvoke $stack13.<java.util.Date: void <init>(long)>(1099206000000L);

        $stack14 = new java.util.Date;

        $stack15 = virtualinvoke $stack13.<java.util.Date: long getTime()>();

        $stack16 = $stack15 - 3600000L;

        specialinvoke $stack14.<java.util.Date: void <init>(long)>($stack16);

        $stack17 = new java.util.Date;

        $stack18 = virtualinvoke $stack13.<java.util.Date: long getTime()>();

        $stack19 = $stack18 + 120000L;

        specialinvoke $stack17.<java.util.Date: void <init>(long)>($stack19);

        $stack20 = new java.util.Date;

        $stack21 = virtualinvoke $stack17.<java.util.Date: long getTime()>();

        $stack22 = $stack21 + 3000L;

        specialinvoke $stack20.<java.util.Date: void <init>(long)>($stack22);

        $stack23 = new java.util.Date;

        $stack24 = virtualinvoke $stack20.<java.util.Date: long getTime()>();

        $stack25 = $stack24 + 4L;

        specialinvoke $stack23.<java.util.Date: void <init>(long)>($stack25);

        $stack28 = virtualinvoke $stack12.<java.text.DateFormat: java.lang.String format(java.util.Date)>($stack14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", $stack28);

        $stack31 = virtualinvoke $stack12.<java.text.DateFormat: java.lang.String format(java.util.Date)>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", $stack31);

        $stack34 = virtualinvoke $stack12.<java.text.DateFormat: java.lang.String format(java.util.Date)>($stack17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", $stack34);

        $stack37 = virtualinvoke $stack12.<java.text.DateFormat: java.lang.String format(java.util.Date)>($stack20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", $stack37);

        $stack40 = virtualinvoke $stack12.<java.text.DateFormat: java.lang.String format(java.util.Date)>($stack23);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", $stack40);

        $stack41 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $stack42 = new java.util.Date;

        $stack43 = virtualinvoke $stack13.<java.util.Date: long getTime()>();

        specialinvoke $stack42.<java.util.Date: void <init>(long)>($stack43);

        virtualinvoke $stack41.<java.util.Calendar: void setTime(java.util.Date)>($stack42);

        $stack45 = virtualinvoke $stack41.<java.util.Calendar: int get(int)>(12);

        virtualinvoke $stack41.<java.util.Calendar: void set(int,int)>(12, $stack45);

        $stack47 = virtualinvoke $stack41.<java.util.Calendar: java.util.Date getTime()>();

        $stack48 = virtualinvoke $stack47.<java.util.Date: long getTime()>();

        $stack49 = virtualinvoke $stack13.<java.util.Date: long getTime()>();

        $stack50 = $stack49 + 3600000L;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Demonstrate Problem", $stack48, $stack50);

        $stack52 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack23, 14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Truncate Calendar.MILLISECOND", $stack23, $stack52);

        $stack54 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack23, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Truncate Calendar.SECOND", $stack20, $stack54);

        $stack56 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack23, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Truncate Calendar.MINUTE", $stack17, $stack56);

        $stack58 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack23, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Truncate Calendar.HOUR_OF_DAY", $stack13, $stack58);

        $stack60 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack23, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Truncate Calendar.HOUR", $stack13, $stack60);

        $stack62 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>($stack23, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Truncate Calendar.DATE", $stack14, $stack62);

        $stack64 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack23, 14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Round Calendar.MILLISECOND", $stack23, $stack64);

        $stack66 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack23, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Round Calendar.SECOND", $stack20, $stack66);

        $stack68 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack23, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Round Calendar.MINUTE", $stack17, $stack68);

        $stack70 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack23, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Round Calendar.HOUR_OF_DAY", $stack13, $stack70);

        $stack72 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack23, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Round Calendar.HOUR", $stack13, $stack72);

        $stack74 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>($stack23, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Round Calendar.DATE", $stack14, $stack74);

        $stack75 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack75);

        return;
    }

    public void testLang530() throws java.text.ParseException
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Date $stack4, $stack11;
        java.lang.String[] $stack7;
        long $stack13, $stack14, $stack15, $stack16, $stack17;
        org.apache.commons.lang3.time.FastDateFormat $stack5, $stack8;
        java.lang.String $stack6, $stack10;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = new java.util.Date;

        specialinvoke $stack4.<java.util.Date: void <init>()>();

        $stack5 = <org.apache.commons.lang3.time.DateFormatUtils: org.apache.commons.lang3.time.FastDateFormat ISO_DATETIME_TIME_ZONE_FORMAT>;

        $stack6 = virtualinvoke $stack5.<org.apache.commons.lang3.time.FastDateFormat: java.lang.String format(java.util.Date)>($stack4);

        $stack7 = newarray (java.lang.String)[1];

        $stack8 = <org.apache.commons.lang3.time.DateFormatUtils: org.apache.commons.lang3.time.FastDateFormat ISO_DATETIME_TIME_ZONE_FORMAT>;

        $stack10 = virtualinvoke $stack8.<org.apache.commons.lang3.time.FastDateFormat: java.lang.String getPattern()>();

        $stack7[0] = $stack10;

        $stack11 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>($stack6, $stack7);

        $stack13 = virtualinvoke $stack4.<java.util.Date: long getTime()>();

        $stack14 = virtualinvoke $stack11.<java.util.Date: long getTime()>();

        $stack15 = virtualinvoke $stack4.<java.util.Date: long getTime()>();

        $stack16 = $stack15 % 1000L;

        $stack17 = $stack14 + $stack16;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Date not equal to itself ISO formatted and parsed", $stack13, $stack17);

        return;
    }

    public void testCeil() throws java.lang.Exception
    {
        org.apache.commons.lang3.JavaVersion $stack288;
        java.lang.ClassCastException $stack402;
        java.util.Calendar $stack199, $stack204, $stack209, $stack214, $stack219, $stack224, $stack246, $stack256, $stack266, $stack276, $stack286, $stack302, $stack314, $stack324, $stack334;
        int $stack304, $i0;
        java.lang.String $stack292, $stack294;
        java.text.DateFormat $stack4, $stack7, $stack10, $stack13, $stack16, $stack21, $stack26, $stack31, $stack36, $stack41, $stack46, $stack51, $stack56, $stack61, $stack66, $stack71, $stack76, $stack81, $stack86, $stack91, $stack96, $stack101, $stack106, $stack111, $stack116, $stack121, $stack126, $stack131, $stack136, $stack141, $stack146, $stack151, $stack156, $stack161, $stack166, $stack171, $stack176, $stack181, $stack186, $stack191, $stack196, $stack201, $stack206, $stack211, $stack216, $stack221, $stack237, $stack238, $stack243, $stack248, $stack253, $stack258, $stack263, $stack268, $stack273, $stack278, $stack283, $stack297, $stack306, $stack311, $stack316, $stack321, $stack326, $stack331;
        boolean $stack289;
        java.lang.ArithmeticException $stack344, $stack352;
        java.util.GregorianCalendar $u2;
        java.lang.StringBuilder $stack291, $stack293, $u0;
        long $stack305;
        java.util.Date $stack6, $stack8, $stack9, $stack12, $stack14, $stack15, $stack18, $stack19, $stack20, $stack23, $stack24, $stack25, $stack28, $stack29, $stack30, $stack33, $stack34, $stack35, $stack38, $stack39, $stack40, $stack43, $stack44, $stack45, $stack48, $stack49, $stack50, $stack53, $stack54, $stack55, $stack58, $stack59, $stack60, $stack63, $stack64, $stack65, $stack68, $stack69, $stack70, $stack73, $stack74, $stack75, $stack78, $stack79, $stack80, $stack83, $stack84, $stack85, $stack88, $stack89, $stack90, $stack93, $stack94, $stack95, $stack98, $stack99, $stack100, $stack103, $stack104, $stack105, $stack108, $stack109, $stack110, $stack113, $stack114, $stack115, $stack118, $stack119, $stack120, $stack123, $stack124, $stack125, $stack128, $stack129, $stack130, $stack133, $stack134, $stack135, $stack138, $stack139, $stack140, $stack143, $stack144, $stack145, $stack148, $stack149, $stack150, $stack153, $stack154, $stack155, $stack158, $stack159, $stack160, $stack163, $stack164, $stack165, $stack168, $stack169, $stack170, $stack173, $stack174, $stack175, $stack178, $stack179, $stack180, $stack183, $stack184, $stack185, $stack188, $stack189, $stack190, $stack193, $stack194, $stack195, $stack198, $stack200, $stack203, $stack205, $stack208, $stack210, $stack213, $stack215, $stack218, $stack220, $stack223, $stack225, $stack233, $stack240, $stack241, $stack242, $stack245, $stack247, $stack250, $stack251, $stack252, $stack255, $stack257, $stack260, $stack261, $stack262, $stack265, $stack267, $stack270, $stack271, $stack272, $stack275, $stack277, $stack280, $stack281, $stack282, $stack285, $stack287, $stack308, $stack309, $stack310, $stack313, $stack315, $stack318, $stack319, $stack320, $stack323, $stack325, $stack328, $stack329, $stack330, $stack333, $stack335, $u1;
        java.util.TimeZone $stack235, $stack236, $stack295, $stack296;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.lang.IllegalArgumentException $stack358, $stack405, $stack408, $stack411;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack4 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack6 = virtualinvoke $stack4.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 28, 2002 14:00:00.000");

        $stack7 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack8 = virtualinvoke $stack7.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 28, 2002 13:45:01.231");

        $stack9 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack8, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling javadoc-1 failed", $stack6, $stack9);

        $stack10 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack12 = virtualinvoke $stack10.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("April 1, 2002 00:00:00.000");

        $stack13 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack14 = virtualinvoke $stack13.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 28, 2002 13:45:01.231");

        $stack15 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack14, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling javadoc-2 failed", $stack12, $stack15);

        $stack16 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack18 = virtualinvoke $stack16.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2003");

        $stack19 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack20 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack19, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling year-1 failed", $stack18, $stack20);

        $stack21 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack23 = virtualinvoke $stack21.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack24 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack25 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack24, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling year-2 failed", $stack23, $stack25);

        $stack26 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack28 = virtualinvoke $stack26.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 1, 2002");

        $stack29 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack30 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack29, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling month-1 failed", $stack28, $stack30);

        $stack31 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack33 = virtualinvoke $stack31.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 1, 2001");

        $stack34 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack35 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack34, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling month-2 failed", $stack33, $stack35);

        $stack36 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack38 = virtualinvoke $stack36.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 16, 2002");

        $stack39 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack40 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack39, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling semimonth-1 failed", $stack38, $stack40);

        $stack41 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack43 = virtualinvoke $stack41.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 1, 2001");

        $stack44 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack45 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack44, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling semimonth-2 failed", $stack43, $stack45);

        $stack46 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack48 = virtualinvoke $stack46.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 13, 2002");

        $stack49 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack50 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack49, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling date-1 failed", $stack48, $stack50);

        $stack51 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack53 = virtualinvoke $stack51.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 19, 2001");

        $stack54 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack55 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack54, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling date-2 failed", $stack53, $stack55);

        $stack56 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack58 = virtualinvoke $stack56.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 13:00:00.000");

        $stack59 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack60 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack59, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling hour-1 failed", $stack58, $stack60);

        $stack61 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack63 = virtualinvoke $stack61.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 2:00:00.000");

        $stack64 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack65 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack64, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling hour-2 failed", $stack63, $stack65);

        $stack66 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack68 = virtualinvoke $stack66.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:35:00.000");

        $stack69 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack70 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack69, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling minute-1 failed", $stack68, $stack70);

        $stack71 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack73 = virtualinvoke $stack71.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:24:00.000");

        $stack74 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack75 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack74, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling minute-2 failed", $stack73, $stack75);

        $stack76 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack78 = virtualinvoke $stack76.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:57.000");

        $stack79 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack80 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack79, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling second-1 failed", $stack78, $stack80);

        $stack81 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack83 = virtualinvoke $stack81.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:12.000");

        $stack84 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack85 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack84, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling second-2 failed", $stack83, $stack85);

        $stack86 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack88 = virtualinvoke $stack86.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack89 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1>;

        $stack90 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack89, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-1 failed", $stack88, $stack90);

        $stack91 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack93 = virtualinvoke $stack91.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack94 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2>;

        $stack95 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack94, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-2 failed", $stack93, $stack95);

        $stack96 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack98 = virtualinvoke $stack96.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack99 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3>;

        $stack100 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack99, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-3 failed", $stack98, $stack100);

        $stack101 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack103 = virtualinvoke $stack101.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack104 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4>;

        $stack105 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack104, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-4 failed", $stack103, $stack105);

        $stack106 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack108 = virtualinvoke $stack106.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2003");

        $stack109 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack110 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack109, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling year-1 failed", $stack108, $stack110);

        $stack111 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack113 = virtualinvoke $stack111.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 1, 2002");

        $stack114 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack115 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack114, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling year-2 failed", $stack113, $stack115);

        $stack116 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack118 = virtualinvoke $stack116.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 1, 2002");

        $stack119 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack120 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack119, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling month-1 failed", $stack118, $stack120);

        $stack121 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack123 = virtualinvoke $stack121.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 1, 2001");

        $stack124 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack125 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack124, 2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling month-2 failed", $stack123, $stack125);

        $stack126 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack128 = virtualinvoke $stack126.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 16, 2002");

        $stack129 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack130 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack129, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling semimonth-1 failed", $stack128, $stack130);

        $stack131 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack133 = virtualinvoke $stack131.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 1, 2001");

        $stack134 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack135 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack134, 1001);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling semimonth-2 failed", $stack133, $stack135);

        $stack136 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack138 = virtualinvoke $stack136.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 13, 2002");

        $stack139 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack140 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack139, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling date-1 failed", $stack138, $stack140);

        $stack141 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack143 = virtualinvoke $stack141.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 19, 2001");

        $stack144 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack145 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack144, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling date-2 failed", $stack143, $stack145);

        $stack146 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack148 = virtualinvoke $stack146.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 13:00:00.000");

        $stack149 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack150 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack149, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling hour-1 failed", $stack148, $stack150);

        $stack151 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack153 = virtualinvoke $stack151.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 2:00:00.000");

        $stack154 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack155 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack154, 10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling hour-2 failed", $stack153, $stack155);

        $stack156 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack158 = virtualinvoke $stack156.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:35:00.000");

        $stack159 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack160 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack159, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling minute-1 failed", $stack158, $stack160);

        $stack161 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack163 = virtualinvoke $stack161.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:24:00.000");

        $stack164 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack165 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack164, 12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling minute-2 failed", $stack163, $stack165);

        $stack166 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack168 = virtualinvoke $stack166.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:57.000");

        $stack169 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack170 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack169, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling second-1 failed", $stack168, $stack170);

        $stack171 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack173 = virtualinvoke $stack171.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:12.000");

        $stack174 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack175 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack174, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling second-2 failed", $stack173, $stack175);

        $stack176 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack178 = virtualinvoke $stack176.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack179 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm1>;

        $stack180 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack179, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-1 failed", $stack178, $stack180);

        $stack181 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack183 = virtualinvoke $stack181.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack184 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm2>;

        $stack185 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack184, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-2 failed", $stack183, $stack185);

        $stack186 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack188 = virtualinvoke $stack186.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack189 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm3>;

        $stack190 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack189, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-3 failed", $stack188, $stack190);

        $stack191 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack193 = virtualinvoke $stack191.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack194 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date dateAmPm4>;

        $stack195 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack194, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-4 failed", $stack193, $stack195);

        $stack196 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack198 = virtualinvoke $stack196.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 12, 2002 12:34:57.000");

        $stack199 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal1>;

        $stack200 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack199, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling calendar second-1 failed", $stack198, $stack200);

        $stack201 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack203 = virtualinvoke $stack201.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("November 18, 2001 1:23:12.000");

        $stack204 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal2>;

        $stack205 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack204, 13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling calendar second-2 failed", $stack203, $stack205);

        $stack206 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack208 = virtualinvoke $stack206.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack209 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm1>;

        $stack210 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack209, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-1 failed", $stack208, $stack210);

        $stack211 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack213 = virtualinvoke $stack211.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 3, 2002 12:00:00.000");

        $stack214 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm2>;

        $stack215 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack214, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-2 failed", $stack213, $stack215);

        $stack216 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack218 = virtualinvoke $stack216.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack219 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm3>;

        $stack220 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack219, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-3 failed", $stack218, $stack220);

        $stack221 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack223 = virtualinvoke $stack221.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("February 4, 2002 00:00:00.000");

        $stack224 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar calAmPm4>;

        $stack225 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack224, 9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling ampm-4 failed", $stack223, $stack225);

     label01:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $stack411 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar ceiling(java.util.Calendar,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack408 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>(null, 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack405 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>("", 13);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $stack402 := @caughtexception;

     label13:
        $stack233 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $i0 = (int) -9999;

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack233, $i0);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $stack358 := @caughtexception;

     label16:
        $stack235 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack235);

        $stack237 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack236 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone zone>;

        virtualinvoke $stack237.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack236);

        $stack238 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack240 = virtualinvoke $stack238.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack241 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date4>;

        $stack242 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack241, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack240, $stack242);

        $stack243 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack245 = virtualinvoke $stack243.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack246 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal4>;

        $stack247 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack246, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack245, $stack247);

        $stack248 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack250 = virtualinvoke $stack248.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack251 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date5>;

        $stack252 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack251, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack250, $stack252);

        $stack253 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack255 = virtualinvoke $stack253.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack256 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal5>;

        $stack257 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack256, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack255, $stack257);

        $stack258 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack260 = virtualinvoke $stack258.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack261 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date6>;

        $stack262 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack261, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack260, $stack262);

        $stack263 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack265 = virtualinvoke $stack263.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack266 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal6>;

        $stack267 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack266, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack265, $stack267);

        $stack268 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack270 = virtualinvoke $stack268.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack271 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date7>;

        $stack272 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack271, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack270, $stack272);

        $stack273 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack275 = virtualinvoke $stack273.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 31, 2003 00:00:00.000");

        $stack276 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal7>;

        $stack277 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack276, 5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack275, $stack277);

        $stack278 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack280 = virtualinvoke $stack278.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack281 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date4>;

        $stack282 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack281, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack280, $stack282);

        $stack283 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack285 = virtualinvoke $stack283.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack286 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal4>;

        $stack287 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack286, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack285, $stack287);

        $stack288 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_4>;

        $stack289 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($stack288);

        if $stack289 == 0 goto label17;

        $stack306 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack308 = virtualinvoke $stack306.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack309 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date5>;

        $stack310 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack309, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack308, $stack310);

        $stack311 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack313 = virtualinvoke $stack311.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 03:00:00.000");

        $stack314 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal5>;

        $stack315 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack314, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack313, $stack315);

        $stack316 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack318 = virtualinvoke $stack316.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 04:00:00.000");

        $stack319 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date6>;

        $stack320 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack319, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack318, $stack320);

        $stack321 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack323 = virtualinvoke $stack321.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 04:00:00.000");

        $stack324 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal6>;

        $stack325 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack324, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack323, $stack325);

        $stack326 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack328 = virtualinvoke $stack326.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 04:00:00.000");

        $stack329 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date7>;

        $stack330 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>($stack329, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack328, $stack330);

        $stack331 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack333 = virtualinvoke $stack331.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 30, 2003 04:00:00.000");

        $stack334 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Calendar cal7>;

        $stack335 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.lang.Object,int)>($stack334, 11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ceiling MET date across DST change-over", $stack333, $stack335);

        goto label18;

     label17:
        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack291 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Some date ceiling tests not run since the current version is ");

        $stack292 = <org.apache.commons.lang3.SystemUtils: java.lang.String JAVA_SPECIFICATION_VERSION>;

        $stack293 = virtualinvoke $stack291.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack292);

        $stack294 = virtualinvoke $stack293.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<org.apache.commons.lang3.time.DateUtilsTest: void warn(java.lang.String)>($stack294);

     label18:
        $stack295 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>($stack295);

        $stack297 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateTimeParser>;

        $stack296 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.TimeZone defaultZone>;

        virtualinvoke $stack297.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($stack296);

        $u1 = new java.util.Date;

        specialinvoke $u1.<java.util.Date: void <init>(long)>(9223372036854775807L);

        $u2 = new java.util.GregorianCalendar;

        specialinvoke $u2.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $u2.<java.util.GregorianCalendar: void setTime(java.util.Date)>($u1);

     label19:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar ceiling(java.util.Calendar,int)>($u2, 5);

        staticinvoke <org.junit.Assert: void fail()>();

     label20:
        goto label22;

     label21:
        $stack352 := @caughtexception;

     label22:
        virtualinvoke $u2.<java.util.GregorianCalendar: void set(int,int)>(1, 280000001);

     label23:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar ceiling(java.util.Calendar,int)>($u2, 5);

        staticinvoke <org.junit.Assert: void fail()>();

     label24:
        goto label26;

     label25:
        $stack344 := @caughtexception;

     label26:
        virtualinvoke $u2.<java.util.GregorianCalendar: void set(int,int)>(1, 280000000);

        $stack302 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar ceiling(java.util.Calendar,int)>($u2, 5);

        $stack304 = virtualinvoke $stack302.<java.util.Calendar: int get(int)>(10);

        $stack305 = (long) $stack304;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $stack305);

        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.ClassCastException from label10 to label11 with label12;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
        catch java.lang.ArithmeticException from label19 to label20 with label21;
        catch java.lang.ArithmeticException from label23 to label24 with label25;
    }

    public void testIteratorEx() throws java.lang.Exception
    {
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.lang.IllegalArgumentException $stack12, $stack15, $stack18, $stack21;
        java.lang.ClassCastException $stack11;
        java.util.Calendar $stack2;
        int $i0;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

     label01:
        $stack2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = (int) -9999;

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>($stack2, $i0);

     label02:
        goto label04;

     label03:
        $stack21 := @caughtexception;

     label04:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Date,int)>(null, 4);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack18 := @caughtexception;

     label07:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>(null, 4);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $stack15 := @caughtexception;

     label10:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.lang.Object,int)>(null, 4);

        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        goto label13;

     label12:
        $stack12 := @caughtexception;

     label13:
        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.lang.Object,int)>("", 4);

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $stack11 := @caughtexception;

     label16:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.lang.ClassCastException from label13 to label14 with label15;
    }

    public void testWeekIterator() throws java.lang.Exception
    {
        java.util.Date $stack28;
        java.util.Calendar $stack9, $stack10, $stack11, $stack16, $stack22;
        int $stack14, $stack15, $stack17, $stack20, $stack21, i, $i0, $i1;
        java.util.NoSuchElementException $stack69;
        java.lang.UnsupportedOperationException $stack65;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Iterator $stack23, $stack24, $stack25, $stack26, $stack27, $stack29, $stack31;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack9 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        i = 0;

     label01:
        if i >= 7 goto label12;

        $stack10 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($stack9, 5);

        $stack11 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($stack9, 5);

        $stack14 = virtualinvoke $stack11.<java.util.Calendar: int get(int)>(7);

        $stack15 = 1 - $stack14;

        virtualinvoke $stack11.<java.util.Calendar: void add(int,int)>(5, $stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($stack9, 5);

        $stack17 = virtualinvoke $stack16.<java.util.Calendar: int get(int)>(7);

        if $stack17 != 1 goto label02;

        $i0 = (int) -6;

        virtualinvoke $stack16.<java.util.Calendar: void add(int,int)>(5, $i0);

        goto label03;

     label02:
        $stack20 = virtualinvoke $stack16.<java.util.Calendar: int get(int)>(7);

        $stack21 = 2 - $stack20;

        virtualinvoke $stack16.<java.util.Calendar: void add(int,int)>(5, $stack21);

     label03:
        $stack22 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>($stack9, 5);

        $i1 = (int) -3;

        virtualinvoke $stack22.<java.util.Calendar: void add(int,int)>(5, $i1);

        $stack23 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>($stack9, 1);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar)>($stack23, $stack11);

        $stack24 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>($stack9, 2);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar)>($stack24, $stack16);

        $stack25 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>($stack9, 3);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar)>($stack25, $stack10);

        $stack26 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>($stack9, 4);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar)>($stack26, $stack22);

        $stack27 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.lang.Object,int)>($stack9, 4);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar)>($stack27, $stack22);

        $stack28 = virtualinvoke $stack9.<java.util.Calendar: java.util.Date getTime()>();

        $stack29 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.lang.Object,int)>($stack28, 4);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar)>($stack29, $stack22);

     label04:
        interfaceinvoke $stack29.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $stack69 := @caughtexception;

     label07:
        $stack31 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>($stack9, 4);

        interfaceinvoke $stack31.<java.util.Iterator: java.lang.Object next()>();

     label08:
        interfaceinvoke $stack31.<java.util.Iterator: void remove()>();

     label09:
        goto label11;

     label10:
        $stack65 := @caughtexception;

     label11:
        virtualinvoke $stack9.<java.util.Calendar: void add(int,int)>(5, 1);

        i = i + 1;

        goto label01;

     label12:
        return;

        catch java.util.NoSuchElementException from label04 to label05 with label06;
        catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
    }

    public void testMonthIterator() throws java.lang.Exception
    {
        java.util.Date $stack2, $stack5, $stack7, $stack8, $stack11, $stack13, $stack14, $stack17, $stack19, $stack20, $stack23, $stack25;
        java.text.DateFormat $stack4, $stack6, $stack10, $stack12, $stack16, $stack18, $stack22, $stack24;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Iterator $stack3, $stack9, $stack15, $stack21;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack2 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Date,int)>($stack2, 5);

        $stack4 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack5 = virtualinvoke $stack4.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 27, 2002");

        $stack6 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack7 = virtualinvoke $stack6.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 2, 2002");

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Date,java.util.Date)>($stack3, $stack5, $stack7);

        $stack8 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date1>;

        $stack9 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Date,int)>($stack8, 6);

        $stack10 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack11 = virtualinvoke $stack10.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("January 28, 2002");

        $stack12 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack13 = virtualinvoke $stack12.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("March 3, 2002");

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Date,java.util.Date)>($stack9, $stack11, $stack13);

        $stack14 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack15 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Date,int)>($stack14, 5);

        $stack16 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack17 = virtualinvoke $stack16.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("October 28, 2001");

        $stack18 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack19 = virtualinvoke $stack18.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 1, 2001");

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Date,java.util.Date)>($stack15, $stack17, $stack19);

        $stack20 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.util.Date date2>;

        $stack21 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Date,int)>($stack20, 6);

        $stack22 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack23 = virtualinvoke $stack22.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("October 29, 2001");

        $stack24 = this.<org.apache.commons.lang3.time.DateUtilsTest: java.text.DateFormat dateParser>;

        $stack25 = virtualinvoke $stack24.<java.text.DateFormat: java.util.Date parse(java.lang.String)>("December 2, 2001");

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Date,java.util.Date)>($stack21, $stack23, $stack25);

        return;
    }

    public void testLANG799_EN_OK() throws java.text.ParseException
    {
        java.lang.Throwable $stack9;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Locale $stack3, $stack4;
        java.lang.String[] $stack5, $stack7;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack4 = <java.util.Locale: java.util.Locale ENGLISH>;

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack4);

     label1:
        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("Wed, 09 Apr 2008 23:55:38 GMT", $stack5);

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDateStrictly(java.lang.String,java.lang.String[])>("Wed, 09 Apr 2008 23:55:38 GMT", $stack7);

     label2:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        goto label5;

     label3:
        $stack9 := @caughtexception;

     label4:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        throw $stack9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testLANG799_EN_FAIL() throws java.text.ParseException
    {
        java.lang.Throwable $stack7;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Locale $stack3, $stack4;
        java.lang.String[] $stack5;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack4 = <java.util.Locale: java.util.Locale ENGLISH>;

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack4);

     label1:
        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("Mi, 09 Apr 2008 23:55:38 GMT", $stack5);

     label2:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        goto label5;

     label3:
        $stack7 := @caughtexception;

     label4:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        throw $stack7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testLANG799_DE_OK() throws java.text.ParseException
    {
        java.lang.Throwable $stack9;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Locale $stack3, $stack4;
        java.lang.String[] $stack5, $stack7;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack4 = <java.util.Locale: java.util.Locale GERMAN>;

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack4);

     label1:
        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("Mi, 09 Apr 2008 23:55:38 GMT", $stack5);

        $stack7 = newarray (java.lang.String)[1];

        $stack7[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDateStrictly(java.lang.String,java.lang.String[])>("Mi, 09 Apr 2008 23:55:38 GMT", $stack7);

     label2:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        goto label5;

     label3:
        $stack9 := @caughtexception;

     label4:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        throw $stack9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testLANG799_DE_FAIL() throws java.text.ParseException
    {
        java.lang.Throwable $stack7;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Locale $stack3, $stack4;
        java.lang.String[] $stack5;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack4 = <java.util.Locale: java.util.Locale GERMAN>;

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack4);

     label1:
        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])>("Wed, 09 Apr 2008 23:55:38 GMT", $stack5);

     label2:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        goto label5;

     label3:
        $stack7 := @caughtexception;

     label4:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        throw $stack7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testLANG799_EN_WITH_DE_LOCALE() throws java.text.ParseException
    {
        java.lang.Throwable $stack8;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.util.Locale $stack3, $stack4, $stack6;
        java.lang.String[] $stack5;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        $stack3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack4 = <java.util.Locale: java.util.Locale ENGLISH>;

        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack4);

     label1:
        $stack6 = <java.util.Locale: java.util.Locale GERMAN>;

        $stack5 = newarray (java.lang.String)[1];

        $stack5[0] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.util.Locale,java.lang.String[])>("Mi, 09 Apr 2008 23:55:38 GMT", $stack6, $stack5);

     label2:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        goto label5;

     label3:
        $stack8 := @caughtexception;

     label4:
        staticinvoke <java.util.Locale: void setDefault(java.util.Locale)>($stack3);

        throw $stack8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static void assertWeekIterator(java.util.Iterator, java.util.Calendar)
    {
        java.util.Calendar start, end;
        java.util.Iterator it;
        java.lang.Object $stack3;

        it := @parameter0: java.util.Iterator;

        start := @parameter1: java.util.Calendar;

        $stack3 = virtualinvoke start.<java.util.Calendar: java.lang.Object clone()>();

        end = (java.util.Calendar) $stack3;

        virtualinvoke end.<java.util.Calendar: void add(int,int)>(5, 6);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar,java.util.Calendar)>(it, start, end);

        return;
    }

    private static void assertWeekIterator(java.util.Iterator, java.util.Date, java.util.Date)
    {
        java.util.Calendar $stack5, $stack6;
        java.util.Iterator it;
        java.util.Date start, end;

        it := @parameter0: java.util.Iterator;

        start := @parameter1: java.util.Date;

        end := @parameter2: java.util.Date;

        $stack5 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $stack5.<java.util.Calendar: void setTime(java.util.Date)>(start);

        $stack6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        virtualinvoke $stack6.<java.util.Calendar: void setTime(java.util.Date)>(end);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertWeekIterator(java.util.Iterator,java.util.Calendar,java.util.Calendar)>(it, $stack5, $stack6);

        return;
    }

    private static void assertWeekIterator(java.util.Iterator, java.util.Calendar, java.util.Calendar)
    {
        java.lang.Throwable $r0;
        java.util.Calendar start, end, $stack16, cal, last;
        int $stack8, count;
        java.lang.String $stack14;
        boolean $stack7;
        java.util.Iterator it;
        junit.framework.AssertionFailedError $u1;
        java.lang.Object $stack6, $stack17;
        java.lang.StringBuilder $stack11, $stack12, $stack13, $u0;

        it := @parameter0: java.util.Iterator;

        start := @parameter1: java.util.Calendar;

        end := @parameter2: java.util.Calendar;

        $stack6 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        cal = (java.util.Calendar) $stack6;

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertCalendarsEquals(java.lang.String,java.util.Calendar,java.util.Calendar,long)>("", start, cal, 0L);

        count = 1;

     label1:
        $stack7 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        if $stack7 == 0 goto label2;

        $stack16 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(cal, 5);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertCalendarsEquals(java.lang.String,java.util.Calendar,java.util.Calendar,long)>("", cal, $stack16, 0L);

        last = cal;

        $stack17 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        cal = (java.util.Calendar) $stack17;

        count = count + 1;

        virtualinvoke last.<java.util.Calendar: void add(int,int)>(5, 1);

        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertCalendarsEquals(java.lang.String,java.util.Calendar,java.util.Calendar,long)>("", last, cal, 0L);

        goto label1;

     label2:
        $stack8 = count % 7;

        if $stack8 == 0 goto label3;

        $u1 = new junit.framework.AssertionFailedError;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack11 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There were ");

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(count);

        $stack13 = virtualinvoke $stack12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" days in this iterator");

        $stack14 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($stack14);

        $r0 = (java.lang.Throwable) $u1;

        throw $r0;

     label3:
        staticinvoke <org.apache.commons.lang3.time.DateUtilsTest: void assertCalendarsEquals(java.lang.String,java.util.Calendar,java.util.Calendar,long)>("", end, cal, 0L);

        return;
    }

    private static void assertCalendarsEquals(java.lang.String, java.util.Calendar, java.util.Calendar, long)
    {
        java.lang.Throwable $r0;
        java.util.Date $stack5, $stack7, $stack16, $stack19;
        long $stack6, $stack8, $stack9, $stack10, delta;
        java.util.Calendar cal1, cal2;
        byte $stack11;
        int $i0;
        java.lang.String message, $stack21;
        junit.framework.AssertionFailedError $u1;
        java.lang.StringBuilder $stack14, $stack15, $stack17, $stack18, $stack20, $u0;

        message := @parameter0: java.lang.String;

        cal1 := @parameter1: java.util.Calendar;

        cal2 := @parameter2: java.util.Calendar;

        delta := @parameter3: long;

        $stack5 = virtualinvoke cal1.<java.util.Calendar: java.util.Date getTime()>();

        $stack6 = virtualinvoke $stack5.<java.util.Date: long getTime()>();

        $stack7 = virtualinvoke cal2.<java.util.Calendar: java.util.Date getTime()>();

        $stack8 = virtualinvoke $stack7.<java.util.Date: long getTime()>();

        $stack9 = $stack6 - $stack8;

        $stack10 = staticinvoke <java.lang.Math: long abs(long)>($stack9);

        $stack11 = $stack10 cmp delta;

        $i0 = (int) $stack11;

        if $i0 <= 0 goto label1;

        $u1 = new junit.framework.AssertionFailedError;

        $u0 = new java.lang.StringBuilder;

        specialinvoke $u0.<java.lang.StringBuilder: void <init>()>();

        $stack14 = virtualinvoke $u0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(message);

        $stack15 = virtualinvoke $stack14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected ");

        $stack16 = virtualinvoke cal1.<java.util.Calendar: java.util.Date getTime()>();

        $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack16);

        $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $stack19 = virtualinvoke cal2.<java.util.Calendar: java.util.Date getTime()>();

        $stack20 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack19);

        $stack21 = virtualinvoke $stack20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $u1.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($stack21);

        $r0 = (java.lang.Throwable) $u1;

        throw $r0;

     label1:
        return;
    }

    void warn(java.lang.String)
    {
        java.io.PrintStream $stack2;
        org.apache.commons.lang3.time.DateUtilsTest this;
        java.lang.String msg;

        this := @this: org.apache.commons.lang3.time.DateUtilsTest;

        msg := @parameter0: java.lang.String;

        $stack2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $stack2.<java.io.PrintStream: void println(java.lang.String)>(msg);

        return;
    }

    static void <clinit>()
    {
        java.io.PrintStream $stack5;
        java.util.GregorianCalendar $stack1;
        java.util.Date $stack2;
        long $stack3;
        java.util.Locale $stack7;
        java.lang.StringBuilder $stack4, $stack6, $stack8;
        java.lang.String $stack9;

        $stack1 = new java.util.GregorianCalendar;

        specialinvoke $stack1.<java.util.GregorianCalendar: void <init>(int,int,int,int,int,int)>(2000, 6, 5, 4, 3, 2);

        virtualinvoke $stack1.<java.util.GregorianCalendar: void set(int,int)>(14, 1);

        $stack2 = virtualinvoke $stack1.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $stack3 = virtualinvoke $stack2.<java.util.Date: long getTime()>();

        <org.apache.commons.lang3.time.DateUtilsTest: long MILLIS_TEST> = $stack3;

        $stack5 = <java.lang.System: java.io.PrintStream out>;

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack6 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DateUtilsTest: Default Locale=");

        $stack7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack7);

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack5.<java.io.PrintStream: void println(java.lang.String)>($stack9);

        return;
    }
}
