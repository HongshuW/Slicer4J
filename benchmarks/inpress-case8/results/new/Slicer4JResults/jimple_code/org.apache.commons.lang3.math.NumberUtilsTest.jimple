public class org.apache.commons.lang3.math.NumberUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void testConstructor()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack6;
        java.lang.reflect.Constructor $stack7;
        java.lang.reflect.Constructor[] $stack4;
        org.apache.commons.lang3.math.NumberUtils $stack2;
        int $stack5, $stack8, $stack11, $stack14;
        java.lang.Class $stack3, $stack10, $stack13;
        boolean $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = new org.apache.commons.lang3.math.NumberUtils;

        specialinvoke $stack2.<org.apache.commons.lang3.math.NumberUtils: void <init>()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($stack2);

        $stack3 = class "Lorg/apache/commons/lang3/math/NumberUtils;";

        $stack4 = virtualinvoke $stack3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $stack5 = lengthof $stack4;

        $stack6 = (long) $stack5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $stack6);

        $stack7 = $stack4[0];

        $stack8 = virtualinvoke $stack7.<java.lang.reflect.Constructor: int getModifiers()>();

        $stack9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack9);

        $stack10 = class "Lorg/apache/commons/lang3/math/NumberUtils;";

        $stack11 = virtualinvoke $stack10.<java.lang.Class: int getModifiers()>();

        $stack12 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = class "Lorg/apache/commons/lang3/math/NumberUtils;";

        $stack14 = virtualinvoke $stack13.<java.lang.Class: int getModifiers()>();

        $stack15 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($stack14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($stack15);

        return;
    }

    public void testToIntString()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        int $stack2, $stack4, $stack6, $stack8;
        boolean $stack14, $stack12, $stack10, $stack9;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int toInt(java.lang.String)>("12345");

        if $stack2 != 12345 goto label1;

        $stack14 = 1;

        goto label2;

     label1:
        $stack14 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toInt(String) 1 failed", $stack14);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int toInt(java.lang.String)>("abc");

        if $stack4 != 0 goto label3;

        $stack12 = 1;

        goto label4;

     label3:
        $stack12 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toInt(String) 2 failed", $stack12);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int toInt(java.lang.String)>("");

        if $stack6 != 0 goto label5;

        $stack10 = 1;

        goto label6;

     label5:
        $stack10 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toInt(empty) failed", $stack10);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int toInt(java.lang.String)>(null);

        if $stack8 != 0 goto label7;

        $stack9 = 1;

        goto label8;

     label7:
        $stack9 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toInt(null) failed", $stack9);

        return;
    }

    public void testToIntStringI()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        int $stack2, $stack4;
        boolean $stack6, $stack5;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int toInt(java.lang.String,int)>("12345", 5);

        if $stack2 != 12345 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toInt(String,int) 1 failed", $stack6);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int toInt(java.lang.String,int)>("1234.5", 5);

        if $stack4 != 5 goto label3;

        $stack5 = 1;

        goto label4;

     label3:
        $stack5 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toInt(String,int) 2 failed", $stack5);

        return;
    }

    public void testToLongString()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack2, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20, $stack23;
        byte $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24;
        boolean $stack44, $stack41, $stack38, $stack35, $stack32, $stack29, $stack26, $stack25;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>("12345");

        $stack3 = $stack2 cmp 12345L;

        if $stack3 != 0 goto label01;

        $stack44 = 1;

        goto label02;

     label01:
        $stack44 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(String) 1 failed", $stack44);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>("abc");

        $stack6 = $stack5 cmp 0L;

        if $stack6 != 0 goto label03;

        $stack41 = 1;

        goto label04;

     label03:
        $stack41 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(String) 2 failed", $stack41);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>("1L");

        $stack9 = $stack8 cmp 0L;

        if $stack9 != 0 goto label05;

        $stack38 = 1;

        goto label06;

     label05:
        $stack38 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(String) 3 failed", $stack38);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>("1l");

        $stack12 = $stack11 cmp 0L;

        if $stack12 != 0 goto label07;

        $stack35 = 1;

        goto label08;

     label07:
        $stack35 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(String) 4 failed", $stack35);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>("9223372036854775807");

        $stack15 = $stack14 cmp 9223372036854775807L;

        if $stack15 != 0 goto label09;

        $stack32 = 1;

        goto label10;

     label09:
        $stack32 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(Long.MAX_VALUE) failed", $stack32);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>("-9223372036854775808");

        $stack18 = $stack17 cmp -9223372036854775808L;

        if $stack18 != 0 goto label11;

        $stack29 = 1;

        goto label12;

     label11:
        $stack29 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(Long.MIN_VALUE) failed", $stack29);

        $stack20 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>("");

        $stack21 = $stack20 cmp 0L;

        if $stack21 != 0 goto label13;

        $stack26 = 1;

        goto label14;

     label13:
        $stack26 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(empty) failed", $stack26);

        $stack23 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String)>(null);

        $stack24 = $stack23 cmp 0L;

        if $stack24 != 0 goto label15;

        $stack25 = 1;

        goto label16;

     label15:
        $stack25 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(null) failed", $stack25);

        return;
    }

    public void testToLongStringL()
    {
        byte $stack3, $stack6;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack2, $stack5;
        boolean $stack8, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String,long)>("12345", 5L);

        $stack3 = $stack2 cmp 12345L;

        if $stack3 != 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(String,long) 1 failed", $stack8);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long toLong(java.lang.String,long)>("1234.5", 5L);

        $stack6 = $stack5 cmp 5L;

        if $stack6 != 0 goto label3;

        $stack7 = 1;

        goto label4;

     label3:
        $stack7 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toLong(String,long) 2 failed", $stack7);

        return;
    }

    public void testToFloatString()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        byte $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21;
        boolean $stack38, $stack35, $stack32, $stack29, $stack26, $stack23, $stack22;
        float $stack2, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String)>("-1.2345");

        $stack3 = $stack2 cmpl -1.2345F;

        if $stack3 != 0 goto label01;

        $stack38 = 1;

        goto label02;

     label01:
        $stack38 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(String) 1 failed", $stack38);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String)>("1.2345");

        $stack6 = $stack5 cmpl 1.2345F;

        if $stack6 != 0 goto label03;

        $stack35 = 1;

        goto label04;

     label03:
        $stack35 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(String) 2 failed", $stack35);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String)>("abc");

        $stack9 = $stack8 cmpl 0.0F;

        if $stack9 != 0 goto label05;

        $stack32 = 1;

        goto label06;

     label05:
        $stack32 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(String) 3 failed", $stack32);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String)>("3.4028235E38");

        $stack12 = $stack11 cmpl 3.4028235E38F;

        if $stack12 != 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(Float.MAX_VALUE) failed", $stack29);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String)>("1.4E-45");

        $stack15 = $stack14 cmpl 1.4E-45F;

        if $stack15 != 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(Float.MIN_VALUE) failed", $stack26);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String)>("");

        $stack18 = $stack17 cmpl 0.0F;

        if $stack18 != 0 goto label11;

        $stack23 = 1;

        goto label12;

     label11:
        $stack23 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(empty) failed", $stack23);

        $stack20 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String)>(null);

        $stack21 = $stack20 cmpl 0.0F;

        if $stack21 != 0 goto label13;

        $stack22 = 1;

        goto label14;

     label13:
        $stack22 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(null) failed", $stack22);

        return;
    }

    public void testToFloatStringF()
    {
        byte $stack3, $stack6;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        float $stack2, $stack5;
        boolean $stack8, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String,float)>("1.2345", 5.1F);

        $stack3 = $stack2 cmpl 1.2345F;

        if $stack3 != 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(String,int) 1 failed", $stack8);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float toFloat(java.lang.String,float)>("a", 5.0F);

        $stack6 = $stack5 cmpl 5.0F;

        if $stack6 != 0 goto label3;

        $stack7 = 1;

        goto label4;

     label3:
        $stack7 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toFloat(String,int) 2 failed", $stack7);

        return;
    }

    public void testStringToDoubleString()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        byte $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21;
        double $stack2, $stack5, $stack8, $stack11, $stack14, $stack17, $stack20;
        boolean $stack38, $stack35, $stack32, $stack29, $stack26, $stack23, $stack22;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String)>("-1.2345");

        $stack3 = $stack2 cmpl -1.2345;

        if $stack3 != 0 goto label01;

        $stack38 = 1;

        goto label02;

     label01:
        $stack38 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(String) 1 failed", $stack38);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String)>("1.2345");

        $stack6 = $stack5 cmpl 1.2345;

        if $stack6 != 0 goto label03;

        $stack35 = 1;

        goto label04;

     label03:
        $stack35 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(String) 2 failed", $stack35);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String)>("abc");

        $stack9 = $stack8 cmpl 0.0;

        if $stack9 != 0 goto label05;

        $stack32 = 1;

        goto label06;

     label05:
        $stack32 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(String) 3 failed", $stack32);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String)>("1.7976931348623157E308");

        $stack12 = $stack11 cmpl 1.7976931348623157E308;

        if $stack12 != 0 goto label07;

        $stack29 = 1;

        goto label08;

     label07:
        $stack29 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(Double.MAX_VALUE) failed", $stack29);

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String)>("4.9E-324");

        $stack15 = $stack14 cmpl 4.9E-324;

        if $stack15 != 0 goto label09;

        $stack26 = 1;

        goto label10;

     label09:
        $stack26 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(Double.MIN_VALUE) failed", $stack26);

        $stack17 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String)>("");

        $stack18 = $stack17 cmpl 0.0;

        if $stack18 != 0 goto label11;

        $stack23 = 1;

        goto label12;

     label11:
        $stack23 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(empty) failed", $stack23);

        $stack20 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String)>(null);

        $stack21 = $stack20 cmpl 0.0;

        if $stack21 != 0 goto label13;

        $stack22 = 1;

        goto label14;

     label13:
        $stack22 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(null) failed", $stack22);

        return;
    }

    public void testStringToDoubleStringD()
    {
        byte $stack3, $stack6;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        double $stack2, $stack5;
        boolean $stack8, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String,double)>("1.2345", 5.1);

        $stack3 = $stack2 cmpl 1.2345;

        if $stack3 != 0 goto label1;

        $stack8 = 1;

        goto label2;

     label1:
        $stack8 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(String,int) 1 failed", $stack8);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double toDouble(java.lang.String,double)>("a", 5.0);

        $stack6 = $stack5 cmpl 5.0;

        if $stack6 != 0 goto label3;

        $stack7 = 1;

        goto label4;

     label3:
        $stack7 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toDouble(String,int) 2 failed", $stack7);

        return;
    }

    public void testToByteString()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        byte $stack2, $stack4, $stack6, $stack8;
        int $i0;
        boolean $stack14, $stack12, $stack10, $stack9;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte toByte(java.lang.String)>("123");

        $i0 = (int) $stack2;

        if $i0 != 123 goto label1;

        $stack14 = 1;

        goto label2;

     label1:
        $stack14 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toByte(String) 1 failed", $stack14);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte toByte(java.lang.String)>("abc");

        if $stack4 != 0 goto label3;

        $stack12 = 1;

        goto label4;

     label3:
        $stack12 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toByte(String) 2 failed", $stack12);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte toByte(java.lang.String)>("");

        if $stack6 != 0 goto label5;

        $stack10 = 1;

        goto label6;

     label5:
        $stack10 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toByte(empty) failed", $stack10);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte toByte(java.lang.String)>(null);

        if $stack8 != 0 goto label7;

        $stack9 = 1;

        goto label8;

     label7:
        $stack9 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toByte(null) failed", $stack9);

        return;
    }

    public void testToByteStringI()
    {
        byte $stack2, $stack4;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        int $i0, $i1;
        boolean $stack6, $stack5;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte toByte(java.lang.String,byte)>("123", 5);

        $i0 = (int) $stack2;

        if $i0 != 123 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toByte(String,byte) 1 failed", $stack6);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte toByte(java.lang.String,byte)>("12.3", 5);

        $i1 = (int) $stack4;

        if $i1 != 5 goto label3;

        $stack5 = 1;

        goto label4;

     label3:
        $stack5 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toByte(String,byte) 2 failed", $stack5);

        return;
    }

    public void testToShortString()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        short $stack2, $stack4, $stack6, $stack8;
        int $i0;
        boolean $stack14, $stack12, $stack10, $stack9;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short toShort(java.lang.String)>("12345");

        $i0 = (int) $stack2;

        if $i0 != 12345 goto label1;

        $stack14 = 1;

        goto label2;

     label1:
        $stack14 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toShort(String) 1 failed", $stack14);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short toShort(java.lang.String)>("abc");

        if $stack4 != 0 goto label3;

        $stack12 = 1;

        goto label4;

     label3:
        $stack12 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toShort(String) 2 failed", $stack12);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short toShort(java.lang.String)>("");

        if $stack6 != 0 goto label5;

        $stack10 = 1;

        goto label6;

     label5:
        $stack10 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toShort(empty) failed", $stack10);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short toShort(java.lang.String)>(null);

        if $stack8 != 0 goto label7;

        $stack9 = 1;

        goto label8;

     label7:
        $stack9 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toShort(null) failed", $stack9);

        return;
    }

    public void testToShortStringI()
    {
        short $stack2, $stack4;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        int $i0, $i1;
        boolean $stack6, $stack5;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short toShort(java.lang.String,short)>("12345", 5);

        $i0 = (int) $stack2;

        if $i0 != 12345 goto label1;

        $stack6 = 1;

        goto label2;

     label1:
        $stack6 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toShort(String,short) 1 failed", $stack6);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short toShort(java.lang.String,short)>("1234.5", 5);

        $i1 = (int) $stack4;

        if $i1 != 5 goto label3;

        $stack5 = 1;

        goto label4;

     label3:
        $stack5 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("toShort(String,short) 2 failed", $stack5);

        return;
    }

    public void testCreateNumber()
    {
        java.lang.Float $stack2, $stack14, $stack17, $stack29, $stack54, $stack80;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.Integer $stack5, $stack32;
        java.math.BigDecimal $u1;
        java.lang.Long $stack20, $stack23, $stack26, $stack71, $stack74;
        java.math.BigInteger $u0, $u2;
        boolean $stack69, $stack83, $stack118, $stack116, $stack114, $stack102;
        org.apache.commons.lang3.JavaVersion $stack68;
        java.lang.Double $stack8, $stack11, $stack51, $stack57, $stack60, $stack85;
        int $stack37, $stack41, $stack45, $stack49, $i0, $i1;
        java.lang.Number $stack3, $stack6, $stack9, $stack12, $stack15, $stack18, $stack21, $stack24, $stack27, $stack30, $stack33, $stack36, $stack40, $stack44, $stack48, $stack52, $stack55, $stack58, $stack61, $stack64, $stack67, $stack72, $stack75, $stack78, $stack81, $stack86, $stack89;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>("1234.5");

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1234.5");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 1 failed", $stack2, $stack3);

        $stack5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>("12345");

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("12345");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 2 failed", $stack5, $stack6);

        $stack8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>("1234.5");

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1234.5D");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 3 failed", $stack8, $stack9);

        $stack11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>("1234.5");

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1234.5d");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 3 failed", $stack11, $stack12);

        $stack14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>("1234.5");

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1234.5F");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 4 failed", $stack14, $stack15);

        $stack17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>("1234.5");

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1234.5f");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 4 failed", $stack17, $stack18);

        $stack20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2147483648L);

        $stack21 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("2147483648");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 5 failed", $stack20, $stack21);

        $stack23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12345L);

        $stack24 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("12345L");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 6 failed", $stack23, $stack24);

        $stack26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12345L);

        $stack27 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("12345l");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 6 failed", $stack26, $stack27);

        $stack29 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>("-1234.5");

        $stack30 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("-1234.5");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 7 failed", $stack29, $stack30);

        $stack32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>("-12345");

        $stack33 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("-12345");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 8 failed", $stack32, $stack33);

        $stack36 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("0xFADE");

        $stack37 = virtualinvoke $stack36.<java.lang.Number: int intValue()>();

        $i0 = (int) 64222;

        if $i0 != $stack37 goto label1;

        $stack118 = 1;

        goto label2;

     label1:
        $stack118 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("createNumber(String) 9a failed", $stack118);

        $stack40 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("0Xfade");

        $stack41 = virtualinvoke $stack40.<java.lang.Number: int intValue()>();

        $i1 = (int) 64222;

        if $i1 != $stack41 goto label3;

        $stack116 = 1;

        goto label4;

     label3:
        $stack116 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("createNumber(String) 9b failed", $stack116);

        $stack44 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("-0xFADE");

        $stack45 = virtualinvoke $stack44.<java.lang.Number: int intValue()>();

        if -64222 != $stack45 goto label5;

        $stack114 = 1;

        goto label6;

     label5:
        $stack114 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("createNumber(String) 10a failed", $stack114);

        $stack48 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("-0Xfade");

        $stack49 = virtualinvoke $stack48.<java.lang.Number: int intValue()>();

        if -64222 != $stack49 goto label7;

        $stack102 = 1;

        goto label8;

     label7:
        $stack102 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("createNumber(String) 10b failed", $stack102);

        $stack51 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>("1.1E200");

        $stack52 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1.1E200");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 11 failed", $stack51, $stack52);

        $stack54 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>("1.1E20");

        $stack55 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1.1E20");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 12 failed", $stack54, $stack55);

        $stack57 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>("-1.1E200");

        $stack58 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("-1.1E200");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 13 failed", $stack57, $stack58);

        $stack60 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>("1.1E-200");

        $stack61 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1.1E-200");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 14 failed", $stack60, $stack61);

        $stack64 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(null) failed", null, $stack64);

        $u0 = new java.math.BigInteger;

        specialinvoke $u0.<java.math.BigInteger: void <init>(java.lang.String)>("12345678901234567890");

        $stack67 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("12345678901234567890L");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) failed", $u0, $stack67);

        $stack68 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_1_3>;

        $stack69 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>($stack68);

        if $stack69 == 0 goto label9;

        $u1 = new java.math.BigDecimal;

        specialinvoke $u1.<java.math.BigDecimal: void <init>(java.lang.String)>("1.1E-700");

        $stack89 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1.1E-700F");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 15 failed", $u1, $stack89);

     label9:
        $stack71 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>("102147483647");

        $stack72 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("102147483647L");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 16 failed", $stack71, $stack72);

        $stack74 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>("102147483647");

        $stack75 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("102147483647");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 17 failed", $stack74, $stack75);

        $u2 = new java.math.BigInteger;

        specialinvoke $u2.<java.math.BigInteger: void <init>(java.lang.String)>("109223372036854775807");

        $stack78 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("109223372036854775807");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) 18 failed", $u2, $stack78);

        $stack80 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>("2.");

        $stack81 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("2.");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) LANG-521 failed", $stack80, $stack81);

        $stack83 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1eE");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("createNumber(String) succeeded", $stack83);

        $stack85 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $stack86 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1.7976931348623157E308");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createNumber(String) LANG-693 failed", $stack85, $stack86);

        return;
    }

    public void testCreateFloat()
    {
        java.lang.Float $stack2, $stack3, $stack6;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>("1234.5");

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>("1234.5");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createFloat(String) failed", $stack2, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createFloat(null) failed", null, $stack6);

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateFloatFailure(java.lang.String)>("");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateFloatFailure(java.lang.String)>(" ");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateFloatFailure(java.lang.String)>("\u0008\t\n\f\r");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateFloatFailure(java.lang.String)>("\u00a0\ufeff\u000b\f\u001c\u001d\u001e\u001f");

        return;
    }

    protected void testCreateFloatFailure(java.lang.String)
    {
        java.lang.Float $stack3;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.NumberFormatException $stack8;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String str, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        str := @parameter0: java.lang.String;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Float createFloat(java.lang.String)>(str);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createFloat(blank) failed: ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack7);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void testCreateDouble()
    {
        java.lang.Double $stack2, $stack3, $stack6;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>("1234.5");

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>("1234.5");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createDouble(String) failed", $stack2, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createDouble(null) failed", null, $stack6);

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateDoubleFailure(java.lang.String)>("");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateDoubleFailure(java.lang.String)>(" ");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateDoubleFailure(java.lang.String)>("\u0008\t\n\f\r");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateDoubleFailure(java.lang.String)>("\u00a0\ufeff\u000b\f\u001c\u001d\u001e\u001f");

        return;
    }

    protected void testCreateDoubleFailure(java.lang.String)
    {
        java.lang.Double $stack3;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.NumberFormatException $stack8;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String str, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        str := @parameter0: java.lang.String;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Double createDouble(java.lang.String)>(str);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createDouble(blank) failed: ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack7);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void testCreateInteger()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.Integer $stack2, $stack3, $stack6;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>("12345");

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>("12345");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createInteger(String) failed", $stack2, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createInteger(null) failed", null, $stack6);

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateIntegerFailure(java.lang.String)>("");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateIntegerFailure(java.lang.String)>(" ");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateIntegerFailure(java.lang.String)>("\u0008\t\n\f\r");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateIntegerFailure(java.lang.String)>("\u00a0\ufeff\u000b\f\u001c\u001d\u001e\u001f");

        return;
    }

    protected void testCreateIntegerFailure(java.lang.String)
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.NumberFormatException $stack8;
        java.lang.Integer $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String str, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        str := @parameter0: java.lang.String;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer createInteger(java.lang.String)>(str);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createInteger(blank) failed: ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack7);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void testCreateLong()
    {
        java.lang.Long $stack2, $stack3, $stack6;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>("12345");

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>("12345");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createLong(String) failed", $stack2, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createLong(null) failed", null, $stack6);

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateLongFailure(java.lang.String)>("");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateLongFailure(java.lang.String)>(" ");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateLongFailure(java.lang.String)>("\u0008\t\n\f\r");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateLongFailure(java.lang.String)>("\u00a0\ufeff\u000b\f\u001c\u001d\u001e\u001f");

        return;
    }

    protected void testCreateLongFailure(java.lang.String)
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.NumberFormatException $stack8;
        java.lang.Long $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String str, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        str := @parameter0: java.lang.String;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Long createLong(java.lang.String)>(str);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createLong(blank) failed: ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack7);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void testCreateBigInteger()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.math.BigInteger $stack1, $stack3, $stack6;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = new java.math.BigInteger;

        specialinvoke $stack1.<java.math.BigInteger: void <init>(java.lang.String)>("12345");

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>("12345");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createBigInteger(String) failed", $stack1, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createBigInteger(null) failed", null, $stack6);

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigIntegerFailure(java.lang.String)>("");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigIntegerFailure(java.lang.String)>(" ");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigIntegerFailure(java.lang.String)>("\u0008\t\n\f\r");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigIntegerFailure(java.lang.String)>("\u00a0\ufeff\u000b\f\u001c\u001d\u001e\u001f");

        return;
    }

    protected void testCreateBigIntegerFailure(java.lang.String)
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.NumberFormatException $stack8;
        java.math.BigInteger $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String str, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        str := @parameter0: java.lang.String;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigInteger createBigInteger(java.lang.String)>(str);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createBigInteger(blank) failed: ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack7);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void testCreateBigDecimal()
    {
        java.math.BigDecimal $stack1, $stack3, $stack6;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = new java.math.BigDecimal;

        specialinvoke $stack1.<java.math.BigDecimal: void <init>(java.lang.String)>("1234.5");

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>("1234.5");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createBigDecimal(String) failed", $stack1, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("createBigDecimal(null) failed", null, $stack6);

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>(" ");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("\u0008\t\n\f\r");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("\u00a0\ufeff\u000b\f\u001c\u001d\u001e\u001f");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("-");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("--");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("--0");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("+");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("++");

        virtualinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: void testCreateBigDecimalFailure(java.lang.String)>("++0");

        return;
    }

    protected void testCreateBigDecimalFailure(java.lang.String)
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.NumberFormatException $stack8;
        java.math.BigDecimal $stack3;
        java.lang.StringBuilder $stack4, $stack5, $stack6;
        java.lang.String str, $stack7;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        str := @parameter0: java.lang.String;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.math.BigDecimal createBigDecimal(java.lang.String)>(str);

        $stack4 = new java.lang.StringBuilder;

        specialinvoke $stack4.<java.lang.StringBuilder: void <init>()>();

        $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createBigDecimal(blank) failed: ");

        $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($stack3);

        $stack7 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($stack7);

     label2:
        goto label4;

     label3:
        $stack8 := @caughtexception;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void testMinLong_nullArray()
    {
        long[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (long[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long[])>($stack1);

        return;
    }

    public void testMinLong_emptyArray()
    {
        long[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (long)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long[])>($stack1);

        return;
    }

    public void testMinLong()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack4, $stack8, $stack11, $stack14;
        long[] $stack1, $stack5, $stack9, $stack12;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (long)[1];

        $stack1[0] = 5L;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(long[]) failed for array length 1", 5L, $stack4);

        $stack5 = newarray (long)[2];

        $stack5[0] = 6L;

        $stack5[1] = 9L;

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long[])>($stack5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(long[]) failed for array length 2", 6L, $stack8);

        $stack9 = newarray (long)[5];

        $stack9[0] = -10L;

        $stack9[1] = -5L;

        $stack9[2] = 0L;

        $stack9[3] = 5L;

        $stack9[4] = 10L;

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long[])>($stack9);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack11);

        $stack12 = newarray (long)[5];

        $stack12[0] = -5L;

        $stack12[1] = 0L;

        $stack12[2] = -10L;

        $stack12[3] = 5L;

        $stack12[4] = 10L;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long[])>($stack12);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack14);

        return;
    }

    public void testMinInt_nullArray()
    {
        int[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (int[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int[])>($stack1);

        return;
    }

    public void testMinInt_emptyArray()
    {
        int[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (int)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int[])>($stack1);

        return;
    }

    public void testMinInt()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack10, $stack14, $stack18;
        int[] $stack1, $stack6, $stack11, $stack15;
        int $stack4, $stack9, $stack13, $stack17, $i0, $i1, $i2, $i3;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (int)[1];

        $stack1[0] = 5;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int[])>($stack1);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(int[]) failed for array length 1", 5L, $stack5);

        $stack6 = newarray (int)[2];

        $stack6[0] = 6;

        $stack6[1] = 9;

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int[])>($stack6);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(int[]) failed for array length 2", 6L, $stack10);

        $stack11 = newarray (int)[5];

        $i0 = (int) -10;

        $stack11[0] = $i0;

        $i1 = (int) -5;

        $stack11[1] = $i1;

        $stack11[2] = 0;

        $stack11[3] = 5;

        $stack11[4] = 10;

        $stack13 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int[])>($stack11);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack14);

        $stack15 = newarray (int)[5];

        $i2 = (int) -5;

        $stack15[0] = $i2;

        $stack15[1] = 0;

        $i3 = (int) -10;

        $stack15[2] = $i3;

        $stack15[3] = 5;

        $stack15[4] = 10;

        $stack17 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int[])>($stack15);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack18);

        return;
    }

    public void testMinShort_nullArray()
    {
        short[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (short[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short[])>($stack1);

        return;
    }

    public void testMinShort_emptyArray()
    {
        short[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (short)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short[])>($stack1);

        return;
    }

    public void testMinShort()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack10, $stack14, $stack18;
        short $stack4, $stack9, $stack13, $stack17, $s0, $s1, $s2, $s3;
        short[] $stack1, $stack6, $stack11, $stack15;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (short)[1];

        $stack1[0] = 5;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short[])>($stack1);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(short[]) failed for array length 1", 5L, $stack5);

        $stack6 = newarray (short)[2];

        $stack6[0] = 6;

        $stack6[1] = 9;

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short[])>($stack6);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(short[]) failed for array length 2", 6L, $stack10);

        $stack11 = newarray (short)[5];

        $s0 = (short) -10;

        $stack11[0] = $s0;

        $s1 = (short) -5;

        $stack11[1] = $s1;

        $stack11[2] = 0;

        $stack11[3] = 5;

        $stack11[4] = 10;

        $stack13 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short[])>($stack11);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack14);

        $stack15 = newarray (short)[5];

        $s2 = (short) -5;

        $stack15[0] = $s2;

        $stack15[1] = 0;

        $s3 = (short) -10;

        $stack15[2] = $s3;

        $stack15[3] = 5;

        $stack15[4] = 10;

        $stack17 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short[])>($stack15);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack18);

        return;
    }

    public void testMinByte_nullArray()
    {
        byte[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (byte[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte[])>($stack1);

        return;
    }

    public void testMinByte_emptyArray()
    {
        byte[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (byte)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte[])>($stack1);

        return;
    }

    public void testMinByte()
    {
        byte[] $stack1, $stack6, $stack11, $stack15;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack10, $stack14, $stack18;
        byte $stack4, $stack9, $stack13, $stack17;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (byte)[1];

        $stack1[0] = 5;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte[])>($stack1);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(byte[]) failed for array length 1", 5L, $stack5);

        $stack6 = newarray (byte)[2];

        $stack6[0] = 6;

        $stack6[1] = 9;

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte[])>($stack6);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("min(byte[]) failed for array length 2", 6L, $stack10);

        $stack11 = newarray (byte)[5];

        $stack11[0] = -10;

        $stack11[1] = -5;

        $stack11[2] = 0;

        $stack11[3] = 5;

        $stack11[4] = 10;

        $stack13 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte[])>($stack11);

        $stack14 = (long) $stack13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack14);

        $stack15 = newarray (byte)[5];

        $stack15[0] = -5;

        $stack15[1] = 0;

        $stack15[2] = -10;

        $stack15[3] = 5;

        $stack15[4] = 10;

        $stack17 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte[])>($stack15);

        $stack18 = (long) $stack17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-10L, $stack18);

        return;
    }

    public void testMinDouble_nullArray()
    {
        double[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (double[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack1);

        return;
    }

    public void testMinDouble_emptyArray()
    {
        double[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (double)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack1);

        return;
    }

    public void testMinDouble()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        double[] $stack1, $stack5, $stack9, $stack13, $stack16;
        double $stack4, $stack8, $stack12, $stack15, $stack18;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (double)[1];

        $stack1[0] = 5.12;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double,double)>("min(double[]) failed for array length 1", 5.12, $stack4, 0.0);

        $stack5 = newarray (double)[2];

        $stack5[0] = 6.23;

        $stack5[1] = 9.34;

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double,double)>("min(double[]) failed for array length 2", 6.23, $stack8, 0.0);

        $stack9 = newarray (double)[5];

        $stack9[0] = -10.45;

        $stack9[1] = -5.56;

        $stack9[2] = 0.0;

        $stack9[3] = 5.67;

        $stack9[4] = 10.78;

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double,double)>("min(double[]) failed for array length 5", -10.45, $stack12, 0.0);

        $stack13 = newarray (double)[5];

        $stack13[0] = -10.0;

        $stack13[1] = -5.0;

        $stack13[2] = 0.0;

        $stack13[3] = 5.0;

        $stack13[4] = 10.0;

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(-10.0, $stack15, 1.0E-4);

        $stack16 = newarray (double)[5];

        $stack16[0] = -5.0;

        $stack16[1] = 0.0;

        $stack16[2] = -10.0;

        $stack16[3] = 5.0;

        $stack16[4] = 10.0;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack16);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(-10.0, $stack18, 1.0E-4);

        return;
    }

    public void testMinFloat_nullArray()
    {
        float[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (float[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float[])>($stack1);

        return;
    }

    public void testMinFloat_emptyArray()
    {
        float[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (float)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float[])>($stack1);

        return;
    }

    public void testMinFloat()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        float[] $stack1, $stack5, $stack9, $stack13, $stack16;
        float $stack4, $stack8, $stack12, $stack15, $stack18;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (float)[1];

        $stack1[0] = 5.9F;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,float,float,float)>("min(float[]) failed for array length 1", 5.9F, $stack4, 0.0F);

        $stack5 = newarray (float)[2];

        $stack5[0] = 6.8F;

        $stack5[1] = 9.7F;

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float[])>($stack5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,float,float,float)>("min(float[]) failed for array length 2", 6.8F, $stack8, 0.0F);

        $stack9 = newarray (float)[5];

        $stack9[0] = -10.6F;

        $stack9[1] = -5.5F;

        $stack9[2] = 0.0F;

        $stack9[3] = 5.4F;

        $stack9[4] = 10.3F;

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float[])>($stack9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,float,float,float)>("min(float[]) failed for array length 5", -10.6F, $stack12, 0.0F);

        $stack13 = newarray (float)[5];

        $stack13[0] = -10.0F;

        $stack13[1] = -5.0F;

        $stack13[2] = 0.0F;

        $stack13[3] = 5.0F;

        $stack13[4] = 10.0F;

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float[])>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(-10.0F, $stack15, 1.0E-4F);

        $stack16 = newarray (float)[5];

        $stack16[0] = -5.0F;

        $stack16[1] = 0.0F;

        $stack16[2] = -10.0F;

        $stack16[3] = 5.0F;

        $stack16[4] = 10.0F;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float[])>($stack16);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(-10.0F, $stack18, 1.0E-4F);

        return;
    }

    public void testMaxLong_nullArray()
    {
        long[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (long[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long[])>($stack1);

        return;
    }

    public void testMaxLong_emptyArray()
    {
        long[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (long)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long[])>($stack1);

        return;
    }

    public void testMaxLong()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack4, $stack8, $stack12, $stack15, $stack18;
        long[] $stack1, $stack5, $stack9, $stack13, $stack16;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (long)[1];

        $stack1[0] = 5L;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(long[]) failed for array length 1", 5L, $stack4);

        $stack5 = newarray (long)[2];

        $stack5[0] = 6L;

        $stack5[1] = 9L;

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long[])>($stack5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(long[]) failed for array length 2", 9L, $stack8);

        $stack9 = newarray (long)[5];

        $stack9[0] = -10L;

        $stack9[1] = -5L;

        $stack9[2] = 0L;

        $stack9[3] = 5L;

        $stack9[4] = 10L;

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long[])>($stack9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(long[]) failed for array length 5", 10L, $stack12);

        $stack13 = newarray (long)[5];

        $stack13[0] = -10L;

        $stack13[1] = -5L;

        $stack13[2] = 0L;

        $stack13[3] = 5L;

        $stack13[4] = 10L;

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long[])>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack15);

        $stack16 = newarray (long)[5];

        $stack16[0] = -5L;

        $stack16[1] = 0L;

        $stack16[2] = 10L;

        $stack16[3] = 5L;

        $stack16[4] = -10L;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long[])>($stack16);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack18);

        return;
    }

    public void testMaxInt_nullArray()
    {
        int[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (int[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int[])>($stack1);

        return;
    }

    public void testMaxInt_emptyArray()
    {
        int[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (int)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int[])>($stack1);

        return;
    }

    public void testMaxInt()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack10, $stack15, $stack19, $stack23;
        int[] $stack1, $stack6, $stack11, $stack16, $stack20;
        int $stack4, $stack9, $stack14, $stack18, $stack22, $i0, $i1, $i2, $i3, $i4, $i5;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (int)[1];

        $stack1[0] = 5;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int[])>($stack1);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(int[]) failed for array length 1", 5L, $stack5);

        $stack6 = newarray (int)[2];

        $stack6[0] = 6;

        $stack6[1] = 9;

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int[])>($stack6);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(int[]) failed for array length 2", 9L, $stack10);

        $stack11 = newarray (int)[5];

        $i0 = (int) -10;

        $stack11[0] = $i0;

        $i1 = (int) -5;

        $stack11[1] = $i1;

        $stack11[2] = 0;

        $stack11[3] = 5;

        $stack11[4] = 10;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int[])>($stack11);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(int[]) failed for array length 5", 10L, $stack15);

        $stack16 = newarray (int)[5];

        $i2 = (int) -10;

        $stack16[0] = $i2;

        $i3 = (int) -5;

        $stack16[1] = $i3;

        $stack16[2] = 0;

        $stack16[3] = 5;

        $stack16[4] = 10;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int[])>($stack16);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack19);

        $stack20 = newarray (int)[5];

        $i4 = (int) -5;

        $stack20[0] = $i4;

        $stack20[1] = 0;

        $stack20[2] = 10;

        $stack20[3] = 5;

        $i5 = (int) -10;

        $stack20[4] = $i5;

        $stack22 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int[])>($stack20);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack23);

        return;
    }

    public void testMaxShort_nullArray()
    {
        short[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (short[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short[])>($stack1);

        return;
    }

    public void testMaxShort_emptyArray()
    {
        short[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (short)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short[])>($stack1);

        return;
    }

    public void testMaxShort()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack10, $stack15, $stack19, $stack23;
        short $stack4, $stack9, $stack14, $stack18, $stack22, $s0, $s1, $s2, $s3, $s4, $s5;
        short[] $stack1, $stack6, $stack11, $stack16, $stack20;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (short)[1];

        $stack1[0] = 5;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short[])>($stack1);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(short[]) failed for array length 1", 5L, $stack5);

        $stack6 = newarray (short)[2];

        $stack6[0] = 6;

        $stack6[1] = 9;

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short[])>($stack6);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(short[]) failed for array length 2", 9L, $stack10);

        $stack11 = newarray (short)[5];

        $s0 = (short) -10;

        $stack11[0] = $s0;

        $s1 = (short) -5;

        $stack11[1] = $s1;

        $stack11[2] = 0;

        $stack11[3] = 5;

        $stack11[4] = 10;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short[])>($stack11);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(short[]) failed for array length 5", 10L, $stack15);

        $stack16 = newarray (short)[5];

        $s2 = (short) -10;

        $stack16[0] = $s2;

        $s3 = (short) -5;

        $stack16[1] = $s3;

        $stack16[2] = 0;

        $stack16[3] = 5;

        $stack16[4] = 10;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short[])>($stack16);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack19);

        $stack20 = newarray (short)[5];

        $s4 = (short) -5;

        $stack20[0] = $s4;

        $stack20[1] = 0;

        $stack20[2] = 10;

        $stack20[3] = 5;

        $s5 = (short) -10;

        $stack20[4] = $s5;

        $stack22 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short[])>($stack20);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack23);

        return;
    }

    public void testMaxByte_nullArray()
    {
        byte[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (byte[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte[])>($stack1);

        return;
    }

    public void testMaxByte_emptyArray()
    {
        byte[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (byte)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte[])>($stack1);

        return;
    }

    public void testMaxByte()
    {
        byte[] $stack1, $stack6, $stack11, $stack16, $stack20;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack10, $stack15, $stack19, $stack23;
        byte $stack4, $stack9, $stack14, $stack18, $stack22;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (byte)[1];

        $stack1[0] = 5;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte[])>($stack1);

        $stack5 = (long) $stack4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(byte[]) failed for array length 1", 5L, $stack5);

        $stack6 = newarray (byte)[2];

        $stack6[0] = 6;

        $stack6[1] = 9;

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte[])>($stack6);

        $stack10 = (long) $stack9;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(byte[]) failed for array length 2", 9L, $stack10);

        $stack11 = newarray (byte)[5];

        $stack11[0] = -10;

        $stack11[1] = -5;

        $stack11[2] = 0;

        $stack11[3] = 5;

        $stack11[4] = 10;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte[])>($stack11);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("max(byte[]) failed for array length 5", 10L, $stack15);

        $stack16 = newarray (byte)[5];

        $stack16[0] = -10;

        $stack16[1] = -5;

        $stack16[2] = 0;

        $stack16[3] = 5;

        $stack16[4] = 10;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte[])>($stack16);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack19);

        $stack20 = newarray (byte)[5];

        $stack20[0] = -5;

        $stack20[1] = 0;

        $stack20[2] = 10;

        $stack20[3] = 5;

        $stack20[4] = -10;

        $stack22 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte[])>($stack20);

        $stack23 = (long) $stack22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $stack23);

        return;
    }

    public void testMaxDouble_nullArray()
    {
        double[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (double[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack1);

        return;
    }

    public void testMaxDouble_emptyArray()
    {
        double[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (double)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack1);

        return;
    }

    public void testMaxDouble()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        double[] $stack4, $stack6, $stack10, $stack14, $stack18, $stack21;
        java.lang.IllegalArgumentException $stack24, $stack71;
        double $stack9, $stack13, $stack17, $stack20, $stack23;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

     label1:
        staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("No exception was thrown for null input.");

     label2:
        goto label4;

     label3:
        $stack71 := @caughtexception;

     label4:
        $stack4 = newarray (double)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("No exception was thrown for empty input.");

     label5:
        goto label7;

     label6:
        $stack24 := @caughtexception;

     label7:
        $stack6 = newarray (double)[1];

        $stack6[0] = 5.099999904632568;

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double,double)>("max(double[]) failed for array length 1", 5.099999904632568, $stack9, 0.0);

        $stack10 = newarray (double)[2];

        $stack10[0] = 6.300000190734863;

        $stack10[1] = 9.199999809265137;

        $stack13 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double,double)>("max(double[]) failed for array length 2", 9.199999809265137, $stack13, 0.0);

        $stack14 = newarray (double)[5];

        $stack14[0] = -10.5;

        $stack14[1] = -5.599999904632568;

        $stack14[2] = 0.0;

        $stack14[3] = 5.699999809265137;

        $stack14[4] = 10.399999618530273;

        $stack17 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double,double)>("max(double[]) failed for float length 5", 10.399999618530273, $stack17, 0.0);

        $stack18 = newarray (double)[5];

        $stack18[0] = -10.0;

        $stack18[1] = -5.0;

        $stack18[2] = 0.0;

        $stack18[3] = 5.0;

        $stack18[4] = 10.0;

        $stack20 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack18);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(10.0, $stack20, 1.0E-4);

        $stack21 = newarray (double)[5];

        $stack21[0] = -5.0;

        $stack21[1] = 0.0;

        $stack21[2] = 10.0;

        $stack21[3] = 5.0;

        $stack21[4] = -10.0;

        $stack23 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack21);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(10.0, $stack23, 1.0E-4);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    public void testMaxFloat_nullArray()
    {
        float[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = (float[]) null;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack1);

        return;
    }

    public void testMaxFloat_emptyArray()
    {
        float[] $stack1;
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (float)[0];

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack1);

        return;
    }

    public void testMaxFloat()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        float[] $stack1, $stack5, $stack9, $stack13, $stack16;
        float $stack4, $stack8, $stack12, $stack15, $stack18;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = newarray (float)[1];

        $stack1[0] = 5.1F;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,float,float,float)>("max(float[]) failed for array length 1", 5.1F, $stack4, 0.0F);

        $stack5 = newarray (float)[2];

        $stack5[0] = 6.3F;

        $stack5[1] = 9.2F;

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,float,float,float)>("max(float[]) failed for array length 2", 9.2F, $stack8, 0.0F);

        $stack9 = newarray (float)[5];

        $stack9[0] = -10.5F;

        $stack9[1] = -5.6F;

        $stack9[2] = 0.0F;

        $stack9[3] = 5.7F;

        $stack9[4] = 10.4F;

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,float,float,float)>("max(float[]) failed for float length 5", 10.4F, $stack12, 0.0F);

        $stack13 = newarray (float)[5];

        $stack13[0] = -10.0F;

        $stack13[1] = -5.0F;

        $stack13[2] = 0.0F;

        $stack13[3] = 5.0F;

        $stack13[4] = 10.0F;

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack13);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(10.0F, $stack15, 1.0E-4F);

        $stack16 = newarray (float)[5];

        $stack16[0] = -5.0F;

        $stack16[1] = 0.0F;

        $stack16[2] = 10.0F;

        $stack16[3] = 5.0F;

        $stack16[4] = -10.0F;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack16);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(10.0F, $stack18, 1.0E-4F);

        return;
    }

    public void testMinimumLong()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack3, $stack6, $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long,long,long)>(12345L, 12346L, 12347L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(long,long,long) 1 failed", 12345L, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long,long,long)>(12346L, 12345L, 12347L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(long,long,long) 2 failed", 12345L, $stack6);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long,long,long)>(12346L, 12347L, 12345L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(long,long,long) 3 failed", 12345L, $stack9);

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long,long,long)>(12346L, 12345L, 12345L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(long,long,long) 4 failed", 12345L, $stack12);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long min(long,long,long)>(12345L, 12345L, 12345L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(long,long,long) 5 failed", 12345L, $stack15);

        return;
    }

    public void testMinimumInt()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack4, $stack8, $stack12, $stack16, $stack20;
        int $stack3, $stack7, $stack11, $stack15, $stack19;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int,int,int)>(12345, 12346, 12347);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(int,int,int) 1 failed", 12345L, $stack4);

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int,int,int)>(12346, 12345, 12347);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(int,int,int) 2 failed", 12345L, $stack8);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int,int,int)>(12346, 12347, 12345);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(int,int,int) 3 failed", 12345L, $stack12);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int,int,int)>(12346, 12345, 12345);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(int,int,int) 4 failed", 12345L, $stack16);

        $stack19 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int min(int,int,int)>(12345, 12345, 12345);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(int,int,int) 5 failed", 12345L, $stack20);

        return;
    }

    public void testMinimumShort()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19;
        short $stack6, $stack10, $stack14, $stack18;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack5 = (long) 1234;

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short,short,short)>(1234, 1235, 1236);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(short,short,short) 1 failed", $stack5, $stack7);

        $stack9 = (long) 1234;

        $stack10 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short,short,short)>(1235, 1234, 1236);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(short,short,short) 1 failed", $stack9, $stack11);

        $stack13 = (long) 1234;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short,short,short)>(1235, 1236, 1234);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(short,short,short) 1 failed", $stack13, $stack15);

        $stack17 = (long) 1234;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short min(short,short,short)>(1234, 1235, 1234);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(short,short,short) 1 failed", $stack17, $stack19);

        return;
    }

    public void testMinimumByte()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19;
        byte $stack6, $stack10, $stack14, $stack18;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack5 = (long) 123;

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte,byte,byte)>(123, 124, 125);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(byte,byte,byte) 1 failed", $stack5, $stack7);

        $stack9 = (long) 123;

        $stack10 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte,byte,byte)>(124, 123, 125);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(byte,byte,byte) 1 failed", $stack9, $stack11);

        $stack13 = (long) 123;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte,byte,byte)>(124, 125, 123);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(byte,byte,byte) 1 failed", $stack13, $stack15);

        $stack17 = (long) 123;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte min(byte,byte,byte)>(123, 124, 123);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("minimum(byte,byte,byte) 1 failed", $stack17, $stack19);

        return;
    }

    public void testMinimumDouble()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        double $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double,double,double)>(12.3, 13.3, 14.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(12.3, $stack7, 1.0E-4);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double,double,double)>(13.3, 12.3, 14.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(12.3, $stack8, 1.0E-4);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double,double,double)>(13.3, 14.3, 12.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(12.3, $stack9, 1.0E-4);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double,double,double)>(12.3, 13.3, 12.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(12.3, $stack10, 1.0E-4);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double,double,double)>(14.3, 13.3, 14.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(13.3, $stack11, 1.0E-4);

        return;
    }

    public void testMinimumFloat()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        float $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float,float,float)>(12.3F, 13.3F, 14.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(12.3F, $stack4, 1.0E-4F);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float,float,float)>(13.3F, 12.3F, 14.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(12.3F, $stack5, 1.0E-4F);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float,float,float)>(13.3F, 14.3F, 12.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(12.3F, $stack6, 1.0E-4F);

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float,float,float)>(12.3F, 13.3F, 12.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(12.3F, $stack7, 1.0E-4F);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float,float,float)>(14.3F, 13.3F, 14.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(13.3F, $stack8, 1.0E-4F);

        return;
    }

    public void testMaximumLong()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack3, $stack6, $stack9, $stack12, $stack15;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long,long,long)>(12345L, 12344L, 12343L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(long,long,long) 1 failed", 12345L, $stack3);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long,long,long)>(12344L, 12345L, 12343L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(long,long,long) 2 failed", 12345L, $stack6);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long,long,long)>(12344L, 12343L, 12345L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(long,long,long) 3 failed", 12345L, $stack9);

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long,long,long)>(12344L, 12345L, 12345L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(long,long,long) 4 failed", 12345L, $stack12);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: long max(long,long,long)>(12345L, 12345L, 12345L);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(long,long,long) 5 failed", 12345L, $stack15);

        return;
    }

    public void testMaximumInt()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack4, $stack8, $stack12, $stack16, $stack20;
        int $stack3, $stack7, $stack11, $stack15, $stack19;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int,int,int)>(12345, 12344, 12343);

        $stack4 = (long) $stack3;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(int,int,int) 1 failed", 12345L, $stack4);

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int,int,int)>(12344, 12345, 12343);

        $stack8 = (long) $stack7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(int,int,int) 2 failed", 12345L, $stack8);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int,int,int)>(12344, 12343, 12345);

        $stack12 = (long) $stack11;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(int,int,int) 3 failed", 12345L, $stack12);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int,int,int)>(12344, 12345, 12345);

        $stack16 = (long) $stack15;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(int,int,int) 4 failed", 12345L, $stack16);

        $stack19 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: int max(int,int,int)>(12345, 12345, 12345);

        $stack20 = (long) $stack19;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(int,int,int) 5 failed", 12345L, $stack20);

        return;
    }

    public void testMaximumShort()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19;
        short $stack6, $stack10, $stack14, $stack18;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack5 = (long) 1236;

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short,short,short)>(1234, 1235, 1236);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(short,short,short) 1 failed", $stack5, $stack7);

        $stack9 = (long) 1236;

        $stack10 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short,short,short)>(1235, 1234, 1236);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(short,short,short) 1 failed", $stack9, $stack11);

        $stack13 = (long) 1236;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short,short,short)>(1235, 1236, 1234);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(short,short,short) 1 failed", $stack13, $stack15);

        $stack17 = (long) 1236;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: short max(short,short,short)>(1236, 1235, 1236);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(short,short,short) 1 failed", $stack17, $stack19);

        return;
    }

    public void testMaximumByte()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        long $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19;
        byte $stack6, $stack10, $stack14, $stack18;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack5 = (long) 125;

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte,byte,byte)>(123, 124, 125);

        $stack7 = (long) $stack6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(byte,byte,byte) 1 failed", $stack5, $stack7);

        $stack9 = (long) 125;

        $stack10 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte,byte,byte)>(124, 123, 125);

        $stack11 = (long) $stack10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(byte,byte,byte) 1 failed", $stack9, $stack11);

        $stack13 = (long) 125;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte,byte,byte)>(124, 125, 123);

        $stack15 = (long) $stack14;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(byte,byte,byte) 1 failed", $stack13, $stack15);

        $stack17 = (long) 125;

        $stack18 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: byte max(byte,byte,byte)>(125, 124, 125);

        $stack19 = (long) $stack18;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("maximum(byte,byte,byte) 1 failed", $stack17, $stack19);

        return;
    }

    public void testMaximumDouble()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        double $stack7, $stack8, $stack9, $stack10, $stack11;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double,double,double)>(12.3, 13.3, 14.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(14.3, $stack7, 1.0E-4);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double,double,double)>(13.3, 12.3, 14.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(14.3, $stack8, 1.0E-4);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double,double,double)>(13.3, 14.3, 12.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(14.3, $stack9, 1.0E-4);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double,double,double)>(12.3, 13.3, 12.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(13.3, $stack10, 1.0E-4);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double,double,double)>(14.3, 13.3, 14.3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(14.3, $stack11, 1.0E-4);

        return;
    }

    public void testMaximumFloat()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        float $stack4, $stack5, $stack6, $stack7, $stack8;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float,float,float)>(12.3F, 13.3F, 14.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(14.3F, $stack4, 1.0E-4F);

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float,float,float)>(13.3F, 12.3F, 14.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(14.3F, $stack5, 1.0E-4F);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float,float,float)>(13.3F, 14.3F, 12.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(14.3F, $stack6, 1.0E-4F);

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float,float,float)>(12.3F, 13.3F, 12.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(13.3F, $stack7, 1.0E-4F);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float,float,float)>(14.3F, 13.3F, 14.3F);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(14.3F, $stack8, 1.0E-4F);

        return;
    }

    public void testCompareDouble()
    {
        int $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        boolean $stack391, $stack387, $stack383, $stack379, $stack375, $stack371, $stack367, $stack363, $stack359, $stack356, $stack352, $stack348, $stack344, $stack340, $stack336, $stack332, $stack328, $stack324, $stack320, $stack317, $stack313, $stack309, $stack305, $stack301, $stack297, $stack293, $stack289, $stack285, $stack281, $stack278, $stack274, $stack270, $stack266, $stack262, $stack258, $stack254, $stack250, $stack246, $stack242, $stack239, $stack235, $stack231, $stack227, $stack223, $stack219, $stack215, $stack211, $stack207, $stack203, $stack200, $stack196, $stack192, $stack188, $stack184, $stack180, $stack176, $stack172, $stack168, $stack164, $stack161, $stack157, $stack153, $stack149, $stack145, $stack141, $stack137, $stack133, $stack129, $stack125, $stack122, $stack118, $stack114, $stack110, $stack106, $stack102, $stack98, $stack94, $stack90, $stack86, $stack83, $stack82;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, #NaN);

        if $stack1 != 0 goto label001;

        $stack391 = 1;

        goto label002;

     label001:
        $stack391 = 0;

     label002:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack391);

        $stack2 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, #Infinity);

        if $stack2 != 1 goto label003;

        $stack387 = 1;

        goto label004;

     label003:
        $stack387 = 0;

     label004:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack387);

        $stack3 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, 1.7976931348623157E308);

        if $stack3 != 1 goto label005;

        $stack383 = 1;

        goto label006;

     label005:
        $stack383 = 0;

     label006:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack383);

        $stack4 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, 1.2);

        if $stack4 != 1 goto label007;

        $stack379 = 1;

        goto label008;

     label007:
        $stack379 = 0;

     label008:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack379);

        $stack5 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, 0.0);

        if $stack5 != 1 goto label009;

        $stack375 = 1;

        goto label010;

     label009:
        $stack375 = 0;

     label010:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack375);

        $stack6 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, -0.0);

        if $stack6 != 1 goto label011;

        $stack371 = 1;

        goto label012;

     label011:
        $stack371 = 0;

     label012:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack371);

        $stack7 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, -1.2);

        if $stack7 != 1 goto label013;

        $stack367 = 1;

        goto label014;

     label013:
        $stack367 = 0;

     label014:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack367);

        $stack8 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, -1.7976931348623157E308);

        if $stack8 != 1 goto label015;

        $stack363 = 1;

        goto label016;

     label015:
        $stack363 = 0;

     label016:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack363);

        $stack9 = staticinvoke <java.lang.Double: int compare(double,double)>(#NaN, #-Infinity);

        if $stack9 != 1 goto label017;

        $stack359 = 1;

        goto label018;

     label017:
        $stack359 = 0;

     label018:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack359);

        $stack10 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, #NaN);

        $i0 = (int) -1;

        if $stack10 != $i0 goto label019;

        $stack356 = 1;

        goto label020;

     label019:
        $stack356 = 0;

     label020:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack356);

        $stack11 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, #Infinity);

        if $stack11 != 0 goto label021;

        $stack352 = 1;

        goto label022;

     label021:
        $stack352 = 0;

     label022:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack352);

        $stack12 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, 1.7976931348623157E308);

        if $stack12 != 1 goto label023;

        $stack348 = 1;

        goto label024;

     label023:
        $stack348 = 0;

     label024:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack348);

        $stack13 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, 1.2);

        if $stack13 != 1 goto label025;

        $stack344 = 1;

        goto label026;

     label025:
        $stack344 = 0;

     label026:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack344);

        $stack14 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, 0.0);

        if $stack14 != 1 goto label027;

        $stack340 = 1;

        goto label028;

     label027:
        $stack340 = 0;

     label028:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack340);

        $stack15 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, -0.0);

        if $stack15 != 1 goto label029;

        $stack336 = 1;

        goto label030;

     label029:
        $stack336 = 0;

     label030:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack336);

        $stack16 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, -1.2);

        if $stack16 != 1 goto label031;

        $stack332 = 1;

        goto label032;

     label031:
        $stack332 = 0;

     label032:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack332);

        $stack17 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, -1.7976931348623157E308);

        if $stack17 != 1 goto label033;

        $stack328 = 1;

        goto label034;

     label033:
        $stack328 = 0;

     label034:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack328);

        $stack18 = staticinvoke <java.lang.Double: int compare(double,double)>(#Infinity, #-Infinity);

        if $stack18 != 1 goto label035;

        $stack324 = 1;

        goto label036;

     label035:
        $stack324 = 0;

     label036:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack324);

        $stack19 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, #NaN);

        $i1 = (int) -1;

        if $stack19 != $i1 goto label037;

        $stack320 = 1;

        goto label038;

     label037:
        $stack320 = 0;

     label038:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack320);

        $stack20 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, #Infinity);

        $i2 = (int) -1;

        if $stack20 != $i2 goto label039;

        $stack317 = 1;

        goto label040;

     label039:
        $stack317 = 0;

     label040:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack317);

        $stack21 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, 1.7976931348623157E308);

        if $stack21 != 0 goto label041;

        $stack313 = 1;

        goto label042;

     label041:
        $stack313 = 0;

     label042:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack313);

        $stack22 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, 1.2);

        if $stack22 != 1 goto label043;

        $stack309 = 1;

        goto label044;

     label043:
        $stack309 = 0;

     label044:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack309);

        $stack23 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, 0.0);

        if $stack23 != 1 goto label045;

        $stack305 = 1;

        goto label046;

     label045:
        $stack305 = 0;

     label046:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack305);

        $stack24 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, -0.0);

        if $stack24 != 1 goto label047;

        $stack301 = 1;

        goto label048;

     label047:
        $stack301 = 0;

     label048:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack301);

        $stack25 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, -1.2);

        if $stack25 != 1 goto label049;

        $stack297 = 1;

        goto label050;

     label049:
        $stack297 = 0;

     label050:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack297);

        $stack26 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, -1.7976931348623157E308);

        if $stack26 != 1 goto label051;

        $stack293 = 1;

        goto label052;

     label051:
        $stack293 = 0;

     label052:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack293);

        $stack27 = staticinvoke <java.lang.Double: int compare(double,double)>(1.7976931348623157E308, #-Infinity);

        if $stack27 != 1 goto label053;

        $stack289 = 1;

        goto label054;

     label053:
        $stack289 = 0;

     label054:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack289);

        $stack28 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, #NaN);

        $i3 = (int) -1;

        if $stack28 != $i3 goto label055;

        $stack285 = 1;

        goto label056;

     label055:
        $stack285 = 0;

     label056:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack285);

        $stack29 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, #Infinity);

        $i4 = (int) -1;

        if $stack29 != $i4 goto label057;

        $stack281 = 1;

        goto label058;

     label057:
        $stack281 = 0;

     label058:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack281);

        $stack30 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, 1.7976931348623157E308);

        $i5 = (int) -1;

        if $stack30 != $i5 goto label059;

        $stack278 = 1;

        goto label060;

     label059:
        $stack278 = 0;

     label060:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack278);

        $stack31 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, 1.2);

        if $stack31 != 0 goto label061;

        $stack274 = 1;

        goto label062;

     label061:
        $stack274 = 0;

     label062:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack274);

        $stack32 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, 0.0);

        if $stack32 != 1 goto label063;

        $stack270 = 1;

        goto label064;

     label063:
        $stack270 = 0;

     label064:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack270);

        $stack33 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, -0.0);

        if $stack33 != 1 goto label065;

        $stack266 = 1;

        goto label066;

     label065:
        $stack266 = 0;

     label066:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack266);

        $stack34 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, -1.2);

        if $stack34 != 1 goto label067;

        $stack262 = 1;

        goto label068;

     label067:
        $stack262 = 0;

     label068:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack262);

        $stack35 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, -1.7976931348623157E308);

        if $stack35 != 1 goto label069;

        $stack258 = 1;

        goto label070;

     label069:
        $stack258 = 0;

     label070:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack258);

        $stack36 = staticinvoke <java.lang.Double: int compare(double,double)>(1.2, #-Infinity);

        if $stack36 != 1 goto label071;

        $stack254 = 1;

        goto label072;

     label071:
        $stack254 = 0;

     label072:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack254);

        $stack37 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, #NaN);

        $i6 = (int) -1;

        if $stack37 != $i6 goto label073;

        $stack250 = 1;

        goto label074;

     label073:
        $stack250 = 0;

     label074:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack250);

        $stack38 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, #Infinity);

        $i7 = (int) -1;

        if $stack38 != $i7 goto label075;

        $stack246 = 1;

        goto label076;

     label075:
        $stack246 = 0;

     label076:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack246);

        $stack39 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, 1.7976931348623157E308);

        $i8 = (int) -1;

        if $stack39 != $i8 goto label077;

        $stack242 = 1;

        goto label078;

     label077:
        $stack242 = 0;

     label078:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack242);

        $stack40 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, 1.2);

        $i9 = (int) -1;

        if $stack40 != $i9 goto label079;

        $stack239 = 1;

        goto label080;

     label079:
        $stack239 = 0;

     label080:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack239);

        $stack41 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, 0.0);

        if $stack41 != 0 goto label081;

        $stack235 = 1;

        goto label082;

     label081:
        $stack235 = 0;

     label082:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack235);

        $stack42 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, -0.0);

        if $stack42 != 1 goto label083;

        $stack231 = 1;

        goto label084;

     label083:
        $stack231 = 0;

     label084:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack231);

        $stack43 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, -1.2);

        if $stack43 != 1 goto label085;

        $stack227 = 1;

        goto label086;

     label085:
        $stack227 = 0;

     label086:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack227);

        $stack44 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, -1.7976931348623157E308);

        if $stack44 != 1 goto label087;

        $stack223 = 1;

        goto label088;

     label087:
        $stack223 = 0;

     label088:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack223);

        $stack45 = staticinvoke <java.lang.Double: int compare(double,double)>(0.0, #-Infinity);

        if $stack45 != 1 goto label089;

        $stack219 = 1;

        goto label090;

     label089:
        $stack219 = 0;

     label090:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack219);

        $stack46 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, #NaN);

        $i10 = (int) -1;

        if $stack46 != $i10 goto label091;

        $stack215 = 1;

        goto label092;

     label091:
        $stack215 = 0;

     label092:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack215);

        $stack47 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, #Infinity);

        $i11 = (int) -1;

        if $stack47 != $i11 goto label093;

        $stack211 = 1;

        goto label094;

     label093:
        $stack211 = 0;

     label094:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack211);

        $stack48 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, 1.7976931348623157E308);

        $i12 = (int) -1;

        if $stack48 != $i12 goto label095;

        $stack207 = 1;

        goto label096;

     label095:
        $stack207 = 0;

     label096:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack207);

        $stack49 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, 1.2);

        $i13 = (int) -1;

        if $stack49 != $i13 goto label097;

        $stack203 = 1;

        goto label098;

     label097:
        $stack203 = 0;

     label098:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack203);

        $stack50 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, 0.0);

        $i14 = (int) -1;

        if $stack50 != $i14 goto label099;

        $stack200 = 1;

        goto label100;

     label099:
        $stack200 = 0;

     label100:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack200);

        $stack51 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, -0.0);

        if $stack51 != 0 goto label101;

        $stack196 = 1;

        goto label102;

     label101:
        $stack196 = 0;

     label102:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack196);

        $stack52 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, -1.2);

        if $stack52 != 1 goto label103;

        $stack192 = 1;

        goto label104;

     label103:
        $stack192 = 0;

     label104:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack192);

        $stack53 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, -1.7976931348623157E308);

        if $stack53 != 1 goto label105;

        $stack188 = 1;

        goto label106;

     label105:
        $stack188 = 0;

     label106:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack188);

        $stack54 = staticinvoke <java.lang.Double: int compare(double,double)>(-0.0, #-Infinity);

        if $stack54 != 1 goto label107;

        $stack184 = 1;

        goto label108;

     label107:
        $stack184 = 0;

     label108:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack184);

        $stack55 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, #NaN);

        $i15 = (int) -1;

        if $stack55 != $i15 goto label109;

        $stack180 = 1;

        goto label110;

     label109:
        $stack180 = 0;

     label110:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack180);

        $stack56 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, #Infinity);

        $i16 = (int) -1;

        if $stack56 != $i16 goto label111;

        $stack176 = 1;

        goto label112;

     label111:
        $stack176 = 0;

     label112:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack176);

        $stack57 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, 1.7976931348623157E308);

        $i17 = (int) -1;

        if $stack57 != $i17 goto label113;

        $stack172 = 1;

        goto label114;

     label113:
        $stack172 = 0;

     label114:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack172);

        $stack58 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, 1.2);

        $i18 = (int) -1;

        if $stack58 != $i18 goto label115;

        $stack168 = 1;

        goto label116;

     label115:
        $stack168 = 0;

     label116:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack168);

        $stack59 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, 0.0);

        $i19 = (int) -1;

        if $stack59 != $i19 goto label117;

        $stack164 = 1;

        goto label118;

     label117:
        $stack164 = 0;

     label118:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack164);

        $stack60 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, -0.0);

        $i20 = (int) -1;

        if $stack60 != $i20 goto label119;

        $stack161 = 1;

        goto label120;

     label119:
        $stack161 = 0;

     label120:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack161);

        $stack61 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, -1.2);

        if $stack61 != 0 goto label121;

        $stack157 = 1;

        goto label122;

     label121:
        $stack157 = 0;

     label122:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack157);

        $stack62 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, -1.7976931348623157E308);

        if $stack62 != 1 goto label123;

        $stack153 = 1;

        goto label124;

     label123:
        $stack153 = 0;

     label124:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack153);

        $stack63 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.2, #-Infinity);

        if $stack63 != 1 goto label125;

        $stack149 = 1;

        goto label126;

     label125:
        $stack149 = 0;

     label126:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack149);

        $stack64 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, #NaN);

        $i21 = (int) -1;

        if $stack64 != $i21 goto label127;

        $stack145 = 1;

        goto label128;

     label127:
        $stack145 = 0;

     label128:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack145);

        $stack65 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, #Infinity);

        $i22 = (int) -1;

        if $stack65 != $i22 goto label129;

        $stack141 = 1;

        goto label130;

     label129:
        $stack141 = 0;

     label130:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack141);

        $stack66 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, 1.7976931348623157E308);

        $i23 = (int) -1;

        if $stack66 != $i23 goto label131;

        $stack137 = 1;

        goto label132;

     label131:
        $stack137 = 0;

     label132:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack137);

        $stack67 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, 1.2);

        $i24 = (int) -1;

        if $stack67 != $i24 goto label133;

        $stack133 = 1;

        goto label134;

     label133:
        $stack133 = 0;

     label134:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack133);

        $stack68 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, 0.0);

        $i25 = (int) -1;

        if $stack68 != $i25 goto label135;

        $stack129 = 1;

        goto label136;

     label135:
        $stack129 = 0;

     label136:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack129);

        $stack69 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, -0.0);

        $i26 = (int) -1;

        if $stack69 != $i26 goto label137;

        $stack125 = 1;

        goto label138;

     label137:
        $stack125 = 0;

     label138:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack125);

        $stack70 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, -1.2);

        $i27 = (int) -1;

        if $stack70 != $i27 goto label139;

        $stack122 = 1;

        goto label140;

     label139:
        $stack122 = 0;

     label140:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack122);

        $stack71 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, -1.7976931348623157E308);

        if $stack71 != 0 goto label141;

        $stack118 = 1;

        goto label142;

     label141:
        $stack118 = 0;

     label142:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack118);

        $stack72 = staticinvoke <java.lang.Double: int compare(double,double)>(-1.7976931348623157E308, #-Infinity);

        if $stack72 != 1 goto label143;

        $stack114 = 1;

        goto label144;

     label143:
        $stack114 = 0;

     label144:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack114);

        $stack73 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, #NaN);

        $i28 = (int) -1;

        if $stack73 != $i28 goto label145;

        $stack110 = 1;

        goto label146;

     label145:
        $stack110 = 0;

     label146:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack110);

        $stack74 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, #Infinity);

        $i29 = (int) -1;

        if $stack74 != $i29 goto label147;

        $stack106 = 1;

        goto label148;

     label147:
        $stack106 = 0;

     label148:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack106);

        $stack75 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, 1.7976931348623157E308);

        $i30 = (int) -1;

        if $stack75 != $i30 goto label149;

        $stack102 = 1;

        goto label150;

     label149:
        $stack102 = 0;

     label150:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack102);

        $stack76 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, 1.2);

        $i31 = (int) -1;

        if $stack76 != $i31 goto label151;

        $stack98 = 1;

        goto label152;

     label151:
        $stack98 = 0;

     label152:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack98);

        $stack77 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, 0.0);

        $i32 = (int) -1;

        if $stack77 != $i32 goto label153;

        $stack94 = 1;

        goto label154;

     label153:
        $stack94 = 0;

     label154:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack78 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, -0.0);

        $i33 = (int) -1;

        if $stack78 != $i33 goto label155;

        $stack90 = 1;

        goto label156;

     label155:
        $stack90 = 0;

     label156:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack90);

        $stack79 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, -1.2);

        $i34 = (int) -1;

        if $stack79 != $i34 goto label157;

        $stack86 = 1;

        goto label158;

     label157:
        $stack86 = 0;

     label158:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack80 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, -1.7976931348623157E308);

        $i35 = (int) -1;

        if $stack80 != $i35 goto label159;

        $stack83 = 1;

        goto label160;

     label159:
        $stack83 = 0;

     label160:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack83);

        $stack81 = staticinvoke <java.lang.Double: int compare(double,double)>(#-Infinity, #-Infinity);

        if $stack81 != 0 goto label161;

        $stack82 = 1;

        goto label162;

     label161:
        $stack82 = 0;

     label162:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack82);

        return;
    }

    public void testCompareFloat()
    {
        int $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack39, $stack40, $stack41, $stack42, $stack43, $stack44, $stack45, $stack46, $stack47, $stack48, $stack49, $stack50, $stack51, $stack52, $stack53, $stack54, $stack55, $stack56, $stack57, $stack58, $stack59, $stack60, $stack61, $stack62, $stack63, $stack64, $stack65, $stack66, $stack67, $stack68, $stack69, $stack70, $stack71, $stack72, $stack73, $stack74, $stack75, $stack76, $stack77, $stack78, $stack79, $stack80, $stack81, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        boolean $stack391, $stack387, $stack383, $stack379, $stack375, $stack371, $stack367, $stack363, $stack359, $stack356, $stack352, $stack348, $stack344, $stack340, $stack336, $stack332, $stack328, $stack324, $stack320, $stack317, $stack313, $stack309, $stack305, $stack301, $stack297, $stack293, $stack289, $stack285, $stack281, $stack278, $stack274, $stack270, $stack266, $stack262, $stack258, $stack254, $stack250, $stack246, $stack242, $stack239, $stack235, $stack231, $stack227, $stack223, $stack219, $stack215, $stack211, $stack207, $stack203, $stack200, $stack196, $stack192, $stack188, $stack184, $stack180, $stack176, $stack172, $stack168, $stack164, $stack161, $stack157, $stack153, $stack149, $stack145, $stack141, $stack137, $stack133, $stack129, $stack125, $stack122, $stack118, $stack114, $stack110, $stack106, $stack102, $stack98, $stack94, $stack90, $stack86, $stack83, $stack82;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, #NaNF);

        if $stack1 != 0 goto label001;

        $stack391 = 1;

        goto label002;

     label001:
        $stack391 = 0;

     label002:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack391);

        $stack2 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, #InfinityF);

        if $stack2 != 1 goto label003;

        $stack387 = 1;

        goto label004;

     label003:
        $stack387 = 0;

     label004:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack387);

        $stack3 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, 3.4028235E38F);

        if $stack3 != 1 goto label005;

        $stack383 = 1;

        goto label006;

     label005:
        $stack383 = 0;

     label006:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack383);

        $stack4 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, 1.2F);

        if $stack4 != 1 goto label007;

        $stack379 = 1;

        goto label008;

     label007:
        $stack379 = 0;

     label008:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack379);

        $stack5 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, 0.0F);

        if $stack5 != 1 goto label009;

        $stack375 = 1;

        goto label010;

     label009:
        $stack375 = 0;

     label010:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack375);

        $stack6 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, -0.0F);

        if $stack6 != 1 goto label011;

        $stack371 = 1;

        goto label012;

     label011:
        $stack371 = 0;

     label012:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack371);

        $stack7 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, -1.2F);

        if $stack7 != 1 goto label013;

        $stack367 = 1;

        goto label014;

     label013:
        $stack367 = 0;

     label014:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack367);

        $stack8 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, -3.4028235E38F);

        if $stack8 != 1 goto label015;

        $stack363 = 1;

        goto label016;

     label015:
        $stack363 = 0;

     label016:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack363);

        $stack9 = staticinvoke <java.lang.Float: int compare(float,float)>(#NaNF, #-InfinityF);

        if $stack9 != 1 goto label017;

        $stack359 = 1;

        goto label018;

     label017:
        $stack359 = 0;

     label018:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack359);

        $stack10 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, #NaNF);

        $i0 = (int) -1;

        if $stack10 != $i0 goto label019;

        $stack356 = 1;

        goto label020;

     label019:
        $stack356 = 0;

     label020:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack356);

        $stack11 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, #InfinityF);

        if $stack11 != 0 goto label021;

        $stack352 = 1;

        goto label022;

     label021:
        $stack352 = 0;

     label022:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack352);

        $stack12 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, 3.4028235E38F);

        if $stack12 != 1 goto label023;

        $stack348 = 1;

        goto label024;

     label023:
        $stack348 = 0;

     label024:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack348);

        $stack13 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, 1.2F);

        if $stack13 != 1 goto label025;

        $stack344 = 1;

        goto label026;

     label025:
        $stack344 = 0;

     label026:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack344);

        $stack14 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, 0.0F);

        if $stack14 != 1 goto label027;

        $stack340 = 1;

        goto label028;

     label027:
        $stack340 = 0;

     label028:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack340);

        $stack15 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, -0.0F);

        if $stack15 != 1 goto label029;

        $stack336 = 1;

        goto label030;

     label029:
        $stack336 = 0;

     label030:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack336);

        $stack16 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, -1.2F);

        if $stack16 != 1 goto label031;

        $stack332 = 1;

        goto label032;

     label031:
        $stack332 = 0;

     label032:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack332);

        $stack17 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, -3.4028235E38F);

        if $stack17 != 1 goto label033;

        $stack328 = 1;

        goto label034;

     label033:
        $stack328 = 0;

     label034:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack328);

        $stack18 = staticinvoke <java.lang.Float: int compare(float,float)>(#InfinityF, #-InfinityF);

        if $stack18 != 1 goto label035;

        $stack324 = 1;

        goto label036;

     label035:
        $stack324 = 0;

     label036:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack324);

        $stack19 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, #NaNF);

        $i1 = (int) -1;

        if $stack19 != $i1 goto label037;

        $stack320 = 1;

        goto label038;

     label037:
        $stack320 = 0;

     label038:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack320);

        $stack20 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, #InfinityF);

        $i2 = (int) -1;

        if $stack20 != $i2 goto label039;

        $stack317 = 1;

        goto label040;

     label039:
        $stack317 = 0;

     label040:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack317);

        $stack21 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, 3.4028235E38F);

        if $stack21 != 0 goto label041;

        $stack313 = 1;

        goto label042;

     label041:
        $stack313 = 0;

     label042:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack313);

        $stack22 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, 1.2F);

        if $stack22 != 1 goto label043;

        $stack309 = 1;

        goto label044;

     label043:
        $stack309 = 0;

     label044:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack309);

        $stack23 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, 0.0F);

        if $stack23 != 1 goto label045;

        $stack305 = 1;

        goto label046;

     label045:
        $stack305 = 0;

     label046:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack305);

        $stack24 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, -0.0F);

        if $stack24 != 1 goto label047;

        $stack301 = 1;

        goto label048;

     label047:
        $stack301 = 0;

     label048:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack301);

        $stack25 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, -1.2F);

        if $stack25 != 1 goto label049;

        $stack297 = 1;

        goto label050;

     label049:
        $stack297 = 0;

     label050:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack297);

        $stack26 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, -3.4028235E38F);

        if $stack26 != 1 goto label051;

        $stack293 = 1;

        goto label052;

     label051:
        $stack293 = 0;

     label052:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack293);

        $stack27 = staticinvoke <java.lang.Float: int compare(float,float)>(3.4028235E38F, #-InfinityF);

        if $stack27 != 1 goto label053;

        $stack289 = 1;

        goto label054;

     label053:
        $stack289 = 0;

     label054:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack289);

        $stack28 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, #NaNF);

        $i3 = (int) -1;

        if $stack28 != $i3 goto label055;

        $stack285 = 1;

        goto label056;

     label055:
        $stack285 = 0;

     label056:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack285);

        $stack29 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, #InfinityF);

        $i4 = (int) -1;

        if $stack29 != $i4 goto label057;

        $stack281 = 1;

        goto label058;

     label057:
        $stack281 = 0;

     label058:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack281);

        $stack30 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, 3.4028235E38F);

        $i5 = (int) -1;

        if $stack30 != $i5 goto label059;

        $stack278 = 1;

        goto label060;

     label059:
        $stack278 = 0;

     label060:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack278);

        $stack31 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, 1.2F);

        if $stack31 != 0 goto label061;

        $stack274 = 1;

        goto label062;

     label061:
        $stack274 = 0;

     label062:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack274);

        $stack32 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, 0.0F);

        if $stack32 != 1 goto label063;

        $stack270 = 1;

        goto label064;

     label063:
        $stack270 = 0;

     label064:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack270);

        $stack33 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, -0.0F);

        if $stack33 != 1 goto label065;

        $stack266 = 1;

        goto label066;

     label065:
        $stack266 = 0;

     label066:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack266);

        $stack34 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, -1.2F);

        if $stack34 != 1 goto label067;

        $stack262 = 1;

        goto label068;

     label067:
        $stack262 = 0;

     label068:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack262);

        $stack35 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, -3.4028235E38F);

        if $stack35 != 1 goto label069;

        $stack258 = 1;

        goto label070;

     label069:
        $stack258 = 0;

     label070:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack258);

        $stack36 = staticinvoke <java.lang.Float: int compare(float,float)>(1.2F, #-InfinityF);

        if $stack36 != 1 goto label071;

        $stack254 = 1;

        goto label072;

     label071:
        $stack254 = 0;

     label072:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack254);

        $stack37 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, #NaNF);

        $i6 = (int) -1;

        if $stack37 != $i6 goto label073;

        $stack250 = 1;

        goto label074;

     label073:
        $stack250 = 0;

     label074:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack250);

        $stack38 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, #InfinityF);

        $i7 = (int) -1;

        if $stack38 != $i7 goto label075;

        $stack246 = 1;

        goto label076;

     label075:
        $stack246 = 0;

     label076:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack246);

        $stack39 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, 3.4028235E38F);

        $i8 = (int) -1;

        if $stack39 != $i8 goto label077;

        $stack242 = 1;

        goto label078;

     label077:
        $stack242 = 0;

     label078:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack242);

        $stack40 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, 1.2F);

        $i9 = (int) -1;

        if $stack40 != $i9 goto label079;

        $stack239 = 1;

        goto label080;

     label079:
        $stack239 = 0;

     label080:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack239);

        $stack41 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, 0.0F);

        if $stack41 != 0 goto label081;

        $stack235 = 1;

        goto label082;

     label081:
        $stack235 = 0;

     label082:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack235);

        $stack42 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, -0.0F);

        if $stack42 != 1 goto label083;

        $stack231 = 1;

        goto label084;

     label083:
        $stack231 = 0;

     label084:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack231);

        $stack43 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, -1.2F);

        if $stack43 != 1 goto label085;

        $stack227 = 1;

        goto label086;

     label085:
        $stack227 = 0;

     label086:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack227);

        $stack44 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, -3.4028235E38F);

        if $stack44 != 1 goto label087;

        $stack223 = 1;

        goto label088;

     label087:
        $stack223 = 0;

     label088:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack223);

        $stack45 = staticinvoke <java.lang.Float: int compare(float,float)>(0.0F, #-InfinityF);

        if $stack45 != 1 goto label089;

        $stack219 = 1;

        goto label090;

     label089:
        $stack219 = 0;

     label090:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack219);

        $stack46 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, #NaNF);

        $i10 = (int) -1;

        if $stack46 != $i10 goto label091;

        $stack215 = 1;

        goto label092;

     label091:
        $stack215 = 0;

     label092:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack215);

        $stack47 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, #InfinityF);

        $i11 = (int) -1;

        if $stack47 != $i11 goto label093;

        $stack211 = 1;

        goto label094;

     label093:
        $stack211 = 0;

     label094:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack211);

        $stack48 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, 3.4028235E38F);

        $i12 = (int) -1;

        if $stack48 != $i12 goto label095;

        $stack207 = 1;

        goto label096;

     label095:
        $stack207 = 0;

     label096:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack207);

        $stack49 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, 1.2F);

        $i13 = (int) -1;

        if $stack49 != $i13 goto label097;

        $stack203 = 1;

        goto label098;

     label097:
        $stack203 = 0;

     label098:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack203);

        $stack50 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, 0.0F);

        $i14 = (int) -1;

        if $stack50 != $i14 goto label099;

        $stack200 = 1;

        goto label100;

     label099:
        $stack200 = 0;

     label100:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack200);

        $stack51 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, -0.0F);

        if $stack51 != 0 goto label101;

        $stack196 = 1;

        goto label102;

     label101:
        $stack196 = 0;

     label102:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack196);

        $stack52 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, -1.2F);

        if $stack52 != 1 goto label103;

        $stack192 = 1;

        goto label104;

     label103:
        $stack192 = 0;

     label104:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack192);

        $stack53 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, -3.4028235E38F);

        if $stack53 != 1 goto label105;

        $stack188 = 1;

        goto label106;

     label105:
        $stack188 = 0;

     label106:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack188);

        $stack54 = staticinvoke <java.lang.Float: int compare(float,float)>(-0.0F, #-InfinityF);

        if $stack54 != 1 goto label107;

        $stack184 = 1;

        goto label108;

     label107:
        $stack184 = 0;

     label108:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack184);

        $stack55 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, #NaNF);

        $i15 = (int) -1;

        if $stack55 != $i15 goto label109;

        $stack180 = 1;

        goto label110;

     label109:
        $stack180 = 0;

     label110:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack180);

        $stack56 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, #InfinityF);

        $i16 = (int) -1;

        if $stack56 != $i16 goto label111;

        $stack176 = 1;

        goto label112;

     label111:
        $stack176 = 0;

     label112:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack176);

        $stack57 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, 3.4028235E38F);

        $i17 = (int) -1;

        if $stack57 != $i17 goto label113;

        $stack172 = 1;

        goto label114;

     label113:
        $stack172 = 0;

     label114:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack172);

        $stack58 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, 1.2F);

        $i18 = (int) -1;

        if $stack58 != $i18 goto label115;

        $stack168 = 1;

        goto label116;

     label115:
        $stack168 = 0;

     label116:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack168);

        $stack59 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, 0.0F);

        $i19 = (int) -1;

        if $stack59 != $i19 goto label117;

        $stack164 = 1;

        goto label118;

     label117:
        $stack164 = 0;

     label118:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack164);

        $stack60 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, -0.0F);

        $i20 = (int) -1;

        if $stack60 != $i20 goto label119;

        $stack161 = 1;

        goto label120;

     label119:
        $stack161 = 0;

     label120:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack161);

        $stack61 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, -1.2F);

        if $stack61 != 0 goto label121;

        $stack157 = 1;

        goto label122;

     label121:
        $stack157 = 0;

     label122:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack157);

        $stack62 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, -3.4028235E38F);

        if $stack62 != 1 goto label123;

        $stack153 = 1;

        goto label124;

     label123:
        $stack153 = 0;

     label124:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack153);

        $stack63 = staticinvoke <java.lang.Float: int compare(float,float)>(-1.2F, #-InfinityF);

        if $stack63 != 1 goto label125;

        $stack149 = 1;

        goto label126;

     label125:
        $stack149 = 0;

     label126:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack149);

        $stack64 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, #NaNF);

        $i21 = (int) -1;

        if $stack64 != $i21 goto label127;

        $stack145 = 1;

        goto label128;

     label127:
        $stack145 = 0;

     label128:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack145);

        $stack65 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, #InfinityF);

        $i22 = (int) -1;

        if $stack65 != $i22 goto label129;

        $stack141 = 1;

        goto label130;

     label129:
        $stack141 = 0;

     label130:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack141);

        $stack66 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, 3.4028235E38F);

        $i23 = (int) -1;

        if $stack66 != $i23 goto label131;

        $stack137 = 1;

        goto label132;

     label131:
        $stack137 = 0;

     label132:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack137);

        $stack67 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, 1.2F);

        $i24 = (int) -1;

        if $stack67 != $i24 goto label133;

        $stack133 = 1;

        goto label134;

     label133:
        $stack133 = 0;

     label134:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack133);

        $stack68 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, 0.0F);

        $i25 = (int) -1;

        if $stack68 != $i25 goto label135;

        $stack129 = 1;

        goto label136;

     label135:
        $stack129 = 0;

     label136:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack129);

        $stack69 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, -0.0F);

        $i26 = (int) -1;

        if $stack69 != $i26 goto label137;

        $stack125 = 1;

        goto label138;

     label137:
        $stack125 = 0;

     label138:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack125);

        $stack70 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, -1.2F);

        $i27 = (int) -1;

        if $stack70 != $i27 goto label139;

        $stack122 = 1;

        goto label140;

     label139:
        $stack122 = 0;

     label140:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack122);

        $stack71 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, -3.4028235E38F);

        if $stack71 != 0 goto label141;

        $stack118 = 1;

        goto label142;

     label141:
        $stack118 = 0;

     label142:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack118);

        $stack72 = staticinvoke <java.lang.Float: int compare(float,float)>(-3.4028235E38F, #-InfinityF);

        if $stack72 != 1 goto label143;

        $stack114 = 1;

        goto label144;

     label143:
        $stack114 = 0;

     label144:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack114);

        $stack73 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, #NaNF);

        $i28 = (int) -1;

        if $stack73 != $i28 goto label145;

        $stack110 = 1;

        goto label146;

     label145:
        $stack110 = 0;

     label146:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack110);

        $stack74 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, #InfinityF);

        $i29 = (int) -1;

        if $stack74 != $i29 goto label147;

        $stack106 = 1;

        goto label148;

     label147:
        $stack106 = 0;

     label148:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack106);

        $stack75 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, 3.4028235E38F);

        $i30 = (int) -1;

        if $stack75 != $i30 goto label149;

        $stack102 = 1;

        goto label150;

     label149:
        $stack102 = 0;

     label150:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack102);

        $stack76 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, 1.2F);

        $i31 = (int) -1;

        if $stack76 != $i31 goto label151;

        $stack98 = 1;

        goto label152;

     label151:
        $stack98 = 0;

     label152:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack98);

        $stack77 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, 0.0F);

        $i32 = (int) -1;

        if $stack77 != $i32 goto label153;

        $stack94 = 1;

        goto label154;

     label153:
        $stack94 = 0;

     label154:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack94);

        $stack78 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, -0.0F);

        $i33 = (int) -1;

        if $stack78 != $i33 goto label155;

        $stack90 = 1;

        goto label156;

     label155:
        $stack90 = 0;

     label156:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack90);

        $stack79 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, -1.2F);

        $i34 = (int) -1;

        if $stack79 != $i34 goto label157;

        $stack86 = 1;

        goto label158;

     label157:
        $stack86 = 0;

     label158:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack86);

        $stack80 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, -3.4028235E38F);

        $i35 = (int) -1;

        if $stack80 != $i35 goto label159;

        $stack83 = 1;

        goto label160;

     label159:
        $stack83 = 0;

     label160:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack83);

        $stack81 = staticinvoke <java.lang.Float: int compare(float,float)>(#-InfinityF, #-InfinityF);

        if $stack81 != 0 goto label161;

        $stack82 = 1;

        goto label162;

     label161:
        $stack82 = 0;

     label162:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack82);

        return;
    }

    public void testIsDigits()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        boolean $stack2, $stack4, $stack6, $stack8, $stack10, $stack12;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack2 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("isDigits(null) failed", $stack2);

        $stack4 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("isDigits(\'\') failed", $stack4);

        $stack6 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>("12345");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isDigits(String) failed", $stack6);

        $stack8 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>("1234.5");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("isDigits(String) neg 1 failed", $stack8);

        $stack10 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>("1ab");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("isDigits(String) neg 3 failed", $stack10);

        $stack12 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isDigits(java.lang.String)>("abc");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("isDigits(String) neg 4 failed", $stack12);

        return;
    }

    public void testIsNumber()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        boolean $stack3, $stack5, $stack7, $stack9, $stack11, $stack13, $stack15, $stack17, $stack19, $stack21, $stack23, $stack25, $stack27, $stack29, $stack31, $stack33, $stack35, $stack37, $stack39, $stack41, $stack43, $stack45, $stack47, $stack49, $stack51, $stack53, $stack55, $stack57, $stack59, $stack61, $stack63, $stack65, $stack67, $stack69, $stack71, $stack73, $stack75, $stack77, $stack79, $stack81, $stack83, $stack85, $stack87, $stack89, $stack91, $stack93, $stack95, $stack97, $stack99, $stack101, $stack103, $stack105, $stack107, $stack109, $stack111, $stack113, $stack115, $stack117, $stack119, $stack121, $stack123, $stack125, $stack127, $stack129, $stack131, $stack133, $stack135, $stack137, $stack139, $stack141, $stack143, $stack145, $stack147, $stack149, $stack151, $stack153, $stack155, $stack157, $stack159, $stack161, $stack163, $stack165, $stack167, $stack169, $stack171, $stack173, $stack175, $stack177, $stack179, $stack181, $stack325, $stack322, $stack319, $stack316, $stack313, $stack310, $stack307, $stack304, $stack301, $stack298, $stack295, $stack292, $stack289, $stack286, $stack283, $stack280, $stack277, $stack274, $stack271, $stack268, $stack265, $stack262, $stack259, $stack256, $stack253, $stack250, $stack247, $stack244, $stack241, $stack238, $stack235, $stack232, $stack229, $stack226, $stack223, $stack220, $stack217, $stack214, $stack211, $stack208, $stack205, $stack202, $stack199, $stack196, $stack193, $stack190, $stack187, $stack182;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("12345");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 1 failed", $stack3);

        $stack5 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("12345");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 1 failed", $stack5);

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1234.5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 2 failed", $stack7);

        $stack9 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1234.5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 2 failed", $stack9);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>(".12345");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 3 failed", $stack11);

        $stack13 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>(".12345");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 3 failed", $stack13);

        $stack15 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1234E5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 4 failed", $stack15);

        $stack17 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1234E5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 4 failed", $stack17);

        $stack19 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1234E+5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 5 failed", $stack19);

        $stack21 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1234E+5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 5 failed", $stack21);

        $stack23 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1234E-5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 6 failed", $stack23);

        $stack25 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1234E-5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 6 failed", $stack25);

        $stack27 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("123.4E5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 7 failed", $stack27);

        $stack29 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("123.4E5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 7 failed", $stack29);

        $stack31 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-1234");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 8 failed", $stack31);

        $stack33 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-1234");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 8 failed", $stack33);

        $stack35 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-1234.5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 9 failed", $stack35);

        $stack37 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-1234.5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 9 failed", $stack37);

        $stack39 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-.12345");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 10 failed", $stack39);

        $stack41 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-.12345");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 10 failed", $stack41);

        $stack43 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-1234E5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 11 failed", $stack43);

        $stack45 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-1234E5");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 11 failed", $stack45);

        $stack47 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("0");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 12 failed", $stack47);

        $stack49 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("0");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 12 failed", $stack49);

        $stack51 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-0");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 13 failed", $stack51);

        $stack53 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-0");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 13 failed", $stack53);

        $stack55 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("01234");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 14 failed", $stack55);

        $stack57 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("01234");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 14 failed", $stack57);

        $stack59 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-01234");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 15 failed", $stack59);

        $stack61 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-01234");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 15 failed", $stack61);

        $stack63 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("0xABC123");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 16 failed", $stack63);

        $stack65 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("0xABC123");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 16 failed", $stack65);

        $stack67 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("0x0");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 17 failed", $stack67);

        $stack69 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("0x0");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 17 failed", $stack69);

        $stack71 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("123.4E21D");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 19 failed", $stack71);

        $stack73 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("123.4E21D");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 19 failed", $stack73);

        $stack75 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-221.23F");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 20 failed", $stack75);

        $stack77 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-221.23F");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 20 failed", $stack77);

        $stack79 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("22338L");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 21 failed", $stack79);

        $stack81 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("22338L");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 21 failed", $stack81);

        $stack83 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>(null);

        if $stack83 != 0 goto label01;

        $stack325 = 1;

        goto label02;

     label01:
        $stack325 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 1 Neg failed", $stack325);

        $stack85 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>(null);

        if $stack85 != 0 goto label03;

        $stack322 = 1;

        goto label04;

     label03:
        $stack322 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 1 Neg failed", $stack322);

        $stack87 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("");

        if $stack87 != 0 goto label05;

        $stack319 = 1;

        goto label06;

     label05:
        $stack319 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 2 Neg failed", $stack319);

        $stack89 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("");

        if $stack89 != 0 goto label07;

        $stack316 = 1;

        goto label08;

     label07:
        $stack316 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 2 Neg failed", $stack316);

        $stack91 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("--2.3");

        if $stack91 != 0 goto label09;

        $stack313 = 1;

        goto label10;

     label09:
        $stack313 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 3 Neg failed", $stack313);

        $stack93 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("--2.3");

        if $stack93 != 0 goto label11;

        $stack310 = 1;

        goto label12;

     label11:
        $stack310 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 3 Neg failed", $stack310);

        $stack95 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>(".12.3");

        if $stack95 != 0 goto label13;

        $stack307 = 1;

        goto label14;

     label13:
        $stack307 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 4 Neg failed", $stack307);

        $stack97 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>(".12.3");

        if $stack97 != 0 goto label15;

        $stack304 = 1;

        goto label16;

     label15:
        $stack304 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 4 Neg failed", $stack304);

        $stack99 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-123E");

        if $stack99 != 0 goto label17;

        $stack301 = 1;

        goto label18;

     label17:
        $stack301 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 5 Neg failed", $stack301);

        $stack101 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-123E");

        if $stack101 != 0 goto label19;

        $stack298 = 1;

        goto label20;

     label19:
        $stack298 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 5 Neg failed", $stack298);

        $stack103 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-123E+-212");

        if $stack103 != 0 goto label21;

        $stack295 = 1;

        goto label22;

     label21:
        $stack295 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 6 Neg failed", $stack295);

        $stack105 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-123E+-212");

        if $stack105 != 0 goto label23;

        $stack292 = 1;

        goto label24;

     label23:
        $stack292 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 6 Neg failed", $stack292);

        $stack107 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-123E2.12");

        if $stack107 != 0 goto label25;

        $stack289 = 1;

        goto label26;

     label25:
        $stack289 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 7 Neg failed", $stack289);

        $stack109 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-123E2.12");

        if $stack109 != 0 goto label27;

        $stack286 = 1;

        goto label28;

     label27:
        $stack286 = 0;

     label28:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 7 Neg failed", $stack286);

        $stack111 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("0xGF");

        if $stack111 != 0 goto label29;

        $stack283 = 1;

        goto label30;

     label29:
        $stack283 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 8 Neg failed", $stack283);

        $stack113 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("0xGF");

        if $stack113 != 0 goto label31;

        $stack280 = 1;

        goto label32;

     label31:
        $stack280 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 8 Neg failed", $stack280);

        $stack115 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("0xFAE-1");

        if $stack115 != 0 goto label33;

        $stack277 = 1;

        goto label34;

     label33:
        $stack277 = 0;

     label34:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 9 Neg failed", $stack277);

        $stack117 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("0xFAE-1");

        if $stack117 != 0 goto label35;

        $stack274 = 1;

        goto label36;

     label35:
        $stack274 = 0;

     label36:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 9 Neg failed", $stack274);

        $stack119 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>(".");

        if $stack119 != 0 goto label37;

        $stack271 = 1;

        goto label38;

     label37:
        $stack271 = 0;

     label38:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 10 Neg failed", $stack271);

        $stack121 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>(".");

        if $stack121 != 0 goto label39;

        $stack268 = 1;

        goto label40;

     label39:
        $stack268 = 0;

     label40:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 10 Neg failed", $stack268);

        $stack123 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("-0ABC123");

        if $stack123 != 0 goto label41;

        $stack265 = 1;

        goto label42;

     label41:
        $stack265 = 0;

     label42:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 11 Neg failed", $stack265);

        $stack125 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("-0ABC123");

        if $stack125 != 0 goto label43;

        $stack262 = 1;

        goto label44;

     label43:
        $stack262 = 0;

     label44:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 11 Neg failed", $stack262);

        $stack127 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("123.4E-D");

        if $stack127 != 0 goto label45;

        $stack259 = 1;

        goto label46;

     label45:
        $stack259 = 0;

     label46:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 12 Neg failed", $stack259);

        $stack129 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("123.4E-D");

        if $stack129 != 0 goto label47;

        $stack256 = 1;

        goto label48;

     label47:
        $stack256 = 0;

     label48:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 12 Neg failed", $stack256);

        $stack131 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("123.4ED");

        if $stack131 != 0 goto label49;

        $stack253 = 1;

        goto label50;

     label49:
        $stack253 = 0;

     label50:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 13 Neg failed", $stack253);

        $stack133 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("123.4ED");

        if $stack133 != 0 goto label51;

        $stack250 = 1;

        goto label52;

     label51:
        $stack250 = 0;

     label52:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 13 Neg failed", $stack250);

        $stack135 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1234E5l");

        if $stack135 != 0 goto label53;

        $stack247 = 1;

        goto label54;

     label53:
        $stack247 = 0;

     label54:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 14 Neg failed", $stack247);

        $stack137 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1234E5l");

        if $stack137 != 0 goto label55;

        $stack244 = 1;

        goto label56;

     label55:
        $stack244 = 0;

     label56:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 14 Neg failed", $stack244);

        $stack139 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("11a");

        if $stack139 != 0 goto label57;

        $stack241 = 1;

        goto label58;

     label57:
        $stack241 = 0;

     label58:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 15 Neg failed", $stack241);

        $stack141 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("11a");

        if $stack141 != 0 goto label59;

        $stack238 = 1;

        goto label60;

     label59:
        $stack238 = 0;

     label60:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 15 Neg failed", $stack238);

        $stack143 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1a");

        if $stack143 != 0 goto label61;

        $stack235 = 1;

        goto label62;

     label61:
        $stack235 = 0;

     label62:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 16 Neg failed", $stack235);

        $stack145 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1a");

        if $stack145 != 0 goto label63;

        $stack232 = 1;

        goto label64;

     label63:
        $stack232 = 0;

     label64:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 16 Neg failed", $stack232);

        $stack147 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("a");

        if $stack147 != 0 goto label65;

        $stack229 = 1;

        goto label66;

     label65:
        $stack229 = 0;

     label66:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 17 Neg failed", $stack229);

        $stack149 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("a");

        if $stack149 != 0 goto label67;

        $stack226 = 1;

        goto label68;

     label67:
        $stack226 = 0;

     label68:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 17 Neg failed", $stack226);

        $stack151 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("11g");

        if $stack151 != 0 goto label69;

        $stack223 = 1;

        goto label70;

     label69:
        $stack223 = 0;

     label70:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 18 Neg failed", $stack223);

        $stack153 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("11g");

        if $stack153 != 0 goto label71;

        $stack220 = 1;

        goto label72;

     label71:
        $stack220 = 0;

     label72:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 18 Neg failed", $stack220);

        $stack155 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("11z");

        if $stack155 != 0 goto label73;

        $stack217 = 1;

        goto label74;

     label73:
        $stack217 = 0;

     label74:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 19 Neg failed", $stack217);

        $stack157 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("11z");

        if $stack157 != 0 goto label75;

        $stack214 = 1;

        goto label76;

     label75:
        $stack214 = 0;

     label76:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 19 Neg failed", $stack214);

        $stack159 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("11def");

        if $stack159 != 0 goto label77;

        $stack211 = 1;

        goto label78;

     label77:
        $stack211 = 0;

     label78:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 20 Neg failed", $stack211);

        $stack161 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("11def");

        if $stack161 != 0 goto label79;

        $stack208 = 1;

        goto label80;

     label79:
        $stack208 = 0;

     label80:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 20 Neg failed", $stack208);

        $stack163 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("11d11");

        if $stack163 != 0 goto label81;

        $stack205 = 1;

        goto label82;

     label81:
        $stack205 = 0;

     label82:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 21 Neg failed", $stack205);

        $stack165 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("11d11");

        if $stack165 != 0 goto label83;

        $stack202 = 1;

        goto label84;

     label83:
        $stack202 = 0;

     label84:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 21 Neg failed", $stack202);

        $stack167 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("11 11");

        if $stack167 != 0 goto label85;

        $stack199 = 1;

        goto label86;

     label85:
        $stack199 = 0;

     label86:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 22 Neg failed", $stack199);

        $stack169 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("11 11");

        if $stack169 != 0 goto label87;

        $stack196 = 1;

        goto label88;

     label87:
        $stack196 = 0;

     label88:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 22 Neg failed", $stack196);

        $stack171 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>(" 1111");

        if $stack171 != 0 goto label89;

        $stack193 = 1;

        goto label90;

     label89:
        $stack193 = 0;

     label90:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 23 Neg failed", $stack193);

        $stack173 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>(" 1111");

        if $stack173 != 0 goto label91;

        $stack190 = 1;

        goto label92;

     label91:
        $stack190 = 0;

     label92:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 23 Neg failed", $stack190);

        $stack175 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1111 ");

        if $stack175 != 0 goto label93;

        $stack187 = 1;

        goto label94;

     label93:
        $stack187 = 0;

     label94:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) 24 Neg failed", $stack187);

        $stack177 = specialinvoke this.<org.apache.commons.lang3.math.NumberUtilsTest: boolean checkCreateNumber(java.lang.String)>("1111 ");

        if $stack177 != 0 goto label95;

        $stack182 = 1;

        goto label96;

     label95:
        $stack182 = 0;

     label96:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String)/createNumber(String) 24 Neg failed", $stack182);

        $stack179 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("2.");

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("isNumber(String) LANG-521 failed", $stack179);

        $stack181 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: boolean isNumber(java.lang.String)>("1.1L");

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("isNumber(String) LANG-664 failed", $stack181);

        return;
    }

    private boolean checkCreateNumber(java.lang.String)
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.NumberFormatException $stack4;
        java.lang.String val;
        java.lang.Number $stack3;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        val := @parameter0: java.lang.String;

     label1:
        $stack3 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>(val);

        if $stack3 != null goto label3;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        $stack4 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public void testConstants()
    {
        java.lang.Float $stack31, $stack33, $stack35, $stack73, $stack76, $stack79;
        java.lang.Integer $stack7, $stack9, $stack11, $stack46, $stack48, $stack50;
        byte $stack39, $stack42, $stack45, $stack59, $stack61, $stack63, $stack66, $stack69, $stack72, $stack75, $stack78, $stack81;
        java.lang.Long $stack1, $stack3, $stack5, $stack37, $stack40, $stack43;
        java.lang.Double $stack25, $stack27, $stack29, $stack64, $stack67, $stack70;
        long $stack38, $stack41, $stack44;
        short $stack53, $stack55, $stack57;
        org.apache.commons.lang3.math.NumberUtilsTest this;
        java.lang.Short $stack13, $stack15, $stack17, $stack52, $stack54, $stack56;
        java.lang.Byte $stack19, $stack21, $stack23, $stack58, $stack60, $stack62;
        boolean $stack2, $stack4, $stack6, $stack8, $stack10, $stack12, $stack14, $stack16, $stack18, $stack20, $stack22, $stack24, $stack26, $stack28, $stack30, $stack32, $stack34, $stack36, $stack112, $stack110, $stack109, $stack107, $stack105, $stack104, $stack102, $stack100, $stack99, $stack97, $stack95, $stack93, $stack91, $stack89, $stack87, $stack85, $stack83, $stack82;
        float $stack74, $stack77, $stack80;
        int $stack47, $stack49, $stack51, $i0, $i1, $i2, $i3, $i4;
        double $stack65, $stack68, $stack71;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack1 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_ZERO>;

        $stack2 = $stack1 instanceof java.lang.Long;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack2);

        $stack3 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_ONE>;

        $stack4 = $stack3 instanceof java.lang.Long;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack4);

        $stack5 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_MINUS_ONE>;

        $stack6 = $stack5 instanceof java.lang.Long;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_ZERO>;

        $stack8 = $stack7 instanceof java.lang.Integer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_ONE>;

        $stack10 = $stack9 instanceof java.lang.Integer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_MINUS_ONE>;

        $stack12 = $stack11 instanceof java.lang.Integer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Short SHORT_ZERO>;

        $stack14 = $stack13 instanceof java.lang.Short;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack14);

        $stack15 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Short SHORT_ONE>;

        $stack16 = $stack15 instanceof java.lang.Short;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack16);

        $stack17 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Short SHORT_MINUS_ONE>;

        $stack18 = $stack17 instanceof java.lang.Short;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack18);

        $stack19 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_ZERO>;

        $stack20 = $stack19 instanceof java.lang.Byte;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_ONE>;

        $stack22 = $stack21 instanceof java.lang.Byte;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_MINUS_ONE>;

        $stack24 = $stack23 instanceof java.lang.Byte;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack24);

        $stack25 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_ZERO>;

        $stack26 = $stack25 instanceof java.lang.Double;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack26);

        $stack27 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_ONE>;

        $stack28 = $stack27 instanceof java.lang.Double;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        $stack29 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_MINUS_ONE>;

        $stack30 = $stack29 instanceof java.lang.Double;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack30);

        $stack31 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Float FLOAT_ZERO>;

        $stack32 = $stack31 instanceof java.lang.Float;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack32);

        $stack33 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Float FLOAT_ONE>;

        $stack34 = $stack33 instanceof java.lang.Float;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack34);

        $stack35 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Float FLOAT_MINUS_ONE>;

        $stack36 = $stack35 instanceof java.lang.Float;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack36);

        $stack37 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_ZERO>;

        $stack38 = virtualinvoke $stack37.<java.lang.Long: long longValue()>();

        $stack39 = $stack38 cmp 0L;

        if $stack39 != 0 goto label01;

        $stack112 = 1;

        goto label02;

     label01:
        $stack112 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack112);

        $stack40 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_ONE>;

        $stack41 = virtualinvoke $stack40.<java.lang.Long: long longValue()>();

        $stack42 = $stack41 cmp 1L;

        if $stack42 != 0 goto label03;

        $stack110 = 1;

        goto label04;

     label03:
        $stack110 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack110);

        $stack43 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_MINUS_ONE>;

        $stack44 = virtualinvoke $stack43.<java.lang.Long: long longValue()>();

        $stack45 = $stack44 cmp -1L;

        if $stack45 != 0 goto label05;

        $stack109 = 1;

        goto label06;

     label05:
        $stack109 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack109);

        $stack46 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_ZERO>;

        $stack47 = virtualinvoke $stack46.<java.lang.Integer: int intValue()>();

        if $stack47 != 0 goto label07;

        $stack107 = 1;

        goto label08;

     label07:
        $stack107 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack107);

        $stack48 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_ONE>;

        $stack49 = virtualinvoke $stack48.<java.lang.Integer: int intValue()>();

        if $stack49 != 1 goto label09;

        $stack105 = 1;

        goto label10;

     label09:
        $stack105 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack105);

        $stack50 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Integer INTEGER_MINUS_ONE>;

        $stack51 = virtualinvoke $stack50.<java.lang.Integer: int intValue()>();

        $i0 = (int) -1;

        if $stack51 != $i0 goto label11;

        $stack104 = 1;

        goto label12;

     label11:
        $stack104 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack104);

        $stack52 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Short SHORT_ZERO>;

        $stack53 = virtualinvoke $stack52.<java.lang.Short: short shortValue()>();

        if $stack53 != 0 goto label13;

        $stack102 = 1;

        goto label14;

     label13:
        $stack102 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack102);

        $stack54 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Short SHORT_ONE>;

        $stack55 = virtualinvoke $stack54.<java.lang.Short: short shortValue()>();

        if $stack55 != 1 goto label15;

        $stack100 = 1;

        goto label16;

     label15:
        $stack100 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack100);

        $stack56 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Short SHORT_MINUS_ONE>;

        $stack57 = virtualinvoke $stack56.<java.lang.Short: short shortValue()>();

        $i1 = (int) $stack57;

        $i2 = (int) -1;

        if $i1 != $i2 goto label17;

        $stack99 = 1;

        goto label18;

     label17:
        $stack99 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack99);

        $stack58 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_ZERO>;

        $stack59 = virtualinvoke $stack58.<java.lang.Byte: byte byteValue()>();

        if $stack59 != 0 goto label19;

        $stack97 = 1;

        goto label20;

     label19:
        $stack97 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack97);

        $stack60 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_ONE>;

        $stack61 = virtualinvoke $stack60.<java.lang.Byte: byte byteValue()>();

        if $stack61 != 1 goto label21;

        $stack95 = 1;

        goto label22;

     label21:
        $stack95 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack95);

        $stack62 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Byte BYTE_MINUS_ONE>;

        $stack63 = virtualinvoke $stack62.<java.lang.Byte: byte byteValue()>();

        $i3 = (int) $stack63;

        $i4 = (int) -1;

        if $i3 != $i4 goto label23;

        $stack93 = 1;

        goto label24;

     label23:
        $stack93 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack93);

        $stack64 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_ZERO>;

        $stack65 = virtualinvoke $stack64.<java.lang.Double: double doubleValue()>();

        $stack66 = $stack65 cmpl 0.0;

        if $stack66 != 0 goto label25;

        $stack91 = 1;

        goto label26;

     label25:
        $stack91 = 0;

     label26:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack91);

        $stack67 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_ONE>;

        $stack68 = virtualinvoke $stack67.<java.lang.Double: double doubleValue()>();

        $stack69 = $stack68 cmpl 1.0;

        if $stack69 != 0 goto label27;

        $stack89 = 1;

        goto label28;

     label27:
        $stack89 = 0;

     label28:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack89);

        $stack70 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Double DOUBLE_MINUS_ONE>;

        $stack71 = virtualinvoke $stack70.<java.lang.Double: double doubleValue()>();

        $stack72 = $stack71 cmpl -1.0;

        if $stack72 != 0 goto label29;

        $stack87 = 1;

        goto label30;

     label29:
        $stack87 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack87);

        $stack73 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Float FLOAT_ZERO>;

        $stack74 = virtualinvoke $stack73.<java.lang.Float: float floatValue()>();

        $stack75 = $stack74 cmpl 0.0F;

        if $stack75 != 0 goto label31;

        $stack85 = 1;

        goto label32;

     label31:
        $stack85 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack85);

        $stack76 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Float FLOAT_ONE>;

        $stack77 = virtualinvoke $stack76.<java.lang.Float: float floatValue()>();

        $stack78 = $stack77 cmpl 1.0F;

        if $stack78 != 0 goto label33;

        $stack83 = 1;

        goto label34;

     label33:
        $stack83 = 0;

     label34:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack83);

        $stack79 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Float FLOAT_MINUS_ONE>;

        $stack80 = virtualinvoke $stack79.<java.lang.Float: float floatValue()>();

        $stack81 = $stack80 cmpl -1.0F;

        if $stack81 != 0 goto label35;

        $stack82 = 1;

        goto label36;

     label35:
        $stack82 = 0;

     label36:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack82);

        return;
    }

    public void testLang300()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("-1l");

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("01l");

        staticinvoke <org.apache.commons.lang3.math.NumberUtils: java.lang.Number createNumber(java.lang.String)>("1l");

        return;
    }

    public void testLang381()
    {
        org.apache.commons.lang3.math.NumberUtilsTest this;
        double[] $stack13, $stack18;
        float[] $stack23, $stack26;
        double $stack5, $stack7, $stack14, $stack16, $stack19, $stack21;
        boolean $stack6, $stack8, $stack10, $stack12, $stack15, $stack17, $stack20, $stack22, $stack25, $stack28;
        float $stack9, $stack11, $stack24, $stack27;

        this := @this: org.apache.commons.lang3.math.NumberUtilsTest;

        $stack5 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double,double,double)>(1.2, 2.5, #NaN);

        $stack6 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack6);

        $stack7 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double,double,double)>(1.2, 2.5, #NaN);

        $stack8 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack8);

        $stack9 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float min(float,float,float)>(1.2F, 2.5F, #NaNF);

        $stack10 = staticinvoke <java.lang.Float: boolean isNaN(float)>($stack9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack10);

        $stack11 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float,float,float)>(1.2F, 2.5F, #NaNF);

        $stack12 = staticinvoke <java.lang.Float: boolean isNaN(float)>($stack11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack12);

        $stack13 = newarray (double)[6];

        $stack13[0] = 1.2;

        $stack13[1] = #NaN;

        $stack13[2] = 3.7;

        $stack13[3] = 27.0;

        $stack13[4] = 42.0;

        $stack13[5] = #NaN;

        $stack14 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack13);

        $stack15 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack15);

        $stack16 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack13);

        $stack17 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack17);

        $stack18 = newarray (double)[7];

        $stack18[0] = #NaN;

        $stack18[1] = 1.2;

        $stack18[2] = #NaN;

        $stack18[3] = 3.7;

        $stack18[4] = 27.0;

        $stack18[5] = 42.0;

        $stack18[6] = #NaN;

        $stack19 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double max(double[])>($stack18);

        $stack20 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack19);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack20);

        $stack21 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: double min(double[])>($stack18);

        $stack22 = staticinvoke <java.lang.Double: boolean isNaN(double)>($stack21);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack22);

        $stack23 = newarray (float)[6];

        $stack23[0] = 1.2F;

        $stack23[1] = #NaNF;

        $stack23[2] = 3.7F;

        $stack23[3] = 27.0F;

        $stack23[4] = 42.0F;

        $stack23[5] = #NaNF;

        $stack24 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack23);

        $stack25 = staticinvoke <java.lang.Float: boolean isNaN(float)>($stack24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack25);

        $stack26 = newarray (float)[7];

        $stack26[0] = #NaNF;

        $stack26[1] = 1.2F;

        $stack26[2] = #NaNF;

        $stack26[3] = 3.7F;

        $stack26[4] = 27.0F;

        $stack26[5] = 42.0F;

        $stack26[6] = #NaNF;

        $stack27 = staticinvoke <org.apache.commons.lang3.math.NumberUtils: float max(float[])>($stack26);

        $stack28 = staticinvoke <java.lang.Float: boolean isNaN(float)>($stack27);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($stack28);

        return;
    }
}
